<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>leetcode3-无重复字符的最长子串</title>
      <link href="/JeckFS/2022/07/05/leetcode3-%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2/"/>
      <url>/JeckFS/2022/07/05/leetcode3-%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a><a href="https://leetcode.cn/problems/longest-substring-without-repeating-characters/">题目描述</a></h1><img src="/JeckFS/2022/07/05/leetcode3-%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2/Snipaste_2022-07-05_11-54-39.png" class="" title="This is 2-th image."><img src="/JeckFS/2022/07/05/leetcode3-%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2/Snipaste_2022-07-05_11-55-17.png" class="" title="This is 2-th image."><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>首先定义状态：<br><code>maxLen</code> 用于记录以当前位置 i 结尾的不重复字符串长度</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    abcacabcbb   由英文字母、数字、符号和空格组成</span></span><br><span class="line"><span class="comment">    3</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    d[i]表示以s[i]结尾的最长字符串</span></span><br><span class="line"><span class="comment">    idx[i]表示位置i之前出现的位置</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">lengthOfLongestSubstring</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (s.length() == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">char</span>[] str = s.toCharArray();</span><br><span class="line">        <span class="type">int</span> <span class="variable">maxLen</span> <span class="operator">=</span> <span class="number">1</span>; <span class="comment">// 记录以当前位置i结尾的不重复字符串长度</span></span><br><span class="line">        <span class="type">int</span>[] lastIdx = <span class="keyword">new</span> <span class="title class_">int</span>[str.length+<span class="number">1</span>]; <span class="comment">// 记录当前位置字符上一次出现的位置</span></span><br><span class="line">        <span class="type">int</span>[] repeat =  <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">257</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// abcacabcbb</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; str.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (repeat[str[i]] == <span class="number">0</span>) &#123;</span><br><span class="line">                repeat[str[i]] = i+<span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                lastIdx[i+<span class="number">1</span>] = repeat[str[i]];</span><br><span class="line">                repeat[str[i]] = i+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; str.length; i++) &#123;<span class="comment">//物理下标</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">idx</span> <span class="operator">=</span> lastIdx[i+<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i; j &gt;= Math.max(<span class="number">1</span>, idx); j--) &#123;<span class="comment">//逻辑下标</span></span><br><span class="line">                idx = Math.max(idx, lastIdx[j]);</span><br><span class="line">            &#125;</span><br><span class="line">            maxLen = Math.max(i-idx+<span class="number">1</span>, maxLen);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxLen;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 动态规划 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
            <tag> 滑动窗口 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Electron-进程间通信</title>
      <link href="/JeckFS/2022/07/01/Electron-%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1/"/>
      <url>/JeckFS/2022/07/01/Electron-%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1/</url>
      
        <content type="html"><![CDATA[<div class="note info modern"><p>这里主要说的是主进程和渲染进程之间的通信方式。一般用在 <strong>从 UI 调用原生 API</strong> 或 <strong>从原生菜单触发 Web 内容的更改</strong> 的场景中。</p></div><h1 id="1-模式1-渲染进程到主进程（单向）"><a href="#1-模式1-渲染进程到主进程（单向）" class="headerlink" title="1. 模式1: 渲染进程到主进程（单向）"></a>1. 模式1: 渲染进程到主进程（单向）</h1><div class="note info modern"><p>渲染进程使用 ipcRenderer.send API 发送消息，主进程使用 ipcMain.on API 接收。</p></div><div class="tabs" id="test3"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#test3-1">test3 1</button></li><li class="tab"><button type="button" data-href="#test3-2">test3 2</button></li><li class="tab"><button type="button" data-href="#test3-3">test3 3</button></li><li class="tab"><button type="button" data-href="#test3-4">test3 4</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="test3-1"><p><strong>main.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;app, <span class="title class_">BrowserWindow</span>, ipcMain&#125; = <span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createWindow</span> () &#123;</span><br><span class="line">  <span class="keyword">const</span> mainWindow = <span class="keyword">new</span> <span class="title class_">BrowserWindow</span>(&#123;</span><br><span class="line">    <span class="attr">webPreferences</span>: &#123;</span><br><span class="line">      <span class="attr">preload</span>: path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;preload.js&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 相应渲染进程的事件</span></span><br><span class="line">  ipcMain.<span class="title function_">on</span>(<span class="string">&#x27;set-title&#x27;</span>, <span class="function">(<span class="params">event, title</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> webContents = event.<span class="property">sender</span></span><br><span class="line">    <span class="keyword">const</span> win = <span class="title class_">BrowserWindow</span>.<span class="title function_">fromWebContents</span>(webContents)</span><br><span class="line">    win.<span class="title function_">setTitle</span>(title)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  mainWindow.<span class="title function_">loadFile</span>(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">whenReady</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">createWindow</span>()</span><br><span class="line">  </span><br><span class="line">  app.<span class="title function_">on</span>(<span class="string">&#x27;activate&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title class_">BrowserWindow</span>.<span class="title function_">getAllWindows</span>().<span class="property">length</span> === <span class="number">0</span>) <span class="title function_">createWindow</span>()</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">on</span>(<span class="string">&#x27;window-all-closed&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (process.<span class="property">platform</span> !== <span class="string">&#x27;darwin&#x27;</span>) app.<span class="title function_">quit</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test3-2"><p><strong>renderer.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> setButton = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;btn&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> titleInput = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;title&#x27;</span>)</span><br><span class="line">setButton.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> title = titleInput.<span class="property">value</span></span><br><span class="line">    <span class="comment">// 向主进程发送请求</span></span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">electronAPI</span>.<span class="title function_">setTitle</span>(title)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test3-3"><p><strong>preload.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; contextBridge, ipcRenderer &#125; = <span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>)</span><br><span class="line"></span><br><span class="line">contextBridge.<span class="title function_">exposeInMainWorld</span>(<span class="string">&#x27;electronAPI&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">setTitle</span>: <span class="function">(<span class="params">title</span>) =&gt;</span> ipcRenderer.<span class="title function_">send</span>(<span class="string">&#x27;set-title&#x27;</span>, title)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test3-4"><p><strong>index.html</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Security-Policy&quot;</span> <span class="attr">content</span>=<span class="string">&quot;default-src &#x27;self&#x27;; script-src &#x27;self&#x27;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello World!<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    Title: <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;title&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span>&gt;</span>Set<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./renderer.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="2-模式2-渲染进程到主进程（双向）"><a href="#2-模式2-渲染进程到主进程（双向）" class="headerlink" title="2. 模式2: 渲染进程到主进程（双向）"></a>2. 模式2: 渲染进程到主进程（双向）</h1><div class="note info modern"><p>应用场景：从渲染器进程代码调用主进程模块并等待结果。</p><p>主进程通过 ipcMain.handle 接受请求并返回结果，渲染进程通过 ipcRenderer.invoke 发送请求并异步或者同步等待结果。</p></div><p><strong>示例：</strong>从渲染器进程打开一个原生的文件对话框，并返回所选文件的路径。</p><div class="tabs" id="test3"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#test3-1">test3 1</button></li><li class="tab"><button type="button" data-href="#test3-2">test3 2</button></li><li class="tab"><button type="button" data-href="#test3-3">test3 3</button></li><li class="tab"><button type="button" data-href="#test3-4">test3 4</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="test3-1"><p><strong>main.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;app, <span class="title class_">BrowserWindow</span>, ipcMain, dialog&#125; = <span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">handleFileOpen</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; canceled, filePaths &#125; = <span class="keyword">await</span> dialog.<span class="title function_">showOpenDialog</span>()</span><br><span class="line">  <span class="keyword">if</span> (canceled) &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> filePaths[<span class="number">0</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createWindow</span> () &#123;</span><br><span class="line">  <span class="keyword">const</span> mainWindow = <span class="keyword">new</span> <span class="title class_">BrowserWindow</span>(&#123;</span><br><span class="line">    <span class="attr">webPreferences</span>: &#123;</span><br><span class="line">      <span class="attr">preload</span>: path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;preload.js&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  mainWindow.<span class="title function_">loadFile</span>(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">whenReady</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  ipcMain.<span class="title function_">handle</span>(<span class="string">&#x27;dialog:openFile&#x27;</span>, handleFileOpen)</span><br><span class="line">  <span class="title function_">createWindow</span>()</span><br><span class="line">  app.<span class="title function_">on</span>(<span class="string">&#x27;activate&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title class_">BrowserWindow</span>.<span class="title function_">getAllWindows</span>().<span class="property">length</span> === <span class="number">0</span>) <span class="title function_">createWindow</span>()</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">on</span>(<span class="string">&#x27;window-all-closed&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (process.<span class="property">platform</span> !== <span class="string">&#x27;darwin&#x27;</span>) app.<span class="title function_">quit</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test3-2"><p><strong>renderer.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;btn&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> filePathElement = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;filePath&#x27;</span>)</span><br><span class="line"></span><br><span class="line">btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> filePath = <span class="keyword">await</span> <span class="variable language_">window</span>.<span class="property">electronAPI</span>.<span class="title function_">openFile</span>()</span><br><span class="line">  filePathElement.<span class="property">innerText</span> = filePath</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test3-3"><p><strong>preload.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; contextBridge, ipcRenderer &#125; = <span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>)</span><br><span class="line"></span><br><span class="line">contextBridge.<span class="title function_">exposeInMainWorld</span>(<span class="string">&#x27;electronAPI&#x27;</span>,&#123;</span><br><span class="line">  <span class="attr">openFile</span>: <span class="function">() =&gt;</span> ipcRenderer.<span class="title function_">invoke</span>(<span class="string">&#x27;dialog:openFile&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test3-4"><p><strong>index.html</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Security-Policy&quot;</span> <span class="attr">content</span>=<span class="string">&quot;default-src &#x27;self&#x27;; script-src &#x27;self&#x27;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Dialog<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>Open a File<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    File path: <span class="tag">&lt;<span class="name">strong</span> <span class="attr">id</span>=<span class="string">&quot;filePath&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&#x27;./renderer.js&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="3-模式3-主进程到渲染进程"><a href="#3-模式3-主进程到渲染进程" class="headerlink" title="3. 模式3: 主进程到渲染进程"></a>3. 模式3: 主进程到渲染进程</h1><div class="note info modern"><p>将消息从主进程发送到渲染器进程时，需要指定是哪一个渲染器接收消息。 消息需要通过其 WebContents 实例发送到渲染器进程。 此 WebContents 实例包含一个 send 方法，其使用方式与 ipcRenderer.send 相同。</p><p>主进程通过 BrowserWindow.webContents.send 触发渲染进程的事件；<br>渲染进程通过 ipcRenderer.on 监听主进程触发的事件；</p><p>渲染进程通过 event.sender.send 触发主进程的事件；<br>主进程通过 ipcMain.on 监听渲染进程触发的事件；</p><p><img src="/JeckFS/2022/07/01/Electron-%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1/Snipaste_2022-07-01_21-14-11.png" class="" title="This is 2-th image."></p></div><div class="tabs" id="test3"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#test3-1">test3 1</button></li><li class="tab"><button type="button" data-href="#test3-2">test3 2</button></li><li class="tab"><button type="button" data-href="#test3-3">test3 3</button></li><li class="tab"><button type="button" data-href="#test3-4">test3 4</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="test3-1"><p><strong>main.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;app, <span class="title class_">BrowserWindow</span>, <span class="title class_">Menu</span>, ipcMain&#125; = <span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createWindow</span> () &#123;</span><br><span class="line">  <span class="keyword">const</span> mainWindow = <span class="keyword">new</span> <span class="title class_">BrowserWindow</span>(&#123;</span><br><span class="line">    <span class="attr">webPreferences</span>: &#123;</span><br><span class="line">      <span class="attr">preload</span>: path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;preload.js&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> menu = <span class="title class_">Menu</span>.<span class="title function_">buildFromTemplate</span>([</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">label</span>: app.<span class="property">name</span>,</span><br><span class="line">      <span class="attr">submenu</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// [主进程-&gt;渲染进程] 当点击子菜单 Increment 时，向指定的渲染进程(mainWindow)发送消息 +1 命令</span></span><br><span class="line">        <span class="attr">click</span>: <span class="function">() =&gt;</span> mainWindow.<span class="property">webContents</span>.<span class="title function_">send</span>(<span class="string">&#x27;update-counter&#x27;</span>, <span class="number">1</span>),</span><br><span class="line">        <span class="attr">label</span>: <span class="string">&#x27;Increment&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// [主进程-&gt;渲染进程] 当点击子菜单 Decrement 时，向渲染进程发送消息 -1 命令</span></span><br><span class="line">        <span class="attr">click</span>: <span class="function">() =&gt;</span> mainWindow.<span class="property">webContents</span>.<span class="title function_">send</span>(<span class="string">&#x27;update-counter&#x27;</span>, -<span class="number">1</span>),</span><br><span class="line">        <span class="attr">label</span>: <span class="string">&#x27;Decrement&#x27;</span>,</span><br><span class="line">      &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  ])</span><br><span class="line"></span><br><span class="line">  <span class="title class_">Menu</span>.<span class="title function_">setApplicationMenu</span>(menu)</span><br><span class="line">  mainWindow.<span class="title function_">loadFile</span>(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Open the DevTools.</span></span><br><span class="line">  mainWindow.<span class="property">webContents</span>.<span class="title function_">openDevTools</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">whenReady</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 监听渲染进程触发的事件。当主进程向渲染进程发送消息后，获取渲染进程的回复数据。</span></span><br><span class="line">  ipcMain.<span class="title function_">on</span>(<span class="string">&#x27;counter-value&#x27;</span>, <span class="function">(<span class="params">_event, value</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value) <span class="comment">// will print value to Node console</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="title function_">createWindow</span>()</span><br><span class="line">  </span><br><span class="line">  app.<span class="title function_">on</span>(<span class="string">&#x27;activate&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title class_">BrowserWindow</span>.<span class="title function_">getAllWindows</span>().<span class="property">length</span> === <span class="number">0</span>) <span class="title function_">createWindow</span>()</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">on</span>(<span class="string">&#x27;window-all-closed&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (process.<span class="property">platform</span> !== <span class="string">&#x27;darwin&#x27;</span>) app.<span class="title function_">quit</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test3-2"><p><strong>preload.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; contextBridge, ipcRenderer &#125; = <span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>)</span><br><span class="line"></span><br><span class="line">contextBridge.<span class="title function_">exposeInMainWorld</span>(<span class="string">&#x27;electronAPI&#x27;</span>, &#123;</span><br><span class="line">  <span class="comment">// 监听主进程触发的事件</span></span><br><span class="line">  <span class="attr">handleCounter</span>: <span class="function">(<span class="params">callback</span>) =&gt;</span> ipcRenderer.<span class="title function_">on</span>(<span class="string">&#x27;update-counter&#x27;</span>, callback)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test3-3"><p><strong>index.html</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Security-Policy&quot;</span> <span class="attr">content</span>=<span class="string">&quot;default-src &#x27;self&#x27;; script-src &#x27;self&#x27;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Menu Counter<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    Current value: <span class="tag">&lt;<span class="name">strong</span> <span class="attr">id</span>=<span class="string">&quot;counter&quot;</span>&gt;</span>0<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./renderer.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test3-4"><p><strong>renderer.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> counter = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;counter&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">electronAPI</span>.<span class="title function_">handleCounter</span>(<span class="function">(<span class="params">event, value</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> oldValue = <span class="title class_">Number</span>(counter.<span class="property">innerText</span>)</span><br><span class="line">    <span class="keyword">const</span> newValue = oldValue + value</span><br><span class="line">    counter.<span class="property">innerText</span> = newValue</span><br><span class="line">    <span class="comment">// [渲染进程-&gt;主进程] 触发主进程监听的事件</span></span><br><span class="line">    event.<span class="property">sender</span>.<span class="title function_">send</span>(<span class="string">&#x27;counter-value&#x27;</span>, newValue)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="4-渲染进程到渲染进程"><a href="#4-渲染进程到渲染进程" class="headerlink" title="4. 渲染进程到渲染进程"></a>4. 渲染进程到渲染进程</h1><div class="note info modern"><ul><li>方式一：将主进程作为渲染器之间的消息代理。 这需要将消息从一个渲染器发送到主进程，然后主进程将消息转发到另一个渲染器。</li><li>方式二：从主进程将一个 MessagePort 传递到两个渲染器。 这将允许在初始设置后渲染器之间直接进行通信。</li></ul></div>]]></content>
      
      
      <categories>
          
          <category> Electron </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Electron </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Electron-上下文隔离</title>
      <link href="/JeckFS/2022/07/01/Electron-%E4%B8%8A%E4%B8%8B%E6%96%87%E9%9A%94%E7%A6%BB/"/>
      <url>/JeckFS/2022/07/01/Electron-%E4%B8%8A%E4%B8%8B%E6%96%87%E9%9A%94%E7%A6%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="1-上下文隔离是什么"><a href="#1-上下文隔离是什么" class="headerlink" title="1. 上下文隔离是什么"></a>1. 上下文隔离是什么</h1><p>用于保证 Preload 脚本不会将拥有更高权限的 Electron 或者 Nodejs API 暴露给渲染进程。比如有些页面会引入外部的 js 代码，当不开启进程隔离时，这些 js 代码可以访问到更高权限的 API 会带来严重的安全问题。</p><p>处于安全的考量，上下文隔离能够阻止 website 访问 Electron 内部组件以及 Preload 脚本才有权限访问的 API 。</p><p>Preload 脚本能够访问的 Window 对象与 website 中使用的 Window 对象是不同的。例如在 Preload 脚本中设置 <code>window.hello = &#39;wave&#39;</code> 并且开启上下文隔离，那么在 website 中访问 window.hello 会输出 undefined 。</p><h1 id="2-开启上下文隔离对程序编码的影响"><a href="#2-开启上下文隔离对程序编码的影响" class="headerlink" title="2. 开启上下文隔离对程序编码的影响"></a>2. 开启上下文隔离对程序编码的影响</h1><h2 id="2-1-不开启上下文隔离"><a href="#2-1-不开启上下文隔离" class="headerlink" title="2.1 不开启上下文隔离"></a>2.1 不开启上下文隔离</h2><div class="tabs" id="不开启上下文隔离"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#不开启上下文隔离-1">不开启上下文隔离 1</button></li><li class="tab"><button type="button" data-href="#不开启上下文隔离-2">不开启上下文隔离 2</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="不开启上下文隔离-1"><p><strong>preload.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 上下文隔离禁用的情况下使用预加载</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">myAPI</span> = &#123;</span><br><span class="line">  <span class="attr">doAThing</span>: <span class="function">() =&gt;</span> &#123;&#125; <span class="comment">//doAThing() 函数可以在渲染进程中直接使用。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="不开启上下文隔离-2"><p><strong>renderer.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在渲染器进程使用导出的 API</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">myAPI</span>.<span class="title function_">doAThing</span>()</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-2-开启上下文隔离"><a href="#2-2-开启上下文隔离" class="headerlink" title="2.2 开启上下文隔离"></a>2.2 开启上下文隔离</h2><div class="tabs" id="test3"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#test3-1">test3 1</button></li><li class="tab"><button type="button" data-href="#test3-2">test3 2</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="test3-1"><p><strong>preload.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在上下文隔离启用的情况下使用预加载</span></span><br><span class="line"><span class="keyword">const</span> &#123; contextBridge &#125; = <span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>)</span><br><span class="line"></span><br><span class="line">contextBridge.<span class="title function_">exposeInMainWorld</span>(<span class="string">&#x27;myAPI&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">doAThing</span>: <span class="function">() =&gt;</span> &#123;&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test3-2"><p><strong>renderer.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在渲染器进程使用导出的 API</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">myAPI</span>.<span class="title function_">doAThing</span>()</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="3-正确使用-contextIsolation-的方式"><a href="#3-正确使用-contextIsolation-的方式" class="headerlink" title="3. 正确使用 contextIsolation 的方式"></a>3. 正确使用 contextIsolation 的方式</h1><p><img src="Snipaste_2022-07-01_16-39-27.png" width="100%" height="100%"></p>]]></content>
      
      
      <categories>
          
          <category> Electron </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Electron </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Electron-进程模型</title>
      <link href="/JeckFS/2022/07/01/Electron-%E8%BF%9B%E7%A8%8B%E6%A8%A1%E5%9E%8B/"/>
      <url>/JeckFS/2022/07/01/Electron-%E8%BF%9B%E7%A8%8B%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="1-主进程"><a href="#1-主进程" class="headerlink" title="1. 主进程"></a>1. 主进程</h1><p>每个 Electron 应用都有一个单一的主进程，作为应用程序的入口点。 主进程在 Node.js 环境中运行，这意味着它具有 require 模块和使用所有 Node.js API 的能力。</p><p>主进程的主要作用是：使用 BrowserWindow 模块创建和管理应用程序窗口。</p><h2 id="1-1-窗口管理"><a href="#1-1-窗口管理" class="headerlink" title="1.1 窗口管理"></a>1.1 窗口管理</h2><p>BrowserWindow 类的每个实例为渲染进程会创建一个应用窗口用于加载一个 web 页面。在主进程中可以通过 BrowserWindow 的 webContents 对象修改渲染进程的 web 页面。</p><p>同时 BrowserWindow 模块也是一个 EventEmitter 。通过 BrowserWindow 可以自定义某些用户事件的处理器（如窗口最小化、最大化等）</p><p>当 BrowserWindow 实例被销毁后，对应的渲染进程也会终止。</p><h2 id="1-2-应用的生命周期"><a href="#1-2-应用的生命周期" class="headerlink" title="1.2 应用的生命周期"></a>1.2 应用的生命周期</h2><p>主进程通过 app 模块控制应用的生命周期。该模块提供了大量的事件类型和方法用于用户自定义应用的行为（如通过代码退出应用、修改应用的 Dock 、展示 About 面板等）</p><h2 id="1-3-提供某些原生-API"><a href="#1-3-提供某些原生-API" class="headerlink" title="1.3 提供某些原生 API"></a>1.3 提供某些原生 API</h2><p>主进程提供了控制原生桌面功能的某些模块，如 menus 、 dialogs 、 tray icons 等</p><h1 id="2-渲染进程"><a href="#2-渲染进程" class="headerlink" title="2. 渲染进程"></a>2. 渲染进程</h1><p>每个 BrowserWindow 或者内嵌的 web 都由一个渲染进程来控制。渲染进程主要负责渲染 web 页面，因此在渲染进程中运行的代码要遵循 web 编程的标准。简而言之，就是运行在渲染进程的代码和普通的 web 前端代码是一样的。这也意味着，渲染进程无法直接使用 require 关键字或者其他 Nodejs API 。</p><p>在渲染进程中，并没有直接使用 Nodejs 和 Electron 原生桌面功能的方法。</p><h1 id="3-Preload-脚本"><a href="#3-Preload-脚本" class="headerlink" title="3. Preload 脚本"></a>3. Preload 脚本</h1><p>preload 脚本包含了那些执行于渲染器进程中，且先于网页内容开始加载的代码。 这些脚本虽运行于渲染器的环境中，却因能访问 Node.js API 而拥有了更多的权限。</p><p>preload 脚本可以在 BrowserWindow 构造方法中的 webPreferences 选项里被附加到主进程。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">BrowserWindow</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>)</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="keyword">const</span> win = <span class="keyword">new</span> <span class="title class_">BrowserWindow</span>(&#123;</span><br><span class="line">  <span class="attr">webPreferences</span>: &#123;</span><br><span class="line">    <span class="attr">preload</span>: <span class="string">&#x27;path/to/preload.js&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//...</span></span><br></pre></td></tr></table></figure><p>preload 脚本可以访问浏览器的 Window 接口，又可以访问 Nodejs 的 API 。一般在 preload 脚本中通过全局 window 暴露任意 API 来增强渲染器，以便你的网页内容使用。</p><p>由于 preload 脚本和渲染进程的运行环境是隔离开来的，因此不能直接在 preload 脚本中将 API 挂载到 window 全局变量中，而是使用 contextBridge 来安全地实现 preload 脚本与渲染进程的交互。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// preload.js</span></span><br><span class="line"><span class="keyword">const</span> &#123; contextBridge &#125; = <span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>)</span><br><span class="line"></span><br><span class="line">contextBridge.<span class="title function_">exposeInMainWorld</span>(<span class="string">&#x27;myAPI&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">desktop</span>: <span class="literal">true</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// renderer.js</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">myAPI</span>)</span><br><span class="line"><span class="comment">// =&gt; &#123; desktop: true &#125;</span></span><br></pre></td></tr></table></figure><h1 id="4-一个简单示例"><a href="#4-一个简单示例" class="headerlink" title="4. 一个简单示例"></a>4. 一个简单示例</h1><div class="tabs" id="代码"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#代码-1">代码 1</button></li><li class="tab"><button type="button" data-href="#代码-2">代码 2</button></li><li class="tab"><button type="button" data-href="#代码-3">代码 3</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="代码-1"><p><strong>main.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * app 模块：它控制应用程序的事件生命周期</span></span><br><span class="line"><span class="comment"> * BrowserWindow 模块：用于创建和管理应用程序 窗口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> &#123; app, <span class="title class_">BrowserWindow</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createWindow</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> win = <span class="keyword">new</span> <span class="title class_">BrowserWindow</span>(&#123;</span><br><span class="line">        <span class="attr">height</span>: <span class="number">600</span>,</span><br><span class="line">        <span class="attr">width</span>: <span class="number">800</span>,</span><br><span class="line">        <span class="attr">webPreferences</span>: &#123;</span><br><span class="line">            <span class="attr">nodeIntegration</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">enableRemoteModule</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="comment">// 在渲染进程加载之前加载 preload.js</span></span><br><span class="line">            <span class="attr">preload</span>: path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;preload.js&#x27;</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&#x27;My APP&#x27;</span>,</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    win.<span class="title function_">setTitle</span>(<span class="string">&#x27;My App&#x27;</span>);</span><br><span class="line">    win.<span class="title function_">loadFile</span>(<span class="string">&#x27;index.html&#x27;</span>); <span class="comment">// 将 index.html 页面加载到窗口中</span></span><br><span class="line">    win.<span class="property">webContents</span>.<span class="title function_">openDevTools</span>();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 只有在 app 模块的 ready 事件被激发后才能创建浏览器窗口   </span></span><br><span class="line">app.<span class="title function_">whenReady</span>().<span class="title function_">then</span>(createWindow);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">on</span>(<span class="string">&#x27;window-all-closed&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (process.<span class="property">platform</span> !== <span class="string">&#x27;darwin&#x27;</span>) &#123;</span><br><span class="line">        app.<span class="title function_">quit</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">on</span>(<span class="string">&#x27;activate&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title class_">BrowserWindow</span>.<span class="title function_">getAllWindows</span>().<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="title function_">createWindow</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="代码-2"><p><strong>Preload.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// preload.js</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;DOMContentLoaded&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">replaceText</span> = (<span class="params">selector, text</span>) =&gt; &#123;</span><br><span class="line">      <span class="keyword">const</span> element = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(selector)</span><br><span class="line">      <span class="keyword">if</span> (element) element.<span class="property">innerText</span> = text</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> dependency <span class="keyword">of</span> [<span class="string">&#x27;chrome&#x27;</span>, <span class="string">&#x27;node&#x27;</span>, <span class="string">&#x27;electron&#x27;</span>]) &#123;</span><br><span class="line">      <span class="title function_">replaceText</span>(<span class="string">`<span class="subst">$&#123;dependency&#125;</span>-version`</span>, process.<span class="property">versions</span>[dependency])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="代码-3"><p><strong>index.html</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Security-Policy&quot;</span> <span class="attr">content</span>=<span class="string">&quot;default-src &#x27;self&#x27;; script-src &#x27;self&#x27;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello World!<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello World!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    We are using Node.js <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;node-version&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>,</span><br><span class="line">    Chromium <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;chrome-version&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>,</span><br><span class="line">    and Electron <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;electron-version&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>.</span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
      
      
      <categories>
          
          <category> Electron </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Electron </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JK-Redis-高性能IO模型</title>
      <link href="/JeckFS/2022/06/25/JK-Redis-%E9%AB%98%E6%80%A7%E8%83%BDIO%E6%A8%A1%E5%9E%8B/"/>
      <url>/JeckFS/2022/06/25/JK-Redis-%E9%AB%98%E6%80%A7%E8%83%BDIO%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<p>通常说，Redis 是单线程，主要是指 <strong>Redis 的网络 IO 和键值对读写</strong> 是由一个线程来完成的，这也是 Redis 对外提供键值存储服务的主要流程。但 Redis 的其他功能，比如持久化、异步删除、集群数据同步等，其实是由额外的线程执行的。</p><h1 id="Redis-为什么使用单线程"><a href="#Redis-为什么使用单线程" class="headerlink" title="Redis 为什么使用单线程"></a>Redis 为什么使用单线程</h1><ul><li>多线程的开销<br>一般引入多线程的目的是为了提高程序的并发处理速度。但是由于多线程会同时访问共享资源，为了保证共享资源的正确性就需要实现比较复杂的额外的机制，这就带来了额外的开销。简单地使用一个粗粒度锁又会导致大部分线程等待共享资源而导致并行度降低，甚至导致成为串行。<br>采用多线程开发一般会引入同步原语来保护共享资源的并发访问，这也会降低系统代码的易调试性和可维护性。</li><li>Redis 大部分操作都是发生在内存中。</li><li>采用了高效的数据结构（如哈希表和跳表）</li><li>采用了 <strong>多路复用机制</strong> 使其在网络 IO 操作中能并发处理大量的客户端请求，实现高吞吐率。</li></ul><h1 id="基于多路复用的高性能-IO-模型"><a href="#基于多路复用的高性能-IO-模型" class="headerlink" title="基于多路复用的高性能 IO 模型"></a>基于多路复用的高性能 IO 模型</h1>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JK-Redis-有哪些慢操作</title>
      <link href="/JeckFS/2022/06/24/JK-Redis-%E6%9C%89%E5%93%AA%E4%BA%9B%E6%85%A2%E6%93%8D%E4%BD%9C/"/>
      <url>/JeckFS/2022/06/24/JK-Redis-%E6%9C%89%E5%93%AA%E4%BA%9B%E6%85%A2%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="Redis-底层数据库结构"><a href="#Redis-底层数据库结构" class="headerlink" title="Redis 底层数据库结构"></a>Redis 底层数据库结构</h1><ul><li>简单动态字符串</li><li>双向链表</li><li>压缩列表</li><li>哈希表</li><li>跳表</li><li>整数数组</li></ul><p><img src="Snipaste_2022-06-24_19-44-17.png" width="75%" height="75%"></p><p>Redis 中的键和值是如何组织的</p><p>Redis 使用了一个哈希表（ <strong>全局哈希表</strong> ）来保存所有键值对。哈希桶中的元素保存的并不是值本身，而是指向具体值的指针。如图所示，可以看到，哈希桶中的 entry 元素中保存了<em>key和</em>value指针，分别指向了实际的键和值。</p><p>这个全局是指 Redis 数据库中的所有 key 和 value ，是由一个哈希表来索引的。通过在这个哈希表中查询key，就可以找到对应的 value 。然后根据 value 的具体类型（例如Hash，Set，List等），再通过value的底层数据结构来读取具体的value数据，例如List通过双向链表来读取数据。</p><p><img src="Snipaste_2022-06-24_19-57-50.png" width="75%" height="75%"></p><p><strong>哈希表的冲突问题</strong></p><p>Redis 解决哈希冲突的方式是链式哈希。</p><p><img src="Snipaste_2022-06-24_20-56-13.png" width="100%" height="100%"></p><p>如果哈希表里写入的数据越来越多，哈希冲突可能也会越来越多，这就会导致某些哈希冲突链过长，进而导致这个链上的元素查找耗时长，效率降低。</p><p>解决冲突越来越多导致的性能问题就是对哈希表做 rehash 操作。 rehash 也就是增加现有的哈希桶数量，让逐渐增多的 entry 元素能在更多的桶之间分散保存，减少单个桶中的元素数量，从而减少单个桶中的冲突。具体做法是如下。</p><p><strong>Rehash 操作过程：</strong></p><p>Redis 默认使用了两个全局哈希表：哈希表 1 和哈希表 2。一开始，当你刚插入数据时，默认使用哈希表 1，此时的哈希表 2 并没有被分配空间。随着数据逐步增多，Redis 开始执行 rehash，这个过程分为三步：</p><ul><li>给哈希表 2 分配更大的空间，例如是当前哈希表 1 大小的两倍；</li><li>把哈希表 1 中的数据重新映射并拷贝到哈希表 2 中；</li><li>释放哈希表 1 的空间。</li></ul><p>到此，我们就可以从哈希表 1 切换到哈希表 2，用增大的哈希表 2 保存更多数据，而原来的哈希表 1 留作下一次 rehash 扩容备用。</p><p><strong>rehash 可能带来的操作阻塞</strong></p><p>第二步涉及大量的数据拷贝，如果一次性把哈希表 1 中的数据都迁移完，会造成 Redis 线程阻塞，无法服务其他请求。为了避免这个问题，Redis 采用了渐进式 rehash。</p><p><strong>渐进式 rehash</strong></p><p>在第二步拷贝数据时，Redis 仍然正常处理客户端请求，每处理一个请求时，从哈希表 1 中的第一个索引位置开始，顺带着将这个索引位置上的所有 entries 拷贝到哈希表 2 中；等处理下一个请求时，再顺带拷贝哈希表 1 中的下一个索引位置的 entries。如下图所示：</p><img src="/JeckFS/2022/06/24/JK-Redis-%E6%9C%89%E5%93%AA%E4%BA%9B%E6%85%A2%E6%93%8D%E4%BD%9C/Snipaste_2022-06-24_21-08-53.png" class="" title="This is 2-th image."><p>总之就是 <strong>把一次性大量拷贝的开销，分摊到了多次处理请求的过程中</strong></p><p><strong><a href="https://www.cnblogs.com/hunternet/p/11306690.html">压缩列表</a></strong><br>压缩列表实际上类似于一个数组，数组中的每一个元素都对应保存一个数据。和数组不同的是，压缩列表在表头有三个字段 zlbytes、zltail 和 zllen，分别表示列表长度、列表尾的偏移量和列表中的 entry 个数；压缩列表在表尾还有一个 zlend，表示列表结束。</p><img src="/JeckFS/2022/06/24/JK-Redis-%E6%9C%89%E5%93%AA%E4%BA%9B%E6%85%A2%E6%93%8D%E4%BD%9C/Snipaste_2022-06-24_21-16-56.png" class="" title="This is 2-th image."><ul><li>压缩列表是 Redis 为节约内存自己设计的一种顺序型数据结构。顺序存储的好处是可以提高 CPU 缓存的利用率和命中率。</li><li>应用场景<ul><li>当一个列表只包含少量列表项,并且每个列表项要么就是小整数值,要么就是长度比较短的字符串,那么 Redis 就会使用压缩列表来做列表的底层实现；</li><li>当一个哈希只包含少量键值对,比且每个键值对的键和值要么就是小整数值,要么就是长度比较短的字符串,那么Redis就会使用压缩列表来做哈希的底层实现。</li><li>压缩列表被用作列表键和哈希键的底层实现之一。</li></ul></li><li>压缩列表中每个节点的格式： previous_entry_length 、 encoding 、 content<br>encoding 表示了 content 的编码格式（要么是小整数、要么是较短字符串，右 encoding 的前两位表示）。 previous_entry_length 是前一个 entry 节点的长度。 content 存储节点内容。</li><li>添加新节点到压缩列表,或者从压缩列表中删除节点,可能会引发连锁更新操作,但这种操作出现的几率并不高。</li></ul><p><strong><a href="https://www.cnblogs.com/hunternet/p/11248192.html">跳表</a></strong></p><p>主要是解决 <strong>有序链表</strong> 查找时只能顺序查找的问题。跳表通过增加 <strong>多级索引</strong> 的方式，实现元素快速定位的目的。可以做到类似二分查找（ log(n) ）的性能。</p><img src="/JeckFS/2022/06/24/JK-Redis-%E6%9C%89%E5%93%AA%E4%BA%9B%E6%85%A2%E6%93%8D%E4%BD%9C/Snipaste_2022-06-25_09-43-56.png" class="" title="This is 2-th image."><p><strong>不同操作的复杂度</strong></p><p>第一，单元素操作，是指每一种集合类型对单个数据实现的增删改查操作。例如，Hash 类型的 HGET、HSET 和 HDEL，Set 类型的 SADD、SREM、SRANDMEMBER 等。这些操作的复杂度由集合采用的数据结构决定，例如，HGET、HSET 和 HDEL 是对哈希表做操作，所以它们的复杂度都是 O(1)；Set 类型用哈希表作为底层数据结构时，它的 SADD、SREM、SRANDMEMBER 复杂度也是 O(1)。这里，有个地方你需要注意一下，集合类型支持同时对多个元素进行增删改查，例如 Hash 类型的 HMGET 和 HMSET，Set 类型的 SADD 也支持同时增加多个元素。此时，这些操作的复杂度，就是由单个元素操作复杂度和元素个数决定的。例如，HMSET 增加 M 个元素时，复杂度就从 O(1) 变成 O(M) 了。</p><p>第二，范围操作，是指集合类型中的遍历操作，可以返回集合中的所有数据，比如 Hash 类型的 HGETALL 和 Set 类型的 SMEMBERS，或者返回一个范围内的部分数据，比如 List 类型的 LRANGE 和 ZSet 类型的 ZRANGE。这类操作的复杂度一般是 O(N)，比较耗时，我们应该尽量避免。不过，Redis 从 2.8 版本开始提供了 SCAN 系列操作（包括 HSCAN，SSCAN 和 ZSCAN），这类操作实现了渐进式遍历，每次只返回有限数量的数据。这样一来，相比于 HGETALL、SMEMBERS 这类操作来说，就避免了一次性返回所有元素而导致的 Redis 阻塞。</p><p>第三，统计操作，是指集合类型对集合中所有元素个数的记录，例如 LLEN 和 SCARD。这类操作复杂度只有 O(1)，这是因为当集合类型采用压缩列表、双向链表、整数数组这些数据结构时，这些结构中专门记录了元素的个数统计，因此可以高效地完成相关操作。</p><p>第四，例外情况，是指某些数据结构的特殊记录，例如压缩列表和双向链表都会记录表头和表尾的偏移量。这样一来，对于 List 类型的 LPOP、RPOP、LPUSH、RPUSH 这四个操作来说，它们是在列表的头尾增删元素，这就可以通过偏移量直接定位，所以它们的复杂度也只有 O(1)，可以实现快速操作。</p><p><strong>要根据实际的应用场景，选取对应的数据结构，才能达到良好的效率。</strong></p><hr><p>整数数组和压缩列表在查找时间复杂度方面并没有很大的优势，那为什么 Redis 还会把它们作为底层数据结构呢？</p><p>两方面原因：</p><p>1、内存利用率，数组和压缩列表都是非常紧凑的数据结构，它比链表占用的内存要更少。Redis是内存数据库，大量数据存到内存中，此时需要做尽可能的优化，提高内存的利用率，也能避免一些内存碎片</p><p>2、数组对CPU高速缓存支持更友好，所以Redis在设计时，集合数据元素较少情况下，默认采用内存紧凑排列的方式存储，同时利用CPU高速缓存不会降低访问速度。当数据元素超过设定阈值后，避免查询时间复杂度太高，转为哈希和跳表数据结构存储，保证查询效率。</p><hr>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis-主线梳理</title>
      <link href="/JeckFS/2022/06/23/Redis-%E4%B8%BB%E7%BA%BF%E6%A2%B3%E7%90%86/"/>
      <url>/JeckFS/2022/06/23/Redis-%E4%B8%BB%E7%BA%BF%E6%A2%B3%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Redis-的两大维度、三大主线："><a href="#1-Redis-的两大维度、三大主线：" class="headerlink" title="1. Redis 的两大维度、三大主线："></a>1. Redis 的两大维度、三大主线：</h1><p><img src="Snipaste_2022-06-23_17-18-44.png" width="75%" height="75%"></p><p>Redis 问题画像图：（根据问题找解决问题对应的主线，根据主线找到对应的技术点 “问题➡️主线➡️技术点”）</p><p><img src="Snipaste_2022-06-23_17-23-34.png" width="75%" height="75%"></p><p>使用 Redis 可能会出现的一些问题：</p><ul><li>持久化日志（AOF、RDB）带来的读写性能问题</li></ul><div class="note info modern"><p>为了保证数据的可靠性，Redis 需要在磁盘上读写 AOF 和 RDB，但在高并发场景里，这就会直接带来两个新问题：一个是写 AOF 和 RDB 会造成 Redis 性能抖动，另一个是 Redis 集群数据同步和实例恢复时，读 RDB 比较慢，限制了同步和恢复速度。<br>一个可行的解决方案就是使用非易失内存 NVM，因为它既能保证高速的读写，又能快速持久化数据。</p></div><ul><li>在 CPU 、 内存、存储持久化、网络通信方面的坑</li></ul><div class="note info modern"><p>CPU 使用上的“坑”，例如数据结构的复杂度、跨 CPU 核的访问；<br>内存使用上的“坑”，例如主从同步和 AOF 的内存竞争；<br>存储持久化上的“坑”，例如在 SSD 上做快照的性能抖动；<br>网络通信上的“坑”，例如多实例时的异常网络丢包。</p></div><ul><li>Redis 的长尾延迟</li></ul><div class="note info modern"><p>假设 Redis 处理了 100 个请求，99 个请求的响应时间都是 1s，而有一个请求的响应时间是 100s。那么，如果看平均延迟，这 100 个请求的平均延迟是 1.99s，但是对于这个响应时间是 100s 的请求而言，它对应的用户体验将是非常糟糕的。如果有 100 万个请求，哪怕只有 1% 的请求是 100s，这也对应了 1 万个糟糕的用户体验。这 1% 的请求延迟就属于长尾延迟。</p><p>导致长尾延迟的原因：<br>对于单线程的 Redis 而言，任何阻塞性操作都会导致长尾延迟的产生。可以从 键值对数据结构、持久化机制下的 fork 调用、主从库同步时的 AOF 重写，以及缓冲区溢出等多个方面 考虑。</p></div><ul><li>使用 String 类型遇到的问题<br>使用 String 类型作为存储类型时，由于获取值时需要全量获取出来再解析出具体值，一个是耗时，一个是当数据量大的时候网卡流量撑不住。</li></ul><h1 id="2-一个-K-V-键值数据库的设计应该考虑哪些方面"><a href="#2-一个-K-V-键值数据库的设计应该考虑哪些方面" class="headerlink" title="2. 一个 K-V 键值数据库的设计应该考虑哪些方面"></a>2. 一个 K-V 键值数据库的设计应该考虑哪些方面</h1><ul><li>可以存哪些数据类型</li><li>对数据类型如何操作</li><li>键值对保存在内存还是外存</li><li>采用什么访问模式<ul><li>一种是 <strong>通过函数库调用的方式供外部应用使用</strong> 。这种方式以动态链接库的形式链接到我们自己的程序中，提供键值存储功能</li><li>另一种是通过网络框架以 Socket 通信的形式对外提供键值对操作，这种形式可以提供广泛的键值存储服务</li></ul></li><li>当数据库收到请求后，处理请求的 I/O 模型如何设计。是单线程还是多线程，还是多进程来交互处理请求。</li><li>如何定位键值对的位置。即根据 key 找到相应 value 的存储位置，进而执行操作。</li><li>不同操作的具体逻辑如何实现<ul><li>对于 GET/SCAN 操作而言，此时根据 value 的存储位置返回 value 值即可；</li><li>对于 PUT 一个新的键值对数据而言，SimpleKV 需要为该键值对分配内存空间；</li><li>对于 DELETE 操作，SimpleKV 需要删除键值对，并释放相应的内存空间，这个过程由分配器完成。</li></ul></li></ul><div class="note info modern"><p>对于 PUT 和 DELETE 涉及到内存的分配，内存的管理依赖存储模块。</p></div><ul><li>内存的管理<ul><li>键值数据库的键值对通常大小不一，分配器在处理随机的大小内存块分配时，表现不稳定。一旦保存的键值对数据规模过大，就可能造成较严重的内存碎片问题。</li><li>采用不同的分配策略，分配效率也不同。</li></ul></li><li>如何实现重启后快速提供服务。（持久化功能）<ul><li>实时落盘</li><li>定期落盘</li></ul></li></ul><p><strong>基础模块</strong></p><p><img src="Snipaste_2022-06-24_09-22-51.png" width="75%" height="75%"></p><p><strong>其他功能模块</strong></p><p>丰富的数据类型、数据压缩、过期机制、数据淘汰策略、主从复制、集群化、高可用等功能，另外还可以增加统计模块、通知模块、调试模块、元数据查询等辅助功能。</p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微服务架构中的进程通信</title>
      <link href="/JeckFS/2022/06/13/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E4%B8%AD%E7%9A%84%E8%BF%9B%E7%A8%8B%E9%80%9A%E4%BF%A1/"/>
      <url>/JeckFS/2022/06/13/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E4%B8%AD%E7%9A%84%E8%BF%9B%E7%A8%8B%E9%80%9A%E4%BF%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="1-微服务架构中的进程通信概述"><a href="#1-微服务架构中的进程通信概述" class="headerlink" title="1. 微服务架构中的进程通信概述"></a>1. 微服务架构中的进程通信概述</h1><h2 id="1-1-交互方式"><a href="#1-1-交互方式" class="headerlink" title="1.1 交互方式"></a>1.1 交互方式</h2><img src="/JeckFS/2022/06/13/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E4%B8%AD%E7%9A%84%E8%BF%9B%E7%A8%8B%E9%80%9A%E4%BF%A1/Snipaste_2022-06-14_10-35-09.png" class="" title="This is 2-th image."><p><img src="Snipaste_2022-06-14_10-37-02.png" width="75%" height="75%"></p><h2 id="1-2-如何定义-API"><a href="#1-2-如何定义-API" class="headerlink" title="1.2 如何定义 API"></a>1.2 如何定义 API</h2><p><strong>API 优先设计</strong>：先初步定义好前后端或者微服务之间的接口，再编码。</p><p><strong>语意化版本控制</strong>：使用 <code>MAJOR.MINOR.PATCH</code> 来进行版本控制。</p><ul><li>MAJOR：当对 API 进行不兼容的更改时</li></ul><div class="note info modern"><p>由于无法强制客户端立即升级，因此服务必须在一段时间内同时支持新旧版本的 API 。如果是使用 REST 进行进程间通信，一种方法是在 URL 嵌入主要版本号，如版本1 /v1/… 作为前缀，版本2以 /v2/… 作为前缀。<br>另一种方式是使用 HTTP 的 <strong>内容协商机制</strong> ，并在 MIME 类型中包含版本号。如：客户端使用如下格式针对 1.x 版的服务 API 发起 Order 相关请求：</p><p><img src="Snipaste_2022-06-14_11-04-19.png" width="75%" height="75%"></p><p>此请求告诉 Order Service 客户端需要以版本 1.x 做出响应。</p><p>为了支持多个版本的 API ，必要时需要实现 API 的服务适配器，以完成旧版本和新版本之间的转换。</p></div><ul><li>MINOR：当对 API 进行向后兼容的增强时</li></ul><div class="note info modern"><p>向后兼容的更改时对 API 的 附加更改 或 功能增强：</p><ul><li>添加可选属性</li><li>向响应添加属性</li><li>添加新操作</li></ul><p>为了实现向后兼容，服务应该为缺少的请求属性提供默认值。同时，客户端应该忽略任何额外的响应属性。</p></div><ul><li>PATCH：当进行向后兼容的错误修复时</li></ul><p><strong>消息的格式</strong>：</p><ul><li>JSON 、 XML 基于文本的格式</li></ul><div class="note info modern"><p>好处是可读性高，缺点是消息过度冗长，造成额外开销；解析文本引入额外开销。<br>在对效率和性能敏感的场景下，可能需要考虑基于二进制格式的消息。</p></div><ul><li>二进制消息格式</li></ul><div class="note info modern"><p>常用的二进制消息： Protocol Buffers 、 Avro 。<br>这两种格式都提供了一个强类型定义的 IDL （接口描述文件），用于定义消息的格式。编译器会自动根据这些格式生成序列化和反序列化的代码。因此采用二进制消息格式必须采用 API 优先的方法。</p><p>这两种二进制格式的区别： Protocol Buffers 使用 tagged fields （带标记的字段），而 Avro 的消费者在解析消息之前需要知道它的格式。因此实行 API 的版本升级演进， Protocol Buffer 要优于 Avro 。</p></div><h1 id="2-基于同步远程过程调用模式的通信"><a href="#2-基于同步远程过程调用模式的通信" class="headerlink" title="2. 基于同步远程过程调用模式的通信"></a>2. 基于同步远程过程调用模式的通信</h1><p>实现方式： REST 、 gRPC 、 GraphGL</p><h2 id="2-1-REST"><a href="#2-1-REST" class="headerlink" title="2.1 REST"></a>2.1 REST</h2><p>REST 中的 <strong>资源</strong> 通常表示单个业务对象，如客户或产品或业务对象的集合。 REST 使用 HTTP 动词来操作资源，使用 URL 引用这些资源。如 GET 请求用于获取资源。POST 请求用于创建新资源， PUT 请求用于更新资源，等。</p><mark class="hl-label green">REST成熟度模型</mark> <p><br></p><p><img src="Snipaste_2022-06-14_11-46-33.png" width="75%" height="75%"></p><p><img src="Snipaste_2022-06-14_11-47-17.png" width="75%" height="75%"></p><p><strong>使用 REST 时的挑战</strong></p><ul><li>在一个请求中获取多个资源的挑战</li></ul><p>示例：假设 REST 客户端需要检索 Order 和这个 Order 的 Consumer 。纯 REST API 要求客户端至少发出两个请求，一个用于 Order 一个用于 Consumer 。更复杂的情况是需要更多往返并且遭受过多的延迟。</p><p><img src="Snipaste_2022-06-14_12-00-09.png" width="75%" height="75%"></p><ul><li>把操作映射为 HTTP 动词的挑战</li></ul><p>即按照 HTTP 动词的语意来定义 API 接口。或者将 HTTP 动词放入请求路径中。<br>这两种方式都不是特别符合 RESTful 的要求。</p><p>这方面 gRPC 较好的解决了这种问题。所谓这种问题指的是 HTTP 动词无法更细粒度的描述化进程通信的具体操作，如使用 PUT 更新订单，但是更新订单又分为取消订单、修改订单等。</p><p><strong>REST 的好处与弊端</strong></p><p><img src="Snipaste_2022-06-14_14-27-37.png" width="75%" height="75%"></p><h2 id="2-2-gRPC"><a href="#2-2-gRPC" class="headerlink" title="2.2 gRPC"></a>2.2 gRPC</h2><h3 id="2-2-1-概述"><a href="#2-2-1-概述" class="headerlink" title="2.2.1 概述"></a>2.2.1 概述</h3><ul><li>用于编写 <strong>跨语言客户端和服务端</strong> 的框架</li><li>基于二进制消息的协议。</li><li>可以使用基于 Protocol Buffer 的 IDL 定义 gRPC API ，这是 google 用于 <strong>序列化结构化</strong> 数据的一套语言中立机制。</li><li>客户端和服务端必须使用 HTTP/2</li><li>支持 <strong>流式</strong> RPC ，即服务器与客户端之间的相互通信可以使用消息流。</li></ul><p><strong>Protocol Buffers</strong></p><ul><li>是 google 用于 <strong>序列化结构化</strong> 数据的一套语言中立机制。 </li><li>可以使用 Protocol Buffer 编译器生成客户端的桩（stub ，也称为存根）和服务端骨架（skeleton）。</li><li>Protocol Buffers 是一种高效且紧凑的二进制格式，它是一种标记格式。 Protocol Buffers 消息的每个字短都有编号，并且有一个类型代码。消息接收方可以提取所需的字段，并跳过它无法识别的字段。因此 gRPC 使 API 能够在保持向后兼容的同时进行变更。</li></ul><p><img src="Snipaste_2022-06-15_14-29-24.png" width="75%" height="75%"></p><p><img src="Snipaste_2022-06-15_14-29-57.png" width="75%" height="75%"></p><p><img src="Snipaste_2022-06-15_14-34-10.png" width="75%" height="75%"></p><h3 id="2-2-2-gRPC-的局部故障问题"><a href="#2-2-2-gRPC-的局部故障问题" class="headerlink" title="2.2.2 gRPC 的局部故障问题"></a>2.2.2 gRPC 的局部故障问题</h3><p>与 REST 一样， gRPC 也是一种同步通信机制，因此也存在 <strong>局部故障</strong> 的问题。</p><ol><li>使用断路器模式处理局部故障</li></ol><p><img src="Snipaste_2022-06-15_14-36-28.png" width="75%" height="75%"></p><div class="note info modern"><p>关键点：</p><ul><li>具有识别无响应服务的能力</li><li>具有从失败的远程服务中恢复的能力</li></ul></div><ul><li>网络超时。</li><li>限制客户端向服务器发出请求的数量。对于超过上限的请求进行拒绝或者立刻失败。</li><li>断路器模式。监控客户端发送请求的成功和失败的数量。如果失败比例超过一定阈值，就启动断路器，让后续的调用立刻失败。在经过一段时间后，客户端继续尝试，如果调用成功，则解除断路器。</li></ul><p>当出现服务故障时，可以返回缓存中的内容也可以直接返回错误，也可以跳过，这个要看服务的重要程度。</p><ol><li>使用服务发现</li></ol><p>如 Eureka 。 K8S 中也有服务发现机制。</p><p>使用服务发现的一个缺点是：服务发现的框架是与语言绑定的。如 C 服务就不能使用 Eureka 。</p><h1 id="3-基于异步消息模式的通信"><a href="#3-基于异步消息模式的通信" class="headerlink" title="3. 基于异步消息模式的通信"></a>3. 基于异步消息模式的通信</h1><h2 id="3-1-使用消息机制实现交互方式"><a href="#3-1-使用消息机制实现交互方式" class="headerlink" title="3.1 使用消息机制实现交互方式"></a>3.1 使用消息机制实现交互方式</h2><ul><li>实现请求 / 响应和异步请求 / 响应 </li></ul><p><img src="Snipaste_2022-06-15_16-54-58.png" width="75%" height="75%"></p><ul><li>实现单向通知</li><li>实现发布 / 订阅</li><li>实现发布 / 异步响应</li></ul><h2 id="3-2-为基于消息机制的服务-API-规范"><a href="#3-2-为基于消息机制的服务-API-规范" class="headerlink" title="3.2 为基于消息机制的服务 API 规范"></a>3.2 为基于消息机制的服务 API 规范</h2><p><img src="Snipaste_2022-06-16_14-38-09.png" width="75%" height="75%"></p><ul><li>请求 / 异步响应式 API 规范：命令消息通道、命令式消息的具体类型和格式、以及服务返回的回复消息的类型和格式。</li><li>单向通知式 API 规范：命令消息通道、服务接受的命令式消息的具体类型和格式。</li><li>发布 / 订阅式 API 规范：事件通道、服务发布到通道的事件式消息的类型和格式。</li></ul><h2 id="3-3-消息代理"><a href="#3-3-消息代理" class="headerlink" title="3.3 消息代理"></a>3.3 消息代理</h2><p><img src="Snipaste_2022-06-16_15-04-30.png" width="75%" height="75%"></p><p><strong>无代理架构的优缺点：</strong></p><p><img src="Snipaste_2022-06-16_15-10-31.png" width="75%" height="75%"></p><p><strong>基于消息代理的架构</strong></p><p>使用基于消息代理的架构需要考虑以下几方面的问题：</p><p><img src="Snipaste_2022-06-16_15-13-20.png" width="75%" height="75%"></p><p><strong>使用消息代理的优点：</strong></p><p><img src="Snipaste_2022-06-16_15-16-23.png" width="75%" height="75%"></p><p><strong>使用消息代理的缺点：</strong> </p><p><img src="Snipaste_2022-06-16_15-17-29.png" width="75%" height="75%"></p><p><img src="Snipaste_2022-06-16_15-17-57.png" width="75%" height="75%"></p><p><strong>MQ如何保证消息顺序：</strong></p><p><img src="Snipaste_2022-06-16_15-26-04.png" width="75%" height="75%"></p><p><strong>MQ 如何处理重复消息：</strong></p><ul><li>编写幂等消息处理程序</li></ul><ul><li>跟踪消息并丢弃重复项</li></ul><div class="note info modern"><p>由于应用逻辑通常不是幂等的。因此可以使用第二种方式。这种方式需要消息中存在能够唯一标识这个报文的 ID 。通过该 ID 来做幂等。如果报文 ID 是重复的，则认为该报文重复发送，直接丢弃即可。</p></div><h2 id="3-4-事务性消息"><a href="#3-4-事务性消息" class="headerlink" title="3.4 事务性消息"></a>3.4 事务性消息</h2><p>所谓事务性消息是指：数据库的更新和消息的发送都在一个事务中进行。否则，会出现更新数据库成功，却没有发送消息的问题。</p><p>解决方式: <strong>使用数据库表作为消息队列</strong></p><p>这种方式依靠本地事务的 ACID 特性来保证事务性消息。服务通过将消息插入到数据库表中来发送消息。</p><p><img src="Snipaste_2022-06-16_16-02-40.png" width="75%" height="75%"></p><p><strong>实现将消息从数据库移动到消息代理并对外发送</strong>：</p><ul><li>通过轮询模式发布事件</li></ul><div class="note info modern"><p>让 MessageRelay 在表中定期查询未发布的消息，并将未发布消息发送给消息代理，发送成功后从数据库表中删除该消息。</p><p>弊端：</p><ul><li>经常轮询数据库可能造成昂贵的开销，导致数据库性能下降。</li></ul></div><ul><li>使用事务日志拖尾模式发布事件</li></ul><p><img src="Snipaste_2022-06-16_16-49-49.png" width="75%" height="75%"></p><p>实现日志拖尾的框架：</p><p><img src="Snipaste_2022-06-16_16-50-38.png" width="75%" height="75%"></p><h2 id="3-5-使用异步消息提高可用性"><a href="#3-5-使用异步消息提高可用性" class="headerlink" title="3.5 使用异步消息提高可用性"></a>3.5 使用异步消息提高可用性</h2><div class="note info modern"><p>若使用同步消息进行跨服务通信，那么整个系统的可用性是与各个子系统的可用性相关的。假设 n 个子系统的可用性都是 99% ，那么整个系统的可用性就是 0.99的n次方。</p></div><p>使用异步交互模式：</p><p><img src="Snipaste_2022-06-16_17-06-07.png" width="75%" height="75%"></p><p>但是服务很多情况下都是采用类似 REST 的同步通信协议的外部 API，并且对请求立即做出响应。为了解决这个问题，可以采用下述方式。</p><p>复制数据：</p><p><img src="Snipaste_2022-06-16_17-12-52.png" width="75%" height="75%"></p><p>Order Service 从 ConsumerService 数据库中复制所有消费者的信息存入到 OrderService 数据库中。对于 RestaurantService 数据库也是一样的复制。当 ConsumerService 数据库或者 RestaurantService 数据库发生变化时使用订阅发布的方式通知 OrderService 数据库更新。</p><div class="note info modern"><p>弊端：</p><ul><li>复制的数据量巨大的情况下，会导致效率低下。</li><li>没有从根本上解决 Order 服务如何更新其他服务（ConsumerService，RestaurantService）所拥有的数据的问题。</li></ul></div><p>另一种消除同步通信的方式是<strong>先返回响应，再完成处理</strong></p><p><img src="Snipaste_2022-06-16_17-28-17.png" width="75%" height="75%"></p><p>OrderService 可以创建一个未经验证（Pending）状态的订单，然后通过一步交互的放肆好直接跟其他服务通信来完成验证。</p><p>在完全处理请求之前响应服务的弊端是它使客户端更复杂。例如， OrderService 在返回响应时对新创建的订单的状态提供最低限度的保证。他会在验证订单并授权消费者的信用卡之前立即创建订单并返回。因此，为了使客户端知道订单是否已经成功创建，要么必须 <strong>定期轮询</strong> 要么 OrderService 必须向客户端 <strong>发送通知消息</strong>。</p><h1 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h1><p><img src="Snipaste_2022-06-16_19-31-29.png" width="75%" height="75%"></p><p><img src="Snipaste_2022-06-16_19-31-47.png" width="75%" height="75%"></p>]]></content>
      
      
      <categories>
          
          <category> 微服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于递归的需要注意的地方</title>
      <link href="/JeckFS/2022/06/11/%E5%85%B3%E4%BA%8E%E9%80%92%E5%BD%92%E7%9A%84%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84%E5%9C%B0%E6%96%B9/"/>
      <url>/JeckFS/2022/06/11/%E5%85%B3%E4%BA%8E%E9%80%92%E5%BD%92%E7%9A%84%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84%E5%9C%B0%E6%96%B9/</url>
      
        <content type="html"><![CDATA[<h1 id="1-程序示例"><a href="#1-程序示例" class="headerlink" title="1. 程序示例"></a>1. 程序示例</h1><p>数字 n 代表生成括号的对数，请你设计一个函数，用于能够生成所有可能的并且 有效的 括号组合。</p><p>示例 1：</p><p>输入：n = 3<br>输出：<code>[&quot;((()))&quot;,&quot;(()())&quot;,&quot;(())()&quot;,&quot;()(())&quot;,&quot;()()()&quot;]</code><br>示例 2：</p><p>输入：n = 1<br>输出：<code>[&quot;()&quot;]</code></p><p>函数名称：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;String&gt; <span class="title function_">generateParenthesis</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-代码示例"><a href="#2-代码示例" class="headerlink" title="2. 代码示例"></a>2. 代码示例</h1><div class="tabs" id="代码示例"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#代码示例-1">代码示例 1</button></li><li class="tab"><button type="button" data-href="#代码示例-2">代码示例 2</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="代码示例-1"><p><strong>代码示例1</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    List&lt;String&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">next</span><span class="params">(<span class="type">char</span> data, StringBuilder curList, <span class="type">int</span> leftCnt, <span class="type">int</span> rightCnt, <span class="type">int</span> n)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (leftCnt &gt; n/<span class="number">2</span> || leftCnt + rightCnt &gt; n) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span> (leftCnt &lt; rightCnt) <span class="keyword">return</span>;</span><br><span class="line">        curList.append(data); <span class="comment">// (a)</span></span><br><span class="line">        <span class="keyword">if</span> (leftCnt + rightCnt == n &amp;&amp; leftCnt == rightCnt) &#123; <span class="comment">// (c)</span></span><br><span class="line">            res.add(curList.toString());</span><br><span class="line">            <span class="comment">//curList.delete(curList.length()-1, curList.length()); // (b)</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        next(<span class="string">&#x27;(&#x27;</span>, curList, leftCnt+<span class="number">1</span>, rightCnt, n);</span><br><span class="line">        next(<span class="string">&#x27;)&#x27;</span>, curList, leftCnt, rightCnt+<span class="number">1</span>, n);</span><br><span class="line">        curList.delete(curList.length()-<span class="number">1</span>, curList.length()); <span class="comment">// (d)</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">generateParenthesis</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">int</span> leftCnt=  <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">rightCnt</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        next(<span class="string">&#x27;(&#x27;</span>, <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(), leftCnt, rightCnt, <span class="number">2</span>*n);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;String&gt; res = <span class="keyword">new</span> <span class="title class_">Main</span>().generateParenthesis(<span class="number">3</span>);</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="代码示例-2"><p><strong>代码示例2</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    List&lt;String&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">next2</span><span class="params">(<span class="type">char</span> data, StringBuilder curList, <span class="type">int</span> leftCnt, <span class="type">int</span> rightCnt, <span class="type">int</span> n)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (leftCnt &gt; n/<span class="number">2</span> || leftCnt + rightCnt &gt; n) <span class="keyword">return</span>;</span><br><span class="line">        curList.append(data);</span><br><span class="line">        <span class="keyword">if</span> (leftCnt + rightCnt == n &amp;&amp; leftCnt == rightCnt) &#123;</span><br><span class="line">            res.add(curList.toString());</span><br><span class="line">            curList.delete(curList.length()-<span class="number">1</span>, curList.length());</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        next2(<span class="string">&#x27;(&#x27;</span>, curList, leftCnt + <span class="number">1</span>, rightCnt, n);</span><br><span class="line">        <span class="keyword">if</span> (leftCnt &gt; rightCnt) &#123; <span class="comment">// 当左括号数量 &lt;= 右括号数量时不进行递归</span></span><br><span class="line">            next2(<span class="string">&#x27;)&#x27;</span>, curList, leftCnt, rightCnt + <span class="number">1</span>, n);</span><br><span class="line">        &#125;</span><br><span class="line">        curList.delete(curList.length() - <span class="number">1</span>, curList.length());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">generateParenthesis</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">int</span> leftCnt=  <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">rightCnt</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        next2(<span class="string">&#x27;(&#x27;</span>, <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(), leftCnt, rightCnt, <span class="number">2</span>*n);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><mark class="hl-label green">代码思路</mark> ：递归总共就两个分支，即要么添加右括号，要么添加左括号。但是因为左右括号需要匹配，因此当列表中添加的右括号数量比左括号多时，肯定得不到正确的结果。这也是程序设计的基础。<br><mark class="hl-label green">程序分析</mark>  ：编程时有两种方式，一种是在发生递归的时候进行判断，满足条件再进行递归；从上述分析可以看出，当右括号数量比左括号多时肯定不用递归了，因为得不到正确结果。这样做会  <mark class="hl-label default">少一次无用的递归</mark>   。另一种方式是，不对发生递归的语句进行判断，在 <mark class="hl-label default">递归逻辑主体</mark>  中进行判断，对于右括号数量大于左括号数量的情况直接返回。<br>这两种情况有一个坑：  <mark class="hl-label default">对于局部变量没有影响，当递归返回时不会影响上一次层调用的局部变量值。但是对于对象，则是会影响到上一层调用的对象值的。（这里需要考虑值传递和址传递的问题）</mark>   。这种情况发生在代码示例 1 中。如果标记的 (b) 行不添加就会影响 curList 中左括号数量与右括号数量与参数 leftCnt 、 rightCnt 的对应关系，结果就是结果错误。这个是非常容易陷入的巨坑。应为当这次  <mark class="hl-label default">无用的递归</mark>   发生时，已经执行了行 (a) ，这时若满足条件 (c) ，若没有添加行 (b) 就会发生多添加一个括号的问题。 <mark class="hl-label red">当对象作为函数参数存储介质时，切记要删掉对对象值修改时的恢复操作。</mark>      <p>行 (d) 也是这么做的，因为整个递归函数体中仅有一次 <code>curList.append(data);</code> 所以仅添加一行恢复语句即可。但是比较容易出错的是漏加行 (b) 。</p><h1 id="3-总结"><a href="#3-总结" class="headerlink" title="3. 总结"></a>3. 总结</h1><mark class="hl-label red">当对象作为函数参数存储介质时，应该在递归后对该数据进行恢复。比较容易漏掉的一点是，当对象值满足保留条件时，记得在函数返回前也要恢复下数据。</mark> ]]></content>
      
      
      <categories>
          
          <category> 递归 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 递归 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello_Test</title>
      <link href="/JeckFS/2022/06/10/Hello-Test/"/>
      <url>/JeckFS/2022/06/10/Hello-Test/</url>
      
        <content type="html"><![CDATA[<p>asdfasdf</p><div class="tabs" id="test3"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#test3-1">test3 1</button></li><li class="tab"><button type="button" data-href="#test3-2">test3 2</button></li><li class="tab"><button type="button" data-href="#test3-3">test3 3</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="test3-1"><p><strong>this is first tab.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test3-2"><p><strong>this is second tab.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test3-3"><p><strong>this is third tab.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><div class="note info modern"><p>info</p></div><div class="note primary modern"><p>primary</p></div><p>这是<mark class="hl-label green">label1</mark>  label</p><img class="inline-img" src="https://tse3-mm.cn.bing.net/th/id/OIP-C.S3QOsgnlzrpbpAdOXF4YMAHaEo?w=252&h=180&c=7&r=0&o=5&dpr=2&pid=1.7" style="height:150px"/><img src="/JeckFS/2022/06/10/Hello-Test/Snipaste_2022-06-10_09-56-26.png" class="" title="This is 2-th image. 150px*150px"><p><img src="Snipaste_2022-06-10_09-56-26.png" alt="10"></p><p><img src="Snipaste_2022-06-10_09-56-26.png" width="50%" height="50%"></p><p> <img src="Snipaste_2022-06-10_09-56-26.png" width="75%" height="75%"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello_World</title>
      <link href="/JeckFS/2022/06/09/Hello-World-0/"/>
      <url>/JeckFS/2022/06/09/Hello-World-0/</url>
      
        <content type="html"><![CDATA[<p>asdfasdf</p><div class="tabs" id="test3"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#test3-1">test3 1</button></li><li class="tab"><button type="button" data-href="#test3-2">test3 2</button></li><li class="tab"><button type="button" data-href="#test3-3">test3 3</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="test3-1"><p><strong>this is first tab.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test3-2"><p><strong>this is second tab.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test3-3"><p><strong>this is third tab.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><div class="note info modern"><p>info</p></div><div class="note primary modern"><p>primary</p></div><p>这是<mark class="hl-label green">label1</mark>  label</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/JeckFS/2022/06/09/hello-world/"/>
      <url>/JeckFS/2022/06/09/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><div class="note info simple"><p>info 提示块标签</p></div><div class="note warning simple"><p>info 提示块标签</p></div><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">test1 1</button></li><li class="tab"><button type="button" data-href="#test1-2">test1 2</button></li><li class="tab"><button type="button" data-href="#test1-3">test1 3</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><p><strong>This is Tab 1.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><p><strong>This is Tab 2.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-3"><p><strong>This is Tab 3.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><img class="inline-img" src="https://i.loli.net/2021/03/19/5M4jUB3ynq7ePgw.png" style="height:350px"/><mark class="hl-label green">绿色字体</mark> <script type="math/tex; mode=display">m_a^b</script><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">int</span> a;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">int</span> a;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">int</span> a;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">int</span> a;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">int</span> a;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">int</span> a;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">int</span> a;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">int</span> a;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">int</span> a;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">int</span> a;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">int</span> a;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">int</span> a;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">int</span> a;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">int</span> a;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">int</span> a;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">int</span> a;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">int</span> a;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">int</span> a;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">int</span> a;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">int</span> a;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">int</span> a;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">int</span> a;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">int</span> a;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">int</span> a;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">int</span> a;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">int</span> a;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">int</span> a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode638-大礼包</title>
      <link href="/JeckFS/2022/06/07/leetcode638-%E5%A4%A7%E7%A4%BC%E5%8C%85/"/>
      <url>/JeckFS/2022/06/07/leetcode638-%E5%A4%A7%E7%A4%BC%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<p><a href="https://leetcode.cn/problems/shopping-offers/">题目描述</a></p><img src="/JeckFS/2022/06/07/leetcode638-%E5%A4%A7%E7%A4%BC%E5%8C%85/Snipaste_2022-06-07_16-55-12.png" class="" title="This is 1-th image."><img src="/JeckFS/2022/06/07/leetcode638-%E5%A4%A7%E7%A4%BC%E5%8C%85/Snipaste_2022-06-07_16-57-22.png" class="" title="This is 1-th image."><p><strong>代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution2</span> &#123;</span><br><span class="line">    Map&lt;List&lt;Integer&gt;, Integer&gt; memo = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;List&lt;Integer&gt;, Integer&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">shoppingOffers</span><span class="params">(List&lt;Integer&gt; price, List&lt;List&lt;Integer&gt;&gt; special, List&lt;Integer&gt; needs)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> price.size();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 过滤不需要计算的大礼包，只保留需要计算的大礼包</span></span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; filterSpecial = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;List&lt;Integer&gt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (List&lt;Integer&gt; sp : special) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">totalCount</span> <span class="operator">=</span> <span class="number">0</span>, totalPrice = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">                totalCount += sp.get(i);</span><br><span class="line">                totalPrice += sp.get(i) * price.get(i);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (totalCount &gt; <span class="number">0</span> &amp;&amp; totalPrice &gt; sp.get(n)) &#123;</span><br><span class="line">                filterSpecial.add(sp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dfs(price, special, needs, filterSpecial, n);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 记忆化搜索计算满足购物清单所需花费的最低价格</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">dfs</span><span class="params">(List&lt;Integer&gt; price, List&lt;List&lt;Integer&gt;&gt; special, List&lt;Integer&gt; curNeeds, List&lt;List&lt;Integer&gt;&gt; filterSpecial, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!memo.containsKey(curNeeds)) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">minPrice</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">                minPrice += curNeeds.get(i) * price.get(i); <span class="comment">// 不购买任何大礼包，原价购买购物清单中的所有物品</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (List&lt;Integer&gt; curSpecial : filterSpecial) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">specialPrice</span> <span class="operator">=</span> curSpecial.get(n);</span><br><span class="line">                List&lt;Integer&gt; nxtNeeds = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;();</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (curSpecial.get(i) &gt; curNeeds.get(i)) &#123; <span class="comment">// 不能购买超出购物清单指定数量的物品</span></span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    nxtNeeds.add(curNeeds.get(i) - curSpecial.get(i));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (nxtNeeds.size() == n) &#123; <span class="comment">// 大礼包可以购买</span></span><br><span class="line">                    minPrice = Math.min(minPrice, dfs(price, special, nxtNeeds, filterSpecial, n) + specialPrice);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            memo.put(curNeeds, minPrice);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> memo.get(curNeeds);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意点：</strong></p><ul><li>优化技巧：去除明显不会影响结果的数据</li><li>记忆化搜索模板</li><li>使用 HashMap 代替<strong>状态压缩</strong></li></ul><p><strong>记忆化搜索模板:</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Map</span> <span class="variable">memo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line"></span><br><span class="line">memorySearch(status)&#123;</span><br><span class="line">    <span class="keyword">if</span>(!memo.containsKey(status)) &#123;</span><br><span class="line">        <span class="comment">// 使用 dfs 的思路遍历数据</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> memo.get(status);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>其他练习题</strong><br><a href="https://leetcode.cn/problems/different-ways-to-add-parentheses/">241.为运算表达式设计优先级</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;Segment, List&lt;Integer&gt;&gt; memo = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">getResult</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">char</span> opt)</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> (opt) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>:</span><br><span class="line">                <span class="keyword">return</span> a + b;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">                <span class="keyword">return</span> a - b;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;*&#x27;</span>:</span><br><span class="line">                <span class="keyword">return</span> a * b;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">isDigit</span><span class="params">(<span class="type">char</span> ch)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ch &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;9&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2,3,4,5</span></span><br><span class="line">    <span class="comment">// _,*,-,*</span></span><br><span class="line">    <span class="comment">// 0 &lt;= key.start &lt;= key.end &lt; digits.size()</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Integer&gt; <span class="title function_">dfs</span><span class="params">(List&lt;Integer&gt; digits, List&lt;Character&gt; opts, Segment key)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!memo.containsKey(key)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (key.start &gt;= digits.size()) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (key.start == key.end) &#123;</span><br><span class="line">                List&lt;Integer&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">                res.add(digits.get(key.start));</span><br><span class="line">                memo.put(key, res);</span><br><span class="line">                <span class="keyword">return</span> res;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (key.start + <span class="number">1</span> == key.end) &#123;</span><br><span class="line">                List&lt;Integer&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">                res.add(getResult(digits.get(key.start), digits.get(key.end), opts.get(key.end)));</span><br><span class="line">                memo.put(key, res);</span><br><span class="line">                <span class="keyword">return</span> res;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 2*3-4*5</span></span><br><span class="line">            List&lt;Integer&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> key.start; mid &lt; key.end; mid++) &#123;</span><br><span class="line">                List&lt;Integer&gt; leftPart = dfs(digits, opts, <span class="keyword">new</span> <span class="title class_">Segment</span>(key.start, mid));</span><br><span class="line">                List&lt;Integer&gt; rightPart = dfs(digits, opts, <span class="keyword">new</span> <span class="title class_">Segment</span>(mid + <span class="number">1</span>, key.end));</span><br><span class="line">                <span class="keyword">for</span> (Integer left : leftPart) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (Integer right : rightPart) &#123;</span><br><span class="line">                        res.add(getResult(left, right, opts.get(mid + <span class="number">1</span>)));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            List&lt;Integer&gt; putValues = memo.get(key);</span><br><span class="line">            <span class="keyword">if</span> (putValues == <span class="literal">null</span>) &#123;</span><br><span class="line">                memo.put(key, res);</span><br><span class="line">                <span class="keyword">return</span> res;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                putValues.addAll(res);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> memo.get(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">diffWaysToCompute</span><span class="params">(String expression)</span> &#123;</span><br><span class="line">        StringBuilder sb;</span><br><span class="line">        List&lt;Integer&gt; digits = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        List&lt;Character&gt; opts = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        opts.add(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; expression.length(); ) &#123;</span><br><span class="line">            sb = <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">            <span class="keyword">while</span> (i &lt; expression.length() &amp;&amp; isDigit(expression.charAt(i))) &#123;</span><br><span class="line">                sb.append(expression.charAt(i++));</span><br><span class="line">            &#125;</span><br><span class="line">            digits.add(Integer.parseInt(sb.toString()));</span><br><span class="line">            <span class="keyword">if</span> (i &lt; expression.length()) &#123;</span><br><span class="line">                opts.add(expression.charAt(i++));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dfs(digits, opts, <span class="keyword">new</span> <span class="title class_">Segment</span>(<span class="number">0</span>, digits.size() - <span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Segment</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> start, end;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Segment</span><span class="params">(<span class="type">int</span> start, <span class="type">int</span> end)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.start = start;</span><br><span class="line">            <span class="built_in">this</span>.end = end;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line">            <span class="type">Segment</span> <span class="variable">s</span> <span class="operator">=</span> (Segment) obj;</span><br><span class="line">            <span class="type">return</span> <span class="variable">start</span> <span class="operator">=</span>= s.start &amp;&amp; end == s.end;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;segment&#123;&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;start=&quot;</span> + start +</span><br><span class="line">                    <span class="string">&quot;, end=&quot;</span> + end +</span><br><span class="line">                    <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;2*3-4*5&quot;</span>;</span><br><span class="line">        List&lt;Integer&gt; integers = <span class="keyword">new</span> <span class="title class_">Solution</span>().diffWaysToCompute(s);</span><br><span class="line">        <span class="keyword">for</span> (Integer integer : integers) &#123;</span><br><span class="line">            System.out.print(integer + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 记忆化搜索 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 记忆化搜索 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Skywalking梳理</title>
      <link href="/JeckFS/2022/05/28/Skywalking%E6%A2%B3%E7%90%86/"/>
      <url>/JeckFS/2022/05/28/Skywalking%E6%A2%B3%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/weixin_39975683/article/details/111581308">参考博客</a></p><h1 id="1-Skywalking-整体架构"><a href="#1-Skywalking-整体架构" class="headerlink" title="1. Skywalking 整体架构"></a>1. Skywalking 整体架构</h1><p><strong>名次解释</strong></p><ul><li><strong>服务( Service )</strong>：表示对请求提供相同行为的一系列或一组工作负载. 在使用打点代理或 SDK 的时候, 你可以定义服务的名字. 如果不定义的话, SkyWalking 将会使用你平台上定义的名字</li><li><strong>服务实例( service instance )</strong>：上述的一组工作负载中的每一个工作负载称为一个实例. 就像 Kubernetes 中的 pods 一样, 服务实例未必就是操作系统上的一个进程. 但当你在使用打点代理的时候, 一个服务实例实际就是操作系统上的一个真实进程</li><li><strong>端点( Endpoint )</strong>：对于特定服务所接收的请求路径, 如 HTTP 的 URI 路径和 gRPC 服务的类名 + 方法签名.</li></ul><p><strong>架构</strong></p><img src="/JeckFS/2022/05/28/Skywalking%E6%A2%B3%E7%90%86/Snipaste_2022-05-28_09-21-26.png" class="" title="This is 1-th image."><img src="/JeckFS/2022/05/28/Skywalking%E6%A2%B3%E7%90%86/Snipaste_2022-05-28_09-23-13.png" class="" title="This is 1-th image."><p>所谓探针，指的是图中 Tracing 和 Metrics 部分。</p><ul><li>Agent / Probe 探针。主要收集应用的监控数据，包括调用关系、执行时间、是否报错、错误堆栈、 Service Mesh 中的探针。</li><li>后端服务（Backend / OAP Server）。收集并处理 agent 探针上报的监控数据，经过分析处理后持久化到存储模块</li><li>存储。用来持久化后端服务处理完成后到数据。如 Elasticsearch、 MySQL、TiDB等</li><li>UI 模块。用于前端查询各种监控数据并展现给用户。</li></ul><p><strong>限制</strong></p><img src="/JeckFS/2022/05/28/Skywalking%E6%A2%B3%E7%90%86/Snipaste_2022-05-28_09-32-52.png" class="" title="This is 1-th image."><h2 id="1-1-探针"><a href="#1-1-探针" class="headerlink" title="1.1 探针"></a>1.1 探针</h2><p>Skywalking-agent 目录结构：</p><p>├── LICENSE<br>├── NOTICE<br>├── activations <strong>存放用于激活 Skywalking 的应用工具包的插件包</strong><br>│   ├── apm-toolkit-kafka-activation-8.10.0.jar<br>│   ├── apm-toolkit-log4j-1.x-activation-8.10.0.jar<br>│   ├── apm-toolkit-log4j-2.x-activation-8.10.0.jar<br>│   ├── apm-toolkit-logback-1.x-activation-8.10.0.jar<br>│   ├── apm-toolkit-logging-common-8.10.0.jar<br>│   ├── apm-toolkit-meter-activation-8.10.0.jar<br>│   ├── apm-toolkit-opentracing-activation-8.10.0.jar<br>│   └── apm-toolkit-trace-activation-8.10.0.jar<br>├── bootstrap-plugins<br>│   ├── apm-jdk-http-plugin-8.10.0.jar<br>│   ├── apm-jdk-threading-plugin-8.10.0.jar<br>│   └── apm-jdk-threadpool-plugin-8.10.0.jar<br>├── config<br>│   └── agent.config <strong>JavaAgent 的默认配置</strong><br>├── licenses<br>│   └── LICENSE-asm.txt<br>├── logs <strong>探针启动成功后，Skywalking 的日志会保存在此目录下</strong><br>├── optional-plugins <strong>Skywalking 可选的中间件、框架、库。将本文件夹下的 jar 包移动至 plugins 文件夹下才会起效</strong><br>│   ├── apm-customize-enhance-plugin-8.10.0.jar<br>│   ├── apm-ehcache-2.x-plugin-8.10.0.jar<br>│   ├── apm-fastjson-1.x-plugin-8.10.0.jar<br>│   ├── apm-gson-2.x-plugin-8.10.0.jar<br>│   ├── apm-guava-cache-plugin-8.10.0.jar<br>│   ├── apm-jackson-2.x-plugin-8.10.0.jar<br>│   ├── apm-kotlin-coroutine-plugin-8.10.0.jar<br>│   ├── apm-mybatis-3.x-plugin-8.10.0.jar<br>│   ├── apm-quartz-scheduler-2.x-plugin-8.10.0.jar<br>│   ├── apm-sentinel-1.x-plugin-8.10.0.jar<br>│   ├── apm-shenyu-2.4.x-plugin-8.10.0.jar<br>│   ├── apm-spring-annotation-plugin-8.10.0.jar<br>│   ├── apm-spring-cloud-gateway-2.0.x-plugin-8.10.0.jar<br>│   ├── apm-spring-cloud-gateway-2.1.x-plugin-8.10.0.jar<br>│   ├── apm-spring-cloud-gateway-3.x-plugin-8.10.0.jar<br>│   ├── apm-spring-tx-plugin-8.10.0.jar<br>│   ├── apm-spring-webflux-5.x-plugin-8.10.0.jar<br>│   ├── apm-trace-ignore-plugin-8.10.0.jar<br>│   └── apm-zookeeper-3.4.x-plugin-8.10.0.jar<br>├── optional-reporter-plugins<br>│   ├── kafka-reporter-plugin-8.10.0.jar<br>│   ├── lz4-java-1.6.0.jar<br>│   ├── snappy-java-1.1.7.3.jar<br>│   └── zstd-jni-1.4.3-1.jar<br>├── plugins <strong>Skywalking 支持的中间件、框架、库</strong><br>│   ├── apm-activemq-5.x-plugin-8.10.0.jar<br>│   ├── apm-armeria-0.84.x-plugin-8.10.0.jar<br>│   ├── apm-armeria-0.85.x-plugin-8.10.0.jar<br>│   ├── apm-asynchttpclient-2.x-plugin-8.10.0.jar<br>│   ├── apm-avro-plugin-8.10.0.jar<br>│   ├── apm-canal-1.x-plugin-8.10.0.jar<br>│   ├── apm-cassandra-java-driver-3.x-plugin-8.10.0.jar<br>│   ├── apm-clickhouse-0.3.x-plugin-8.10.0.jar<br>│   ├── apm-cxf-3.x-plugin-8.10.0.jar<br>│   ├── apm-dubbo-2.7.x-plugin-8.10.0.jar<br>│   ├── apm-dubbo-3.x-plugin-8.10.0.jar<br>│   ├── apm-dubbo-plugin-8.10.0.jar<br>│   ├── apm-elastic-job-2.x-plugin-8.10.0.jar<br>│   ├── apm-elasticjob-3.x-plugin-8.10.0.jar<br>│   ├── apm-elasticsearch-5.x-plugin-8.10.0.jar<br>│   ├── apm-elasticsearch-6.x-plugin-8.10.0.jar<br>│   ├── apm-elasticsearch-7.x-plugin-8.10.0.jar<br>│   ├── apm-feign-default-http-9.x-plugin-8.10.0.jar<br>│   ├── apm-finagle-6.25.x-plugin-8.10.0.jar<br>│   ├── apm-grpc-1.x-plugin-8.10.0.jar<br>│   ├── apm-guava-eventbus-plugin-8.10.0.jar<br>│   ├── apm-h2-1.x-plugin-8.10.0.jar<br>│   ├── apm-hbase-1.x-2.x-plugin-8.10.0.jar<br>│   ├── apm-hikaricp-3.x-4.x-plugin-8.10.0.jar<br>│   ├── apm-httpClient-4.x-plugin-8.10.0.jar<br>│   ├── apm-httpasyncclient-4.x-plugin-8.10.0.jar<br>│   ├── apm-httpclient-3.x-plugin-8.10.0.jar<br>│   ├── apm-httpclient-5.x-plugin-8.10.0.jar<br>│   ├── apm-httpclient-commons-8.10.0.jar<br>│   ├── apm-hystrix-1.x-plugin-8.10.0.jar<br>│   ├── apm-influxdb-2.x-plugin-8.10.0.jar<br>│   ├── apm-jdbc-commons-8.10.0.jar<br>│   ├── apm-jedis-2.x-plugin-8.10.0.jar<br>│   ├── apm-jetty-client-9.0-plugin-8.10.0.jar<br>│   ├── apm-jetty-client-9.x-plugin-8.10.0.jar<br>│   ├── apm-jetty-server-9.x-plugin-8.10.0.jar<br>│   ├── apm-kafka-commons-8.10.0.jar<br>│   ├── apm-kafka-plugin-8.10.0.jar<br>│   ├── apm-kylin-jdbc-2.6.x-3.x-4.x-plugin-8.10.0.jar<br>│   ├── apm-lettuce-5.x-plugin-8.10.0.jar<br>│   ├── apm-light4j-plugin-8.10.0.jar<br>│   ├── apm-mariadb-2.x-plugin-8.10.0.jar<br>│   ├── apm-mongodb-2.x-plugin-8.10.0.jar<br>│   ├── apm-mongodb-3.x-plugin-8.10.0.jar<br>│   ├── apm-mongodb-4.x-plugin-8.10.0.jar<br>│   ├── apm-mssql-commons-8.10.0.jar<br>│   ├── apm-mssql-jdbc-plugin-8.10.0.jar<br>│   ├── apm-mssql-jtds-1.x-plugin-8.10.0.jar<br>│   ├── apm-mysql-5.x-plugin-8.10.0.jar<br>│   ├── apm-mysql-6.x-plugin-8.10.0.jar<br>│   ├── apm-mysql-8.x-plugin-8.10.0.jar<br>│   ├── apm-mysql-commons-8.10.0.jar<br>│   ├── apm-neo4j-4.x-plugin-8.10.0.jar<br>│   ├── apm-netty-socketio-plugin-8.10.0.jar<br>│   ├── apm-nutz-http-1.x-plugin-8.10.0.jar<br>│   ├── apm-nutz-mvc-annotation-1.x-plugin-8.10.0.jar<br>│   ├── apm-okhttp-3.x-plugin-8.10.0.jar<br>│   ├── apm-okhttp-4.x-plugin-8.10.0.jar<br>│   ├── apm-okhttp-common-8.10.0.jar<br>│   ├── apm-play-2.x-plugin-8.10.0.jar<br>│   ├── apm-postgresql-8.x-plugin-8.10.0.jar<br>│   ├── apm-pulsar-2.2-2.7-plugin-8.10.0.jar<br>│   ├── apm-pulsar-2.8.x-plugin-8.10.0.jar<br>│   ├── apm-pulsar-common-8.10.0.jar<br>│   ├── apm-quasar-plugin-8.10.0.jar<br>│   ├── apm-rabbitmq-5.x-plugin-8.10.0.jar<br>│   ├── apm-redisson-3.x-plugin-8.10.0.jar<br>│   ├── apm-resttemplate-4.3.x-plugin-8.10.0.jar<br>│   ├── apm-rocketmq-3.x-plugin-8.10.0.jar<br>│   ├── apm-rocketmq-4.x-plugin-8.10.0.jar<br>│   ├── apm-servicecomb-java-chassis-1.x-plugin-8.10.0.jar<br>│   ├── apm-sharding-sphere-3.x-plugin-8.10.0.jar<br>│   ├── apm-sharding-sphere-4.1.0-plugin-8.10.0.jar<br>│   ├── apm-shardingsphere-4.0.x-plugin-8.10.0.jar<br>│   ├── apm-shardingsphere-5.0.0-plugin-8.10.0.jar<br>│   ├── apm-solrj-7.x-plugin-8.10.0.jar<br>│   ├── apm-spring-async-annotation-plugin-8.10.0.jar<br>│   ├── apm-spring-cloud-feign-1.x-plugin-8.10.0.jar<br>│   ├── apm-spring-cloud-feign-2.x-plugin-8.10.0.jar<br>│   ├── apm-spring-concurrent-util-4.x-plugin-8.10.0.jar<br>│   ├── apm-spring-core-patch-8.10.0.jar<br>│   ├── apm-spring-kafka-1.x-plugin-8.10.0.jar<br>│   ├── apm-spring-kafka-2.x-plugin-8.10.0.jar<br>│   ├── apm-spring-scheduled-annotation-plugin-8.10.0.jar<br>│   ├── apm-springmvc-annotation-3.x-plugin-8.10.0.jar<br>│   ├── apm-springmvc-annotation-4.x-plugin-8.10.0.jar<br>│   ├── apm-springmvc-annotation-5.x-plugin-8.10.0.jar<br>│   ├── apm-springmvc-annotation-commons-8.10.0.jar<br>│   ├── apm-spymemcached-2.x-plugin-8.10.0.jar<br>│   ├── apm-struts2-2.x-plugin-8.10.0.jar<br>│   ├── apm-tomcat-thread-pool-plugin-8.10.0.jar<br>│   ├── apm-undertow-2.x-plugin-8.10.0.jar<br>│   ├── apm-undertow-worker-thread-pool-plugin-8.10.0.jar<br>│   ├── apm-vertx-core-3.x-plugin-8.10.0.jar<br>│   ├── apm-vertx-core-4.x-plugin-8.10.0.jar<br>│   ├── apm-xmemcached-2.x-plugin-8.10.0.jar<br>│   ├── apm-xxl-job-2.x-plugin-8.10.0.jar<br>│   ├── baidu-brpc-plugin-8.10.0.jar<br>│   ├── dbcp-2.x-plugin-8.10.0.jar<br>│   ├── druid-1.x-plugin-8.10.0.jar<br>│   ├── dubbo-2.7.x-conflict-patch-8.10.0.jar<br>│   ├── dubbo-3.x-conflict-patch-8.10.0.jar<br>│   ├── dubbo-conflict-patch-8.10.0.jar<br>│   ├── graphql-12.x-15.x-plugin-8.10.0.jar<br>│   ├── graphql-16plus-plugin-8.10.0.jar<br>│   ├── graphql-8.x-plugin-8.10.0.jar<br>│   ├── graphql-9.x-plugin-8.10.0.jar<br>│   ├── jsonrpc4j-1.x-plugin-8.10.0.jar<br>│   ├── motan-plugin-8.10.0.jar<br>│   ├── okhttp-2.x-plugin-8.10.0.jar<br>│   ├── resteasy-server-3.x-plugin-8.10.0.jar<br>│   ├── sofa-rpc-plugin-8.10.0.jar<br>│   ├── spring-commons-8.10.0.jar<br>│   ├── spring-webflux-5.x-webclient-plugin-8.10.0.jar<br>│   ├── thrift-plugin-8.10.0.jar<br>│   └── tomcat-7.x-8.x-plugin-8.10.0.jar<br>└── skywalking-agent.jar <strong>Skywalking 的 JavaAgent 入口</strong></p><p><strong>Skywalking-Agent 配置参数：</strong></p><img src="/JeckFS/2022/05/28/Skywalking%E6%A2%B3%E7%90%86/Snipaste_2022-05-28_10-08-20.png" class="" title="This is 1-th image."><p><code>agent.sample_n_per_3_secs=400</code>代表 Skywalking 只会采集 3 秒内的 400 个链路。</p><p><strong>agent.config 配置覆盖</strong></p><p>优先级：<br>探针参数 -&gt; 系统属性 -&gt; 系统环境变量 -&gt; 配置文件</p><ul><li>探针参数：<code>-javaagent:/path/to/skywalking-agent.jar=[option1]=[value],[option2]=[value]</code></li><li>系统属性：<code>-Dskywalking.agent.service_name=skywalking-demo</code> 覆盖 agent.config 中 agent.service_name 的配置。</li><li>系统环境变量：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">agent.config 文件</span></span><br><span class="line">agent.service_name=$&#123;SW_AGENT_NAME:Your_ApplicationName&#125;</span><br><span class="line">logging.level=$&#123;SW_LOGGING_LEVEL:INFO&#125;</span><br></pre></td></tr></table></figure>linux：将变量 SW_AGENT_NAME 配置在 Path 环境变量中。</li></ul><p><strong>自定义配置文件</strong><br>应用场景：若干实例配置基本相同时才会使用同一份配置文件，当实例之间的配置大相径庭时就应该独立使用另一份儿配置文件。</p><p>通过 <code>-Dskywalking_config=/path/to/agent.config</code> 配置即可。</p><p>优先级：<br>指定的 agent 配置文件 -&gt; 默认 agent 配置文件</p><p><strong>TLS</strong></p><p>TLS（Transport Layer Security, 传输层安全性协议）会将应用层报文进行加密后再交由 TCP 进行传输。<br>应用场景：<br>当 Skywalking 后端和受监控的应用在不同的专有网络中时，需要通过 TLS 加密后再传输。</p><p>开启 TLS 的方法参见，书籍 P38 。</p><p><strong>命名空间</strong><br>应用场景：对于某些大型的系统可能包含了很多公司的服务，但这些服务公用一套链路追踪系统，这时候有必要将不同公司的系统追踪数据进行隔离。</p><p>配置：<code>agent.namesapces=default-namespace</code><br>每个命名空间仅能从该命名空间下获取监控指标，当两个应用使用不同的名称空间时，跨进程传播链会中断。</p><blockquote><p>Skywalking 的默认 Header 的 key 是 sw6 ，当设置 agent.namespaces 后 Header 的 key 就变为 namespaces + “-sw6” 。</p></blockquote><p><strong>Application Toolkit API</strong></p><ul><li>需要在 Java 程序中调用</li><li>功能：日志与 TraceId 的整合、自定义某个方法的 Trace 、修改某个 Span 的信息、跨线程的链路追踪等</li></ul><p><strong>OpenTracing API</strong></p><ul><li>需要在 Java 程序中调用</li><li>功能：手动构建分布式链路追踪的上下文</li></ul><p>参见书籍 P39 。</p><h2 id="1-2-Skywalking-后端-与-UI"><a href="#1-2-Skywalking-后端-与-UI" class="headerlink" title="1.2 Skywalking 后端 与 UI"></a>1.2 Skywalking 后端 与 UI</h2><p>Skywalking 后端二级目录：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br></pre></td><td class="code"><pre><span class="line">├── LICENSE</span><br><span class="line">├── NOTICE</span><br><span class="line">├── README.txt</span><br><span class="line">├── bin **Skywalking 后端启动脚本和 UI 模块启动脚本**</span><br><span class="line">│   ├── oapService.bat</span><br><span class="line">│   ├── oapService.sh</span><br><span class="line">│   ├── oapServiceInit.bat</span><br><span class="line">│   ├── oapServiceInit.sh</span><br><span class="line">│   ├── oapServiceNoInit.bat</span><br><span class="line">│   ├── oapServiceNoInit.sh</span><br><span class="line">│   ├── startup.bat</span><br><span class="line">│   ├── startup.sh</span><br><span class="line">│   ├── webappService.bat</span><br><span class="line">│   └── webappService.sh</span><br><span class="line">├── config</span><br><span class="line">│   ├── alarm-settings.yml **报警配置文件**</span><br><span class="line">│   ├── application.yml **后端服务主配置文件，包括 datasource 配置等**</span><br><span class="line">│   ├── component-libraries.yml</span><br><span class="line">│   ├── endpoint-name-grouping.yml</span><br><span class="line">│   ├── envoy-metrics-rules</span><br><span class="line">│   ├── fetcher-prom-rules</span><br><span class="line">│   ├── gateways.yml</span><br><span class="line">│   ├── lal</span><br><span class="line">│   ├── log-mal-rules</span><br><span class="line">│   ├── log4j2.xml **日志配置文件**</span><br><span class="line">│   ├── metadata-service-mapping.yaml</span><br><span class="line">│   ├── meter-analyzer-config</span><br><span class="line">│   ├── oal</span><br><span class="line">│   ├── openapi-definitions</span><br><span class="line">│   ├── otel-oc-rules</span><br><span class="line">│   ├── service-apdex-threshold.yml</span><br><span class="line">│   ├── trace-sampling-policy-settings.yml</span><br><span class="line">│   ├── ui-initialized-templates</span><br><span class="line">│   └── zabbix-rules</span><br><span class="line">├── config-examples</span><br><span class="line">│   ├── alarm-settings.yml</span><br><span class="line">│   ├── lal.yaml</span><br><span class="line">│   └── log-mal.yaml</span><br><span class="line">├── licenses **项目许可文件，项目所依赖的第三方包的许可文件声明**</span><br><span class="line">│   ├── LICENSE-H2.txt</span><br><span class="line">│   ├── LICENSE-antlr4-runtime.txt</span><br><span class="line">│   ├── LICENSE-asm.txt</span><br><span class="line">│   ├── LICENSE-bcpkix-jdk15on.txt</span><br><span class="line">│   ├── LICENSE-bcprov-jdk15on.txt</span><br><span class="line">│   ├── LICENSE-checker-qual.txt</span><br><span class="line">│   ├── LICENSE-compiler.txt</span><br><span class="line">│   ├── LICENSE-consul-client.txt</span><br><span class="line">│   ├── LICENSE-error_prone_annotations.txt</span><br><span class="line">│   ├── LICENSE-graphql-java-tools.txt</span><br><span class="line">│   ├── LICENSE-graphql-java.txt</span><br><span class="line">│   ├── LICENSE-hppc.txt</span><br><span class="line">│   ├── LICENSE-httpcomponents.txt</span><br><span class="line">│   ├── LICENSE-influxdb-java.txt</span><br><span class="line">│   ├── LICENSE-instrumentation-api.txt</span><br><span class="line">│   ├── LICENSE-jersey.txt</span><br><span class="line">│   ├── LICENSE-jopt-simple.txt</span><br><span class="line">│   ├── LICENSE-logback.txt</span><br><span class="line">│   ├── LICENSE-okhttp.txt</span><br><span class="line">│   ├── LICENSE-postgresql.txt</span><br><span class="line">│   ├── LICENSE-proto-google-common-protos.txt</span><br><span class="line">│   ├── LICENSE-protobuf-java-util.txt</span><br><span class="line">│   ├── LICENSE-protobuf-java.txt</span><br><span class="line">│   ├── LICENSE-reactive-streams.txt</span><br><span class="line">│   ├── LICENSE-slf4j.txt</span><br><span class="line">│   ├── LICENSE-zstd-jni.txt</span><br><span class="line">│   └── ui-licenses</span><br><span class="line">├── oap-libs **后端模块运行所需要的 jar 包目录**</span><br><span class="line">│   ├── HdrHistogram-2.1.12.jar</span><br><span class="line">│   ├── HikariCP-3.1.0.jar</span><br><span class="line">│   ├── LatencyUtils-2.0.3.jar</span><br><span class="line">│   ├── agent-analyzer-9.0.0.jar</span><br><span class="line">│   ├── animal-sniffer-annotations-1.19.jar</span><br><span class="line">│   ├── annotations-13.0.jar</span><br><span class="line">│   ├── antlr4-runtime-4.9.2.jar</span><br><span class="line">│   ├── aopalliance-1.0.jar</span><br><span class="line">│   ├── apm-network-9.0.0.jar</span><br><span class="line">│   ├── apollo-client-1.8.0.jar</span><br><span class="line">│   ├── apollo-core-1.8.0.jar</span><br><span class="line">│   ├── armeria-1.14.1.jar</span><br><span class="line">│   ├── armeria-graphql-1.14.1.jar</span><br><span class="line">│   ├── armeria-graphql-protocol-1.14.1.jar</span><br><span class="line">│   ├── armeria-protobuf-1.14.1.jar</span><br><span class="line">│   ├── audience-annotations-0.5.0.jar</span><br><span class="line">│   ├── bcpkix-jdk15on-1.69.jar</span><br><span class="line">│   ├── bcprov-ext-jdk15on-1.69.jar</span><br><span class="line">│   ├── bcprov-jdk15on-1.69.jar</span><br><span class="line">│   ├── bcutil-jdk15on-1.69.jar</span><br><span class="line">│   ├── brotli4j-1.6.0.jar</span><br><span class="line">│   ├── checker-qual-3.12.0.jar</span><br><span class="line">│   ├── classmate-1.5.1.jar</span><br><span class="line">│   ├── client-java-14.0.0.jar</span><br><span class="line">│   ├── client-java-api-14.0.0.jar</span><br><span class="line">│   ├── client-java-proto-14.0.0.jar</span><br><span class="line">│   ├── cluster-consul-plugin-9.0.0.jar</span><br><span class="line">│   ├── cluster-etcd-plugin-9.0.0.jar</span><br><span class="line">│   ├── cluster-kubernetes-plugin-9.0.0.jar</span><br><span class="line">│   ├── cluster-nacos-plugin-9.0.0.jar</span><br><span class="line">│   ├── cluster-standalone-plugin-9.0.0.jar</span><br><span class="line">│   ├── cluster-zookeeper-plugin-9.0.0.jar</span><br><span class="line">│   ├── commons-beanutils-1.9.4.jar</span><br><span class="line">│   ├── commons-codec-1.11.jar</span><br><span class="line">│   ├── commons-collections4-4.4.jar</span><br><span class="line">│   ├── commons-compress-1.21.jar</span><br><span class="line">│   ├── commons-io-2.7.jar</span><br><span class="line">│   ├── commons-lang3-3.12.0.jar</span><br><span class="line">│   ├── commons-logging-1.2.jar</span><br><span class="line">│   ├── commons-text-1.4.jar</span><br><span class="line">│   ├── configuration-api-9.0.0.jar</span><br><span class="line">│   ├── configuration-apollo-9.0.0.jar</span><br><span class="line">│   ├── configuration-consul-9.0.0.jar</span><br><span class="line">│   ├── configuration-discovery-receiver-plugin-9.0.0.jar</span><br><span class="line">│   ├── configuration-etcd-9.0.0.jar</span><br><span class="line">│   ├── configuration-k8s-configmap-9.0.0.jar</span><br><span class="line">│   ├── configuration-nacos-9.0.0.jar</span><br><span class="line">│   ├── configuration-zookeeper-9.0.0.jar</span><br><span class="line">│   ├── consul-client-1.4.2.jar</span><br><span class="line">│   ├── converter-jackson-2.5.0.jar</span><br><span class="line">│   ├── converter-moshi-2.5.0.jar</span><br><span class="line">│   ├── curator-client-4.3.0.jar</span><br><span class="line">│   ├── curator-framework-4.3.0.jar</span><br><span class="line">│   ├── curator-recipes-4.3.0.jar</span><br><span class="line">│   ├── curator-x-discovery-4.3.0.jar</span><br><span class="line">│   ├── envoy-metrics-receiver-plugin-9.0.0.jar</span><br><span class="line">│   ├── error_prone_annotations-2.11.0.jar</span><br><span class="line">│   ├── event-analyzer-9.0.0.jar</span><br><span class="line">│   ├── exporter-9.0.0.jar</span><br><span class="line">│   ├── failsafe-2.3.4.jar</span><br><span class="line">│   ├── failureaccess-1.0.1.jar</span><br><span class="line">│   ├── flatbuffers-java-1.12.0.jar</span><br><span class="line">│   ├── freemarker-2.3.28.jar</span><br><span class="line">│   ├── graphql-java-17.3.jar</span><br><span class="line">│   ├── graphql-java-extended-scalars-17.0.jar</span><br><span class="line">│   ├── graphql-java-tools-12.0.2.jar</span><br><span class="line">│   ├── groovy-3.0.8.jar</span><br><span class="line">│   ├── grpc-api-1.43.2.jar</span><br><span class="line">│   ├── grpc-configuration-sync-9.0.0.jar</span><br><span class="line">│   ├── grpc-context-1.43.2.jar</span><br><span class="line">│   ├── grpc-core-1.43.2.jar</span><br><span class="line">│   ├── grpc-grpclb-1.43.2.jar</span><br><span class="line">│   ├── grpc-netty-1.43.2.jar</span><br><span class="line">│   ├── grpc-protobuf-1.43.2.jar</span><br><span class="line">│   ├── grpc-protobuf-lite-1.43.2.jar</span><br><span class="line">│   ├── grpc-stub-1.43.2.jar</span><br><span class="line">│   ├── gson-2.9.0.jar</span><br><span class="line">│   ├── gson-fire-1.8.5.jar</span><br><span class="line">│   ├── guava-31.1-jre.jar</span><br><span class="line">│   ├── guice-4.1.0.jar</span><br><span class="line">│   ├── h2-2.1.210.jar</span><br><span class="line">│   ├── httpasyncclient-4.1.3.jar</span><br><span class="line">│   ├── httpclient-4.5.13.jar</span><br><span class="line">│   ├── httpcore-4.4.13.jar</span><br><span class="line">│   ├── httpcore-nio-4.4.13.jar</span><br><span class="line">│   ├── influxdb-java-2.15.jar</span><br><span class="line">│   ├── iotdb-session-0.12.5.jar</span><br><span class="line">│   ├── iotdb-thrift-0.12.5.jar</span><br><span class="line">│   ├── j2objc-annotations-1.3.jar</span><br><span class="line">│   ├── jackson-annotations-2.13.2.jar</span><br><span class="line">│   ├── jackson-core-2.13.2.jar</span><br><span class="line">│   ├── jackson-databind-2.13.2.2.jar</span><br><span class="line">│   ├── jackson-datatype-guava-2.9.10.jar</span><br><span class="line">│   ├── jackson-datatype-jdk8-2.9.10.jar</span><br><span class="line">│   ├── jackson-module-afterburner-2.12.2.jar</span><br><span class="line">│   ├── jackson-module-kotlin-2.13.1.jar</span><br><span class="line">│   ├── java-dataloader-3.1.0.jar</span><br><span class="line">│   ├── javassist-3.25.0-GA.jar</span><br><span class="line">│   ├── javax.inject-1.jar</span><br><span class="line">│   ├── jcl-over-slf4j-1.7.30.jar</span><br><span class="line">│   ├── jetcd-common-0.5.3.jar</span><br><span class="line">│   ├── jetcd-core-0.5.3.jar</span><br><span class="line">│   ├── jetcd-resolver-0.5.3.jar</span><br><span class="line">│   ├── joda-time-2.10.5.jar</span><br><span class="line">│   ├── jose4j-0.7.9.jar</span><br><span class="line">│   ├── jsr305-3.0.2.jar</span><br><span class="line">│   ├── kafka-clients-2.4.1.jar</span><br><span class="line">│   ├── kafka-fetcher-plugin-9.0.0.jar</span><br><span class="line">│   ├── kotlin-reflect-1.5.0.jar</span><br><span class="line">│   ├── kotlin-stdlib-1.5.0.jar</span><br><span class="line">│   ├── kotlin-stdlib-common-1.5.0.jar</span><br><span class="line">│   ├── kotlin-stdlib-jdk7-1.5.0.jar</span><br><span class="line">│   ├── kotlin-stdlib-jdk8-1.5.0.jar</span><br><span class="line">│   ├── kotlinx-coroutines-core-1.5.0-native-mt.jar</span><br><span class="line">│   ├── kotlinx-coroutines-core-jvm-1.5.0-native-mt.jar</span><br><span class="line">│   ├── kotlinx-coroutines-jdk8-1.5.0-native-mt.jar</span><br><span class="line">│   ├── kotlinx-coroutines-reactive-1.5.0-native-mt.jar</span><br><span class="line">│   ├── library-client-9.0.0.jar</span><br><span class="line">│   ├── library-datacarrier-queue-9.0.0.jar</span><br><span class="line">│   ├── library-elasticsearch-client-9.0.0.jar</span><br><span class="line">│   ├── library-module-9.0.0.jar</span><br><span class="line">│   ├── library-server-9.0.0.jar</span><br><span class="line">│   ├── library-util-9.0.0.jar</span><br><span class="line">│   ├── libthrift-0.14.1.jar</span><br><span class="line">│   ├── listenablefuture-9999.0-empty-to-avoid-conflict-with-guava.jar</span><br><span class="line">│   ├── log-analyzer-9.0.0.jar</span><br><span class="line">│   ├── log4j-api-2.17.1.jar</span><br><span class="line">│   ├── log4j-core-2.17.1.jar</span><br><span class="line">│   ├── log4j-over-slf4j-1.7.30.jar</span><br><span class="line">│   ├── log4j-slf4j-impl-2.17.1.jar</span><br><span class="line">│   ├── logging-interceptor-3.13.1.jar</span><br><span class="line">│   ├── lz4-java-1.6.0.jar</span><br><span class="line">│   ├── meter-analyzer-9.0.0.jar</span><br><span class="line">│   ├── micrometer-core-1.8.2.jar</span><br><span class="line">│   ├── moshi-1.5.0.jar</span><br><span class="line">│   ├── msgpack-core-0.8.16.jar</span><br><span class="line">│   ├── mvel2-2.4.8.Final.jar</span><br><span class="line">│   ├── nacos-api-1.4.2.jar</span><br><span class="line">│   ├── nacos-client-1.4.2.jar</span><br><span class="line">│   ├── nacos-common-1.4.2.jar</span><br><span class="line">│   ├── netty-buffer-4.1.68.Final.jar</span><br><span class="line">│   ├── netty-codec-4.1.68.Final.jar</span><br><span class="line">│   ├── netty-codec-dns-4.1.68.Final.jar</span><br><span class="line">│   ├── netty-codec-haproxy-4.1.68.Final.jar</span><br><span class="line">│   ├── netty-codec-http-4.1.68.Final.jar</span><br><span class="line">│   ├── netty-codec-http2-4.1.68.Final.jar</span><br><span class="line">│   ├── netty-codec-socks-4.1.68.Final.jar</span><br><span class="line">│   ├── netty-common-4.1.68.Final.jar</span><br><span class="line">│   ├── netty-handler-4.1.68.Final.jar</span><br><span class="line">│   ├── netty-handler-proxy-4.1.68.Final.jar</span><br><span class="line">│   ├── netty-resolver-4.1.68.Final.jar</span><br><span class="line">│   ├── netty-resolver-dns-4.1.68.Final.jar</span><br><span class="line">│   ├── netty-resolver-dns-native-macos-4.1.68.Final-osx-aarch_64.jar</span><br><span class="line">│   ├── netty-resolver-dns-native-macos-4.1.68.Final-osx-x86_64.jar</span><br><span class="line">│   ├── netty-tcnative-boringssl-static-2.0.43.Final.jar</span><br><span class="line">│   ├── netty-transport-4.1.68.Final.jar</span><br><span class="line">│   ├── netty-transport-native-epoll-4.1.68.Final-linux-x86_64.jar</span><br><span class="line">│   ├── netty-transport-native-epoll-4.1.68.Final.jar</span><br><span class="line">│   ├── netty-transport-native-unix-common-4.1.68.Final-linux-x86_64.jar</span><br><span class="line">│   ├── netty-transport-native-unix-common-4.1.68.Final.jar</span><br><span class="line">│   ├── oal-grammar-9.0.0.jar</span><br><span class="line">│   ├── oal-rt-9.0.0.jar</span><br><span class="line">│   ├── okhttp-3.14.9.jar</span><br><span class="line">│   ├── okio-1.17.2.jar</span><br><span class="line">│   ├── otel-receiver-plugin-9.0.0.jar</span><br><span class="line">│   ├── perfmark-api-0.23.0.jar</span><br><span class="line">│   ├── postgresql-42.3.3.jar</span><br><span class="line">│   ├── prometheus-fetcher-plugin-9.0.0.jar</span><br><span class="line">│   ├── proto-google-common-protos-2.0.1.jar</span><br><span class="line">│   ├── protobuf-java-3.19.4.jar</span><br><span class="line">│   ├── protobuf-java-util-3.19.4.jar</span><br><span class="line">│   ├── query-graphql-plugin-9.0.0.jar</span><br><span class="line">│   ├── reactive-streams-1.0.2.jar</span><br><span class="line">│   ├── receiver-proto-9.0.0.jar</span><br><span class="line">│   ├── retrofit-2.5.0.jar</span><br><span class="line">│   ├── server-alarm-plugin-9.0.0.jar</span><br><span class="line">│   ├── server-core-9.0.0.jar</span><br><span class="line">│   ├── server-health-checker-9.0.0.jar</span><br><span class="line">│   ├── server-starter-9.0.0.jar</span><br><span class="line">│   ├── service-rpc-0.12.5.jar</span><br><span class="line">│   ├── simpleclient-0.6.0.jar</span><br><span class="line">│   ├── simpleclient_common-0.6.0.jar</span><br><span class="line">│   ├── simpleclient_hotspot-0.6.0.jar</span><br><span class="line">│   ├── simpleclient_httpserver-0.12.0.jar</span><br><span class="line">│   ├── skywalking-browser-receiver-plugin-9.0.0.jar</span><br><span class="line">│   ├── skywalking-clr-receiver-plugin-9.0.0.jar</span><br><span class="line">│   ├── skywalking-ebpf-receiver-plugin-9.0.0.jar</span><br><span class="line">│   ├── skywalking-event-receiver-plugin-9.0.0.jar</span><br><span class="line">│   ├── skywalking-jvm-receiver-plugin-9.0.0.jar</span><br><span class="line">│   ├── skywalking-log-recevier-plugin-9.0.0.jar</span><br><span class="line">│   ├── skywalking-management-receiver-plugin-9.0.0.jar</span><br><span class="line">│   ├── skywalking-mesh-receiver-plugin-9.0.0.jar</span><br><span class="line">│   ├── skywalking-meter-receiver-plugin-9.0.0.jar</span><br><span class="line">│   ├── skywalking-profile-receiver-plugin-9.0.0.jar</span><br><span class="line">│   ├── skywalking-sharing-server-plugin-9.0.0.jar</span><br><span class="line">│   ├── skywalking-trace-receiver-plugin-9.0.0.jar</span><br><span class="line">│   ├── skywalking-zabbix-receiver-plugin-9.0.0.jar</span><br><span class="line">│   ├── slf4j-api-1.7.30.jar</span><br><span class="line">│   ├── snakeyaml-1.28.jar</span><br><span class="line">│   ├── snappy-java-1.1.7.3.jar</span><br><span class="line">│   ├── storage-elasticsearch-plugin-9.0.0.jar</span><br><span class="line">│   ├── storage-influxdb-plugin-9.0.0.jar</span><br><span class="line">│   ├── storage-iotdb-plugin-9.0.0.jar</span><br><span class="line">│   ├── storage-jdbc-hikaricp-plugin-9.0.0.jar</span><br><span class="line">│   ├── storage-tidb-plugin-9.0.0.jar</span><br><span class="line">│   ├── storage-zipkin-elasticsearch-plugin-9.0.0.jar</span><br><span class="line">│   ├── swagger-annotations-1.6.3.jar</span><br><span class="line">│   ├── telemetry-api-9.0.0.jar</span><br><span class="line">│   ├── telemetry-prometheus-9.0.0.jar</span><br><span class="line">│   ├── tool-profile-snapshot-bootstrap-9.0.0.jar</span><br><span class="line">│   ├── tool-profile-snapshot-server-mock-9.0.0.jar</span><br><span class="line">│   ├── tsfile-0.12.5.jar</span><br><span class="line">│   ├── vavr-0.10.3.jar</span><br><span class="line">│   ├── vavr-match-0.10.3.jar</span><br><span class="line">│   ├── zipkin-2.9.1.jar</span><br><span class="line">│   ├── zipkin-receiver-plugin-9.0.0.jar</span><br><span class="line">│   ├── zookeeper-3.5.7.jar</span><br><span class="line">│   ├── zookeeper-jute-3.5.7.jar</span><br><span class="line">│   └── zstd-jni-1.4.3-1.jar</span><br><span class="line">├── tools</span><br><span class="line">│   └── profile-exporter</span><br><span class="line">└── webapp **UI 部署的文件目录，包含 UI 部署的 jar 包和相关的配置文件 webapp.yaml**</span><br><span class="line">    ├── skywalking-webapp.jar</span><br><span class="line">    └── webapp.yml</span><br></pre></td></tr></table></figure></p><p><strong>Skywalking 后端 application.yaml 配置模块：</strong></p><img src="/JeckFS/2022/05/28/Skywalking%E6%A2%B3%E7%90%86/Snipaste_2022-05-28_14-16-21.png" class="" title="This is 1-th image."><img src="/JeckFS/2022/05/28/Skywalking%E6%A2%B3%E7%90%86/Snipaste_2022-05-28_14-16-44.png" class="" title="This is 1-th image."><p><strong>1. 核心模块配置：</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">core:</span></span><br><span class="line">  <span class="attr">selector:</span> <span class="string">$&#123;SW_CORE:default&#125;</span></span><br><span class="line">  <span class="attr">default:</span></span><br><span class="line">    <span class="comment"># Mixed: Receive agent data, Level 1 aggregate, Level 2 aggregate</span></span><br><span class="line">    <span class="comment"># Receiver: Receive agent data, Level 1 aggregate</span></span><br><span class="line">    <span class="comment"># Aggregator: Level 2 aggregate</span></span><br><span class="line">    <span class="attr">role:</span> <span class="string">$&#123;SW_CORE_ROLE:Mixed&#125;</span> <span class="comment"># Mixed/Receiver/Aggregator</span></span><br><span class="line">    <span class="attr">restHost:</span> <span class="string">$&#123;SW_CORE_REST_HOST:0.0.0.0&#125;</span></span><br><span class="line">    <span class="attr">restPort:</span> <span class="string">$&#123;SW_CORE_REST_PORT:12800&#125;</span></span><br><span class="line">    <span class="attr">restContextPath:</span> <span class="string">$&#123;SW_CORE_REST_CONTEXT_PATH:/&#125;</span></span><br><span class="line">    <span class="attr">restMinThreads:</span> <span class="string">$&#123;SW_CORE_REST_JETTY_MIN_THREADS:1&#125;</span></span><br><span class="line">    <span class="attr">restMaxThreads:</span> <span class="string">$&#123;SW_CORE_REST_JETTY_MAX_THREADS:200&#125;</span></span><br><span class="line">    <span class="attr">restIdleTimeOut:</span> <span class="string">$&#123;SW_CORE_REST_JETTY_IDLE_TIMEOUT:30000&#125;</span></span><br><span class="line">    <span class="attr">restAcceptQueueSize:</span> <span class="string">$&#123;SW_CORE_REST_JETTY_QUEUE_SIZE:0&#125;</span></span><br><span class="line">    <span class="attr">httpMaxRequestHeaderSize:</span> <span class="string">$&#123;SW_CORE_HTTP_MAX_REQUEST_HEADER_SIZE:8192&#125;</span></span><br><span class="line">    <span class="attr">gRPCHost:</span> <span class="string">$&#123;SW_CORE_GRPC_HOST:0.0.0.0&#125;</span></span><br><span class="line">    <span class="attr">gRPCPort:</span> <span class="string">$&#123;SW_CORE_GRPC_PORT:11800&#125;</span></span><br><span class="line">    <span class="attr">maxConcurrentCallsPerConnection:</span> <span class="string">$&#123;SW_CORE_GRPC_MAX_CONCURRENT_CALL:0&#125;</span></span><br><span class="line">    <span class="attr">maxMessageSize:</span> <span class="string">$&#123;SW_CORE_GRPC_MAX_MESSAGE_SIZE:0&#125;</span></span><br><span class="line">    <span class="attr">gRPCThreadPoolQueueSize:</span> <span class="string">$&#123;SW_CORE_GRPC_POOL_QUEUE_SIZE:-1&#125;</span></span><br><span class="line">    <span class="attr">gRPCThreadPoolSize:</span> <span class="string">$&#123;SW_CORE_GRPC_THREAD_POOL_SIZE:-1&#125;</span></span><br><span class="line">    <span class="attr">gRPCSslEnabled:</span> <span class="string">$&#123;SW_CORE_GRPC_SSL_ENABLED:false&#125;</span></span><br><span class="line">    <span class="attr">gRPCSslKeyPath:</span> <span class="string">$&#123;SW_CORE_GRPC_SSL_KEY_PATH:&quot;&quot;&#125;</span></span><br><span class="line">    <span class="attr">gRPCSslCertChainPath:</span> <span class="string">$&#123;SW_CORE_GRPC_SSL_CERT_CHAIN_PATH:&quot;&quot;&#125;</span></span><br><span class="line">    <span class="attr">gRPCSslTrustedCAPath:</span> <span class="string">$&#123;SW_CORE_GRPC_SSL_TRUSTED_CA_PATH:&quot;&quot;&#125;</span></span><br><span class="line">    <span class="attr">downsampling:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">Hour</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">Day</span></span><br><span class="line">    <span class="comment"># Set a timeout on metrics data. After the timeout has expired, the metrics data will automatically be deleted.</span></span><br><span class="line">    <span class="attr">enableDataKeeperExecutor:</span> <span class="string">$&#123;SW_CORE_ENABLE_DATA_KEEPER_EXECUTOR:true&#125;</span> <span class="comment"># Turn it off then automatically metrics data delete will be close.</span></span><br><span class="line">    <span class="attr">dataKeeperExecutePeriod:</span> <span class="string">$&#123;SW_CORE_DATA_KEEPER_EXECUTE_PERIOD:5&#125;</span> <span class="comment"># How often the data keeper executor runs periodically, unit is minute</span></span><br><span class="line">    <span class="attr">recordDataTTL:</span> <span class="string">$&#123;SW_CORE_RECORD_DATA_TTL:3&#125;</span> <span class="comment"># Unit is day</span></span><br><span class="line">    <span class="attr">metricsDataTTL:</span> <span class="string">$&#123;SW_CORE_METRICS_DATA_TTL:7&#125;</span> <span class="comment"># Unit is day</span></span><br><span class="line">    <span class="comment"># The period of L1 aggregation flush to L2 aggregation. Unit is ms.</span></span><br><span class="line">    <span class="attr">l1FlushPeriod:</span> <span class="string">$&#123;SW_CORE_L1_AGGREGATION_FLUSH_PERIOD:500&#125;</span></span><br><span class="line">    <span class="comment"># The threshold of session time. Unit is ms. Default value is 70s.</span></span><br><span class="line">    <span class="attr">storageSessionTimeout:</span> <span class="string">$&#123;SW_CORE_STORAGE_SESSION_TIMEOUT:70000&#125;</span></span><br><span class="line">    <span class="comment"># The period of doing data persistence. Unit is second.Default value is 25s</span></span><br><span class="line">    <span class="attr">persistentPeriod:</span> <span class="string">$&#123;SW_CORE_PERSISTENT_PERIOD:25&#125;</span></span><br><span class="line">    <span class="comment"># Cache metrics data for 1 minute to reduce database queries, and if the OAP cluster changes within that minute,</span></span><br><span class="line">    <span class="comment"># the metrics may not be accurate within that minute.</span></span><br><span class="line">    <span class="attr">enableDatabaseSession:</span> <span class="string">$&#123;SW_CORE_ENABLE_DATABASE_SESSION:true&#125;</span></span><br><span class="line">    <span class="attr">topNReportPeriod:</span> <span class="string">$&#123;SW_CORE_TOPN_REPORT_PERIOD:10&#125;</span> <span class="comment"># top_n record worker report cycle, unit is minute</span></span><br><span class="line">    <span class="comment"># Extra model column are the column defined by in the codes, These columns of model are not required logically in aggregation or further query,</span></span><br><span class="line">    <span class="comment"># and it will cause more load for memory, network of OAP and storage.</span></span><br><span class="line">    <span class="comment"># But, being activated, user could see the name in the storage entities, which make users easier to use 3rd party tool, such as Kibana-&gt;ES, to query the data by themselves.</span></span><br><span class="line">    <span class="attr">activeExtraModelColumns:</span> <span class="string">$&#123;SW_CORE_ACTIVE_EXTRA_MODEL_COLUMNS:false&#125;</span></span><br><span class="line">    <span class="comment"># The max length of service + instance names should be less than 200</span></span><br><span class="line">    <span class="attr">serviceNameMaxLength:</span> <span class="string">$&#123;SW_SERVICE_NAME_MAX_LENGTH:70&#125;</span></span><br><span class="line">    <span class="attr">instanceNameMaxLength:</span> <span class="string">$&#123;SW_INSTANCE_NAME_MAX_LENGTH:70&#125;</span></span><br><span class="line">    <span class="comment"># The max length of service + endpoint names should be less than 240</span></span><br><span class="line">    <span class="attr">endpointNameMaxLength:</span> <span class="string">$&#123;SW_ENDPOINT_NAME_MAX_LENGTH:150&#125;</span></span><br><span class="line">    <span class="comment"># Define the set of span tag keys, which should be searchable through the GraphQL.</span></span><br><span class="line">    <span class="attr">searchableTracesTags:</span> <span class="string">$&#123;SW_SEARCHABLE_TAG_KEYS:http.method,status_code,db.type,db.instance,mq.queue,mq.topic,mq.broker&#125;</span></span><br><span class="line">    <span class="comment"># Define the set of log tag keys, which should be searchable through the GraphQL.</span></span><br><span class="line">    <span class="attr">searchableLogsTags:</span> <span class="string">$&#123;SW_SEARCHABLE_LOGS_TAG_KEYS:level&#125;</span></span><br><span class="line">    <span class="comment"># Define the set of alarm tag keys, which should be searchable through the GraphQL.</span></span><br><span class="line">    <span class="attr">searchableAlarmTags:</span> <span class="string">$&#123;SW_SEARCHABLE_ALARM_TAG_KEYS:level&#125;</span></span><br><span class="line">    <span class="comment"># The number of threads used to prepare metrics data to the storage.</span></span><br><span class="line">    <span class="attr">prepareThreads:</span> <span class="string">$&#123;SW_CORE_PREPARE_THREADS:2&#125;</span></span><br><span class="line">    <span class="comment"># Turn it on then automatically grouping endpoint by the given OpenAPI definitions.</span></span><br><span class="line">    <span class="attr">enableEndpointNameGroupingByOpenapi:</span> <span class="string">$&#123;SW_CORE_ENABLE_ENDPOINT_NAME_GROUPING_BY_OPAENAPI:true&#125;</span></span><br></pre></td></tr></table></figure><p>recordDataTTL ： Recored 记录的数据的有效时间。<br>metricsDataTTL : Metric 数据的有效期。</p><img src="/JeckFS/2022/05/28/Skywalking%E6%A2%B3%E7%90%86/Snipaste_2022-05-30_16-41-09.png" class="" title="This is 1-th image."><p>核心配置主要包括：</p><ul><li>当前实力节点的角色（role）</li><li>地址和端口配置</li><li>metric 指标数据的分析唯独（downsampling）</li><li>数据有效期</li></ul><p>后端服务角色：</p><img src="/JeckFS/2022/05/28/Skywalking%E6%A2%B3%E7%90%86/Snipaste_2022-05-30_15-44-12.png" class="" title="This is 1-th image."><p><strong>2. 集群模块配置</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">cluster:</span></span><br><span class="line">  <span class="attr">selector:</span> <span class="string">$&#123;SW_CLUSTER:standalone&#125;</span></span><br><span class="line">  <span class="attr">standalone:</span></span><br><span class="line">  <span class="comment"># Please check your ZooKeeper is 3.5+, However, it is also compatible with ZooKeeper 3.4.x. Replace the ZooKeeper 3.5+</span></span><br><span class="line">  <span class="comment"># library the oap-libs folder with your ZooKeeper 3.4.x library.</span></span><br><span class="line">  <span class="attr">zookeeper:</span></span><br><span class="line">    <span class="attr">namespace:</span> <span class="string">$&#123;SW_NAMESPACE:&quot;&quot;&#125;</span></span><br><span class="line">    <span class="attr">hostPort:</span> <span class="string">$&#123;SW_CLUSTER_ZK_HOST_PORT:localhost:2181&#125;</span></span><br><span class="line">    <span class="comment"># Retry Policy</span></span><br><span class="line">    <span class="attr">baseSleepTimeMs:</span> <span class="string">$&#123;SW_CLUSTER_ZK_SLEEP_TIME:1000&#125;</span> <span class="comment"># initial amount of time to wait between retries</span></span><br><span class="line">    <span class="attr">maxRetries:</span> <span class="string">$&#123;SW_CLUSTER_ZK_MAX_RETRIES:3&#125;</span> <span class="comment"># max number of times to retry</span></span><br><span class="line">    <span class="comment"># Enable ACL</span></span><br><span class="line">    <span class="attr">enableACL:</span> <span class="string">$&#123;SW_ZK_ENABLE_ACL:false&#125;</span> <span class="comment"># disable ACL in default</span></span><br><span class="line">    <span class="attr">schema:</span> <span class="string">$&#123;SW_ZK_SCHEMA:digest&#125;</span> <span class="comment"># only support digest schema</span></span><br><span class="line">    <span class="attr">expression:</span> <span class="string">$&#123;SW_ZK_EXPRESSION:skywalking:skywalking&#125;</span></span><br><span class="line">    <span class="attr">internalComHost:</span> <span class="string">$&#123;SW_CLUSTER_INTERNAL_COM_HOST:&quot;&quot;&#125;</span></span><br><span class="line">    <span class="attr">internalComPort:</span> <span class="string">$&#123;SW_CLUSTER_INTERNAL_COM_PORT:-1&#125;</span></span><br><span class="line">  <span class="attr">kubernetes:</span></span><br><span class="line">    <span class="attr">namespace:</span> <span class="string">$&#123;SW_CLUSTER_K8S_NAMESPACE:default&#125;</span></span><br><span class="line">    <span class="attr">labelSelector:</span> <span class="string">$&#123;SW_CLUSTER_K8S_LABEL:app=collector,release=skywalking&#125;</span></span><br><span class="line">    <span class="attr">uidEnvName:</span> <span class="string">$&#123;SW_CLUSTER_K8S_UID:SKYWALKING_COLLECTOR_UID&#125;</span></span><br><span class="line">  <span class="attr">consul:</span></span><br><span class="line">    <span class="attr">serviceName:</span> <span class="string">$&#123;SW_SERVICE_NAME:&quot;SkyWalking_OAP_Cluster&quot;&#125;</span></span><br><span class="line">    <span class="comment"># Consul cluster nodes, example: 10.0.0.1:8500,10.0.0.2:8500,10.0.0.3:8500</span></span><br><span class="line">    <span class="attr">hostPort:</span> <span class="string">$&#123;SW_CLUSTER_CONSUL_HOST_PORT:localhost:8500&#125;</span></span><br><span class="line">    <span class="attr">aclToken:</span> <span class="string">$&#123;SW_CLUSTER_CONSUL_ACLTOKEN:&quot;&quot;&#125;</span></span><br><span class="line">    <span class="attr">internalComHost:</span> <span class="string">$&#123;SW_CLUSTER_INTERNAL_COM_HOST:&quot;&quot;&#125;</span></span><br><span class="line">    <span class="attr">internalComPort:</span> <span class="string">$&#123;SW_CLUSTER_INTERNAL_COM_PORT:-1&#125;</span></span><br><span class="line">  <span class="attr">etcd:</span></span><br><span class="line">    <span class="comment"># etcd cluster nodes, example: 10.0.0.1:2379,10.0.0.2:2379,10.0.0.3:2379</span></span><br><span class="line">    <span class="attr">endpoints:</span> <span class="string">$&#123;SW_CLUSTER_ETCD_ENDPOINTS:localhost:2379&#125;</span></span><br><span class="line">    <span class="attr">namespace:</span> <span class="string">$&#123;SW_CLUSTER_ETCD_NAMESPACE:/skywalking&#125;</span></span><br><span class="line">    <span class="attr">serviceName:</span> <span class="string">$&#123;SW_CLUSTER_ETCD_SERVICE_NAME:&quot;SkyWalking_OAP_Cluster&quot;&#125;</span></span><br><span class="line">    <span class="attr">authentication:</span> <span class="string">$&#123;SW_CLUSTER_ETCD_AUTHENTICATION:false&#125;</span></span><br><span class="line">    <span class="attr">user:</span> <span class="string">$&#123;SW_CLUSTER_ETCD_USER:&#125;</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">$&#123;SW_CLUSTER_ETCD_PASSWORD:&#125;</span></span><br><span class="line">    <span class="attr">internalComHost:</span> <span class="string">$&#123;SW_CLUSTER_INTERNAL_COM_HOST:&quot;&quot;&#125;</span></span><br><span class="line">    <span class="attr">internalComPort:</span> <span class="string">$&#123;SW_CLUSTER_INTERNAL_COM_PORT:-1&#125;</span></span><br><span class="line">  <span class="attr">nacos:</span></span><br><span class="line">    <span class="attr">serviceName:</span> <span class="string">$&#123;SW_SERVICE_NAME:&quot;SkyWalking_OAP_Cluster&quot;&#125;</span></span><br><span class="line">    <span class="attr">hostPort:</span> <span class="string">$&#123;SW_CLUSTER_NACOS_HOST_PORT:localhost:8848&#125;</span></span><br><span class="line">    <span class="comment"># Nacos Configuration namespace</span></span><br><span class="line">    <span class="attr">namespace:</span> <span class="string">$&#123;SW_CLUSTER_NACOS_NAMESPACE:&quot;public&quot;&#125;</span></span><br><span class="line">    <span class="comment"># Nacos auth username</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">$&#123;SW_CLUSTER_NACOS_USERNAME:&quot;&quot;&#125;</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">$&#123;SW_CLUSTER_NACOS_PASSWORD:&quot;&quot;&#125;</span></span><br><span class="line">    <span class="comment"># Nacos auth accessKey</span></span><br><span class="line">    <span class="attr">accessKey:</span> <span class="string">$&#123;SW_CLUSTER_NACOS_ACCESSKEY:&quot;&quot;&#125;</span></span><br><span class="line">    <span class="attr">secretKey:</span> <span class="string">$&#123;SW_CLUSTER_NACOS_SECRETKEY:&quot;&quot;&#125;</span></span><br><span class="line">    <span class="attr">internalComHost:</span> <span class="string">$&#123;SW_CLUSTER_INTERNAL_COM_HOST:&quot;&quot;&#125;</span></span><br><span class="line">    <span class="attr">internalComPort:</span> <span class="string">$&#123;SW_CLUSTER_INTERNAL_COM_PORT:-1&#125;</span></span><br></pre></td></tr></table></figure><p><strong>存储模块配置</strong><br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">storage:</span></span><br><span class="line">  <span class="attr">selector:</span> <span class="string">$&#123;SW_STORAGE:h2&#125;</span></span><br><span class="line">  <span class="attr">elasticsearch:</span></span><br><span class="line">    <span class="attr">namespace:</span> <span class="string">$&#123;SW_NAMESPACE:&quot;&quot;&#125;</span></span><br><span class="line">    <span class="attr">clusterNodes:</span> <span class="string">$&#123;SW_STORAGE_ES_CLUSTER_NODES:localhost:9200&#125;</span></span><br><span class="line">    <span class="attr">protocol:</span> <span class="string">$&#123;SW_STORAGE_ES_HTTP_PROTOCOL:&quot;http&quot;&#125;</span></span><br><span class="line">    <span class="attr">connectTimeout:</span> <span class="string">$&#123;SW_STORAGE_ES_CONNECT_TIMEOUT:3000&#125;</span></span><br><span class="line">    <span class="attr">socketTimeout:</span> <span class="string">$&#123;SW_STORAGE_ES_SOCKET_TIMEOUT:30000&#125;</span></span><br><span class="line">    <span class="attr">responseTimeout:</span> <span class="string">$&#123;SW_STORAGE_ES_RESPONSE_TIMEOUT:15000&#125;</span></span><br><span class="line">    <span class="attr">numHttpClientThread:</span> <span class="string">$&#123;SW_STORAGE_ES_NUM_HTTP_CLIENT_THREAD:0&#125;</span></span><br><span class="line">    <span class="attr">user:</span> <span class="string">$&#123;SW_ES_USER:&quot;&quot;&#125;</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">$&#123;SW_ES_PASSWORD:&quot;&quot;&#125;</span></span><br><span class="line">    <span class="attr">trustStorePath:</span> <span class="string">$&#123;SW_STORAGE_ES_SSL_JKS_PATH:&quot;&quot;&#125;</span></span><br><span class="line">    <span class="attr">trustStorePass:</span> <span class="string">$&#123;SW_STORAGE_ES_SSL_JKS_PASS:&quot;&quot;&#125;</span></span><br><span class="line">    <span class="attr">secretsManagementFile:</span> <span class="string">$&#123;SW_ES_SECRETS_MANAGEMENT_FILE:&quot;&quot;&#125;</span> <span class="comment"># Secrets management file in the properties format includes the username, password, which are managed by 3rd party tool.</span></span><br><span class="line">    <span class="attr">dayStep:</span> <span class="string">$&#123;SW_STORAGE_DAY_STEP:1&#125;</span> <span class="comment"># Represent the number of days in the one minute/hour/day index.</span></span><br><span class="line">    <span class="attr">indexShardsNumber:</span> <span class="string">$&#123;SW_STORAGE_ES_INDEX_SHARDS_NUMBER:1&#125;</span> <span class="comment"># Shard number of new indexes</span></span><br><span class="line">    <span class="attr">indexReplicasNumber:</span> <span class="string">$&#123;SW_STORAGE_ES_INDEX_REPLICAS_NUMBER:1&#125;</span> <span class="comment"># Replicas number of new indexes</span></span><br><span class="line">    <span class="comment"># Super data set has been defined in the codes, such as trace segments.The following 3 config would be improve es performance when storage super size data in es.</span></span><br><span class="line">    <span class="attr">superDatasetDayStep:</span> <span class="string">$&#123;SW_SUPERDATASET_STORAGE_DAY_STEP:-1&#125;</span> <span class="comment"># Represent the number of days in the super size dataset record index, the default value is the same as dayStep when the value is less than 0</span></span><br><span class="line">    <span class="attr">superDatasetIndexShardsFactor:</span> <span class="string">$&#123;SW_STORAGE_ES_SUPER_DATASET_INDEX_SHARDS_FACTOR:5&#125;</span> <span class="comment">#  This factor provides more shards for the super data set, shards number = indexShardsNumber * superDatasetIndexShardsFactor. Also, this factor effects Zipkin and Jaeger traces.</span></span><br><span class="line">    <span class="attr">superDatasetIndexReplicasNumber:</span> <span class="string">$&#123;SW_STORAGE_ES_SUPER_DATASET_INDEX_REPLICAS_NUMBER:0&#125;</span> <span class="comment"># Represent the replicas number in the super size dataset record index, the default value is 0.</span></span><br><span class="line">    <span class="attr">indexTemplateOrder:</span> <span class="string">$&#123;SW_STORAGE_ES_INDEX_TEMPLATE_ORDER:0&#125;</span> <span class="comment"># the order of index template</span></span><br><span class="line">    <span class="attr">bulkActions:</span> <span class="string">$&#123;SW_STORAGE_ES_BULK_ACTIONS:5000&#125;</span> <span class="comment"># Execute the async bulk record data every $&#123;SW_STORAGE_ES_BULK_ACTIONS&#125; requests</span></span><br><span class="line">    <span class="comment"># flush the bulk every 10 seconds whatever the number of requests</span></span><br><span class="line">    <span class="comment"># INT(flushInterval * 2/3) would be used for index refresh period.</span></span><br><span class="line">    <span class="attr">flushInterval:</span> <span class="string">$&#123;SW_STORAGE_ES_FLUSH_INTERVAL:15&#125;</span></span><br><span class="line">    <span class="attr">concurrentRequests:</span> <span class="string">$&#123;SW_STORAGE_ES_CONCURRENT_REQUESTS:2&#125;</span> <span class="comment"># the number of concurrent requests</span></span><br><span class="line">    <span class="attr">resultWindowMaxSize:</span> <span class="string">$&#123;SW_STORAGE_ES_QUERY_MAX_WINDOW_SIZE:10000&#125;</span></span><br><span class="line">    <span class="attr">metadataQueryMaxSize:</span> <span class="string">$&#123;SW_STORAGE_ES_QUERY_MAX_SIZE:10000&#125;</span></span><br><span class="line">    <span class="attr">scrollingBatchSize:</span> <span class="string">$&#123;SW_STORAGE_ES_SCROLLING_BATCH_SIZE:5000&#125;</span></span><br><span class="line">    <span class="attr">segmentQueryMaxSize:</span> <span class="string">$&#123;SW_STORAGE_ES_QUERY_SEGMENT_SIZE:200&#125;</span></span><br><span class="line">    <span class="attr">profileTaskQueryMaxSize:</span> <span class="string">$&#123;SW_STORAGE_ES_QUERY_PROFILE_TASK_SIZE:200&#125;</span></span><br><span class="line">    <span class="attr">oapAnalyzer:</span> <span class="string">$&#123;SW_STORAGE_ES_OAP_ANALYZER:&quot;&#123;\&quot;analyzer\&quot;:&#123;\&quot;oap_analyzer\&quot;:&#123;\&quot;type\&quot;:\&quot;stop\&quot;&#125;&#125;&#125;&quot;&#125;</span> <span class="comment"># the oap analyzer.</span></span><br><span class="line">    <span class="attr">oapLogAnalyzer:</span> <span class="string">$&#123;SW_STORAGE_ES_OAP_LOG_ANALYZER:&quot;&#123;\&quot;analyzer\&quot;:&#123;\&quot;oap_log_analyzer\&quot;:&#123;\&quot;type\&quot;:\&quot;standard\&quot;&#125;&#125;&#125;&quot;&#125;</span> <span class="comment"># the oap log analyzer. It could be customized by the ES analyzer configuration to support more language log formats, such as Chinese log, Japanese log and etc.</span></span><br><span class="line">    <span class="attr">advanced:</span> <span class="string">$&#123;SW_STORAGE_ES_ADVANCED:&quot;&quot;&#125;</span></span><br><span class="line">  <span class="attr">h2:</span></span><br><span class="line">    <span class="attr">driver:</span> <span class="string">$&#123;SW_STORAGE_H2_DRIVER:org.h2.jdbcx.JdbcDataSource&#125;</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">$&#123;SW_STORAGE_H2_URL:jdbc:h2:mem:skywalking-oap-db;DB_CLOSE_DELAY=-1&#125;</span></span><br><span class="line">    <span class="attr">user:</span> <span class="string">$&#123;SW_STORAGE_H2_USER:sa&#125;</span></span><br><span class="line">    <span class="attr">metadataQueryMaxSize:</span> <span class="string">$&#123;SW_STORAGE_H2_QUERY_MAX_SIZE:5000&#125;</span></span><br><span class="line">    <span class="attr">maxSizeOfArrayColumn:</span> <span class="string">$&#123;SW_STORAGE_MAX_SIZE_OF_ARRAY_COLUMN:20&#125;</span></span><br><span class="line">    <span class="attr">numOfSearchableValuesPerTag:</span> <span class="string">$&#123;SW_STORAGE_NUM_OF_SEARCHABLE_VALUES_PER_TAG:2&#125;</span></span><br><span class="line">    <span class="attr">maxSizeOfBatchSql:</span> <span class="string">$&#123;SW_STORAGE_MAX_SIZE_OF_BATCH_SQL:100&#125;</span></span><br><span class="line">    <span class="attr">asyncBatchPersistentPoolSize:</span> <span class="string">$&#123;SW_STORAGE_ASYNC_BATCH_PERSISTENT_POOL_SIZE:1&#125;</span></span><br><span class="line">  <span class="attr">mysql:</span></span><br><span class="line">    <span class="attr">properties:</span></span><br><span class="line">      <span class="attr">jdbcUrl:</span> <span class="string">$&#123;SW_JDBC_URL:&quot;jdbc:mysql://localhost:3306/swtest?rewriteBatchedStatements=true&quot;&#125;</span></span><br><span class="line">      <span class="attr">dataSource.user:</span> <span class="string">$&#123;SW_DATA_SOURCE_USER:root&#125;</span></span><br><span class="line">      <span class="attr">dataSource.password:</span> <span class="string">$&#123;SW_DATA_SOURCE_PASSWORD:root@1234&#125;</span></span><br><span class="line">      <span class="attr">dataSource.cachePrepStmts:</span> <span class="string">$&#123;SW_DATA_SOURCE_CACHE_PREP_STMTS:true&#125;</span></span><br><span class="line">      <span class="attr">dataSource.prepStmtCacheSize:</span> <span class="string">$&#123;SW_DATA_SOURCE_PREP_STMT_CACHE_SQL_SIZE:250&#125;</span></span><br><span class="line">      <span class="attr">dataSource.prepStmtCacheSqlLimit:</span> <span class="string">$&#123;SW_DATA_SOURCE_PREP_STMT_CACHE_SQL_LIMIT:2048&#125;</span></span><br><span class="line">      <span class="attr">dataSource.useServerPrepStmts:</span> <span class="string">$&#123;SW_DATA_SOURCE_USE_SERVER_PREP_STMTS:true&#125;</span></span><br><span class="line">    <span class="attr">metadataQueryMaxSize:</span> <span class="string">$&#123;SW_STORAGE_MYSQL_QUERY_MAX_SIZE:5000&#125;</span></span><br><span class="line">    <span class="attr">maxSizeOfArrayColumn:</span> <span class="string">$&#123;SW_STORAGE_MAX_SIZE_OF_ARRAY_COLUMN:20&#125;</span></span><br><span class="line">    <span class="attr">numOfSearchableValuesPerTag:</span> <span class="string">$&#123;SW_STORAGE_NUM_OF_SEARCHABLE_VALUES_PER_TAG:2&#125;</span></span><br><span class="line">    <span class="attr">maxSizeOfBatchSql:</span> <span class="string">$&#123;SW_STORAGE_MAX_SIZE_OF_BATCH_SQL:2000&#125;</span></span><br><span class="line">    <span class="attr">asyncBatchPersistentPoolSize:</span> <span class="string">$&#123;SW_STORAGE_ASYNC_BATCH_PERSISTENT_POOL_SIZE:4&#125;</span></span><br><span class="line">  <span class="attr">tidb:</span></span><br><span class="line">    <span class="attr">properties:</span></span><br><span class="line">      <span class="attr">jdbcUrl:</span> <span class="string">$&#123;SW_JDBC_URL:&quot;jdbc:mysql://localhost:4000/tidbswtest?rewriteBatchedStatements=true&quot;&#125;</span></span><br><span class="line">      <span class="attr">dataSource.user:</span> <span class="string">$&#123;SW_DATA_SOURCE_USER:root&#125;</span></span><br><span class="line">      <span class="attr">dataSource.password:</span> <span class="string">$&#123;SW_DATA_SOURCE_PASSWORD:&quot;&quot;&#125;</span></span><br><span class="line">      <span class="attr">dataSource.cachePrepStmts:</span> <span class="string">$&#123;SW_DATA_SOURCE_CACHE_PREP_STMTS:true&#125;</span></span><br><span class="line">      <span class="attr">dataSource.prepStmtCacheSize:</span> <span class="string">$&#123;SW_DATA_SOURCE_PREP_STMT_CACHE_SQL_SIZE:250&#125;</span></span><br><span class="line">      <span class="attr">dataSource.prepStmtCacheSqlLimit:</span> <span class="string">$&#123;SW_DATA_SOURCE_PREP_STMT_CACHE_SQL_LIMIT:2048&#125;</span></span><br><span class="line">      <span class="attr">dataSource.useServerPrepStmts:</span> <span class="string">$&#123;SW_DATA_SOURCE_USE_SERVER_PREP_STMTS:true&#125;</span></span><br><span class="line">      <span class="attr">dataSource.useAffectedRows:</span> <span class="string">$&#123;SW_DATA_SOURCE_USE_AFFECTED_ROWS:true&#125;</span></span><br><span class="line">    <span class="attr">metadataQueryMaxSize:</span> <span class="string">$&#123;SW_STORAGE_MYSQL_QUERY_MAX_SIZE:5000&#125;</span></span><br><span class="line">    <span class="attr">maxSizeOfArrayColumn:</span> <span class="string">$&#123;SW_STORAGE_MAX_SIZE_OF_ARRAY_COLUMN:20&#125;</span></span><br><span class="line">    <span class="attr">numOfSearchableValuesPerTag:</span> <span class="string">$&#123;SW_STORAGE_NUM_OF_SEARCHABLE_VALUES_PER_TAG:2&#125;</span></span><br><span class="line">    <span class="attr">maxSizeOfBatchSql:</span> <span class="string">$&#123;SW_STORAGE_MAX_SIZE_OF_BATCH_SQL:2000&#125;</span></span><br><span class="line">    <span class="attr">asyncBatchPersistentPoolSize:</span> <span class="string">$&#123;SW_STORAGE_ASYNC_BATCH_PERSISTENT_POOL_SIZE:4&#125;</span></span><br><span class="line">  <span class="attr">influxdb:</span></span><br><span class="line">    <span class="comment"># InfluxDB configuration</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">$&#123;SW_STORAGE_INFLUXDB_URL:http://localhost:8086&#125;</span></span><br><span class="line">    <span class="attr">user:</span> <span class="string">$&#123;SW_STORAGE_INFLUXDB_USER:root&#125;</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">$&#123;SW_STORAGE_INFLUXDB_PASSWORD:&#125;</span></span><br><span class="line">    <span class="attr">database:</span> <span class="string">$&#123;SW_STORAGE_INFLUXDB_DATABASE:skywalking&#125;</span></span><br><span class="line">    <span class="attr">actions:</span> <span class="string">$&#123;SW_STORAGE_INFLUXDB_ACTIONS:1000&#125;</span> <span class="comment"># the number of actions to collect</span></span><br><span class="line">    <span class="attr">duration:</span> <span class="string">$&#123;SW_STORAGE_INFLUXDB_DURATION:1000&#125;</span> <span class="comment"># the time to wait at most (milliseconds)</span></span><br><span class="line">    <span class="attr">batchEnabled:</span> <span class="string">$&#123;SW_STORAGE_INFLUXDB_BATCH_ENABLED:true&#125;</span></span><br><span class="line">    <span class="attr">fetchTaskLogMaxSize:</span> <span class="string">$&#123;SW_STORAGE_INFLUXDB_FETCH_TASK_LOG_MAX_SIZE:5000&#125;</span> <span class="comment"># the max number of fetch task log in a request</span></span><br><span class="line">    <span class="attr">connectionResponseFormat:</span> <span class="string">$&#123;SW_STORAGE_INFLUXDB_CONNECTION_RESPONSE_FORMAT:MSGPACK&#125;</span> <span class="comment"># the response format of connection to influxDB, cannot be anything but MSGPACK or JSON.</span></span><br><span class="line">  <span class="attr">postgresql:</span></span><br><span class="line">    <span class="attr">properties:</span></span><br><span class="line">      <span class="attr">jdbcUrl:</span> <span class="string">$&#123;SW_JDBC_URL:&quot;jdbc:postgresql://localhost:5432/skywalking&quot;&#125;</span></span><br><span class="line">      <span class="attr">dataSource.user:</span> <span class="string">$&#123;SW_DATA_SOURCE_USER:postgres&#125;</span></span><br><span class="line">      <span class="attr">dataSource.password:</span> <span class="string">$&#123;SW_DATA_SOURCE_PASSWORD:123456&#125;</span></span><br><span class="line">      <span class="attr">dataSource.cachePrepStmts:</span> <span class="string">$&#123;SW_DATA_SOURCE_CACHE_PREP_STMTS:true&#125;</span></span><br><span class="line">      <span class="attr">dataSource.prepStmtCacheSize:</span> <span class="string">$&#123;SW_DATA_SOURCE_PREP_STMT_CACHE_SQL_SIZE:250&#125;</span></span><br><span class="line">      <span class="attr">dataSource.prepStmtCacheSqlLimit:</span> <span class="string">$&#123;SW_DATA_SOURCE_PREP_STMT_CACHE_SQL_LIMIT:2048&#125;</span></span><br><span class="line">      <span class="attr">dataSource.useServerPrepStmts:</span> <span class="string">$&#123;SW_DATA_SOURCE_USE_SERVER_PREP_STMTS:true&#125;</span></span><br><span class="line">    <span class="attr">metadataQueryMaxSize:</span> <span class="string">$&#123;SW_STORAGE_MYSQL_QUERY_MAX_SIZE:5000&#125;</span></span><br><span class="line">    <span class="attr">maxSizeOfArrayColumn:</span> <span class="string">$&#123;SW_STORAGE_MAX_SIZE_OF_ARRAY_COLUMN:20&#125;</span></span><br><span class="line">    <span class="attr">numOfSearchableValuesPerTag:</span> <span class="string">$&#123;SW_STORAGE_NUM_OF_SEARCHABLE_VALUES_PER_TAG:2&#125;</span></span><br><span class="line">    <span class="attr">maxSizeOfBatchSql:</span> <span class="string">$&#123;SW_STORAGE_MAX_SIZE_OF_BATCH_SQL:2000&#125;</span></span><br><span class="line">    <span class="attr">asyncBatchPersistentPoolSize:</span> <span class="string">$&#123;SW_STORAGE_ASYNC_BATCH_PERSISTENT_POOL_SIZE:4&#125;</span></span><br><span class="line">  <span class="attr">zipkin-elasticsearch:</span></span><br><span class="line">    <span class="attr">namespace:</span> <span class="string">$&#123;SW_NAMESPACE:&quot;&quot;&#125;</span></span><br><span class="line">    <span class="attr">clusterNodes:</span> <span class="string">$&#123;SW_STORAGE_ES_CLUSTER_NODES:localhost:9200&#125;</span></span><br><span class="line">    <span class="attr">protocol:</span> <span class="string">$&#123;SW_STORAGE_ES_HTTP_PROTOCOL:&quot;http&quot;&#125;</span></span><br><span class="line">    <span class="attr">trustStorePath:</span> <span class="string">$&#123;SW_STORAGE_ES_SSL_JKS_PATH:&quot;&quot;&#125;</span></span><br><span class="line">    <span class="attr">trustStorePass:</span> <span class="string">$&#123;SW_STORAGE_ES_SSL_JKS_PASS:&quot;&quot;&#125;</span></span><br><span class="line">    <span class="attr">dayStep:</span> <span class="string">$&#123;SW_STORAGE_DAY_STEP:1&#125;</span> <span class="comment"># Represent the number of days in the one minute/hour/day index.</span></span><br><span class="line">    <span class="attr">indexShardsNumber:</span> <span class="string">$&#123;SW_STORAGE_ES_INDEX_SHARDS_NUMBER:1&#125;</span> <span class="comment"># Shard number of new indexes</span></span><br><span class="line">    <span class="attr">indexReplicasNumber:</span> <span class="string">$&#123;SW_STORAGE_ES_INDEX_REPLICAS_NUMBER:1&#125;</span> <span class="comment"># Replicas number of new indexes</span></span><br><span class="line">    <span class="comment"># Super data set has been defined in the codes, such as trace segments.The following 3 config would be improve es performance when storage super size data in es.</span></span><br><span class="line">    <span class="attr">superDatasetDayStep:</span> <span class="string">$&#123;SW_SUPERDATASET_STORAGE_DAY_STEP:-1&#125;</span> <span class="comment"># Represent the number of days in the super size dataset record index, the default value is the same as dayStep when the value is less than 0</span></span><br><span class="line">    <span class="attr">superDatasetIndexShardsFactor:</span> <span class="string">$&#123;SW_STORAGE_ES_SUPER_DATASET_INDEX_SHARDS_FACTOR:5&#125;</span> <span class="comment">#  This factor provides more shards for the super data set, shards number = indexShardsNumber * superDatasetIndexShardsFactor. Also, this factor effects Zipkin and Jaeger traces.</span></span><br><span class="line">    <span class="attr">superDatasetIndexReplicasNumber:</span> <span class="string">$&#123;SW_STORAGE_ES_SUPER_DATASET_INDEX_REPLICAS_NUMBER:0&#125;</span> <span class="comment"># Represent the replicas number in the super size dataset record index, the default value is 0.</span></span><br><span class="line">    <span class="attr">user:</span> <span class="string">$&#123;SW_ES_USER:&quot;&quot;&#125;</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">$&#123;SW_ES_PASSWORD:&quot;&quot;&#125;</span></span><br><span class="line">    <span class="attr">secretsManagementFile:</span> <span class="string">$&#123;SW_ES_SECRETS_MANAGEMENT_FILE:&quot;&quot;&#125;</span> <span class="comment"># Secrets management file in the properties format includes the username, password, which are managed by 3rd party tool.</span></span><br><span class="line">    <span class="attr">bulkActions:</span> <span class="string">$&#123;SW_STORAGE_ES_BULK_ACTIONS:5000&#125;</span> <span class="comment"># Execute the async bulk record data every $&#123;SW_STORAGE_ES_BULK_ACTIONS&#125; requests</span></span><br><span class="line">    <span class="comment"># flush the bulk every 10 seconds whatever the number of requests</span></span><br><span class="line">    <span class="comment"># INT(flushInterval * 2/3) would be used for index refresh period.</span></span><br><span class="line">    <span class="attr">flushInterval:</span> <span class="string">$&#123;SW_STORAGE_ES_FLUSH_INTERVAL:15&#125;</span></span><br><span class="line">    <span class="attr">concurrentRequests:</span> <span class="string">$&#123;SW_STORAGE_ES_CONCURRENT_REQUESTS:2&#125;</span> <span class="comment"># the number of concurrent requests</span></span><br><span class="line">    <span class="attr">resultWindowMaxSize:</span> <span class="string">$&#123;SW_STORAGE_ES_QUERY_MAX_WINDOW_SIZE:10000&#125;</span></span><br><span class="line">    <span class="attr">metadataQueryMaxSize:</span> <span class="string">$&#123;SW_STORAGE_ES_QUERY_MAX_SIZE:5000&#125;</span></span><br><span class="line">    <span class="attr">segmentQueryMaxSize:</span> <span class="string">$&#123;SW_STORAGE_ES_QUERY_SEGMENT_SIZE:200&#125;</span></span><br><span class="line">    <span class="attr">profileTaskQueryMaxSize:</span> <span class="string">$&#123;SW_STORAGE_ES_QUERY_PROFILE_TASK_SIZE:200&#125;</span></span><br><span class="line">    <span class="attr">oapAnalyzer:</span> <span class="string">$&#123;SW_STORAGE_ES_OAP_ANALYZER:&quot;&#123;\&quot;analyzer\&quot;:&#123;\&quot;oap_analyzer\&quot;:&#123;\&quot;type\&quot;:\&quot;stop\&quot;&#125;&#125;&#125;&quot;&#125;</span> <span class="comment"># the oap analyzer.</span></span><br><span class="line">    <span class="attr">oapLogAnalyzer:</span> <span class="string">$&#123;SW_STORAGE_ES_OAP_LOG_ANALYZER:&quot;&#123;\&quot;analyzer\&quot;:&#123;\&quot;oap_log_analyzer\&quot;:&#123;\&quot;type\&quot;:\&quot;standard\&quot;&#125;&#125;&#125;&quot;&#125;</span> <span class="comment"># the oap log analyzer. It could be customized by the ES analyzer configuration to support more language log formats, such as Chinese log, Japanese log and etc.</span></span><br><span class="line">    <span class="attr">advanced:</span> <span class="string">$&#123;SW_STORAGE_ES_ADVANCED:&quot;&quot;&#125;</span></span><br><span class="line">  <span class="attr">iotdb:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">$&#123;SW_STORAGE_IOTDB_HOST:127.0.0.1&#125;</span></span><br><span class="line">    <span class="attr">rpcPort:</span> <span class="string">$&#123;SW_STORAGE_IOTDB_RPC_PORT:6667&#125;</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">$&#123;SW_STORAGE_IOTDB_USERNAME:root&#125;</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">$&#123;SW_STORAGE_IOTDB_PASSWORD:root&#125;</span></span><br><span class="line">    <span class="attr">storageGroup:</span> <span class="string">$&#123;SW_STORAGE_IOTDB_STORAGE_GROUP:root.skywalking&#125;</span></span><br><span class="line">    <span class="attr">sessionPoolSize:</span> <span class="string">$&#123;SW_STORAGE_IOTDB_SESSIONPOOL_SIZE:8&#125;</span> <span class="comment"># If it&#x27;s zero, the SessionPool size will be 2*CPU_Cores</span></span><br><span class="line">    <span class="attr">fetchTaskLogMaxSize:</span> <span class="string">$&#123;SW_STORAGE_IOTDB_FETCH_TASK_LOG_MAX_SIZE:1000&#125;</span> <span class="comment"># the max number of fetch task log in a request</span></span><br></pre></td></tr></table></figure></p><p><strong>3. 查询模块配置</strong></p><p>查询模块通过 GraphQL 框架处理 API 请求，请求会发到核心模块配置的 restHost 和 restPort 中。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">query:</span></span><br><span class="line">  <span class="attr">selector:</span> <span class="string">$&#123;SW_QUERY:graphql&#125;</span></span><br><span class="line">  <span class="attr">graphql:</span></span><br><span class="line">    <span class="comment"># Enable the log testing API to test the LAL.</span></span><br><span class="line">    <span class="comment"># <span class="doctag">NOTE:</span> This API evaluates untrusted code on the OAP server.</span></span><br><span class="line">    <span class="comment"># A malicious script can do significant damage (steal keys and secrets, remove files and directories, install malware, etc).</span></span><br><span class="line">    <span class="comment"># As such, please enable this API only when you completely trust your users.</span></span><br><span class="line">    <span class="attr">enableLogTestTool:</span> <span class="string">$&#123;SW_QUERY_GRAPHQL_ENABLE_LOG_TEST_TOOL:false&#125;</span></span><br><span class="line">    <span class="comment"># Maximum complexity allowed for the GraphQL query that can be used to</span></span><br><span class="line">    <span class="comment"># abort a query if the total number of data fields queried exceeds the defined threshold.</span></span><br><span class="line">    <span class="attr">maxQueryComplexity:</span> <span class="string">$&#123;SW_QUERY_MAX_QUERY_COMPLEXITY:100&#125;</span></span><br><span class="line">    <span class="comment"># Allow user add, disable and update UI template</span></span><br><span class="line">    <span class="attr">enableUpdateUITemplate:</span> <span class="string">$&#123;SW_ENABLE_UPDATE_UI_TEMPLATE:false&#125;</span></span><br></pre></td></tr></table></figure><p><strong>4. 探针与集群通信</strong><br>OAP 服务端提供了 gRPC 和 HTTP RESTful 接口的方式接口客户端的数据。对于不同类型的数据 OAP 提供了不同的配置：</p><img src="/JeckFS/2022/05/28/Skywalking%E6%A2%B3%E7%90%86/Snipaste_2022-05-30_16-29-09.png" class="" title="This is 1-th image."><p><strong>5. 设置服务端采样率：</strong></p><p>在服务端设置采样率只会将部分 trace 调用链路数据丢弃，不会影响 Metric 数据（比如 Service 、 service instance、endpoint）统计的准确性。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">receiver-trace:</span></span><br><span class="line">  <span class="attr">selector:</span> <span class="string">$&#123;SW_RECEIVER_TRACE:default&#125;</span></span><br><span class="line">  <span class="attr">default:</span></span><br><span class="line">    <span class="attr">sampleRate:</span> <span class="string">$&#123;SW_TRACE_SAMPLE_TATE:10000&#125;</span></span><br></pre></td></tr></table></figure><p><strong>6. 告警设置：</strong><br>告警的配置文件在 <code>apache-skywalking-apm-bin/config/alarm-settings.yml</code> 下，</p><p>该配置主要包含两部分：</p><img src="/JeckFS/2022/05/28/Skywalking%E6%A2%B3%E7%90%86/Snipaste_2022-05-30_17-24-32.png" class="" title="This is 1-th image."><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">rules:</span></span><br><span class="line">  <span class="comment"># Rule unique name, must be ended with `_rule`.</span></span><br><span class="line">  <span class="attr">service_resp_time_rule:</span></span><br><span class="line">    <span class="attr">metrics-name:</span> <span class="string">service_resp_time</span></span><br><span class="line">    <span class="attr">op:</span> <span class="string">&quot;&gt;&quot;</span></span><br><span class="line">    <span class="attr">threshold:</span> <span class="number">1000</span></span><br><span class="line">    <span class="attr">period:</span> <span class="number">10</span> <span class="comment"># 时间窗口</span></span><br><span class="line">    <span class="attr">count:</span> <span class="number">3</span>   <span class="comment"># 时间窗口内，如果触发告警的次数达到配置的次数，将会告警</span></span><br><span class="line">    <span class="attr">silence-period:</span> <span class="number">5</span> <span class="comment"># 告警间隔时间，防止段时间内多次告警</span></span><br><span class="line">    <span class="attr">message:</span> <span class="string">Response</span> <span class="string">time</span> <span class="string">of</span> <span class="string">service</span> &#123;<span class="string">name</span>&#125; <span class="string">is</span> <span class="string">more</span> <span class="string">than</span> <span class="string">1000ms</span> <span class="string">in</span> <span class="number">3</span> <span class="string">minutes</span> <span class="string">of</span> <span class="string">last</span> <span class="number">10</span> <span class="string">minutes.</span></span><br><span class="line"></span><br><span class="line"><span class="attr">webhooks:</span></span><br><span class="line"><span class="comment">#  - http://127.0.0.1/notify/</span></span><br><span class="line"><span class="comment">#  - http://127.0.0.1/go-wechat/</span></span><br></pre></td></tr></table></figure><p><strong>7. Exporter 设置</strong><br>用于转发采集的数据或处理过后的指标数据等。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">exporter:</span></span><br><span class="line">  <span class="attr">selector:</span> <span class="string">$&#123;SW_EXPORTER:-&#125;</span></span><br><span class="line">  <span class="attr">grpc:</span></span><br><span class="line">    <span class="comment"># 用于接收 Metrics 数据的服务地址</span></span><br><span class="line">    <span class="attr">targetHost:</span> <span class="string">$&#123;SW_EXPORTER_GRPC_HOST:127.0.0.1&#125;</span></span><br><span class="line">    <span class="comment"># 用于接收 Metrics 数据的端口</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="string">$&#123;SW_EXPORTER_GRPC_PORT:9870&#125;</span></span><br></pre></td></tr></table></figure><p><strong>UI 部署</strong></p><p>所有查询都是通过 Zuul 代理转发到 OAP 服务的 REST 服务端口，再通过 GraphQL 进行查询。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span> </span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">oap-route</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://oap-service</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/graphql/**</span></span><br><span class="line">    <span class="attr">discovery:</span></span><br><span class="line">      <span class="attr">client:</span></span><br><span class="line">        <span class="attr">simple:</span></span><br><span class="line">          <span class="attr">instances:</span></span><br><span class="line">            <span class="attr">oap-service:</span></span><br><span class="line">              <span class="bullet">-</span> <span class="attr">uri:</span> <span class="string">http://127.0.0.1:12800</span></span><br><span class="line">            <span class="comment"># - uri: http://&lt;oap-host-1&gt;:&lt;oap-port1&gt;</span></span><br><span class="line">            <span class="comment"># - uri: http://&lt;oap-host-2&gt;:&lt;oap-port2&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">mvc:</span></span><br><span class="line">    <span class="attr">throw-exception-if-no-handler-found:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">web:</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="attr">add-mappings:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">server:</span></span><br><span class="line">    <span class="attr">base-path:</span> <span class="string">/manage</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="2-轻量级队列内核"><a href="#2-轻量级队列内核" class="headerlink" title="2.轻量级队列内核"></a>2.轻量级队列内核</h1><img src="/JeckFS/2022/05/28/Skywalking%E6%A2%B3%E7%90%86/Snipaste_2022-05-31_20-18-48.png" class="" title="This is 1-th image."><ul><li>数据结构<ul><li><code>Buffer</code> ： 数据的实际存放地<ul><li><code>Object[] buffer</code> ： 用于存储数据的队列。长度固定，</li><li><code>AtomicRangeInteger index</code> ： 一个原子循环索引，与 buffer 数组一起实现一个循环队列、</li><li><code>BufferStrategy strategy</code> ：队列策略。当数据生产者向 Buffer 的某个索引中存储数据时，发现该索引还存有旧数据没有消费完时的解决策略。</li><li><code>List&lt;QuueueBlockingCallback&lt;T&gt;&gt; callbacks</code> ： 数据阻塞时的回调函数。该回调仅在 BufferStrategy.BLOCKING 策略下起作用。</li></ul></li><li><code>Channel</code> ： 管理 Buffer 的载体<ul><li><code>Buffer&lt;T&gt;[] bufferChannels</code> ： 一个 Buffer 数组</li><li><code>IDataPartitioner&lt;T&gt; dataPartitioner</code> ： 当数据写入 Channel 时，dataPartitioner 决定将数据存储在哪个 Buffer 中，以及存储数据失败时的重试次数。</li><li><code>long size</code> ： Channel 能够容纳数据的大小，值为 Channel 中 Buffer 的数量乘以内部 Buffer 数组的长度。</li></ul></li><li><code>DataCarrier</code> ： 队列内核与其他模块交互的媒介，其在初始化时需要 CHANNEL_SIZE （当前 Channel 中有多少个 Buffer 队列）, BUFFER_SIZE （每个 Buffer 队列的大小）两个参数。</li></ul></li><li>生产消息<ul><li>数据分发 <code>IDataPartitioner</code> ： 默认实现为从第一个 Buffer 到最有一个 Buffer 无限循环选择。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IDataPartitioner</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">partition</span><span class="params">(<span class="type">int</span> total, T data)</span>; <span class="comment">// 决定当前数据应存储在哪个 Buffer 中，total 为 Buffer 队列的个数，data 为生产的数据，返回值为具体 Buffer 的索引值。</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">maxRetryCount</span><span class="params">()</span>; <span class="comment">// 重试次数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>数据的存储策略<ul><li>BLOCKING ： 循环阻塞，等待当前 Buffer 队列中的 index 空间为空，阻塞过程中会回调 Buffer 的回调方法。</li><li>OVERRIDE ： 新数据覆盖旧数据</li><li>IF_POSSIBLE ： 从当前 index 起往后找 n 位，若空余则存下来，否则丢弃掉。重试次数通过 IDataPartitioner 的 maxRetryCount 控制。</li></ul></li></ul></li><li>消费消息<ul><li>队列为无锁队列却能保证线程安全的原因：每个 buffer 仅分配给指定的线程，从此以后该 buffer 不再被其他线程访问。<ul><li>Buffer 队列的数量 ≥ 消费者线程数量：每个消费线程按照顺序绑定一个或者多个 Buffer 队列。</li><li>Buffer 队列的数量 ＜ 消费者线程数量：此时一个 Buffer 队列可能对应多个消费者线程，解决线程安全的方式是将 Buffer 队列按照消费者线程数量等比划分，每个消费者线程对应一个划分后的空间。</li></ul></li></ul></li></ul><img src="/JeckFS/2022/05/28/Skywalking%E6%A2%B3%E7%90%86/Snipaste_2022-06-01_08-52-47.png" class="" title="This is 1-th image."><img src="/JeckFS/2022/05/28/Skywalking%E6%A2%B3%E7%90%86/Snipaste_2022-06-01_08-53-05.png" class="" title="This is 1-th image."><h1 id="3-Skywalking-追踪模型"><a href="#3-Skywalking-追踪模型" class="headerlink" title="3. Skywalking 追踪模型"></a>3. Skywalking 追踪模型</h1><h2 id="3-1-追踪模型介绍"><a href="#3-1-追踪模型介绍" class="headerlink" title="3.1 追踪模型介绍"></a>3.1 追踪模型介绍</h2><img src="/JeckFS/2022/05/28/Skywalking%E6%A2%B3%E7%90%86/Snipaste_2022-06-01_10-33-13.png" class="" title="This is 1-th image."><p><span style="color:#FF0000; font-weight:bold;">整个追踪树的 TraceId 是什么？</span></p><img src="/JeckFS/2022/05/28/Skywalking%E6%A2%B3%E7%90%86/Snipaste_2022-06-01_10-46-21.png" class="" title="This is 1-th image."><h2 id="3-2-Skywalking-的追踪模型"><a href="#3-2-Skywalking-的追踪模型" class="headerlink" title="3.2 Skywalking 的追踪模型"></a>3.2 Skywalking 的追踪模型</h2><p><strong>Segment</strong><br>一个 Segment 是 Trace 在一个 <strong>进程内单次访问</strong> 的所有 Span 集合。如果是多个线程血统生产成一个 Trace ，它们也只会共同创建一个 Segment，而不是多个。在追踪树形图中，使用不同的颜色来区分不同的 Segment 。<br>比如一个请求经过了 前置系统、网管、后端应用。那么会有三个 Segment ，每个 Segment 中包含了多个 Span （比如调用 redis 的 Span ，调用 MySQL 的 Span 、微服务调用的 Span 等）。</p><p>Skywalking 中没有 RootSpan 的概念，因为模型支持多个入口，因此没有唯一的 Root 节点。</p><p>使用 Segment 的好处：同一个实例将所有的 Span 进行组合后批量发送，效率会大大提升；其次，使用 Segment 可以清晰观察服务之间的调用关系。</p><h2 id="3-3-Skywalking-探针上下文传播协议"><a href="#3-3-Skywalking-探针上下文传播协议" class="headerlink" title="3.3 Skywalking 探针上下文传播协议"></a>3.3 Skywalking 探针上下文传播协议</h2><p>传播上下文是一个键值对， key 为 sw6 ，value 是由多个 <strong>字段</strong> 用 ‘-’ 连接而成的字符串。形如： “1-traceId-segmentId-3-5-2-ipport”。<br>在传输时，将该键值对放入 HTTP 的 Header 中进行传递。</p><p>字段说明：</p><img src="/JeckFS/2022/05/28/Skywalking%E6%A2%B3%E7%90%86/Snipaste_2022-06-01_17-12-32.png" class="" title="This is 1-th image."><img src="/JeckFS/2022/05/28/Skywalking%E6%A2%B3%E7%90%86/Snipaste_2022-06-01_17-12-56.png" class="" title="This is 1-th image.">]]></content>
      
      
      <categories>
          
          <category> 微服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyPro</title>
      <link href="/JeckFS/2022/05/24/MyPro/"/>
      <url>/JeckFS/2022/05/24/MyPro/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Spring-解决循环依赖"><a href="#1-Spring-解决循环依赖" class="headerlink" title="1. Spring 解决循环依赖"></a>1. Spring 解决循环依赖</h1><p><a href="https://blog.csdn.net/A_Java_Dog/article/details/117192587#:~:text=答：Spring,tories）%E3%80%82">参考教程</a></p><p>出现循环依赖的前提条件：</p><ul><li>Bean 是单例的</li><li>相互依赖的 Bean 都是使用构造器注入的方式</li></ul><p>Spring 能够解决的循环依赖类型：</p><img src="/JeckFS/2022/05/24/MyPro/Snipaste_2022-05-24_19-28-13.png" class="" title="This is 1-th image."><p>Spring 解决循环依赖时的调用图：</p><img src="/JeckFS/2022/05/24/MyPro/Snipaste_2022-05-24_19-32-04.png" class="" title="This is 1-th image."><p>黑色为调用走向，绿色为递归返回走向。</p><ul><li>Spring 是通过递归的方式获取目标 bean 及其所依赖的 bean 的；</li><li>Spring 实例化一个 bean 的时候，是分两步进行的，首先实例化目标 bean ，然后为其注入属性。</li></ul><p>Spring 中的 “三级缓存”：</p><ul><li><code>singletonObjects</code>:一级缓存 存储的是所有创建好了的单例Bean</li><li><code>earlySingletonObjects</code> ：完成实例化，但是还未进行属性注入及初始化的对象</li><li><code>singletonFactories</code> : 提前暴露的一个单例工厂，二级缓存中存储的就是从这个工厂中获取到的对象</li></ul><p>A 依赖于 B ， B 依赖于 A 的循环依赖解决（没有 AOP 增强的循环依赖）：</p><img src="/JeckFS/2022/05/24/MyPro/Snipaste_2022-05-24_19-42-01.png" class="" title="This is 1-th image."><p>带 AOP 的循环依赖：<br>带AOP的跟不带AOP的其实几乎一样，只是在三级缓存中存放的是<strong>函数式接口</strong>，在需要调用时直接<strong>返回代理对象</strong>。<br>三级缓存存在的意义：</p><ul><li>只有真正发生循环依赖的时候，才去提前生成代理对象；</li><li>对于没有发生循环依赖时，只会创建一个工厂并将其放入到三级缓存中，但是不会去通过这个工厂去真正创建对象；</li></ul><p>带 AOP 的循环依赖与不带AOP 的区别是：通过三级缓存的函数式接口获取对象 A 时，是实例化后的对象 A 还是代理对象 A 。</p><img src="/JeckFS/2022/05/24/MyPro/Snipaste_2022-05-24_20-07-42.png" class="" title="This is 1-th image."><p><strong>getBean(A) 时先实例化对象 A 然后将 A 的函数式接口放入三级缓存中，通过调用函数式接口得到代理对象 A。然后为~代理~对象 A 属性注入，在注入依赖对象 B 时，B 中的依赖对象 A 是从三级缓存中获取到的代理对象 A，这时 B 对象可以顺利完成初始化，A 也可以顺利完成初始化。</strong><br>重点是 A 实例化后会将用于创建代理对象 A 的函数式接口放入三级缓存中，在 B 对象进行属性注入时，是从三级缓存中获取到 A 的代理对象。<br>当对象 B 完成属性注入后，考虑到 A 是单例的原因，会将三级缓存的代理工厂删除，并将代理<code>?</code>对象 A 放入二级缓存中，等属性注入完成并初始化（执行 Aware 接口中的方法、初始化方法，完成 AOP 代理）成功后，会放入一级缓存。</p><p>为什么必须用三级缓存：<br>考虑到 AOP 的特性，必须以代理对象的方式实现增强。使用三级缓存时，A 对象的创建会放入三级缓存中。在 B 对象初始化完成后，就可以注入对象 A 的所有属性。这也就符合 Spring 的设计原则：对初始化后的 Bean 进行 AOP 代理；如果不使用三级缓存，就需要直接创建 A 的代理对象，这样对象 A 无法完成初始化就要进行 AOP 代理，违背 Spring 设计原则。</p><h1 id="2-Apollo"><a href="#2-Apollo" class="headerlink" title="2. Apollo"></a>2. Apollo</h1><h2 id="2-1-特性"><a href="#2-1-特性" class="headerlink" title="2.1 特性"></a>2.1 特性</h2><ul><li>支持不同环境（env），不同集群（cluster），不同命名空间（namespaces）的配置</li><li>支持热发布</li><li>支持配置回滚</li><li>支持灰度发布，可以对部分实例生效，没问题了再推广到全部的实例</li><li>支持配置信息监控（哪些实例在使用）</li><li>除了 Portal 管理配置，也可以通过程序管理自己的配置（需在 Portal 中授权获取 Token）。支持 Java 、 Shell 、 .Net core 三种方式管理配置</li><li>支持 Skywalking </li><li>支持 prometheus</li><li>支持 Docker 部署，分布式部署</li></ul><h2 id="2-2-相关配置"><a href="#2-2-相关配置" class="headerlink" title="2.2 相关配置"></a>2.2 相关配置</h2><p>必选配置：</p><ul><li><code>appId</code> : 表示应用的唯一身份</li><li><code>appllo.meta</code> ： 用于提供给Apollo客户端当前环境的 Apollo Meta Server 信息。</li><li>本地缓存路径：默认是 <code>/opt/data</code> ，缓存配置命名： <code>&#123;appId&#125;+&#123;cluster&#125;+&#123;namespace&#125;.properties</code></li><li>自定义缓存路径： <code>-Dapollo.cache-dir=/opt/data/some-cache-dir</code> 或者 <code>apollo.cacheDir=/opt/data/some-cache-dir</code></li></ul><p>可选配置：</p><ul><li>Environment : <code>-Denv=YOUR-ENVIRONMENT</code></li><li>cluster : <code>apollo.cluster=&#39;SomeCluster&#39;</code> ， 首先获取 <code>apollo.cluster</code> 指定的配置，若不存在则查找<em>数据中心</em>?的cluster，若还不存在则使用默认的集群配置（default）</li><li>访问密钥 ： <code>apollo.access-key.secret</code> 只有经过身份验证的客户端才能访问敏感配置</li><li>自定义 server.properties 路径： <code>apollo.path.server.properties</code></li><li>开启propertyNames缓存： <code>apollo.property.names.cache.enable</code> 通过开启该配置可以显著提升启动速度，当配置发生变化时缓存会自动清理，默认为 false</li><li>ApolloLabel ： <code>-Dapollo.label=YOUR-APOLLO-LABEL</code> ApolloLabel 是应用的标签信息，是从服务端获取配置的一个重要信息，用于灰度规则的配置。</li></ul><h2 id="2-3-客户端用法"><a href="#2-3-客户端用法" class="headerlink" title="2.3 客户端用法"></a>2.3 客户端用法</h2><ul><li>通过 API 直接使用，不依赖于 Spring 框架。通过 API 可以获取具体某个 namespaces 的配置某一项的配置、也可以监听配置的变更。</li><li>与 Spring 整合：<ul><li>支持配置到 bean xml 的配置中；</li><li>支持在 Java 代码中配置： <code>@Configuration @EnableApolloConfig</code></li><li>Springboot 集成：</li><li>支持 Spring PlaceHolder ： <ul><li>Bean XML 中： <code>$&#123;key:defaultValue&#125;</code></li><li><code>@Value(&quot;&#123;key:defaultValue&#125;&quot;)</code></li><li>通过 <code>@Configuration @EnableApolloConfig</code> 配置 Bean 的配置类， <code>@Bean</code> 修饰的方法可以直接在 new Bean() 的时候注入属性。</li><li><code>@ConfigurationProperties(prefix = &quot;redis.cache&quot;)</code> 将配置注入到普通对象到属性中。</li></ul></li><li>通过注解注入<ul><li><code>@ApolloConfig</code> ： 用来自动注入Config对象</li><li><code>@ApolloConfigChangeListener</code> ： 用来自动注册ConfigChangeListener</li><li><code>@ApolloJsonValue</code> ： 用来把配置的json字符串自动注入为对象</li><li><code>@Configuration @EnableApolloConfig</code> ： 注入 Configure 类中的 Bean 属性</li><li><code>@Value</code></li></ul></li></ul></li></ul><h2 id="2-4-Apollo-客户端设计原理："><a href="#2-4-Apollo-客户端设计原理：" class="headerlink" title="2.4 Apollo 客户端设计原理："></a>2.4 Apollo 客户端设计原理：</h2><img src="/JeckFS/2022/05/24/MyPro/Snipaste_2022-05-25_08-16-11.png" class="" title="This is 1-th image."><img src="/JeckFS/2022/05/24/MyPro/Snipaste_2022-05-25_08-17-13.png" class="" title="This is 1-th image."><p>配置更新<strong>推送</strong>实现：</p><ul><li>客户端向服务端发起 HTTP 请求，并建立一个长链接（60s）</li><li>如果在 60s 内有配置更新，被保持住的客户端请求会立即返回，并告知客户端有变化的 namespaces ，客户端据此拉取有变更的 namespaces 。</li><li>如果 60s 内无配置更新，会返回 304 - Not Modified 给客户端。</li><li>客户端收到服务端请求后会重新发起长链接。</li></ul><h2 id="2-5-总体设计"><a href="#2-5-总体设计" class="headerlink" title="2.5 总体设计"></a>2.5 总体设计</h2><img src="/JeckFS/2022/05/24/MyPro/Snipaste_2022-05-25_15-18-21.png" class="" title="This is 1-th image."><img src="/JeckFS/2022/05/24/MyPro/Snipaste_2022-05-25_15-18-47.png" class="" title="This is 1-th image."><h2 id="2-6-为什么-Apollo-选用-Eureka"><a href="#2-6-为什么-Apollo-选用-Eureka" class="headerlink" title="2.6 为什么 Apollo 选用 Eureka"></a>2.6 为什么 Apollo 选用 Eureka</h2><ul><li>为了提高配置中心的可用性和降低部署复杂度，我们需要尽可能地减少外部依赖。</li><li>它提供了完整的 Service Registry 和 Service Discovery 实现，并经受住了考验</li><li>开源，方便问题排查</li></ul><h2 id="2-7-各模块介绍"><a href="#2-7-各模块介绍" class="headerlink" title="2.7 各模块介绍"></a>2.7 各模块介绍</h2><ul><li>Config Service：<ul><li>提供配置更新推送接口（基于Http long polling）<ul><li>服务端使用Spring DeferredResult实现异步化，从而大大增加长连接数量</li><li>目前使用的tomcat embed默认配置是最多10000个连接（可以调整），使用了4C8G的虚拟机实测可以支撑10000个连接，所以满足需求（一个应用实例只会发起一个长连接）。</li></ul></li><li>接口服务对象为Apollo客户端</li></ul></li><li>Admin Service<ul><li>提供配置管理接口</li><li>提供配置修改、发布等接口</li><li>接口服务对象为Portal</li></ul></li><li>Meta server<ul><li>Portal通过域名访问Meta Server获取Admin Service服务列表（IP+Port）</li><li>Client通过域名访问Meta Server获取Config Service服务列表（IP+Port）</li><li>Meta Server从Eureka获取Config Service和Admin Service的服务信息，相当于是一个Eureka Client</li><li>增设一个Meta Server的角色主要是为了封装服务发现的细节，对Portal和Client而言，永远通过一个Http接口获取Admin Service和Config Service的服务信息，而不需要关心背后实际的服务注册和发现组件</li><li>Meta Server只是一个逻辑角色，在部署时和Config Service是在一个JVM进程中的，所以IP、端口和Config Service一致</li></ul></li><li>Eureka<ul><li>基于Eureka和Spring Cloud Netflix提供服务注册和发现</li><li>Config Service和Admin Service会向Eureka注册服务，并保持心跳</li><li>为了简单起见，目前Eureka在部署时和Config Service是在一个JVM进程中的（通过Spring Cloud Netflix）</li></ul></li><li>Portal<ul><li>提供Web界面供用户管理配置</li><li>通过Meta Server获取Admin Service服务列表（IP+Port），通过IP+Port访问服务</li><li>在Portal侧做load balance、错误重试</li></ul></li><li>Client<ul><li>Apollo提供的客户端程序，为应用提供配置获取、实时更新等功能</li><li>通过Meta Server获取Config Service服务列表（IP+Port），通过IP+Port访问服务</li><li>在Client侧做load balance、错误重试</li></ul></li></ul><h2 id="2-8-配置发布后的实时推送设计"><a href="#2-8-配置发布后的实时推送设计" class="headerlink" title="2.8 配置发布后的实时推送设计"></a>2.8 配置发布后的实时推送设计</h2><img src="/JeckFS/2022/05/24/MyPro/Snipaste_2022-05-25_16-28-15.png" class="" title="This is 1-th image."><p>发送ReleaseMessage的实现方式：</p><img src="/JeckFS/2022/05/24/MyPro/Snipaste_2022-05-25_16-29-20.png" class="" title="This is 1-th image."><img src="/JeckFS/2022/05/24/MyPro/Snipaste_2022-05-25_16-29-39.png" class="" title="This is 1-th image."><p><a href="https://www.apolloconfig.com/#/zh/design/apollo-design?id=_212-config-service通知客户端的实现方式">Config Service通知客户端的实现方式</a>：<br><img src="/JeckFS/2022/05/24/MyPro/Snipaste_2022-05-25_16-58-26.png" class="" title="This is 1-th image."></p><p><a href="https://www.apolloconfig.com/#/zh/design/apollo-design?id=_31-和spring集成的原理">和 Spring 集成的原理:</a></p><p>Spring 中的 ApplicationContext 中会关联 ConfugurableEnvironment 对象，该对象提供了获取多个 PropertySource 的方法。而每个 PropertySource 中包含了多个 key-Value 的配置项。Spring 会顺序读取 PropertySource 中的配置（排在前面的优先级高于后面的）。 Apollo 在运行时会将配置以 PropertySource 的形式插入到 PropertySource 列表的第一个。</p><img src="/JeckFS/2022/05/24/MyPro/Snipaste_2022-05-25_20-07-39.png" class="" title="This is 1-th image."><h2 id="2-9-Namespaces"><a href="#2-9-Namespaces" class="headerlink" title="2.9 Namespaces"></a>2.9 Namespaces</h2><p>Namespaces 获取权限（针对于 Apollo 客户端）分类：</p><ul><li>private （私有的，只能被所属应用获取）</li><li>public （公共的，所有应用都可以获取）</li></ul><p>Namespaces 的类型：</p><ul><li>私有类型（具有 private 权限）</li><li>公共类型（具有 public 权限）</li><li>继承类型（具有 private 权限，集成自公共类型的 Namespaces，用于覆盖公共配置中的某些配置）</li></ul><h1 id="3-Skywalking"><a href="#3-Skywalking" class="headerlink" title="3. Skywalking"></a>3. Skywalking</h1><p><a href="https://jeckfs.gitee.io/2021/09/04/APM-skywalking/">Skywalking 视频教程</a><br><a href="https://jeckfs.gitee.io/2021/09/15/APM-skywalking-书籍目录笔记/">Skywalking 部分笔记</a><br><a href="https://jeckfs.gitee.io/2021/09/14/skywalking-其他主机接入skywalking日志/">其他主机接入skywalking日志</a><br><a href="https://jeckfs.gitee.io/2021/07/26/链路追踪/">其他介绍</a></p><h1 id="4-涉及-Redis-、数据库、跨中心调用时如何尽可能保持数据一致性"><a href="#4-涉及-Redis-、数据库、跨中心调用时如何尽可能保持数据一致性" class="headerlink" title="4. 涉及 Redis 、数据库、跨中心调用时如何尽可能保持数据一致性"></a>4. 涉及 Redis 、数据库、跨中心调用时如何尽可能保持数据一致性</h1><mark class="hl-label green">业务场景：</mark>  中心 A 在做业务逻辑 a 时需要更改数据库和 redis ，中心 A 成功后需要调用中心 B 的 b 接口更改中心 B 的数据。 <br><mark class="hl-label green">问题：</mark>  中心 A 成功更新数据库和 redis ，但是中心 B 却写入失败的情况。<br><mark class="hl-label green">解决方案：</mark>  中心 A 将操作 redis 和数据库的代码放入事务中，调用中心 B 的代码放在事务之外。这样可以保证中心 A 的操作一定是成功的状态下，才会调用中心 B 去更改数据。若事务失败，则捕获异常直接清除写入 redis 中的 key ，以保证 redis 中不存在脏数据。但是有个问题是中心 B 在更改数据库或者 redis 时失败应该怎么办？当前采用的方案是： <mark class="hl-label default">当中心A事务成功后，向MQ中发送一个消息（包含了中心B更新数据的输入数据），当失败时中心B从数据库中取出数据进行重试</mark>  <br>另一种方案是使用分布式事务 <mark class="hl-label pink">分布式事务</mark> 。<br><mark class="hl-label red">仍存在的问题:</mark>  <ul><li>中心 A 在向 MQ 中写入消息时不一定是成功的，需要依赖于 MQ 的健壮性</li><li>当中心 B 的数据库或者 redis 挂掉后，中心 B 不见得能够重试成功。这时可以走人工</li></ul><p>这也是尽可能的保证数据一致性。</p><h1 id="5-分布式事务"><a href="#5-分布式事务" class="headerlink" title="5. 分布式事务"></a>5. 分布式事务</h1><p><a href="https://zhuanlan.zhihu.com/p/183753774">分布式事务教程</a></p><h2 id="5-1-2PC"><a href="#5-1-2PC" class="headerlink" title="5.1 2PC"></a>5.1 2PC</h2><p><img src="Snipaste_2022-06-10_20-20-30.png" width="70%" height="70%"></p><p>2PC 分两个阶段：准备阶段和提交阶段。2PC 的执行是一个 <mark class="hl-label green">同步阻塞</mark>  的执行过程， 2PC 并不能保证数据的强一致性的原因：</p><ul><li>参与者执行的状态不同。如有的参与者已经提交有的没有提交、有的已经回滚有的没有回滚、有的已经准备有的没有准备</li><li>2PC 是一个同步阻塞过程</li></ul><p>协调者故障分析 : </p><ul><li>假设协调者在 <mark class="hl-label pink">发送准备命令之前挂了</mark>  ，此时相当于事务没有开始</li><li>假设协调者在 <mark class="hl-label pink">发送准备命令之后挂了</mark>  ，此时已经执行准备命令的部分或全部参与者将会处于阻塞状态。</li><li>假设协调者在 <mark class="hl-label pink">发送回滚命令之前挂了</mark>  ，此时证明所有参与者都已准备好，所有的参与者都会处于阻塞状态。</li><li>假设协调者在 <mark class="hl-label pink">发送回滚命令之后挂了</mark>  ，此时运气好的话所有参与者都回滚，当遇到网络分区问题，会导致部分参与者收不到回滚命令而一直阻塞。</li><li>假设协调者在 <mark class="hl-label pink">发送提交命令之前挂了</mark>  ，此时所有参与者都处于准备状态，因此都会阻塞。</li><li>假设协调者在 <mark class="hl-label pink">发送提交命令之后挂了</mark>  ，此时运气好的话所有参与者都提交成功，当遇到网络分区问题，会导致部分参与者一直阻塞。</li></ul><p>协调者故障，通过选举产生新的协调者：</p><ul><li>若选举发生在第一阶段：所有协调者都处于准备阶段，通过回滚就可以解决。</li><li>若选举发生在第二阶段：<ul><li>假设所有协调者没有挂，此时协调者可以向所有参与者询问执行情况来推断下一步操作。</li><li>假设有部分协调者挂掉，新的协调者不知道哪个参与者挂掉了（因为新的协调者只能询问存活的参与者的状态），所以没有办法保证挂掉的协调者的数据与其他正常协调者的一致。<ul><li>这种问题可以通过协调者写入日志来 <mark class="hl-label pink">记录发过哪些日志</mark>  ，新协调者可以通过日志判断哪些协调者挂掉。</li><li>问题：当旧协调者发送提交命令后，由于网络分区原因部分协调者没有收到命令，收到命令的成功提交。这时候新协调者在面对部分或所有参与者挂掉的情况，就无法判断哪些挂掉的协调者已经提交，哪些没有提交。</li></ul></li></ul></li></ul><p>由于 2PC 的 <mark class="hl-label pink">协调者单点故障问题</mark>  因此在极端情况下 2PC 仍无法保证数据强  一致性，只是 <mark class="hl-label pink">尽量保证强一致性</mark>  。</p><h2 id="5-2-3PC"><a href="#5-2-3PC" class="headerlink" title="5.2 3PC"></a>5.2 3PC</h2><p>3PC 的出现是为了解决 2PC 的一些问题，相比于 2PC 它 <mark class="hl-label pink">在参与者中也引入了超时机制</mark>  ，并且 <mark class="hl-label pink">新增了一个阶段</mark>  使得参与者可以利用这一个阶段统一各自的状态。<br></p><p>3PC ： 包含 <mark class="hl-label pink">准备阶段(CanCommit)、预提交阶段(PreCommit)和提交阶段(DoCommit)</mark>   <br></p><p>相对于 2PC ，3PC 将提交阶段分为了 <mark class="hl-label pink">预提交阶段和提交阶段</mark>  ，并且 3PC 协调者只是询问参与者负载是否沉重之类的。 <br></p><img src="/JeckFS/2022/05/24/MyPro/Snipaste_2022-06-11_08-58-52.png" class="" title="This is 2-th image."><mark class="hl-label green">3PC的特点：</mark>  <br>* <mark class="hl-label pink">准备阶段的变更成不会直接执行事务，仅仅是询问是否有条件执行该事务，因此不会一上来就直接锁资源。</mark> <ul><li><mark class="hl-label pink">预提交阶段的引入起到了一个统一状态的作用</mark>  ，到达预提交阶段表明所有参与者都已经回应了，当前可以执行事务。对于参与者而言，当其进入到预提交状态或者提交状态，则可以肯定其他参与者也到达了预提交状态或者提交状态。</li><li>接上一点，当发送 <mark class="hl-label pink">提交命令（或回滚命令）之前</mark>  （此时所有参与者都已是预提交状态），协调者和部分参与者挂掉了，有两种情况：一是存活参与者触发超时，直接提交（此时若协调者发送的是回滚命令这时就会有一致性问题了）；一是协调者在存活参与者超时之前苏醒，这时协调者就不知道是该发送提交命令还是回滚命令（可以通过协调者写入日志来避免这种情况）。</li><li>当协调者挂掉后，由于参与者引入了超时机制，参与者不会一直等待。如果是参与者等待提交命令超时，那么参与者就会直接提交事务；如果是参与者等待预提交命令超时，那就该干啥干啥，参与者不受影响。这里有一个问题是：参与者无法判断是提交命令超时，还是回滚命令超时。如果是回滚命令超时，但是参与者执行的是提交命令，这时就会有数据不一致的问题。（因为有的提交了，有的回滚了）。</li></ul><mark class="hl-label green">总结</mark> <p> 3PC 相对于 2PC 做了一定的改进：引入了参与者超时机制，并且增加了预提交阶段使得故障恢复之后协调者的决策复杂度降低，但整体的交互过程更长了，性能有所下降，并且还是会存在数据不一致问题。所以 2PC 和 3PC 都不能保证数据100%一致，因此一般都需要有定时扫描补偿机制。  <br></p><h2 id="5-3-TCC"><a href="#5-3-TCC" class="headerlink" title="5.3 TCC"></a>5.3 TCC</h2><p><strong>2PC和3PC都是数据库层面的，而TCC是业务层面的分布式事务</strong> 。TCC 指的是 Try - Confirm - Cancel：</p><ul><li>Try 指的是预留，即资源的预留和锁定， <mark class="hl-label pink">注意是预留</mark> 。</li><li>Confirm 指的是确认操作，这一步其实就是真正的执行了。</li><li>Cancel 指的是撤销操作，可以理解为把预留阶段的动作撤销了。</li></ul><img src="/JeckFS/2022/05/24/MyPro/Snipaste_2022-06-11_09-52-48.png" class="" title="This is 2-th image."><p>其实从思想上看和 2PC 差不多，都是先试探性的执行，如果都可以那就真正的执行，如果不行就回滚。<br>比如说一个事务要执行A、B、C三个操作，那么先对三个操作执行预留动作。如果都预留成功了那么就执行确认操作，如果有一个预留失败那就都执行撤销动作。</p><p>可以看到流程还是很简单的，难点在于业务上的定义，对于每一个操作你都需要定义三个动作分别对应Try - Confirm - Cancel。</p><p>因此 <mark class="hl-label pink">TCC对业务的侵入较大和业务紧耦合</mark>   ，需要根据特定的场景和业务逻辑来设计相应的操作。</p><p>还有一点要注意，撤销和确认操作的执行可能需要重试，因此还需要保证 <mark class="hl-label pink">操作的幂等</mark>  。</p><p>相对于 2PC、3PC ，TCC 适用的范围更大，但是开发量也更大，毕竟都在业务上实现，而且有时候你会发现这三个方法还真不好写。不过也因为是在业务上实现的，所以 <mark class="hl-label pink">TCC可以跨数据库、跨不同的业务系统来实现事务</mark>   。</p><h2 id="5-4-本地消息表"><a href="#5-4-本地消息表" class="headerlink" title="5.4 本地消息表"></a>5.4 本地消息表</h2><p>本地消息表是利用 <mark class="hl-label pink">本地事务来实现分布式事务</mark>  。具体实现是将 <mark class="hl-label pink">业务的执行和将消息放入本地消息表的操作放入同一个本地事务中</mark>  ，这样可以保证消息放入本地消息表中一定是执行成功的。完了后，启动 <mark class="hl-label pink">后台任务定时读取本地消息表</mark>  筛选出还未成功的消息再调用对应的服务，服务更新成功了再变更消息的状态。这时候有可能消息对应的操作不成功，因此也需要 <mark class="hl-label pink">重试</mark>  ，重试就得保证对应服务的方法是 <mark class="hl-label pink">幂等</mark>  的，而且一般重试会有最大次数， <mark class="hl-label pink">超过最大次数可以记录下报警让人工处理</mark>  。<br></p><p>本地消息表其实实现的是 <mark class="hl-label pink">最终一致性</mark>  ，容忍了数据 <mark class="hl-label pink">暂时不一致</mark>  的情况。</p><h2 id="5-5-消息事务"><a href="#5-5-消息事务" class="headerlink" title="5.5 消息事务"></a>5.5 消息事务</h2><img src="/JeckFS/2022/05/24/MyPro/Snipaste_2022-06-11_10-33-30.png" class="" title="This is 2-th image."><mark class="hl-label pink">反查事务接口</mark>  的作用是：发送方过了一段时间并没有向 Broker 发送 Commit 或者 Rollback 消息，这时 Broker 可以通过反查事务接口去查询发送方事务是否成功，来决定半消息如何处理（是向订阅方发送 commit 命令还是丢弃半消息）。<br>消息事务也是保证的 <mark class="hl-label pink">最终一致性</mark>  。<br>## 5.6 最大努力通知其实我觉得本地消息表也可以算最大努力，事务消息也可以算最大努力。<br>就本地消息表来说会有后台任务定时去查看未完成的消息，然后去调用对应的服务，当一个消息多次调用都失败的时候可以记录下然后引入人工，或者直接舍弃。这其实算是最大努力了。<br>事务消息也是一样，当半消息被commit了之后确实就是普通消息了，如果订阅者一直不消费或者消费不了则会一直重试，到最后进入死信队列。其实这也算最大努力。<br>所以 <mark class="hl-label pink">最大努力通知其实只是表明了一种柔性事务的思想</mark> <p>即最大的努力想达成事务的最终一致。<br></p><p>适用于对时间不敏感的业务，例如短信通知。</p><h2 id="5-7-总结"><a href="#5-7-总结" class="headerlink" title="5.7 总结"></a>5.7 总结</h2><p>可以看出 2PC 和 3PC 是一种强一致性事务，不过还是有数据不一致，阻塞等风险，而且只能用在数据库层面。<br></p><p>而 TCC 是一种补偿性事务思想，适用的范围更广，在业务层面实现，因此对业务的侵入性较大，每一个操作都需要实现对应的三个方法。<br></p><p>本地消息、事务消息和最大努力通知其实都是最终一致性事务，因此适用于一些对时间不敏感的业务。<br></p><h2 id="5-8-SAGA"><a href="#5-8-SAGA" class="headerlink" title="5.8 SAGA"></a>5.8 SAGA</h2><p>SAGA 简介：</p><ul><li>只满足 ACD ，缺乏对于隔离性的支持。</li><li>只能保证 AP 即最终一致性。</li><li>通过使用 <strong>异步消息</strong> 来协调一系列本地事务，从而维护多个服务之间数据的最终一致性。</li><li>SAGA 是由一系列的本地事务来协调完成一个分布式事务的。每个参与者创建自己的本地事务完成后提交，然后出发下一个系统的本地事务直到所有的本地事务都完成，则分布式事务完成。</li><li>每个参与者在创建本地事务的同时也会提供补偿事务（即当触发回滚时，为了保证数据一致性而进行的本地事务操作的逆操作）。</li></ul><p>使用异步消息的好处是：可以确保 SAGA 的所有步骤都可以被执行，即使有一个或多个参与者暂时不可用。</p><p>关于隔离性：许多应用通过使用更低的隔离级别来提高性能。如在不同银行之间转账，也仅仅是遵守最终一致性的原则。</p><mark class="hl-label default">SAGA保证数据一致性：</mark> <p><br></p><img src="/JeckFS/2022/05/24/MyPro/Snipaste_2022-06-13_08-54-41.png" class="" title="This is 2-th image."><p><br></p><p>SAGA 事务的分类：</p><ul><li>可补偿事务：必须使用补偿事务回滚的事务</li><li>关键性事务：如果关键性事务成功，则 SAGA 将一直运行直到完成。关键性事务不见得是一个可补偿事务，或者可重复事务。但是它可以是最后一个可补偿事务或者第一个可重复事务。</li><li>可重复事务：在关键性事务之后的事务，保证成功。</li></ul><img src="/JeckFS/2022/05/24/MyPro/Snipaste_2022-06-13_09-21-09.png" class="" title="This is 2-th image."><p>一种事务失败的情况：</p><img src="/JeckFS/2022/05/24/MyPro/Snipaste_2022-06-13_09-22-42.png" class="" title="This is 2-th image."><p><br></p><h3 id="5-8-1-SAGA的协调模式"><a href="#5-8-1-SAGA的协调模式" class="headerlink" title="5.8.1 SAGA的协调模式"></a>5.8.1 SAGA的协调模式</h3><h4 id="5-8-1-1-协同式-SAGA"><a href="#5-8-1-1-协同式-SAGA" class="headerlink" title="5.8.1.1 协同式 SAGA"></a>5.8.1.1 协同式 SAGA</h4><p>这种方式没有一个中央协调器告诉 SAGA 参与者应该怎么做。 SAGA 参与者仅通过订阅彼此的事件来做出相应的响应。</p><p>SAGA 实现给予发布 / 订阅的通信时需要考虑的一些问题： <a href="http://jeckfs.gitee.io/JeckFS/2022/06/13/微服务架构中的进程通信/">可靠的事件通信</a></p><ul><li><p>确保 SAGA 参与方将更新器本地数据库和发布事件作为数据库事务的一部分。即数据库更新和事件发布必须是原子的。因此为了可靠的通信， SAGA 参与方必须使用事务性消息（第三章内容）。</p></li><li><p>确保 SAGA 参与方必须能够接收到的每个事件映射到自己的数据上。如引入 <strong>相关性 ID</strong> ，使得订阅者根据该 ID 可以找到操作的数据。</p></li></ul><img src="/JeckFS/2022/05/24/MyPro/Snipaste_2022-06-13_10-20-37.png" class="" title="This is 2-th image."><p>协同式 SAGA 的弊端：</p><img src="/JeckFS/2022/05/24/MyPro/Snipaste_2022-06-13_10-24-04.png" class="" title="This is 2-th image."><img src="/JeckFS/2022/05/24/MyPro/Snipaste_2022-06-13_10-24-21.png" class="" title="This is 2-th image."><h4 id="5-8-1-2-编排式-SAGA"><a href="#5-8-1-2-编排式-SAGA" class="headerlink" title="5.8.1.2 编排式 SAGA"></a>5.8.1.2 编排式 SAGA</h4><p>简介：<br>参与者的协调工作通过一个集中控制器来控制。 SAGA 编排器使用命令 / 异步响应方式告诉 SAGA 的参与方该做什么事情。当参与方完成操作后，会给编排器发送一个答复消息。编排器处理这个消息，并决定 SAGA 下一步的操作。</p><img src="/JeckFS/2022/05/24/MyPro/Snipaste_2022-06-13_10-35-21.png" class="" title="This is 2-th image."><p>将 SAGA 编排器视为一个状态机：</p><img src="/JeckFS/2022/05/24/MyPro/Snipaste_2022-06-13_10-37-33.png" class="" title="This is 2-th image."><p>编排式 SAGA 的优点：</p><img src="/JeckFS/2022/05/24/MyPro/Snipaste_2022-06-13_10-40-27.png" class="" title="This is 2-th image."><p>编排式 SAGA 弊端：</p><img src="/JeckFS/2022/05/24/MyPro/Snipaste_2022-06-13_10-41-17.png" class="" title="This is 2-th image."><h3 id="5-8-2-解决-SAGA-隔离问题"><a href="#5-8-2-解决-SAGA-隔离问题" class="headerlink" title="5.8.2 解决 SAGA 隔离问题"></a>5.8.2 解决 SAGA 隔离问题</h3><p>所谓隔离指的是：可以确保同时执行多个事务的结果与顺序执行它们的结果相同。</p><p>缺乏隔离会引起其他 SAGA 可以更改当前 SAGA 正在访问的数据，因此会导致如下问题：</p><img src="/JeckFS/2022/05/24/MyPro/Snipaste_2022-06-13_10-44-12.png" class="" title="This is 2-th image."><h4 id="5-8-2-1-语义锁"><a href="#5-8-2-1-语义锁" class="headerlink" title="5.8.2.1 语义锁"></a>5.8.2.1 语义锁</h4><img src="/JeckFS/2022/05/24/MyPro/Snipaste_2022-06-13_11-03-58.png" class="" title="This is 2-th image."><p>如何处理已被锁定的记录：</p><ul><li>让 cancelOrder() 系统命令执行失败并告诉客户端 <strong>稍后再试</strong>。这样做的好处是易于实现。弊端是客户端必须实现重试逻辑。</li><li>让 cancelOrder() 处于阻塞状态，知道其他 SAGA 释放了语义锁。好处是重建了 ACID 事务提供的隔离。更新相同记录的 SAGA 被序列化，减少了编程工作量。另一个好处是消除了客户端重试的负担。缺点是应用必须管理锁，还必须实现死锁检测算法，该算法执行 SAGA 的回滚以打破死锁并重新执行它。</li></ul><h4 id="5-8-2-2-交换式更新"><a href="#5-8-2-2-交换式更新" class="headerlink" title="5.8.2.2 交换式更新"></a>5.8.2.2 交换式更新</h4><h4 id="5-8-2-3-悲观视图"><a href="#5-8-2-3-悲观视图" class="headerlink" title="5.8.2.3 悲观视图"></a>5.8.2.3 悲观视图</h4><p>重新排序 SAGA 的步骤，以 <strong>最大限度</strong> 地降低由于脏读而导致的业务风险。</p><p>如 create order saga 执行了可用信用额度的脏读，并创建了超过消费者信用额度的订单。为了降低发生这种情况的风险，可以重排 Cancel Order SAGA：</p><img src="/JeckFS/2022/05/24/MyPro/Snipaste_2022-06-13_11-20-09.png" class="" title="This is 2-th image."><h4 id="5-8-2-4-重读值"><a href="#5-8-2-4-重读值" class="headerlink" title="5.8.2.4 重读值"></a>5.8.2.4 重读值</h4><p>重读值可以防止丢失更新。类似于 CAS ，在 SAGA 更新前重新读取记录，看记录中的计数器是否更改，如果记录更改，则 SAGA 终止，然后回滚。</p><h4 id="5-8-2-5-版本文件"><a href="#5-8-2-5-版本文件" class="headerlink" title="5.8.2.5 版本文件"></a>5.8.2.5 版本文件</h4><h4 id="5-8-2-6-业务风险评级"><a href="#5-8-2-6-业务风险评级" class="headerlink" title="5.8.2.6 业务风险评级"></a>5.8.2.6 业务风险评级</h4><p>这是一种基于业务风险选择并发机制的策略。使用 SAGA 执行低风险请求，使用分布式事务执行高风险请求。</p><h1 id="6-优雅停机"><a href="#6-优雅停机" class="headerlink" title="6. 优雅停机"></a>6. 优雅停机</h1><p><strong>整体思路：</strong></p><p><img src="Snipaste_2022-06-11_11-54-14.png" width="70%" height="70%"></p><h1 id="7-关于高并发的一点思考"><a href="#7-关于高并发的一点思考" class="headerlink" title="7. 关于高并发的一点思考"></a>7. 关于高并发的一点思考</h1><mark class="hl-label default">架构决定并发上限，代码决定并发下线</mark> <p>第一点：通过网关做限流熔断、请求的单元分发。</p><p>当系统出现大量请求时，使用网关做 <mark class="hl-label default">限流熔断</mark>  。所谓 <strong>限流</strong> 指的是满足系统处理速度的近乎上限，对于多余的流量直接拒绝。所谓 <strong>熔断</strong> 指的是当前并发量超过了系统处理的极限，导致服务无法正常处理，这时服务不做业务处理统一返回固定报文。当然网关也可以使用 MQ 做削峰填谷。</p><p>第二点：数据单元化</p><p>以双十一场景为例，可以用商品 ID 做单元化（一个单元仅处理一定范围的商品 ID ）。同样数据库也做单元化。</p><p>这种情况会有一个问题是，一个事务如果涉及跨单元的情况下又可能导致不同单元的事务不一致。这种情况下，有很多种方式进行补救。现在提供一种方式： SAGA 模式，使用各个系统内的本地事务来实现分布式事务。当系统 A 有一个需要事务处理的交易，这时候一个系统一个系统的去询问相关系统是否可执行，当执行完（但是不能提交事务，防止后续系统产生异常时方便回滚），当所有系统都完成时一起提交事务。这个过程中 <strong>尽可能的提高通讯效率，当服务处理慢的时候提供熔断机制，以提高相应速度。</strong></p><p>第三点：代码层面</p><p>少访问数据库，少使用大事务，使用缓存。</p><p>第四点：数据一致性保证</p><p>数据库加锁做最后的保证。考虑到分布式锁不是特别成熟，因此在业务逻辑中对于无关紧要的需要做数据一致性限制的地方使用分布式锁。对于关键代码还是要靠数据库锁。</p><p><a href="https://mp.weixin.qq.com/s/MErL680023FyJ7ovcQBlRw">参考链接</a></p><h1 id="8-日志脱敏"><a href="#8-日志脱敏" class="headerlink" title="8. 日志脱敏"></a>8. 日志脱敏</h1>]]></content>
      
      
      
        <tags>
            
            <tag> 项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring-SpEL</title>
      <link href="/JeckFS/2022/04/15/Spring-SpEL/"/>
      <url>/JeckFS/2022/04/15/Spring-SpEL/</url>
      
        <content type="html"><![CDATA[<p><a href="http://itmyhome.com/spring/expressions.html">中文参考教程</a><br><a href="https://docs.spring.io/spring-framework/docs/3.2.x/spring-framework-reference/html/expressions.html#expressions-example-classes">英文参考教程</a></p><h1 id="1-Spring-SpEL-的功能"><a href="#1-Spring-SpEL-的功能" class="headerlink" title="1 Spring SpEL 的功能"></a>1 Spring SpEL 的功能</h1><ul><li>Literal expressions</li><li>Boolean and relational operators</li><li>Regular expressions</li><li>Class expressions</li><li>Accessing properties, arrays, lists, maps</li><li>Method invocation</li><li>Relational operators</li><li>Assignment</li><li>Calling constructors</li><li>Bean references</li><li>Array construction</li><li>Inline lists</li><li>Ternary operator</li><li>Variables</li><li>User defined functions</li><li>Collection projection</li><li>Collection selection</li><li>Templated expressions</li></ul><h1 id="2-使用-SpEL-求值"><a href="#2-使用-SpEL-求值" class="headerlink" title="2 使用 SpEL 求值"></a>2 使用 SpEL 求值</h1><p>计算 string 字面量：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ExpressionParser</span> <span class="variable">parser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SpelExpressionParser</span>();</span><br><span class="line"><span class="type">Expression</span> <span class="variable">exp</span> <span class="operator">=</span> parser.parseExpression(<span class="string">&quot;&#x27;Hello World&#x27;&quot;</span>); <span class="comment">// 字符串常量一定要使用单引号定界</span></span><br><span class="line"><span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> (String) exp.getValue(); <span class="comment">// Hello World</span></span><br></pre></td></tr></table></figure><p>调用 string 字面量的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ExpressionParser</span> <span class="variable">parser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SpelExpressionParser</span>();</span><br><span class="line"><span class="type">Expression</span> <span class="variable">exp</span> <span class="operator">=</span> parser.parseExpression(<span class="string">&quot;&#x27;Hello World&#x27;.concat(&#x27;!&#x27;)&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> (String) exp.getValue(); <span class="comment">// Hello World!</span></span><br></pre></td></tr></table></figure><p>调用 JavaBean Property </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ExpressionParser</span> <span class="variable">parser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SpelExpressionParser</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// invokes &#x27;getBytes()&#x27;</span></span><br><span class="line"><span class="type">Expression</span> <span class="variable">exp</span> <span class="operator">=</span> parser.parseExpression(<span class="string">&quot;&#x27;Hello World&#x27;.bytes&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">byte</span>[] bytes = (<span class="type">byte</span>[]) exp.getValue();</span><br></pre></td></tr></table></figure><p>嵌套属性调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ExpressionParser</span> <span class="variable">parser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SpelExpressionParser</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// invokes &#x27;getBytes().length&#x27;</span></span><br><span class="line"><span class="type">Expression</span> <span class="variable">exp</span> <span class="operator">=</span> parser.parseExpression(<span class="string">&quot;&#x27;Hello World&#x27;.bytes.length&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> (Integer) exp.getValue();</span><br></pre></td></tr></table></figure><p>调用构造函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ExpressionParser</span> <span class="variable">parser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SpelExpressionParser</span>();</span><br><span class="line"><span class="type">Expression</span> <span class="variable">exp</span> <span class="operator">=</span> parser.parseExpression(<span class="string">&quot;new String(&#x27;hello world&#x27;).toUpperCase()&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> exp.getValue(String.class);</span><br></pre></td></tr></table></figure><p>获取对象中的属性值：</p><p>方式1: 当 root Object 不变时<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, Integer age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// getter... setter... toString</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ExpressionParser</span> <span class="variable">parser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SpelExpressionParser</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;zhangsan&quot;</span>, <span class="number">13</span>);</span><br><span class="line">        <span class="type">Expression</span> <span class="variable">exp</span> <span class="operator">=</span> parser.parseExpression(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        <span class="comment">// StandardEvaluationContext指定了exp.getValue()从哪个对象中获取name值。对象 p 也被称为 root Object</span></span><br><span class="line">        <span class="type">StandardEvaluationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StandardEvaluationContext</span>(p); </span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> (String) exp.getValue(context);</span><br><span class="line">        System.out.println(name); <span class="comment">// zhangsan</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><p>StandardEvaluationContext 的构造成本相对较高，在重复使用期间，它会构建缓存状态，从而使后续的表达式计算能够更快地执行。因此，最好在可能的地方缓存和重用它们，而不是为每个表达式求值构造一个新的表达式</p><p>方式2: 当 root Object 变化时：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ExpressionParser</span> <span class="variable">parser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SpelExpressionParser</span>();</span><br><span class="line"></span><br><span class="line"><span class="type">Person</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;zhangsan&quot;</span>, <span class="number">13</span>);</span><br><span class="line"><span class="type">Person</span> <span class="variable">p2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;wangwu&quot;</span>, <span class="number">12</span>);</span><br><span class="line"><span class="type">Expression</span> <span class="variable">exp</span> <span class="operator">=</span> parser.parseExpression(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">System.out.println(exp.getValue(p1));<span class="comment">//zhangsan</span></span><br><span class="line">System.out.println(exp.getValue(p2));<span class="comment">//wangwu</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ExpressionParser</span> <span class="variable">parser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SpelExpressionParser</span>();</span><br><span class="line"></span><br><span class="line"><span class="type">Person</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;zhangsan&quot;</span>, <span class="number">13</span>);</span><br><span class="line"><span class="type">Person</span> <span class="variable">p2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;wangwu&quot;</span>, <span class="number">12</span>);</span><br><span class="line"><span class="type">Expression</span> <span class="variable">exp</span> <span class="operator">=</span> parser.parseExpression(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">System.out.println(exp.getValue(p1));<span class="comment">//zhangsan</span></span><br><span class="line"><span class="type">StandardEvaluationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StandardEvaluationContext</span>(p1);</span><br><span class="line">System.out.println(exp.getValue(context, p2));<span class="comment">//wangwu //虽然这里指定了context，但是在调用getValue时，指定了从p2中获取name属性，因此会覆盖context</span></span><br></pre></td></tr></table></figure><p>使用 boolean 运算符：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Person</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;zhangsan&quot;</span>, <span class="number">13</span>);</span><br><span class="line"><span class="type">Expression</span> <span class="variable">exp</span> <span class="operator">=</span> parser.parseExpression(<span class="string">&quot;name == &#x27;zhangsan&#x27;&quot;</span>);</span><br><span class="line">System.out.println(exp.getValue(p1));<span class="comment">//true</span></span><br></pre></td></tr></table></figure><h1 id="3-EvaluationContext-接口"><a href="#3-EvaluationContext-接口" class="headerlink" title="3 EvaluationContext 接口"></a>3 EvaluationContext 接口</h1><p>EvaluationContext 接口使用来计算表达式时解析属性、方法、字段、或协助类型转换的。 StandardEvaluationContext 是该接口的一个开箱即用的实现，它使用反射来使用对象，并将 java.lang.reflect 中的 Method 、 Field 、 Constructor 属性缓存起来以提高性能。</p><p>StandardEvaluationContext 中常用的方法：</p><ul><li>setRootObject() ： 设置 root Object</li><li>setVariable() ： 设置表达式中的变量</li><li>registerFunction() ： 设置表达式中的函数</li></ul><p>StandardEvaluationContext 也支持注册 ConstructorResolver, MethodResolver, and PropertyAccessor 来扩展 SpEL 计算表达式。</p><h2 id="3-1-类型转换"><a href="#3-1-类型转换" class="headerlink" title="3.1 类型转换"></a>3.1 类型转换</h2><p>SpEL 默认的类型转换服务是：org.springframework.core.convert.ConversionService 。spring 提供了许多内建的通用转换器，他们也是可以扩展的。最重要的是 ConversionService 还具有范型感知的能力。这意味着可以将计算表达式中的范型可以被 SpEL 尽可能正确地转换。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Simple</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Boolean&gt; booleanList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Boolean&gt;();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">Simple</span> <span class="variable">simple</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Simple</span>();</span><br><span class="line"></span><br><span class="line">simple.booleanList.add(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">StandardEvaluationContext</span> <span class="variable">simpleContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StandardEvaluationContext</span>(simple);</span><br><span class="line"></span><br><span class="line"><span class="comment">// false is passed in here as a string.  SpEL and the conversion service will</span></span><br><span class="line"><span class="comment">// correctly recognize that it needs to be a Boolean and convert it</span></span><br><span class="line">parser.parseExpression(<span class="string">&quot;booleanList[0]&quot;</span>).setValue(simpleContext, <span class="string">&quot;false&quot;</span>); <span class="comment">// 将 booleanList[0]设置为false。类型转换器会识别false为Boolean类型的。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// b will be false</span></span><br><span class="line"><span class="type">Boolean</span> <span class="variable">b</span> <span class="operator">=</span> simple.booleanList.get(<span class="number">0</span>); </span><br></pre></td></tr></table></figure><h1 id="4-定义-bean-definition-时使用-SpEL"><a href="#4-定义-bean-definition-时使用-SpEL" class="headerlink" title="4 定义 bean definition 时使用 SpEL"></a>4 定义 bean definition 时使用 SpEL</h1><p>格式： <code>#&#123; &lt;expression string&gt; &#125;</code></p><p>基于 XML 方式的配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- proterty construcort-arg 中使用 spel --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;numberGuess&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.spring.samples.NumberGuess&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;randomNumber&quot;</span> <span class="attr">value</span>=<span class="string">&quot;#&#123; T(java.lang.Math).random() * 100.0 &#125;&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- other properties --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;taxCalculator&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.spring.samples.TaxCalculator&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用已定义变量 systemProperties 中的值 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;defaultLocale&quot;</span> <span class="attr">value</span>=<span class="string">&quot;#&#123; systemProperties[&#x27;user.region&#x27;] &#125;&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- other properties --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 通过 name 属性引用其他的 bean --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;numberGuess&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.spring.samples.NumberGuess&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;randomNumber&quot;</span> <span class="attr">value</span>=<span class="string">&quot;#&#123; T(java.lang.Math).random() * 100.0 &#125;&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- other properties --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;shapeGuess&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.spring.samples.ShapeGuess&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;initialShapeSeed&quot;</span> <span class="attr">value</span>=<span class="string">&quot;#&#123; numberGuess.randomNumber &#125;&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- other properties --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>基于注解的方式配置：<br>可以使用 <code>@value</code> 给字段、方法、方法或者构造方法中的参数设置默认值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">FieldValueTestBean</span></span><br><span class="line"></span><br><span class="line">  <span class="meta">@Value(&quot;#&#123; systemProperties[&#x27;user.region&#x27;] &#125;&quot;)</span></span><br><span class="line">  <span class="keyword">private</span> String defaultLocale;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDefaultLocale</span><span class="params">(String defaultLocale)</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">this</span>.defaultLocale = defaultLocale;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">getDefaultLocale</span><span class="params">()</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.defaultLocale;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">PropertyValueTestBean</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> String defaultLocale;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Value(&quot;#&#123; systemProperties[&#x27;user.region&#x27;] &#125;&quot;)</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDefaultLocale</span><span class="params">(String defaultLocale)</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">this</span>.defaultLocale = defaultLocale;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">getDefaultLocale</span><span class="params">()</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.defaultLocale;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleMovieLister</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> MovieFinder movieFinder;</span><br><span class="line">  <span class="keyword">private</span> String defaultLocale;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(MovieFinder movieFinder,</span></span><br><span class="line"><span class="params">                        <span class="meta">@Value(&quot;#&#123; systemProperties[&#x27;user.region&#x27;] &#125;&quot;)</span> String defaultLocale)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.movieFinder = movieFinder;</span><br><span class="line">      <span class="built_in">this</span>.defaultLocale = defaultLocale;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MovieRecommender</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> String defaultLocale;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> CustomerPreferenceDao customerPreferenceDao;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">MovieRecommender</span><span class="params">(CustomerPreferenceDao customerPreferenceDao,</span></span><br><span class="line"><span class="params">                          <span class="meta">@Value(&quot;#&#123;systemProperties[&#x27;user.country&#x27;]&#125;&quot;)</span> String defaultLocale)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.customerPreferenceDao = customerPreferenceDao;</span><br><span class="line">      <span class="built_in">this</span>.defaultLocale = defaultLocale;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="5-更为详细的教程"><a href="#5-更为详细的教程" class="headerlink" title="5 更为详细的教程"></a>5 更为详细的教程</h1><h2 id="5-1-字面量表达式"><a href="#5-1-字面量表达式" class="headerlink" title="5.1 字面量表达式"></a>5.1 字面量表达式</h2><p>所谓字面量指的是： string 、numeric values， boolean , null</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ExpressionParser</span> <span class="variable">parser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SpelExpressionParser</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// evals to &quot;Hello World&quot;</span></span><br><span class="line"><span class="type">String</span> <span class="variable">helloWorld</span> <span class="operator">=</span> (String) parser.parseExpression(<span class="string">&quot;&#x27;Hello World&#x27;&quot;</span>).getValue();</span><br><span class="line"></span><br><span class="line"><span class="type">double</span> <span class="variable">avogadrosNumber</span>  <span class="operator">=</span> (Double) parser.parseExpression(<span class="string">&quot;6.0221415E+23&quot;</span>).getValue();</span><br><span class="line"></span><br><span class="line"><span class="comment">// evals to 2147483647</span></span><br><span class="line"><span class="type">int</span> <span class="variable">maxValue</span> <span class="operator">=</span> (Integer) parser.parseExpression(<span class="string">&quot;0x7FFFFFFF&quot;</span>).getValue();</span><br><span class="line"></span><br><span class="line"><span class="type">boolean</span> <span class="variable">trueValue</span> <span class="operator">=</span> (Boolean) parser.parseExpression(<span class="string">&quot;true&quot;</span>).getValue();</span><br><span class="line"></span><br><span class="line"><span class="type">Object</span> <span class="variable">nullValue</span> <span class="operator">=</span> parser.parseExpression(<span class="string">&quot;null&quot;</span>).getValue();</span><br></pre></td></tr></table></figure><h2 id="5-2-Properties-Arrays-Lists-Maps-Indexers"><a href="#5-2-Properties-Arrays-Lists-Maps-Indexers" class="headerlink" title="5.2 Properties, Arrays, Lists, Maps, Indexers"></a>5.2 Properties, Arrays, Lists, Maps, Indexers</h2><p>对象属性的引用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">year</span> <span class="operator">=</span> (Integer) parser.parseExpression(<span class="string">&quot;Birthdate.Year + 1900&quot;</span>).getValue(context);</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">city</span> <span class="operator">=</span> (String) parser.parseExpression(<span class="string">&quot;placeOfBirth.City&quot;</span>).getValue(context);</span><br></pre></td></tr></table></figure><p>Array 与 List 的元素获取：（首字母大小写不敏感）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ExpressionParser</span> <span class="variable">parser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SpelExpressionParser</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Inventions Array</span></span><br><span class="line"><span class="type">StandardEvaluationContext</span> <span class="variable">teslaContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StandardEvaluationContext</span>(tesla); <span class="comment">// Inventor</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// evaluates to &quot;Induction motor&quot;</span></span><br><span class="line"><span class="type">String</span> <span class="variable">invention</span> <span class="operator">=</span> parser.parseExpression(<span class="string">&quot;inventions[3]&quot;</span>).getValue(teslaContext, String.class);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Members List</span></span><br><span class="line"><span class="type">StandardEvaluationContext</span> <span class="variable">societyContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StandardEvaluationContext</span>(ieee);</span><br><span class="line"></span><br><span class="line"><span class="comment">// evaluates to &quot;Nikola Tesla&quot;</span></span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> parser.parseExpression(<span class="string">&quot;Members[0].Name&quot;</span>).getValue(societyContext, String.class);</span><br><span class="line"></span><br><span class="line"><span class="comment">// List and Array navigation</span></span><br><span class="line"><span class="comment">// evaluates to &quot;Wireless communication&quot;</span></span><br><span class="line"><span class="type">String</span> <span class="variable">invention</span> <span class="operator">=</span> parser.parseExpression(<span class="string">&quot;Members[0].Inventions[6]&quot;</span>).getValue(societyContext, String.class);</span><br></pre></td></tr></table></figure><p>Map :</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Officer&#x27;s Dictionary</span></span><br><span class="line"></span><br><span class="line"><span class="type">Inventor</span> <span class="variable">pupin</span> <span class="operator">=</span> parser.parseExpression(<span class="string">&quot;Officers[&#x27;president&#x27;]&quot;</span>).getValue(societyContext, Inventor.class);</span><br><span class="line"></span><br><span class="line"><span class="comment">// evaluates to &quot;Idvor&quot;</span></span><br><span class="line"><span class="type">String</span> <span class="variable">city</span> <span class="operator">=</span></span><br><span class="line">    parser.parseExpression(<span class="string">&quot;Officers[&#x27;president&#x27;].PlaceOfBirth.City&quot;</span>).getValue(societyContext, String.class);</span><br><span class="line"></span><br><span class="line"><span class="comment">// setting values</span></span><br><span class="line">parser.parseExpression(<span class="string">&quot;Officers[&#x27;advisors&#x27;][0].PlaceOfBirth.Country&quot;</span>).setValue(societyContext, <span class="string">&quot;Croatia&quot;</span>);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Create and set a calendar</span></span><br><span class="line"><span class="type">GregorianCalendar</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GregorianCalendar</span>();</span><br><span class="line">c.set(<span class="number">1856</span>, <span class="number">7</span>, <span class="number">9</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//  The constructor arguments are name, birthday, and nationality.</span></span><br><span class="line"><span class="type">Inventor</span> <span class="variable">tesla</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Inventor</span>(<span class="string">&quot;Nikola Tesla&quot;</span>, c.getTime(), <span class="string">&quot;Serbian&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">ExpressionParser</span> <span class="variable">parser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SpelExpressionParser</span>();</span><br><span class="line"><span class="type">Expression</span> <span class="variable">exp</span> <span class="operator">=</span> parser.parseExpression(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> (String) exp.getValue(tesla);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.spring.samples.spel.inventor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.GregorianCalendar;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Inventor</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="keyword">private</span> String nationality;</span><br><span class="line">  <span class="keyword">private</span> String[] inventions;</span><br><span class="line">  <span class="keyword">private</span> Date birthdate;</span><br><span class="line">  <span class="keyword">private</span> PlaceOfBirth placeOfBirth;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">Inventor</span><span class="params">(String name, String nationality)</span></span><br><span class="line">  &#123;</span><br><span class="line">    GregorianCalendar c= <span class="keyword">new</span> <span class="title class_">GregorianCalendar</span>();</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="built_in">this</span>.nationality = nationality;</span><br><span class="line">    <span class="built_in">this</span>.birthdate = c.getTime();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">Inventor</span><span class="params">(String name, Date birthdate, String nationality)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="built_in">this</span>.nationality = nationality;</span><br><span class="line">    <span class="built_in">this</span>.birthdate = birthdate;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">Inventor</span><span class="params">()</span> &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> name;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">getNationality</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> nationality;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setNationality</span><span class="params">(String nationality)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.nationality = nationality;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> Date <span class="title function_">getBirthdate</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> birthdate;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBirthdate</span><span class="params">(Date birthdate)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.birthdate = birthdate;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> PlaceOfBirth <span class="title function_">getPlaceOfBirth</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> placeOfBirth;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPlaceOfBirth</span><span class="params">(PlaceOfBirth placeOfBirth)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.placeOfBirth = placeOfBirth;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setInventions</span><span class="params">(String[] inventions)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.inventions = inventions;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> String[] getInventions() &#123;</span><br><span class="line">    <span class="keyword">return</span> inventions;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.spring.samples.spel.inventor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PlaceOfBirth</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String city;</span><br><span class="line">    <span class="keyword">private</span> String country;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">PlaceOfBirth</span><span class="params">(String city)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.city=city;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">PlaceOfBirth</span><span class="params">(String city, String country)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">this</span>(city);</span><br><span class="line">        <span class="built_in">this</span>.country = country;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getCity</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> city;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCity</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.city = s;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getCountry</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> country;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCountry</span><span class="params">(String country)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.country = country;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.spring.samples.spel.inventor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Society</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">Advisors</span> <span class="operator">=</span> <span class="string">&quot;advisors&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">President</span> <span class="operator">=</span> <span class="string">&quot;president&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Inventor&gt; members = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Inventor&gt;();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">Map</span> <span class="variable">officers</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List <span class="title function_">getMembers</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> members;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Map <span class="title function_">getOfficers</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> officers;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isMember</span><span class="params">(String name)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">found</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (Inventor inventor : members) &#123;</span><br><span class="line">            <span class="keyword">if</span> (inventor.getName().equals(name))</span><br><span class="line">            &#123;</span><br><span class="line">                found = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> found;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-3-inline-list"><a href="#5-3-inline-list" class="headerlink" title="5.3 inline list:"></a>5.3 inline list:</h2><p>通过 <code>&#123;&#125;</code> 直接定义 List</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// evaluates to a Java list containing the four numbers</span></span><br><span class="line"><span class="type">List</span> <span class="variable">numbers</span> <span class="operator">=</span> (List) parser.parseExpression(<span class="string">&quot;&#123;1,2,3,4&#125;&quot;</span>).getValue(context);</span><br><span class="line"></span><br><span class="line"><span class="type">List</span> <span class="variable">listOfLists</span> <span class="operator">=</span> (List) parser.parseExpression(<span class="string">&quot;&#123;&#123;&#x27;a&#x27;,&#x27;b&#x27;&#125;,&#123;&#x27;x&#x27;,&#x27;y&#x27;&#125;&#125;&quot;</span>).getValue(context);</span><br></pre></td></tr></table></figure><p><code>&#123;&#125;</code> 表示空列表</p><h2 id="5-4-Array-construction"><a href="#5-4-Array-construction" class="headerlink" title="5.4 Array construction"></a>5.4 Array construction</h2><p>仅适用于一维数组。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] numbers1 = (<span class="type">int</span>[]) parser.parseExpression(<span class="string">&quot;new int[4]&quot;</span>).getValue(context);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Array with initializer</span></span><br><span class="line"><span class="type">int</span>[] numbers2 = (<span class="type">int</span>[]) parser.parseExpression(<span class="string">&quot;new int[]&#123;1,2,3&#125;&quot;</span>).getValue(context);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Multi dimensional array</span></span><br><span class="line"><span class="type">int</span>[][] numbers3 = (<span class="type">int</span>[][]) parser.parseExpression(<span class="string">&quot;new int[4][5]&quot;</span>).getValue(context);</span><br></pre></td></tr></table></figure><h2 id="5-5-Methods"><a href="#5-5-Methods" class="headerlink" title="5.5 Methods"></a>5.5 Methods</h2><p>也支持可变参数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// string literal, evaluates to &quot;bc&quot;</span></span><br><span class="line"><span class="type">String</span> <span class="variable">c</span> <span class="operator">=</span> parser.parseExpression(<span class="string">&quot;&#x27;abc&#x27;.substring(2, 3)&quot;</span>).getValue(String.class);</span><br><span class="line"></span><br><span class="line"><span class="comment">// evaluates to true</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">isMember</span> <span class="operator">=</span> parser.parseExpression(<span class="string">&quot;isMember(&#x27;Mihajlo Pupin&#x27;)&quot;</span>).getValue(societyContext, Boolean.class);</span><br></pre></td></tr></table></figure><h2 id="5-6-Operators"><a href="#5-6-Operators" class="headerlink" title="5.6 Operators"></a>5.6 Operators</h2><h3 id="5-6-1-Relational-operators"><a href="#5-6-1-Relational-operators" class="headerlink" title="5.6.1 Relational operators"></a>5.6.1 Relational operators</h3><p>支持 <code>= , != , &lt; , &lt;= , &gt; , &gt;=</code> ，也可以使用字母来表示： <code>lt (&#39;&lt;&#39;), gt (&#39;&gt;&#39;), le (&#39;&lt;=&#39;), ge (&#39;&gt;=&#39;), eq (&#39;==&#39;), ne (&#39;!=&#39;), div (&#39;/&#39;), mod (&#39;%&#39;), not (&#39;!&#39;)</code> 字母表示不区分大小写。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// evaluates to true</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">trueValue</span> <span class="operator">=</span> parser.parseExpression(<span class="string">&quot;2 == 2&quot;</span>).getValue(Boolean.class);</span><br><span class="line"></span><br><span class="line"><span class="comment">// evaluates to false</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">falseValue</span> <span class="operator">=</span> parser.parseExpression(<span class="string">&quot;2 &lt; -5.0&quot;</span>).getValue(Boolean.class);</span><br><span class="line"></span><br><span class="line"><span class="comment">// evaluates to true</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">trueValue</span> <span class="operator">=</span> parser.parseExpression(<span class="string">&quot;&#x27;black&#x27; &lt; &#x27;block&#x27;&quot;</span>).getValue(Boolean.class);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// evaluates to false</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">falseValue</span> <span class="operator">=</span> parser.parseExpression(<span class="string">&quot;&#x27;xyz&#x27; instanceof T(int)&quot;</span>).getValue(Boolean.class);</span><br><span class="line"></span><br><span class="line"><span class="comment">// evaluates to true</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">trueValue</span> <span class="operator">=</span></span><br><span class="line">     parser.parseExpression(<span class="string">&quot;&#x27;5.00&#x27; matches &#x27;^-?\\d+(\\.\\d&#123;2&#125;)?$&#x27;&quot;</span>).getValue(Boolean.class);</span><br><span class="line"></span><br><span class="line"><span class="comment">//evaluates to false</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">falseValue</span> <span class="operator">=</span></span><br><span class="line">     parser.parseExpression(<span class="string">&quot;&#x27;5.0067&#x27; matches &#x27;^-?\\d+(\\.\\d&#123;2&#125;)?$&#x27;&quot;</span>).getValue(Boolean.class);</span><br></pre></td></tr></table></figure><h3 id="5-6-2-Logical-operators"><a href="#5-6-2-Logical-operators" class="headerlink" title="5.6.2 Logical operators"></a>5.6.2 Logical operators</h3><p>逻辑运算符包含： not , and , or</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// -- AND --</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// evaluates to false</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">falseValue</span> <span class="operator">=</span> parser.parseExpression(<span class="string">&quot;true and false&quot;</span>).getValue(Boolean.class);</span><br><span class="line"></span><br><span class="line"><span class="comment">// evaluates to true</span></span><br><span class="line"><span class="type">String</span> <span class="variable">expression</span> <span class="operator">=</span>  <span class="string">&quot;isMember(&#x27;Nikola Tesla&#x27;) and isMember(&#x27;Mihajlo Pupin&#x27;)&quot;</span>;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">trueValue</span> <span class="operator">=</span> parser.parseExpression(expression).getValue(societyContext, Boolean.class);</span><br><span class="line"></span><br><span class="line"><span class="comment">// -- OR --</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// evaluates to true</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">trueValue</span> <span class="operator">=</span> parser.parseExpression(<span class="string">&quot;true or false&quot;</span>).getValue(Boolean.class);</span><br><span class="line"></span><br><span class="line"><span class="comment">// evaluates to true</span></span><br><span class="line"><span class="type">String</span> <span class="variable">expression</span> <span class="operator">=</span>  <span class="string">&quot;isMember(&#x27;Nikola Tesla&#x27;) or isMember(&#x27;Albert Einstein&#x27;)&quot;</span>;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">trueValue</span> <span class="operator">=</span> parser.parseExpression(expression).getValue(societyContext, Boolean.class);</span><br><span class="line"></span><br><span class="line"><span class="comment">// -- NOT --</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// evaluates to false</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">falseValue</span> <span class="operator">=</span> parser.parseExpression(<span class="string">&quot;!true&quot;</span>).getValue(Boolean.class);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// -- AND and NOT --</span></span><br><span class="line"><span class="type">String</span> <span class="variable">expression</span> <span class="operator">=</span>  <span class="string">&quot;isMember(&#x27;Nikola Tesla&#x27;) and !isMember(&#x27;Mihajlo Pupin&#x27;)&quot;</span>;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">falseValue</span> <span class="operator">=</span> parser.parseExpression(expression).getValue(societyContext, Boolean.class);</span><br></pre></td></tr></table></figure><h3 id="5-6-3-Mathematical-operators"><a href="#5-6-3-Mathematical-operators" class="headerlink" title="5.6.3 Mathematical operators"></a>5.6.3 Mathematical operators</h3><p><code>+</code> 支持 numbers, strings and dates<br><code>-</code> 支持 numbers and dates<br><code>* /</code> 支持 numbers<br>其他算数操作符： <code>% ^</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Addition</span></span><br><span class="line"><span class="type">int</span> <span class="variable">two</span> <span class="operator">=</span> parser.parseExpression(<span class="string">&quot;1 + 1&quot;</span>).getValue(Integer.class); <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">testString</span> <span class="operator">=</span></span><br><span class="line">   parser.parseExpression(<span class="string">&quot;&#x27;test&#x27; + &#x27; &#x27; + &#x27;string&#x27;&quot;</span>).getValue(String.class);  <span class="comment">// &#x27;test string&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Subtraction</span></span><br><span class="line"><span class="type">int</span> <span class="variable">four</span> <span class="operator">=</span>  parser.parseExpression(<span class="string">&quot;1 - -3&quot;</span>).getValue(Integer.class); <span class="comment">// 4</span></span><br><span class="line"></span><br><span class="line"><span class="type">double</span> <span class="variable">d</span> <span class="operator">=</span> parser.parseExpression(<span class="string">&quot;1000.00 - 1e4&quot;</span>).getValue(Double.class); <span class="comment">// -9000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Multiplication</span></span><br><span class="line"><span class="type">int</span> <span class="variable">six</span> <span class="operator">=</span>  parser.parseExpression(<span class="string">&quot;-2 * -3&quot;</span>).getValue(Integer.class); <span class="comment">// 6</span></span><br><span class="line"></span><br><span class="line"><span class="type">double</span> <span class="variable">twentyFour</span> <span class="operator">=</span> parser.parseExpression(<span class="string">&quot;2.0 * 3e0 * 4&quot;</span>).getValue(Double.class); <span class="comment">// 24.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Division</span></span><br><span class="line"><span class="type">int</span> <span class="variable">minusTwo</span> <span class="operator">=</span>  parser.parseExpression(<span class="string">&quot;6 / -3&quot;</span>).getValue(Integer.class); <span class="comment">// -2</span></span><br><span class="line"></span><br><span class="line"><span class="type">double</span> <span class="variable">one</span> <span class="operator">=</span> parser.parseExpression(<span class="string">&quot;8.0 / 4e0 / 2&quot;</span>).getValue(Double.class); <span class="comment">// 1.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Modulus</span></span><br><span class="line"><span class="type">int</span> <span class="variable">three</span> <span class="operator">=</span>  parser.parseExpression(<span class="string">&quot;7 % 4&quot;</span>).getValue(Integer.class); <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">one</span> <span class="operator">=</span> parser.parseExpression(<span class="string">&quot;8 / 5 % 2&quot;</span>).getValue(Integer.class); <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Operator precedence</span></span><br><span class="line"><span class="type">int</span> <span class="variable">minusTwentyOne</span> <span class="operator">=</span> parser.parseExpression(<span class="string">&quot;1+2-3*8&quot;</span>).getValue(Integer.class); <span class="comment">// -21</span></span><br></pre></td></tr></table></figure><h3 id="5-6-4-Assignment"><a href="#5-6-4-Assignment" class="headerlink" title="5.6.4 Assignment"></a>5.6.4 Assignment</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">nventor</span> <span class="variable">inventor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Inventor</span>();</span><br><span class="line"><span class="type">StandardEvaluationContext</span> <span class="variable">inventorContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StandardEvaluationContext</span>(inventor);</span><br><span class="line"></span><br><span class="line">parser.parseExpression(<span class="string">&quot;Name&quot;</span>).setValue(inventorContext, <span class="string">&quot;Alexander Seovic2&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// alternatively</span></span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">aleks</span> <span class="operator">=</span> parser.parseExpression(<span class="string">&quot;Name = &#x27;Alexandar Seovic&#x27;&quot;</span>).getValue(inventorContext, String.class);</span><br></pre></td></tr></table></figure><h3 id="5-6-5-Types"><a href="#5-6-5-Types" class="headerlink" title="5.6.5 Types"></a>5.6.5 Types</h3><p>在表示类型时， <code>T()</code> 表示 <code>java.lang</code> 包下的类型， 其他包下的类型需要指定全类名。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">dateClass</span> <span class="operator">=</span> parser.parseExpression(<span class="string">&quot;T(java.util.Date)&quot;</span>).getValue(Class.class);</span><br><span class="line"></span><br><span class="line"><span class="type">Class</span> <span class="variable">stringClass</span> <span class="operator">=</span> parser.parseExpression(<span class="string">&quot;T(String)&quot;</span>).getValue(Class.class);</span><br><span class="line"></span><br><span class="line"><span class="type">boolean</span> <span class="variable">trueValue</span> <span class="operator">=</span></span><br><span class="line">   parser.parseExpression(<span class="string">&quot;T(java.math.RoundingMode).CEILING &lt; T(java.math.RoundingMode).FLOOR&quot;</span>)</span><br><span class="line">  .getValue(Boolean.class);</span><br></pre></td></tr></table></figure><h3 id="5-6-6-Constructors"><a href="#5-6-6-Constructors" class="headerlink" title="5.6.6 Constructors"></a>5.6.6 Constructors</h3><p>使用 new 关键字调用构造函数，构造函数要指定全类名。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Inventor</span> <span class="variable">einstein</span> <span class="operator">=</span></span><br><span class="line">  p.parseExpression(<span class="string">&quot;new org.spring.samples.spel.inventor.Inventor(&#x27;Albert Einstein&#x27;, &#x27;German&#x27;)&quot;</span>).getValue(Inventor.class);</span><br><span class="line"></span><br><span class="line"><span class="comment">//create new inventor instance within add method of List</span></span><br><span class="line">p.parseExpression(<span class="string">&quot;Members.add(new org.spring.samples.spel.inventor.Inventor(&#x27;Albert Einstein&#x27;,&#x27;German&#x27;))&quot;</span>).getValue(societyContext);</span><br></pre></td></tr></table></figure><h3 id="5-6-7-Variables"><a href="#5-6-7-Variables" class="headerlink" title="5.6.7 Variables"></a>5.6.7 Variables</h3><p>在 SpEL 表达式中可以使用 <code>#var</code> 来引用。在 StandardEvaluationContext 中可以使用 setVariable() 来设置变量值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Inventor</span> <span class="variable">tesla</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Inventor</span>(<span class="string">&quot;Nikola Tesla&quot;</span>, <span class="string">&quot;Serbian&quot;</span>);</span><br><span class="line"><span class="type">StandardEvaluationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StandardEvaluationContext</span>(tesla);</span><br><span class="line">context.setVariable(<span class="string">&quot;newName&quot;</span>, <span class="string">&quot;Mike Tesla&quot;</span>);</span><br><span class="line"></span><br><span class="line">parser.parseExpression(<span class="string">&quot;Name = #newName&quot;</span>).getValue(context);</span><br><span class="line"></span><br><span class="line">System.out.println(tesla.getName()) <span class="comment">// &quot;Mike Tesla&quot;</span></span><br></pre></td></tr></table></figure><h3 id="5-6-8-The-this-and-root-variables"><a href="#5-6-8-The-this-and-root-variables" class="headerlink" title="5.6.8 The #this and #root variables"></a>5.6.8 The <code>#this</code> and <code>#root</code> variables</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// create an array of integers</span></span><br><span class="line">List&lt;Integer&gt; primes = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;();</span><br><span class="line">primes.addAll(Arrays.asList(<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">11</span>,<span class="number">13</span>,<span class="number">17</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// create parser and set variable &#x27;primes&#x27; as the array of integers</span></span><br><span class="line"><span class="type">ExpressionParser</span> <span class="variable">parser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SpelExpressionParser</span>();</span><br><span class="line"><span class="type">StandardEvaluationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StandardEvaluationContext</span>();</span><br><span class="line">context.setVariable(<span class="string">&quot;primes&quot;</span>,primes);</span><br><span class="line"></span><br><span class="line"><span class="comment">// all prime numbers &gt; 10 from the list (using selection ?&#123;...&#125;)</span></span><br><span class="line"><span class="comment">// evaluates to [11, 13, 17]</span></span><br><span class="line">List&lt;Integer&gt; primesGreaterThanTen = (List&lt;Integer&gt;) parser.parseExpression(<span class="string">&quot;#primes.?[#this&gt;10]&quot;</span>).getValue(context);</span><br></pre></td></tr></table></figure><h3 id="5-6-9-Functions"><a href="#5-6-9-Functions" class="headerlink" title="5.6.9 Functions"></a>5.6.9 Functions</h3><p>使用 <code>public void registerFunction(String name, Method m)</code> 注册新的函数在计算表达式中使用。</p><p>假设存在已定义函数 reverseString()<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">StringUtils</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">reverseString</span><span class="params">(String input)</span> &#123;</span><br><span class="line">    <span class="type">StringBuilder</span> <span class="variable">backwards</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; input.length(); i++)</span><br><span class="line">      backwards.append(input.charAt(input.length() - <span class="number">1</span> - i));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> backwards.toString();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ExpressionParser</span> <span class="variable">parser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SpelExpressionParser</span>();</span><br><span class="line"><span class="type">StandardEvaluationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StandardEvaluationContext</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将 reverseString 函数注册到 context 中，就可以在计算表达式中使用了</span></span><br><span class="line">context.registerFunction(<span class="string">&quot;reverseString&quot;</span>,StringUtils.class.getDeclaredMethod(<span class="string">&quot;reverseString&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; String.class &#125;));</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">helloWorldReversed</span> <span class="operator">=</span> parser.parseExpression(<span class="string">&quot;#reverseString(&#x27;hello&#x27;)&quot;</span>).getValue(context, String.class);</span><br></pre></td></tr></table></figure><h3 id="5-6-10-Bean-references"><a href="#5-6-10-Bean-references" class="headerlink" title="5.6.10 Bean references"></a>5.6.10 Bean references</h3><p>If the evaluation context has been configured with a bean resolver it is possible to lookup beans from an expression using the (<code>@</code>) symbol.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ExpressionParser</span> <span class="variable">parser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SpelExpressionParser</span>();</span><br><span class="line"><span class="type">StandardEvaluationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StandardEvaluationContext</span>();</span><br><span class="line">context.setBeanResolver(<span class="keyword">new</span> <span class="title class_">MyBeanResolver</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">// This will end up calling resolve(context,&quot;foo&quot;) on MyBeanResolver during evaluation</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">bean</span> <span class="operator">=</span> parser.parseExpression(<span class="string">&quot;@foo&quot;</span>).getValue(context);</span><br></pre></td></tr></table></figure><h3 id="5-6-11-Ternary-Operator-If-Then-Else"><a href="#5-6-11-Ternary-Operator-If-Then-Else" class="headerlink" title="5.6.11 Ternary Operator (If-Then-Else)"></a>5.6.11 Ternary Operator (If-Then-Else)</h3><p>示例1<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">falseString</span> <span class="operator">=</span> parser.parseExpression(<span class="string">&quot;false ? &#x27;trueExp&#x27; : &#x27;falseExp&#x27;&quot;</span>).getValue(String.class);</span><br></pre></td></tr></table></figure></p><p>示例2</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">parser.parseExpression(<span class="string">&quot;Name&quot;</span>).setValue(societyContext, <span class="string">&quot;IEEE&quot;</span>);</span><br><span class="line">societyContext.setVariable(<span class="string">&quot;queryName&quot;</span>, <span class="string">&quot;Nikola Tesla&quot;</span>);</span><br><span class="line"></span><br><span class="line">expression = <span class="string">&quot;isMember(#queryName)? #queryName + &#x27; is a member of the &#x27; &quot;</span> +</span><br><span class="line">             <span class="string">&quot;+ Name + &#x27; Society&#x27; : #queryName + &#x27; is not a member of the &#x27; + Name + &#x27; Society&#x27;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">queryResultString</span> <span class="operator">=</span></span><br><span class="line">                    parser.parseExpression(expression).getValue(societyContext, String.class);</span><br><span class="line"><span class="comment">// queryResultString = &quot;Nikola Tesla is a member of the IEEE Society&quot;</span></span><br></pre></td></tr></table></figure><h3 id="5-6-12-The-Elvis-Operator"><a href="#5-6-12-The-Elvis-Operator" class="headerlink" title="5.6.12 The Elvis Operator"></a>5.6.12 The Elvis Operator</h3><p>The Elvis operator is a shortening of the ternary operator syntax and is used in the Groovy language. With the ternary operator syntax you usually have to repeat a variable twice, for example:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ExpressionParser</span> <span class="variable">parser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SpelExpressionParser</span>();</span><br><span class="line"></span><br><span class="line"><span class="type">Inventor</span> <span class="variable">tesla</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Inventor</span>(<span class="string">&quot;Nikola Tesla&quot;</span>, <span class="string">&quot;Serbian&quot;</span>);</span><br><span class="line"><span class="type">StandardEvaluationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StandardEvaluationContext</span>(tesla);</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> parser.parseExpression(<span class="string">&quot;Name?:&#x27;Elvis Presley&#x27;&quot;</span>).getValue(context, String.class);</span><br><span class="line"></span><br><span class="line">System.out.println(name); <span class="comment">// Nikola Tesla</span></span><br><span class="line"></span><br><span class="line">tesla.setName(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">name = parser.parseExpression(<span class="string">&quot;Name?:&#x27;Elvis Presley&#x27;&quot;</span>).getValue(context, String.class);</span><br><span class="line"></span><br><span class="line">System.out.println(name); <span class="comment">// Elvis Presley</span></span><br></pre></td></tr></table></figure><p>同样也可以在 <code>@Value</code> 中使用： <code>@Value(&quot;#&#123;systemProperties[&#39;pop3.port&#39;] ?: 25&#125;&quot;)</code></p><h3 id="5-6-13-Safe-Navigation-operator"><a href="#5-6-13-Safe-Navigation-operator" class="headerlink" title="5.6.13 Safe Navigation operator"></a>5.6.13 Safe Navigation operator</h3><p>类似 JS 中的可选链 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ExpressionParser</span> <span class="variable">parser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SpelExpressionParser</span>();</span><br><span class="line"></span><br><span class="line"><span class="type">Inventor</span> <span class="variable">tesla</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Inventor</span>(<span class="string">&quot;Nikola Tesla&quot;</span>, <span class="string">&quot;Serbian&quot;</span>);</span><br><span class="line">tesla.setPlaceOfBirth(<span class="keyword">new</span> <span class="title class_">PlaceOfBirth</span>(<span class="string">&quot;Smiljan&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="type">StandardEvaluationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StandardEvaluationContext</span>(tesla);</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">city</span> <span class="operator">=</span> parser.parseExpression(<span class="string">&quot;PlaceOfBirth?.City&quot;</span>).getValue(context, String.class);</span><br><span class="line">System.out.println(city); <span class="comment">// Smiljan</span></span><br><span class="line"></span><br><span class="line">tesla.setPlaceOfBirth(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">city = parser.parseExpression(<span class="string">&quot;PlaceOfBirth?.City&quot;</span>).getValue(context, String.class);</span><br><span class="line"></span><br><span class="line">System.out.println(city); <span class="comment">// null - does not throw NullPointerException!!!</span></span><br></pre></td></tr></table></figure><h3 id="5-6-14-Collection-Selection"><a href="#5-6-14-Collection-Selection" class="headerlink" title="5.6.14 Collection Selection"></a>5.6.14 Collection Selection</h3><p>通过 <code>?[selectionExpression]</code> 过滤集合中的某些元素并返回。适用于 List 、 Map</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将 members 中 Nationality 为 Serbian 的元素组合为新的集合</span></span><br><span class="line">List&lt;Inventor&gt; list = (List&lt;Inventor&gt;)</span><br><span class="line">      parser.parseExpression(<span class="string">&quot;Members.?[Nationality == &#x27;Serbian&#x27;]&quot;</span>).getValue(societyContext);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将 value &lt; 27 的 Entry 组合成新的 Map</span></span><br><span class="line"><span class="type">Map</span> <span class="variable">newMap</span> <span class="operator">=</span> parser.parseExpression(<span class="string">&quot;map.?[value&lt;27]&quot;</span>).getValue();</span><br></pre></td></tr></table></figure><p>获取第一个元素或者第一个 Entry ： <code>^[...]</code><br>获取最后一个元素或者最后一个 Entry ： <code>$[...]</code></p><h3 id="5-6-14-Collection-Projection"><a href="#5-6-14-Collection-Projection" class="headerlink" title="5.6.14 Collection Projection"></a>5.6.14 Collection Projection</h3><p>集合投影：类似于 JS 中的 map 函数。将集合中的每个元素进行运算并将结果组合成一个新的集合。可应用于 List 、 Map 。映射的语法为 <code>![projectionExpression]</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// returns [ &#x27;Smiljan&#x27;, &#x27;Idvor&#x27; ]</span></span><br><span class="line"><span class="type">List</span> <span class="variable">placesOfBirth</span> <span class="operator">=</span> (List)parser.parseExpression(<span class="string">&quot;Members.![placeOfBirth.city]&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="5-6-15-Expression-templating"><a href="#5-6-15-Expression-templating" class="headerlink" title="5.6.15 Expression templating"></a>5.6.15 Expression templating</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">randomPhrase</span> <span class="operator">=</span> parser.parseExpression(</span><br><span class="line">    <span class="string">&quot;random number is #&#123;T(java.lang.Math).random()&#125;&quot;</span>, <span class="comment">// 参数1：表达式模板</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">TemplateParserContext</span>() <span class="comment">// 参数2：表达式如何解析</span></span><br><span class="line">).getValue(String.class);</span><br><span class="line"></span><br><span class="line"><span class="comment">// evaluates to &quot;random number is 0.7038186818312008&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TemplateParserContext</span> <span class="keyword">implements</span> <span class="title class_">ParserContext</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">getExpressionPrefix</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;#&#123;&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">getExpressionSuffix</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isTemplate</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多级缓存</title>
      <link href="/JeckFS/2022/04/11/%E5%A4%9A%E7%BA%A7%E7%BC%93%E5%AD%98/"/>
      <url>/JeckFS/2022/04/11/%E5%A4%9A%E7%BA%A7%E7%BC%93%E5%AD%98/</url>
      
        <content type="html"><![CDATA[<p><a href="https://juejin.cn/post/6958361073086890020">先提前准备好的多级缓存实现</a></p><p><a href="https://wlizhi.cc/posts/spring/layering-cache/">Spring缓存管理器多级缓存的实现</a></p><p><a href="https://www.cxyzjd.com/article/linhui258/80471959">spring boot 之 多级缓存实现</a></p><p><a href="https://www.modb.pro/db/84375">SpringBoot缓存实战 Redis + Caffeine 实现多级缓存</a></p><hr><p><a href="https://www.cnblogs.com/didispace/p/14808243.html">部署时自动初始化数据库</a></p><h1 id="RedisCacheManager"><a href="#RedisCacheManager" class="headerlink" title="RedisCacheManager"></a>RedisCacheManager</h1><p>该 CacheManager 会在第一次写入的时候创建 Cache 。空的 Cache 在 Redis 中不可见。每个 Cache 需要不同的 RedisCacheConfiguration （可以通过 RedisCacheManager.RedisCacheManagerBuilder.withInitialCacheConfigurations(Map) 来设置）。</p><p>成员属性：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> RedisCacheWriter cacheWriter;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> RedisCacheConfiguration defaultCacheConfig;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, RedisCacheConfiguration&gt; initialCacheConfiguration;<span class="comment">//初始 Cache 们的配置</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="type">boolean</span> allowInFlightCacheCreation; <span class="comment">// 为true则在运行时不能创建新的 Cache ，只能使用给定的初始缓存名称列表</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 缓存 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode2216-美化数组的最少删除数</title>
      <link href="/JeckFS/2022/04/08/leetcode2216-%E7%BE%8E%E5%8C%96%E6%95%B0%E7%BB%84%E7%9A%84%E6%9C%80%E5%B0%91%E5%88%A0%E9%99%A4%E6%95%B0/"/>
      <url>/JeckFS/2022/04/08/leetcode2216-%E7%BE%8E%E5%8C%96%E6%95%B0%E7%BB%84%E7%9A%84%E6%9C%80%E5%B0%91%E5%88%A0%E9%99%A4%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><img src="/JeckFS/2022/04/08/leetcode2216-%E7%BE%8E%E5%8C%96%E6%95%B0%E7%BB%84%E7%9A%84%E6%9C%80%E5%B0%91%E5%88%A0%E9%99%A4%E6%95%B0/20220408-112256-997.png" class="" title="This is 1-th image."><h1 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h1><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minDeletion</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] d = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">100005</span>];</span><br><span class="line">        d[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i-<span class="number">1</span>] != nums[i]) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i-<span class="number">2</span> &lt; <span class="number">0</span>) d[i] = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">else</span> d[i] = d[i-<span class="number">2</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> d[i] = d[i-<span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> d[nums.length-<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 动态规划 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重构-需要重构代码的地方</title>
      <link href="/JeckFS/2022/04/07/%E9%87%8D%E6%9E%84-%E9%9C%80%E8%A6%81%E9%87%8D%E6%9E%84%E4%BB%A3%E7%A0%81%E7%9A%84%E5%9C%B0%E6%96%B9/"/>
      <url>/JeckFS/2022/04/07/%E9%87%8D%E6%9E%84-%E9%9C%80%E8%A6%81%E9%87%8D%E6%9E%84%E4%BB%A3%E7%A0%81%E7%9A%84%E5%9C%B0%E6%96%B9/</url>
      
        <content type="html"><![CDATA[<h1 id="1-重复代码"><a href="#1-重复代码" class="headerlink" title="1 重复代码"></a>1 重复代码</h1><ul><li>同一个类的两个函数含有相同的表达式</li><li>两个互为兄弟的子类含有相同表达式。这时提取到父类。</li><li>两个互为兄弟的字类含有相似的表达式，代码并不完全相同。这时可以考虑使用 模板模式 </li><li>两个互不相关的两个类含有相同代码，应该将相同代码提取到一个独立类中。或者分析相同代码应该属于哪个类。对于相同代码确实属于某个类，这时需要考虑其他相关类是否是调用它的关系。</li></ul><h1 id="2-过长函数"><a href="#2-过长函数" class="headerlink" title="2 过长函数"></a>2 过长函数</h1><p>短小函数的优势：较强的解释能力、复用能力、选择能力。</p><p>添加注释的地方、循环和条件表达式都可以用小函数来改造。</p><h1 id="3-过大的类"><a href="#3-过大的类" class="headerlink" title="3 过大的类"></a>3 过大的类</h1><ul><li>对于变量较多的大类，可以将相关的变量提取到一个类中</li><li>对于代码较多的大类，先确定客户端如何调用它们，然后为每一种方式定义成接口，来分解这个类。</li></ul><h1 id="4-过长参数列"><a href="#4-过长参数列" class="headerlink" title="4 过长参数列"></a>4 过长参数列</h1><h2 id="4-1-方法一：将参数放在被调方中获取"><a href="#4-1-方法一：将参数放在被调方中获取" class="headerlink" title="4.1 方法一：将参数放在被调方中获取"></a>4.1 方法一：将参数放在被调方中获取</h2><p>示例1: 计算订单折扣价格</p><img src="/JeckFS/2022/04/07/%E9%87%8D%E6%9E%84-%E9%9C%80%E8%A6%81%E9%87%8D%E6%9E%84%E4%BB%A3%E7%A0%81%E7%9A%84%E5%9C%B0%E6%96%B9/20220407-102514-701.png" class="" title="This is 1-th image."><p>参数提取后：</p><img src="/JeckFS/2022/04/07/%E9%87%8D%E6%9E%84-%E9%9C%80%E8%A6%81%E9%87%8D%E6%9E%84%E4%BB%A3%E7%A0%81%E7%9A%84%E5%9C%B0%E6%96%B9/20220407-102853-979.png" class="" title="This is 2-th image."><p>【总结】当函数的参数是在调用方计算得到的，则应该将计算的逻辑封装为一个函数 f1 ，然后抹除传参，在被调函数中使用该函数来获取参数值。若函数 f1 的计算依赖于调用方变量，那么在被调方又获取不到依赖的变量的情况下就会无法抹除该参数。</p><h2 id="4-2-方法二：传递参数时尽量传递对象"><a href="#4-2-方法二：传递参数时尽量传递对象" class="headerlink" title="4.2 方法二：传递参数时尽量传递对象"></a>4.2 方法二：传递参数时尽量传递对象</h2><ul><li>将参数作为一个 Object 进行传入。关于使用参数的相关操作可以选择性地定义到该 Object 中。</li></ul><h1 id="提炼函数"><a href="#提炼函数" class="headerlink" title="提炼函数"></a>提炼函数</h1><ul><li>添加注释的地方都可以提炼为函数，函数名尽量体现函数体的逻辑。</li><li>提炼函数中使用的局部变量若仅在提炼函数中使用，则直接将该变量的定义或者获取放在提炼函数中。若局部变量在提炼函数之后也有使用，则让提炼函数返回该局部变量以供后续使用。</li></ul><h1 id="以查询的形式取代临时变量"><a href="#以查询的形式取代临时变量" class="headerlink" title="以查询的形式取代临时变量"></a>以查询的形式取代临时变量</h1><p>对临时变量的使用改为对函数的调用。</p><h1 id="引入解释性变量"><a href="#引入解释性变量" class="headerlink" title="引入解释性变量"></a>引入解释性变量</h1><p>当难以提炼成函数时，可以替换复杂表达式为变量，这样可以提高程序可读性。</p><h1 id="分解临时变量"><a href="#分解临时变量" class="headerlink" title="分解临时变量"></a>分解临时变量</h1><p>当临时变量被赋值超过一次，并且它既不是循环变量，也不用于收集计算结果，则应该在每次赋值时使用新的变量。</p><h1 id="以函数对象取代函数"><a href="#以函数对象取代函数" class="headerlink" title="以函数对象取代函数"></a>以函数对象取代函数</h1><p>将一个大型函数定义成一个对象，局部变量作为对象的成员属性，然后将大型函数分解为多个对象的成员方法；<br>新建对象中可以保留对源对象的索引，若需要调用源对象的方法可以通过该索引引用源对象方法。这也是下图传递 this 的原因。</p><img src="/JeckFS/2022/04/07/%E9%87%8D%E6%9E%84-%E9%9C%80%E8%A6%81%E9%87%8D%E6%9E%84%E4%BB%A3%E7%A0%81%E7%9A%84%E5%9C%B0%E6%96%B9/20220409-160027-132.png" class="" title="This is 1-th image.">]]></content>
      
      
      <categories>
          
          <category> 重构-改善既有代码的设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 重构-改善既有代码的设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS-Promise,async,await</title>
      <link href="/JeckFS/2022/04/03/JS-Promise-async-await/"/>
      <url>/JeckFS/2022/04/03/JS-Promise-async-await/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Promise"><a href="#1-Promise" class="headerlink" title="1 Promise"></a>1 Promise</h1><p>Promise 的基本使用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">  <span class="comment">// executor: 对异步任务的处理逻辑</span></span><br><span class="line">  <span class="comment">// 将处理结果反馈出去，供后续对结果进行分析</span></span><br><span class="line">  <span class="comment">// 若成功，则调用 resolve(value) 函数</span></span><br><span class="line">  <span class="comment">// 若失败，则调用 reject(error) 函数</span></span><br><span class="line">&#125;)；</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// .then 用于处理 executor 反馈的处理结果</span></span><br><span class="line">promise.<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">result</span>)&#123;</span><br><span class="line">    <span class="comment">// 处理 executor 处理成功（调用 resolve ）返回的结果</span></span><br><span class="line">&#125;,<span class="keyword">function</span>(<span class="params">error</span>)&#123;</span><br><span class="line">    <span class="comment">// 处理 executor 处理失败（调用 reject） 返回的结果</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// .catch 仅用于捕获 executor 处理失败的返回结果。等同于 .then(null, function()&#123;&#125;)</span></span><br><span class="line">promise.<span class="title function_">catch</span>(<span class="keyword">function</span>(<span class="params">error</span>)&#123;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// .finally() 中的回调函数没有参数。它仅做一些固定的事情，比如执行清理等。然后将 result 与 error 向后传递。</span></span><br><span class="line">promise.<span class="title function_">finally</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>示例：</p><blockquote><p>executor 中只有第一次对 reject/resolve 的调用才会被处理。</p></blockquote><h1 id="2-Promise-链"><a href="#2-Promise-链" class="headerlink" title="2 Promise 链"></a>2 Promise 链</h1><p>形如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve, reject</span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">resolve</span>(<span class="number">1</span>), <span class="number">1000</span>); <span class="comment">// (*)</span></span><br><span class="line"></span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">result</span>) &#123; <span class="comment">// (**)</span></span><br><span class="line"></span><br><span class="line">  <span class="title function_">alert</span>(result); <span class="comment">// 1</span></span><br><span class="line">  <span class="keyword">return</span> result * <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">result</span>) &#123; <span class="comment">// (***)</span></span><br><span class="line"></span><br><span class="line">  <span class="title function_">alert</span>(result); <span class="comment">// 2</span></span><br><span class="line">  <span class="keyword">return</span> result * <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">result</span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">alert</span>(result); <span class="comment">// 4</span></span><br><span class="line">  <span class="keyword">return</span> result * <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>注意区别以下例子，它并不是 promise 链。then 之间的结果是不会传递的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">resolve</span>(<span class="number">1</span>), <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">promise.<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">result</span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(result); <span class="comment">// 1</span></span><br><span class="line">  <span class="keyword">return</span> result * <span class="number">2</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">promise.<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">result</span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(result); <span class="comment">// 1</span></span><br><span class="line">  <span class="keyword">return</span> result * <span class="number">2</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">promise.<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">result</span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(result); <span class="comment">// 1</span></span><br><span class="line">  <span class="keyword">return</span> result * <span class="number">2</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>返回 Promise：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve, reject</span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">resolve</span>(<span class="number">1</span>), <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">result</span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">alert</span>(result); <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123; <span class="comment">// (*)</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">resolve</span>(result * <span class="number">2</span>), <span class="number">1000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">result</span>) &#123; <span class="comment">// (**)</span></span><br><span class="line"></span><br><span class="line">  <span class="title function_">alert</span>(result); <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">resolve</span>(result * <span class="number">2</span>), <span class="number">1000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">result</span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">alert</span>(result); <span class="comment">// 4</span></span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="3-使用-promise-进行错误处理"><a href="#3-使用-promise-进行错误处理" class="headerlink" title="3 使用 promise 进行错误处理"></a>3 使用 promise 进行错误处理</h1><p>当一个 promise 被 reject 时，控制权将移交至最近的 rejection 处理程序（handler）。当处理不了时，可以将异常继续抛出。对于通过 throw 关键字抛出的异常不用调用 reject 函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 执行流：catch -&gt; catch</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;Whoops!&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="keyword">function</span>(<span class="params">error</span>) &#123; <span class="comment">// (*)</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (error <span class="keyword">instanceof</span> <span class="title class_">URIError</span>) &#123;</span><br><span class="line">    <span class="comment">// 处理它</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;Can&#x27;t handle such error&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">throw</span> error; <span class="comment">// 再次抛出此 error 或另外一个 error，执行将跳转至下一个 catch</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">/* 不在这里运行 */</span></span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123; <span class="comment">// (**)</span></span><br><span class="line"></span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">`The unknown error has occurred: <span class="subst">$&#123;error&#125;</span>`</span>);</span><br><span class="line">  <span class="comment">// 不会返回任何内容 =&gt; 执行正常进行</span></span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="4-Promise-API"><a href="#4-Promise-API" class="headerlink" title="4 Promise API"></a>4 Promise API</h1><h2 id="4-1-Promise-all"><a href="#4-1-Promise-all" class="headerlink" title="4.1 Promise.all"></a>4.1 Promise.all</h2><p><code>let promise = Promise.all([...promises...]);</code></p><p>Promise.all 接受一个 promise 数组作为参数（从技术上讲，它可以是任何可迭代对象，但通常是一个数组）并返回一个新的 promise。</p><p>当所有给定的 promise 都 resolve 时，新的 promise 才会 resolve，并且其结果数组将成为新 promise 的结果。结果数组中元素的顺序与其在源 promise 中的顺序相同。即使第一个 promise 花费了最长的时间才 resolve，但它仍是结果数组中的第一个。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Promise</span>.<span class="title function_">all</span>([</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">resolve</span>(<span class="number">1</span>), <span class="number">3000</span>)), <span class="comment">// 1</span></span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">resolve</span>(<span class="number">2</span>), <span class="number">2000</span>)), <span class="comment">// 2</span></span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">resolve</span>(<span class="number">3</span>), <span class="number">1000</span>))  <span class="comment">// 3</span></span><br><span class="line">]).<span class="title function_">then</span>(alert); <span class="comment">// 1,2,3 当上面这些 promise 准备好时：每个 promise 都贡献了数组中的一个元素</span></span><br></pre></td></tr></table></figure><p>如果任意一个 promise 被 reject，由 Promise.all 返回的 promise 就会立即 reject，并完全忽略列表中其他的 promise。它们的结果也被忽略（仍然会运行到被 resolve 但结果会被忽略），并且只返回 reject 的 error。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Promise</span>.<span class="title function_">all</span>([</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">resolve</span>(<span class="number">1</span>), <span class="number">1000</span>)),</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;Whoops!&quot;</span>)), <span class="number">2000</span>)),</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">resolve</span>(<span class="number">3</span>), <span class="number">3000</span>))</span><br><span class="line">]).<span class="title function_">catch</span>(alert); <span class="comment">// Error: Whoops!</span></span><br></pre></td></tr></table></figure><h2 id="4-2-Promise-allSettled"><a href="#4-2-Promise-allSettled" class="headerlink" title="4.2 Promise.allSettled"></a>4.2 Promise.allSettled</h2><p>Promise.allSettled 等待所有的 promise 都被 settle，无论结果如何。结果数组具有：</p><ul><li><code>&#123;status:&quot;fulfilled&quot;, value:result&#125;</code> 对于成功的响应，</li><li><code>&#123;status:&quot;rejected&quot;, reason:error&#125;</code> 对于 error。</li></ul><h2 id="4-3-Promise-race"><a href="#4-3-Promise-race" class="headerlink" title="4.3 Promise.race"></a>4.3 Promise.race</h2><p>只等待第一个 settled 的 promise 并获取其结果（或 error）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Promise</span>.<span class="title function_">race</span>([</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">resolve</span>(<span class="number">1</span>), <span class="number">1000</span>)),</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;Whoops!&quot;</span>)), <span class="number">2000</span>)),</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">resolve</span>(<span class="number">3</span>), <span class="number">3000</span>))</span><br><span class="line">]).<span class="title function_">then</span>(alert); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><h2 id="4-4-Promise-any"><a href="#4-4-Promise-any" class="headerlink" title="4.4 Promise.any"></a>4.4 Promise.any</h2><p>与 Promise.race 类似，区别在于 Promise.any 只等待第一个 fulfilled 的 promise，并将这个 fulfilled 的 promise 返回。如果给出的 promise 都 rejected，那么则返回 rejected 的 promise 和 AggregateError 错误类型的 error 实例—— 一个特殊的 error 对象，在其 errors 属性中存储着所有 promise error。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Promise</span>.<span class="title function_">any</span>([</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;Whoops!&quot;</span>)), <span class="number">1000</span>)),</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">resolve</span>(<span class="number">1</span>), <span class="number">2000</span>)),</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">resolve</span>(<span class="number">3</span>), <span class="number">3000</span>))</span><br><span class="line">]).<span class="title function_">then</span>(alert); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Promise</span>.<span class="title function_">any</span>([</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;Ouch!&quot;</span>)), <span class="number">1000</span>)),</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;Error!&quot;</span>)), <span class="number">2000</span>))</span><br><span class="line">]).<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(error.<span class="property">constructor</span>.<span class="property">name</span>); <span class="comment">// AggregateError</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(error.<span class="property">errors</span>[<span class="number">0</span>]); <span class="comment">// Error: Ouch!</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(error.<span class="property">errors</span>[<span class="number">1</span>]); <span class="comment">// Error: Error</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="5-Promisification"><a href="#5-Promisification" class="headerlink" title="5 Promisification"></a>5 Promisification</h1><h1 id="6-微任务（Microtask）"><a href="#6-微任务（Microtask）" class="headerlink" title="6 微任务（Microtask）"></a>6 微任务（Microtask）</h1><h1 id="7-Async-await"><a href="#7-Async-await" class="headerlink" title="7 Async/await"></a>7 Async/await</h1><p>函数前面的关键字 async 有两个作用：</p><ul><li>让这个函数总是返回一个 promise。</li><li>允许在该函数内使用 await。<br>Promise 前的关键字 await 使 JavaScript 引擎等待该 promise settle (这个等待的过程不会耗费 CPU )，然后：<br>如果有 error，就会抛出异常 —— 就像那里调用了 throw error 一样。<br>否则，就返回结果。<br>这两个关键字一起提供了一个很好的用来编写异步代码的框架，这种代码易于阅读也易于编写。</li></ul><p>await 语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 只在 async 函数内工作</span></span><br><span class="line"><span class="keyword">let</span> value = <span class="keyword">await</span> promise;</span><br></pre></td></tr></table></figure><p>有了 async/await 之后，我们就几乎不需要使用 promise.then/catch，但是不要忘了它们是基于 promise 的，因为有些时候（例如在最外层作用域）我们不得不使用这些方法。并且，当我们需要同时等待需要任务时，Promise.all 是很好用的。</p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">f</span>().<span class="title function_">then</span>(alert); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&#x27;/no-user-here&#x27;</span>);</span><br><span class="line">  &#125; <span class="keyword">catch</span>(err) &#123;</span><br><span class="line">    <span class="comment">// 捕获到 fetch 和 response.json 中的错误</span></span><br><span class="line">    <span class="title function_">alert</span>(err);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">f</span>();</span><br></pre></td></tr></table></figure><p>上例等同于：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&#x27;http://no-such-url&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// f() 变成了一个 rejected 的 promise</span></span><br><span class="line"><span class="title function_">f</span>().<span class="title function_">catch</span>(alert); <span class="comment">// TypeError: failed to fetch // (*)</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS类</title>
      <link href="/JeckFS/2022/04/02/JS%E7%B1%BB/"/>
      <url>/JeckFS/2022/04/02/JS%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Class-基本语法"><a href="#1-Class-基本语法" class="headerlink" title="1.Class 基本语法"></a>1.Class 基本语法</h1><ul><li>class 其实就是构造函数 constructor ，其中的方法存在与 <code>Class.prototype</code> 中。</li><li>class 中的函数没有分隔符 <code>,</code></li></ul><p>以 class 的形式定义 User：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name</span>) &#123; <span class="variable language_">this</span>.<span class="property">name</span> = name; &#125;</span><br><span class="line">  <span class="title function_">sayHi</span>(<span class="params"></span>) &#123; <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">name</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// class 是一个函数</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="keyword">typeof</span> <span class="title class_">User</span>); <span class="comment">// function</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ...或者，更确切地说，是 constructor 方法</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="title class_">User</span> === <span class="title class_">User</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法在 User.prototype 中，例如：</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="title class_">User</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayHi</span>); <span class="comment">// sayHi 方法的代码</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 在原型中实际上有两个方法</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="title class_">Object</span>.<span class="title function_">getOwnPropertyNames</span>(<span class="title class_">User</span>.<span class="property"><span class="keyword">prototype</span></span>)); <span class="comment">// constructor, sayHi</span></span><br></pre></td></tr></table></figure><p>以函数形式重写 User：</p><ul><li>User() 中仅做添加属性用 （constructor） </li><li>成员函数则挂在到 <code>User.prototype</code> 中</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用纯函数重写 class User</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 创建构造器函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">User</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 函数的原型（prototype）默认具有 &quot;constructor&quot; 属性，</span></span><br><span class="line"><span class="comment">// 所以，我们不需要创建它</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 将方法添加到原型</span></span><br><span class="line"><span class="title class_">User</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayHi</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用法：</span></span><br><span class="line"><span class="keyword">let</span> user = <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;John&quot;</span>);</span><br><span class="line">user.<span class="title function_">sayHi</span>();</span><br></pre></td></tr></table></figure><p>使用 class 定义的 User 与用函数定义的 User 的区别：</p><ul><li>通过 class 创建的函数具有特殊的内部属性标记 <code>[[IsClassConstructor]]: true</code>，因此只能使用 new 关键字来创建。</li><li>类方法不可枚举。 类定义将 “prototype” 中的所有方法的 enumerable 标志设置为 false。对一个对象调用 <code>for..in</code> 方法，不会遍历到方法。</li><li>类总是使用 <code>use strict</code>。 在类构造中的所有代码都将自动进入严格模式。</li><li>支持类表达式，类名尽在内部可见</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">alert</span>(<span class="keyword">typeof</span> <span class="title class_">User</span>); <span class="comment">// function</span></span><br><span class="line"><span class="title class_">User</span>(); <span class="comment">// Error: Class constructor User cannot be invoked without &#x27;new&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// “命名类表达式（Named Class Expression）”</span></span><br><span class="line"><span class="comment">// (规范中没有这样的术语，但是它和命名函数表达式类似)</span></span><br><span class="line"><span class="keyword">let</span> <span class="title class_">User</span> = <span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line">  <span class="title function_">sayHi</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="title class_">MyClass</span>); <span class="comment">// MyClass 这个名字仅在类内部可见</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">User</span>().<span class="title function_">sayHi</span>(); <span class="comment">// 正常运行，显示 MyClass 中定义的内容</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">alert</span>(<span class="title class_">MyClass</span>); <span class="comment">// error，MyClass 在外部不可见</span></span><br></pre></td></tr></table></figure><p>class 中使用 getter / setter：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="comment">// 调用 setter</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">name</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_name</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">set</span> <span class="title function_">name</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (value.<span class="property">length</span> &lt; <span class="number">4</span>) &#123;</span><br><span class="line">      <span class="title function_">alert</span>(<span class="string">&quot;Name is too short.&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_name</span> = value;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> user = <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;John&quot;</span>);</span><br><span class="line"><span class="title function_">alert</span>(user.<span class="property">name</span>); <span class="comment">// John</span></span><br><span class="line"></span><br><span class="line">user = <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;&quot;</span>); <span class="comment">// Name is too short.</span></span><br></pre></td></tr></table></figure><p>class 支持计算属性名称：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">  [<span class="string">&#x27;say&#x27;</span> + <span class="string">&#x27;Hi&#x27;</span>]() &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">User</span>().<span class="title function_">sayHi</span>();</span><br></pre></td></tr></table></figure><p>class 中的字段属性：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">  name = <span class="string">&quot;John&quot;</span>; <span class="comment">// 定义方式：直接赋值</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> user = <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line"><span class="title function_">alert</span>(user.<span class="property">name</span>); <span class="comment">// John</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="title class_">User</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">name</span>); <span class="comment">// undefined，字段属性不存在于 User.prototype 中，而是对象本身</span></span><br></pre></td></tr></table></figure><p>使用类字段绑定方法：</p><p>this 丢失示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Button</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">value</span> = value;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">click</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">value</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> button = <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(button.<span class="property">click</span>, <span class="number">1000</span>); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p>通过类字段绑定 this：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Button</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">value</span> = value;</span><br><span class="line">  &#125;</span><br><span class="line">  click = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">value</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> button = <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(button.<span class="property">click</span>, <span class="number">1000</span>); <span class="comment">// hello</span></span><br></pre></td></tr></table></figure><h1 id="2-类继承"><a href="#2-类继承" class="headerlink" title="2.类继承"></a>2.类继承</h1><p>易混淆点：<br><code>class.prototype</code> 指的是 class 的定义， <code>class.prototype.[[prototype]]</code> 才是 class 的原型。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">    <span class="title function_">run</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;animal is running&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Animal</span>.<span class="property"><span class="keyword">prototype</span></span>); <span class="comment">// Animal &#123;&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Animal</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">__proto__</span>); <span class="comment">// &#123;&#125;</span></span><br></pre></td></tr></table></figure><p>类继承示意图：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">speed</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">run</span>(<span class="params">speed</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">speed</span> = speed;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> runs with speed <span class="subst">$&#123;<span class="variable language_">this</span>.speed&#125;</span>.`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">stop</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">speed</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> stands still.`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> animal = <span class="keyword">new</span> <span class="title class_">Animal</span>(<span class="string">&quot;My animal&quot;</span>);</span><br></pre></td></tr></table></figure><img src="/JeckFS/2022/04/02/JS%E7%B1%BB/20220403-110434-317.png" class="" title="This is 1-th image."><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Rabbit</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span> &#123;</span><br><span class="line">  <span class="title function_">hide</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> hides!`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> rabbit = <span class="keyword">new</span> <span class="title class_">Rabbit</span>(<span class="string">&quot;White Rabbit&quot;</span>);</span><br><span class="line"></span><br><span class="line">rabbit.<span class="title function_">run</span>(<span class="number">5</span>); <span class="comment">// White Rabbit runs with speed 5.</span></span><br><span class="line">rabbit.<span class="title function_">hide</span>(); <span class="comment">// White Rabbit hides!</span></span><br></pre></td></tr></table></figure><img src="/JeckFS/2022/04/02/JS%E7%B1%BB/20220403-110529-654.png" class="" title="This is 2-th image."><p>extends + <strong>任意表达式</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">phrase</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">class</span> &#123;</span><br><span class="line">    <span class="title function_">sayHi</span>(<span class="params"></span>) &#123; <span class="title function_">alert</span>(phrase); &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">extends</span> <span class="title class_ inherited__">f</span>(<span class="string">&quot;Hello&quot;</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">User</span>().<span class="title function_">sayHi</span>(); <span class="comment">// Hello</span></span><br></pre></td></tr></table></figure><p>子类重写父类方法，并调用父类方法：</p><ul><li>只能在子类的构造函数中调用父类构造函数，调用方式：<code>super(...args)</code></li><li>调用父类方法：<code>super.method()</code></li><li>不管是调用父类方法还是父类构造函数，super 都不用出现在首句。</li><li>特殊地，在调用父类构造函数时，super 一定要在使用 this 之前调用。并且通过重写父类构造函数中的属性时，只能通过 super 进行赋值，不能直接赋值。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Animal constructor&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">run</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;animal is running&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Rabbit</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Rabbit constructor&#x27;</span>);</span><br><span class="line">        <span class="variable language_">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">run</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Rabbit run&#x27;</span>);</span><br><span class="line">        <span class="variable language_">super</span>.<span class="title function_">run</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Rabbit</span>().<span class="title function_">run</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Rabbit constructor</span></span><br><span class="line"><span class="comment">Animal constructor</span></span><br><span class="line"><span class="comment">Rabbit run</span></span><br><span class="line"><span class="comment">animal is running</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">b</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Animal constructor&#x27;</span>);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">a</span> = <span class="number">0</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">b</span> = b</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Rabbit</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">b</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Rabbit constructor&#x27;</span>);</span><br><span class="line">        <span class="variable language_">super</span>(b)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">a</span> = <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Rabbit</span>(<span class="number">1</span>)</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Rabbit constructor</span></span><br><span class="line"><span class="comment">Animal constructor</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>类字段重写的特殊情况：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">  name = <span class="string">&#x27;animal&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">name</span>); <span class="comment">// (*)</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Rabbit</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span> &#123;</span><br><span class="line">  name = <span class="string">&#x27;rabbit&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Animal</span>(); <span class="comment">// animal</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Rabbit</span>(); <span class="comment">// animal</span></span><br></pre></td></tr></table></figure><p>类字段的初始化顺序：</p><ul><li>对于基类（还未继承任何东西的那种），在构造函数调用前初始化。</li><li>对于派生类，在 <code>super()</code> 后立刻初始化。</li></ul><p>现象：父类构造器总是会使用它自己字段的值，而不是被重写的那一个。<br>原因：<code>new Rabbit()</code> 调用了 <code>super()</code>，因此它执行了父类构造器，并且（根据派生类规则）只有在此之后，它的类字段才被初始化。在父类构造器被执行的时候，Rabbit 还没有自己的类字段，这就是为什么 Animal 类字段被使用了。</p><h1 id="3-静态属性和静态方法"><a href="#3-静态属性和静态方法" class="headerlink" title="3.静态属性和静态方法"></a>3.静态属性和静态方法</h1><p>静态方法的定义：<br>静态方法有 this ，但是它指向的是<strong>类的构造器</strong>本身。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">staticMethod</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="variable language_">this</span> === <span class="title class_">User</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">User</span>.<span class="title function_">staticMethod</span>(); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">User</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">User</span>.<span class="property">staticMethod</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="variable language_">this</span> === <span class="title class_">User</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">User</span>.<span class="title function_">staticMethod</span>(); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>静态属性的定义：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Article</span> &#123;</span><br><span class="line">  <span class="keyword">static</span> publisher = <span class="string">&quot;Levi Ding&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">alert</span>( <span class="title class_">Article</span>.<span class="property">publisher</span> ); <span class="comment">// Levi Ding</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Article</span>.<span class="property">publisher</span> = <span class="string">&quot;Levi Ding&quot;</span>;</span><br></pre></td></tr></table></figure><p>静态属性和静态方法的继承：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">  <span class="keyword">static</span> planet = <span class="string">&quot;Earth&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name, speed</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">speed</span> = speed;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">run</span>(<span class="params">speed = <span class="number">0</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">speed</span> += speed;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> runs with speed <span class="subst">$&#123;<span class="variable language_">this</span>.speed&#125;</span>.`</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">compare</span>(<span class="params">animalA, animalB</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> animalA.<span class="property">speed</span> - animalB.<span class="property">speed</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 继承于 Animal</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Rabbit</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span> &#123;</span><br><span class="line">  <span class="title function_">hide</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> hides!`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> rabbits = [</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">Rabbit</span>(<span class="string">&quot;White Rabbit&quot;</span>, <span class="number">10</span>),</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">Rabbit</span>(<span class="string">&quot;Black Rabbit&quot;</span>, <span class="number">5</span>)</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">rabbits.<span class="title function_">sort</span>(<span class="title class_">Rabbit</span>.<span class="property">compare</span>);</span><br><span class="line"></span><br><span class="line">rabbits[<span class="number">0</span>].<span class="title function_">run</span>(); <span class="comment">// Black Rabbit runs with speed 5.</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">alert</span>(<span class="title class_">Rabbit</span>.<span class="property">planet</span>); <span class="comment">// Earth</span></span><br></pre></td></tr></table></figure><p>父子类中函数的所有权示意图：</p><img src="/JeckFS/2022/04/02/JS%E7%B1%BB/20220403-152758-777.png" class="" title="This is 3-th image."><h1 id="4-私有的和受保护的属性和方法"><a href="#4-私有的和受保护的属性和方法" class="headerlink" title="4.私有的和受保护的属性和方法"></a>4.私有的和受保护的属性和方法</h1><p>受保护字段通过 <code>_fieldName</code> 来实现，但这并不能真正实现受保护。<br>受保护字段可以被继承。</p><p>示例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CoffeeMachine</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">power</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_power</span> = power;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">power</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_power</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建咖啡机</span></span><br><span class="line"><span class="keyword">let</span> coffeeMachine = <span class="keyword">new</span> <span class="title class_">CoffeeMachine</span>(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_">alert</span>(<span class="string">`Power is: <span class="subst">$&#123;coffeeMachine.power&#125;</span>W`</span>); <span class="comment">// 功率是：100W</span></span><br><span class="line"></span><br><span class="line">coffeeMachine.<span class="property">power</span> = <span class="number">25</span>; <span class="comment">// Error（没有 setter）</span></span><br></pre></td></tr></table></figure><p>私有属性和方法通过 <code>#limitField</code> 来实现，且不可被继承。<br>私有字段与公共字段不会发生冲突。我们可以同时拥有私有的 <code>#waterAmount</code> 和公共的 <code>waterAmount</code> 字段。<br>私有字段不能通过 <code>this[name]</code> 访问。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CoffeeMachine</span> &#123;</span><br><span class="line">  #waterLimit = <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line">  #<span class="title function_">fixWaterAmount</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (value &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (value &gt; <span class="variable language_">this</span>.#waterLimit) <span class="keyword">return</span> <span class="variable language_">this</span>.#waterLimit;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">setWaterAmount</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.#waterLimit = <span class="variable language_">this</span>.#<span class="title function_">fixWaterAmount</span>(value);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> coffeeMachine = <span class="keyword">new</span> <span class="title class_">CoffeeMachine</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不能从类的外部访问类的私有属性和方法</span></span><br><span class="line">coffeeMachine.#<span class="title function_">fixWaterAmount</span>(<span class="number">123</span>); <span class="comment">// Error</span></span><br><span class="line">coffeeMachine.#waterLimit = <span class="number">1000</span>; <span class="comment">// Error</span></span><br></pre></td></tr></table></figure><h1 id="5-扩展内建类"><a href="#5-扩展内建类" class="headerlink" title="5.扩展内建类"></a>5.扩展内建类</h1><h1 id="6-类检查：”instanceof”"><a href="#6-类检查：”instanceof”" class="headerlink" title="6.类检查：”instanceof”"></a>6.类检查：”instanceof”</h1><p>instanceof 的简单用法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Rabbit</span> &#123;&#125;</span><br><span class="line"><span class="keyword">let</span> rabbit = <span class="keyword">new</span> <span class="title class_">Rabbit</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// rabbit 是 Rabbit class 的对象吗？</span></span><br><span class="line"><span class="title function_">alert</span>( rabbit <span class="keyword">instanceof</span> <span class="title class_">Rabbit</span> ); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这里是构造函数，而不是 class</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Rabbit</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">alert</span>( <span class="keyword">new</span> <span class="title class_">Rabbit</span>() <span class="keyword">instanceof</span> <span class="title class_">Rabbit</span> ); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p><code>obj instanceof Class</code> 算法的执行过程大致如下：</p><ol><li>如果这儿有静态方法 <code>Symbol.hasInstance</code>，那就直接调用这个方法。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置 instanceOf 检查</span></span><br><span class="line"><span class="comment">// 并假设具有 canEat 属性的都是 animal</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">  <span class="keyword">static</span> [<span class="title class_">Symbol</span>.<span class="property">hasInstance</span>](obj) &#123;</span><br><span class="line">    <span class="keyword">if</span> (obj.<span class="property">canEat</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">canEat</span>: <span class="literal">true</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">alert</span>(obj <span class="keyword">instanceof</span> <span class="title class_">Animal</span>); <span class="comment">// true：Animal[Symbol.hasInstance](obj) 被调用</span></span><br></pre></td></tr></table></figure></li><li>大多数 class 没有 <code>Symbol.hasInstance</code>。在这种情况下，标准的逻辑是：使用 <code>obj instanceOf Class</code> 检查 <code>Class.prototype</code> 是否等于 obj 的原型链中的原型之一。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">obj.<span class="property">__proto__</span> === <span class="title class_">Class</span>.<span class="property"><span class="keyword">prototype</span></span>?</span><br><span class="line">obj.<span class="property">__proto__</span>.<span class="property">__proto__</span> === <span class="title class_">Class</span>.<span class="property"><span class="keyword">prototype</span></span>?</span><br><span class="line">obj.<span class="property">__proto__</span>.<span class="property">__proto__</span>.<span class="property">__proto__</span> === <span class="title class_">Class</span>.<span class="property"><span class="keyword">prototype</span></span>?</span><br><span class="line">...</span><br><span class="line"><span class="comment">// 如果任意一个的答案为 true，则返回 true</span></span><br><span class="line"><span class="comment">// 否则，如果我们已经检查到了原型链的尾端，则返回 false</span></span><br></pre></td></tr></table></figure><p>在上面那个例子中，<code>rabbit.__proto__ === Rabbit.prototype</code>，所以立即就给出了结果。</p><p>使用 <code>Object.prototype.toString</code> 方法来揭示类型:</p><p>对于 number 类型，结果是 <code>[object Number]</code><br>对于 boolean 类型，结果是 <code>[object Boolean]</code><br>对于 null：<code>[object Null]</code><br>对于 undefined：<code>[object Undefined]</code><br>对于数组：<code>[object Array]</code></p><div class="table-container"><table><thead><tr><th style="text-align:center">—-</th><th style="text-align:center">用于</th><th style="text-align:center">返回值</th></tr></thead><tbody><tr><td style="text-align:center">typeof</td><td style="text-align:center">原始数据类型</td><td style="text-align:center">string</td></tr><tr><td style="text-align:center">{}.toString</td><td style="text-align:center">原始数据类型，内建对象，包含 Symbol.toStringTag 属性的对象</td><td style="text-align:center">string</td></tr><tr><td style="text-align:center">instanceof</td><td style="text-align:center">对象</td><td style="text-align:center">true/false</td></tr></tbody></table></div><h1 id="7-Mixin-模式"><a href="#7-Mixin-模式" class="headerlink" title="7.Mixin 模式"></a>7.Mixin 模式</h1><p>Mixin 是通过 <code>Object.assign(Menu.prototype, eventMixin);</code> 的方式将 eventMixin 中的方法拷贝到 <code>Menu.prototype</code> ，以实现不通过继承来扩充方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> eventMixin = &#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 订阅事件，用法：</span></span><br><span class="line"><span class="comment">   *  menu.on(&#x27;select&#x27;, function(item) &#123; ... &#125;</span></span><br><span class="line"><span class="comment">   * 它为具有给定名称的事件添加了 handler 函数作为监听器（listener）。当具有给定 name 的事件触发时将调用该方法，并从 .trigger 调用中获取参数（arguments）。</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="title function_">on</span>(<span class="params">eventName, handler</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">_eventHandlers</span>) <span class="variable language_">this</span>.<span class="property">_eventHandlers</span> = &#123;&#125;;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">_eventHandlers</span>[eventName]) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">_eventHandlers</span>[eventName] = [];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_eventHandlers</span>[eventName].<span class="title function_">push</span>(handler);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 取消订阅，用法：</span></span><br><span class="line"><span class="comment">   *  menu.off(&#x27;select&#x27;, handler)</span></span><br><span class="line"><span class="comment">   * 删除 handler 监听器（listener）</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="title function_">off</span>(<span class="params">eventName, handler</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> handlers = <span class="variable language_">this</span>.<span class="property">_eventHandlers</span>?.[eventName];</span><br><span class="line">    <span class="keyword">if</span> (!handlers) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; handlers.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (handlers[i] === handler) &#123;</span><br><span class="line">        handlers.<span class="title function_">splice</span>(i--, <span class="number">1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 生成具有给定名称和数据的事件</span></span><br><span class="line"><span class="comment">   *  this.trigger(&#x27;select&#x27;, data1, data2);</span></span><br><span class="line"><span class="comment">   * 以在发生重要的事情时“生成一个事件”。name 参数（arguments）是事件的名称，[...data] 是可选的带有事件数据的其他参数（arguments）。</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="title function_">trigger</span>(<span class="params">eventName, ...args</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">_eventHandlers</span>?.[eventName]) &#123;</span><br><span class="line">      <span class="keyword">return</span>; <span class="comment">// 该事件名称没有对应的事件处理程序（handler）</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用事件处理程序（handler）</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_eventHandlers</span>[eventName].<span class="title function_">forEach</span>(<span class="function"><span class="params">handler</span> =&gt;</span> handler.<span class="title function_">apply</span>(<span class="variable language_">this</span>, args));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个 class</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Menu</span> &#123;</span><br><span class="line">  <span class="title function_">choose</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">trigger</span>(<span class="string">&quot;select&quot;</span>, value);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 添加带有事件相关方法的 mixin</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">assign</span>(<span class="title class_">Menu</span>.<span class="property"><span class="keyword">prototype</span></span>, eventMixin);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> menu = <span class="keyword">new</span> <span class="title class_">Menu</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加一个事件处理程序（handler），在被选择时被调用：</span></span><br><span class="line">menu.<span class="title function_">on</span>(<span class="string">&quot;select&quot;</span>, <span class="function"><span class="params">value</span> =&gt;</span> <span class="title function_">alert</span>(<span class="string">`Value selected: <span class="subst">$&#123;value&#125;</span>`</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 触发事件 =&gt; 运行上述的事件处理程序（handler）并显示：</span></span><br><span class="line"><span class="comment">// 被选中的值：123</span></span><br><span class="line">menu.<span class="title function_">choose</span>(<span class="string">&quot;123&quot;</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS原型与继承</title>
      <link href="/JeckFS/2022/03/31/JS%E5%8E%9F%E5%9E%8B%E4%B8%8E%E7%BB%A7%E6%89%BF/"/>
      <url>/JeckFS/2022/03/31/JS%E5%8E%9F%E5%9E%8B%E4%B8%8E%E7%BB%A7%E6%89%BF/</url>
      
        <content type="html"><![CDATA[<h1 id="1-对象中的原型继承"><a href="#1-对象中的原型继承" class="headerlink" title="1.对象中的原型继承"></a>1.对象中的原型继承</h1><p>原型：在 JavaScript 中，对象有一个特殊的隐藏属性 <code>[[Prototype]]</code>（如规范中所命名的），它要么为 null，要么就是对另一个对象的引用。该对象被称为“原型”。当我们从 object 中读取一个缺失的属性时，JavaScript 会自动从原型中获取该属性。在编程中，这被称为“原型继承”。</p><p>可以通过对象的 <code>__proto__</code> 来设置原型（<code>[[Prototype]]</code>）。</p><p>限制： </p><ul><li>引用不能形成闭环。如果我们试图在一个闭环中分配 <code>__proto__</code> ，JavaScript 会抛出错误。</li><li><code>__proto__</code> 的值可以是对象，也可以是 null。而其他的类型都会被忽略。</li><li>一个对象只能有一个 <code>[[Prototype]]</code> ，不能从其他两个对象获得继承。</li></ul><p><code>__proto__</code> 与 <code>[[Prototype]]</code> 的区别：</p><ul><li><code>__proto__</code> 与内部的 <code>[[Prototype]]</code> 不一样。<code>__proto__</code> 是 <code>[[Prototype]]</code> 的 getter/setter。</li><li><code>__proto__</code> 属性有点过时了。它的存在是出于历史的原因，现代编程语言建议我们应该使用函数 <code>Object.getPrototypeOf/Object.setPrototypeOf</code> 来取代 <code>__proto__</code> 去 get/set 原型。</li></ul><p><code>for...in</code> 可以遍历到原型的属性。若想在程序中判定出到底是原型的属性还是自己所拥有的，可以使用 <code>obj.hasOwnProperty(key)</code> 来判断。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> animal = &#123;</span><br><span class="line">  <span class="attr">eats</span>: <span class="literal">true</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> rabbit = &#123;</span><br><span class="line">  <span class="attr">jumps</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">__proto__</span>: animal <span class="comment">// 指定原型对象</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> prop <span class="keyword">in</span> rabbit) &#123;</span><br><span class="line">  <span class="keyword">let</span> isOwn = rabbit.<span class="title function_">hasOwnProperty</span>(prop);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (isOwn) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">`Our: <span class="subst">$&#123;prop&#125;</span>`</span>); <span class="comment">// Our: jumps</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">`Inherited: <span class="subst">$&#123;prop&#125;</span>`</span>); <span class="comment">// Inherited: eats</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-F-prototype"><a href="#2-F-prototype" class="headerlink" title="2.F.prototype"></a>2.F.prototype</h1><ul><li><code>F.prototype</code> 属性（不要把它与 <code>[[Prototype]]</code> 弄混了）在 new F 被调用时为新对象的 <code>[[Prototype]]</code> 赋值。</li><li><code>F.prototype</code> 的值要么是一个对象，要么就是 null：其他值都不起作用。</li><li>“prototype” 属性仅在设置了一个构造函数（constructor function），并通过 new 调用时，才具有这种特殊的影响</li></ul><p>在常规对象上，prototype 没什么特别的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> user = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;John&quot;</span>,</span><br><span class="line">  <span class="attr">prototype</span>: <span class="string">&quot;Bla-bla&quot;</span> <span class="comment">// 这里只是普通的属性</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>默认情况下，所有函数都有 <code>F.prototype = &#123;constructor：F&#125;</code>，所以我们可以通过访问它的 “constructor” 属性来获取一个对象的构造器。</p><img src="/JeckFS/2022/03/31/JS%E5%8E%9F%E5%9E%8B%E4%B8%8E%E7%BB%A7%E6%89%BF/20220331-114547-117.png" class="" title="This is 1-th image."><p>可以使用 constructor 属性来创建对象。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Rabbit</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  <span class="title function_">alert</span>(name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> rabbit = <span class="keyword">new</span> <span class="title class_">Rabbit</span>(<span class="string">&quot;White Rabbit&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> rabbit2 = <span class="keyword">new</span> rabbit.<span class="title function_">constructor</span>(<span class="params"><span class="string">&quot;Black Rabbit&quot;</span></span>);</span><br></pre></td></tr></table></figure></p><p>……JavaScript 自身并不能确保正确的 “constructor” 函数值。特别是，如果我们将整个默认 prototype 替换掉，那么其中就不会有 “constructor” 了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Rabbit</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="title class_">Rabbit</span>.<span class="property"><span class="keyword">prototype</span></span> = &#123;</span><br><span class="line">  <span class="attr">jumps</span>: <span class="literal">true</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> rabbit = <span class="keyword">new</span> <span class="title class_">Rabbit</span>();</span><br><span class="line"><span class="title function_">alert</span>(rabbit.<span class="property">constructor</span> === <span class="title class_">Rabbit</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>因此，为了确保正确的 “constructor”，我们可以选择添加/删除属性到默认 “prototype”，而不是将其整个覆盖：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Rabbit</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不要将 Rabbit.prototype 整个覆盖</span></span><br><span class="line"><span class="comment">// 可以向其中添加内容</span></span><br><span class="line"><span class="title class_">Rabbit</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">jumps</span> = <span class="literal">true</span></span><br><span class="line"><span class="comment">// 默认的 Rabbit.prototype.constructor 被保留了下来</span></span><br></pre></td></tr></table></figure><p>或者，也可以手动重新创建 constructor 属性：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Rabbit</span>.<span class="property"><span class="keyword">prototype</span></span> = &#123;</span><br><span class="line">  <span class="attr">jumps</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">constructor</span>: <span class="title class_">Rabbit</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这样的 constructor 也是正确的，因为我们手动添加了它</span></span><br></pre></td></tr></table></figure><h1 id="3-原生的原型"><a href="#3-原生的原型" class="headerlink" title="3.原生的原型"></a>3.原生的原型</h1><h1 id="4-原型方法，没有-proto-的对象"><a href="#4-原型方法，没有-proto-的对象" class="headerlink" title="4.原型方法，没有 proto 的对象"></a>4.原型方法，没有 <strong>proto</strong> 的对象</h1><p>设置和直接访问原型的现代方法有：</p><ul><li><code>Object.create(proto, [descriptors])</code> —— 利用给定的 proto 作为 <code>[[Prototype]]</code>（可以是 null）和可选的属性描述来创建一个空对象。</li><li><code>Object.getPrototypeOf(obj)</code> —— 返回对象 obj 的 <code>[[Prototype]]</code>（与 <code>__proto__</code> 的 getter 相同）。</li><li><code>Object.setPrototypeOf(obj, proto)</code> —— 将对象 obj 的 <code>[[Prototype]]</code> 设置为 proto（与 <code>__proto__</code> 的 setter 相同）。<br>如果要将一个用户生成的键放入一个对象，那么内建的 <code>__proto__</code> getter/setter 是不安全的。因为用户可能会输入 “<code>__proto__</code>“ 作为键，这会导致一个 error，虽然我们希望这个问题不会造成什么大影响，但通常会造成不可预料的后果。</li></ul><p>因此，我们可以使用 <code>Object.create(null)</code> 创建一个没有 <code>__proto__</code> 的 “very plain” 对象，或者对此类场景坚持使用 Map 对象就可以了。</p><p>此外，<code>Object.create</code> 提供了一种简单的方式来浅拷贝一个对象的所有描述符：</p><p><code>let clone = Object.create(Object.getPrototypeOf(obj), Object.getOwnPropertyDescriptors(obj));</code></p><p>此外，我们还明确了 <code>__proto__</code> 是 <code>[[Prototype]]</code> 的 <code>getter/setter</code>，就像其他方法一样，它位于 <code>Object.prototype</code>。</p><p>我们可以通过 <code>Object.create(null)</code> 来创建没有原型的对象。这样的对象被用作 “pure dictionaries”，对于它们而言，使用 “<code>__proto__</code>“ 作为键是没有问题的。</p><p>其他方法：</p><ul><li><code>Object.keys(obj) / Object.values(obj) / Object.entries(obj)</code> —— 返回一个可枚举的由自身的字符串属性名/值/键值对组成的数组。</li><li><code>Object.getOwnPropertySymbols(obj)</code> —— 返回一个由自身所有的 symbol 类型的键组成的数组。</li><li><code>Object.getOwnPropertyNames(obj)</code> —— 返回一个由自身所有的字符串键组成的数组。</li><li><code>Reflect.ownKeys(obj)</code> —— 返回一个由自身所有键组成的数组。</li><li><code>obj.hasOwnProperty(key)</code>：如果 obj 拥有名为 key 的自身的属性（非继承而来的），则返回 true。<br>所有返回对象属性的方法（如 <code>Object.keys</code> 及其他）—— 都返回“自身”的属性。如果我们想继承它们，我们可以使用 <code>for...in</code>。</li></ul><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">b</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">a</span> = <span class="number">0</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">b</span> = b</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Rabbit</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">b</span>)&#123;</span><br><span class="line">        <span class="variable language_">super</span>(b)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">a</span> = <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Rabbit</span>.<span class="property"><span class="keyword">prototype</span></span>);                  <span class="comment">//Rabbit &#123;&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Rabbit</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span>);      <span class="comment">//[class Rabbit extends Animal]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Rabbit</span>.<span class="property">__proto__</span>);                  <span class="comment">//[class Animal]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">getPrototypeOf</span>(<span class="title class_">Rabbit</span>))      <span class="comment">//[class Animal]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Rabbit</span>);                            <span class="comment">//[class Rabbit extends Animal]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> r = <span class="keyword">new</span> <span class="title class_">Rabbit</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="title function_">constructor</span>(<span class="params"><span class="number">1</span></span>) </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(r);                                 <span class="comment">//Rabbit &#123; a: 1, b: 1 &#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS函数进阶</title>
      <link href="/JeckFS/2022/03/28/JS%E5%87%BD%E6%95%B0%E8%BF%9B%E9%98%B6/"/>
      <url>/JeckFS/2022/03/28/JS%E5%87%BD%E6%95%B0%E8%BF%9B%E9%98%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Rest-参数与-Spread-语法"><a href="#1-Rest-参数与-Spread-语法" class="headerlink" title="1. Rest 参数与 Spread 语法"></a>1. Rest 参数与 Spread 语法</h1><p>JS 中的函数可以接收任意数量的参数，但是多余的参数会被舍弃。如 sum 函数接受两个参数 a 与 b ，在调用 sum 函数时可以传递 2 个以上的参数，只不过从第 3 个参数开始的参数都会被舍弃。</p><h2 id="1-1-Rest-参数：必须放在参数列表的末尾，用于接收剩余的参数。"><a href="#1-1-Rest-参数：必须放在参数列表的末尾，用于接收剩余的参数。" class="headerlink" title="1.1 Rest 参数：必须放在参数列表的末尾，用于接收剩余的参数。"></a>1.1 Rest 参数：必须放在参数列表的末尾，用于接收剩余的参数。</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 示例</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">showName</span>(<span class="params">firstName, lastName, ...titles</span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>( firstName + <span class="string">&#x27; &#x27;</span> + lastName ); <span class="comment">// Julius Caesar</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 剩余的参数被放入 titles 数组中</span></span><br><span class="line">  <span class="comment">// i.e. titles = [&quot;Consul&quot;, &quot;Imperator&quot;]</span></span><br><span class="line">  <span class="title function_">alert</span>( titles[<span class="number">0</span>] ); <span class="comment">// Consul</span></span><br><span class="line">  <span class="title function_">alert</span>( titles[<span class="number">1</span>] ); <span class="comment">// Imperator</span></span><br><span class="line">  <span class="title function_">alert</span>( titles.<span class="property">length</span> ); <span class="comment">// 2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">showName</span>(<span class="string">&quot;Julius&quot;</span>, <span class="string">&quot;Caesar&quot;</span>, <span class="string">&quot;Consul&quot;</span>, <span class="string">&quot;Imperator&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="1-2-Arguments-用于获取参数"><a href="#1-2-Arguments-用于获取参数" class="headerlink" title="1.2 Arguments 用于获取参数"></a>1.2 Arguments 用于获取参数</h2><p>Arguments 是一种特殊的类数组对象（可迭代），该对象按参数索引包含所有参数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 示例</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">showName</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>( <span class="variable language_">arguments</span>.<span class="property">length</span> );</span><br><span class="line">  <span class="title function_">alert</span>( <span class="variable language_">arguments</span>[<span class="number">0</span>] );</span><br><span class="line">  <span class="title function_">alert</span>( <span class="variable language_">arguments</span>[<span class="number">1</span>] );</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 它是可遍历的</span></span><br><span class="line">  <span class="comment">// for(let arg of arguments) alert(arg);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 依次显示：2，Julius，Caesar</span></span><br><span class="line"><span class="title function_">showName</span>(<span class="string">&quot;Julius&quot;</span>, <span class="string">&quot;Caesar&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 依次显示：1，Ilya，undefined（没有第二个参数）</span></span><br><span class="line"><span class="title function_">showName</span>(<span class="string">&quot;Ilya&quot;</span>);</span><br></pre></td></tr></table></figure><p><strong>箭头函数是没有 “arguments”</strong></p><h2 id="1-3-Spread-语法"><a href="#1-3-Spread-语法" class="headerlink" title="1.3 Spread 语法"></a>1.3 Spread 语法</h2><p>作用是：将可迭代对象（如数组、对象）扩展为一个个的元素。</p><p>应用场景：复制数组或者对象(浅拷贝)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arrCopy = [...arr]; <span class="comment">// 将数组 spread 到参数列表中</span></span><br><span class="line">                        <span class="comment">// 然后将结果放到一个新数组</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 两个数组中的内容相同吗？</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(arr) === <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(arrCopy)); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 两个数组相等吗？</span></span><br><span class="line"><span class="title function_">alert</span>(arr === arrCopy); <span class="comment">// false（它们的引用是不同的）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改我们初始的数组不会修改副本：</span></span><br><span class="line">arr.<span class="title function_">push</span>(<span class="number">4</span>);</span><br><span class="line"><span class="title function_">alert</span>(arr); <span class="comment">// 1, 2, 3, 4</span></span><br><span class="line"><span class="title function_">alert</span>(arrCopy); <span class="comment">// 1, 2, 3</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> objCopy = &#123; ...obj &#125;; <span class="comment">// 将对象 spread 到参数列表中</span></span><br><span class="line">                          <span class="comment">// 然后将结果返回到一个新对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 两个对象中的内容相同吗？</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj) === <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(objCopy)); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 两个对象相等吗？</span></span><br><span class="line"><span class="title function_">alert</span>(obj === objCopy); <span class="comment">// false (not same reference)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改我们初始的对象不会修改副本：</span></span><br><span class="line">obj.<span class="property">d</span> = <span class="number">4</span>;</span><br><span class="line"><span class="title function_">alert</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj)); <span class="comment">// &#123;&quot;a&quot;:1,&quot;b&quot;:2,&quot;c&quot;:3,&quot;d&quot;:4&#125;</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(objCopy)); <span class="comment">// &#123;&quot;a&quot;:1,&quot;b&quot;:2,&quot;c&quot;:3&#125;</span></span><br></pre></td></tr></table></figure><h1 id="2-变量作用域，闭包"><a href="#2-变量作用域，闭包" class="headerlink" title="2. 变量作用域，闭包"></a>2. 变量作用域，闭包</h1><h2 id="2-1-词法环境"><a href="#2-1-词法环境" class="headerlink" title="2.1 词法环境"></a>2.1 词法环境</h2><p>在 JavaScript 中，每个运行的函数，代码块 <code>&#123;...&#125;</code> 以及整个脚本，都有一个被称为 词法环境（Lexical Environment） 的内部（隐藏）的关联对象。<br>词法环境中记录了当前词法环境所拥有的变量以及函数。当代码要访问一个变量时 —— 首先会搜索内部词法环境，然后搜索外部环境，然后搜索更外部的环境，以此类推，直到全局词法环境。如果在任何地方都找不到这个变量，那么在严格模式下就会报错（在非严格模式下，为了向下兼容，给未定义的变量赋值会创建一个全局变量）。</p><img src="/JeckFS/2022/03/28/JS%E5%87%BD%E6%95%B0%E8%BF%9B%E9%98%B6/20220329-154156-250.png" class="" title="This is 1-th image."><p>所有的函数在<strong>定义</strong>时都会通过函数的 <code>[[Environment]]</code> 属性指向创建该函数（与函数被在哪儿调用无关）的词法环境。当<strong>调用</strong>该函数时，会为该函数创建对应的词法环境。</p><p>示例：</p><img src="/JeckFS/2022/03/28/JS%E5%87%BD%E6%95%B0%E8%BF%9B%E9%98%B6/20220329-154916-891.png" class="" title="This is 2-th image."><img src="/JeckFS/2022/03/28/JS%E5%87%BD%E6%95%B0%E8%BF%9B%E9%98%B6/20220329-155106-988.png" class="" title="This is 3-th image."><img src="/JeckFS/2022/03/28/JS%E5%87%BD%E6%95%B0%E8%BF%9B%E9%98%B6/20220329-155252-603.png" class="" title="This is 4-th image."><h2 id="2-2-闭包"><a href="#2-2-闭包" class="headerlink" title="2.2 闭包"></a>2.2 闭包</h2><p>闭包 是指内部函数总是可以访问其所在的外部函数中声明的变量和参数，即使在其外部函数被返回（寿命终结）了之后。在某些编程语言中，这是不可能的，或者应该以特殊的方式编写函数来实现。但是如上所述，在 JavaScript 中，所有函数都是天生闭包的（只有一个例外，将在 “new Function” 语法 中讲到）。</p><p>也就是说：JavaScript 中的函数会自动通过隐藏的 <code>[[Environment]]</code> 属性记住创建它们的位置，所以它们都可以访问外部变量。</p><p>在面试时，前端开发者通常会被问到“什么是闭包？”，正确的回答应该是闭包的定义，并解释清楚为什么 JavaScript 中的所有函数都是闭包的，以及可能的关于 <code>[[Environment]]</code> 属性和词法环境原理的技术细节。</p><h2 id="2-3-词法环境的垃圾收集"><a href="#2-3-词法环境的垃圾收集" class="headerlink" title="2.3 词法环境的垃圾收集"></a>2.3 词法环境的垃圾收集</h2><p>一般情况下，当函数调用完成后，下次垃圾收集时会将该词法环境回收。但当该函数返回的对象是一个函数时，并且在外部引用了，那么即使该函数调用完成，其词法环境仍不会被回收。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> value = <span class="number">123</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(value);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> g = <span class="title function_">f</span>(); <span class="comment">// g.[[Environment]] 存储了对相应 f() 调用的词法环境的引用</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> value = <span class="title class_">Math</span>.<span class="title function_">random</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>) &#123; <span class="title function_">alert</span>(value); &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组中的 3 个函数，每个都与来自对应的 f() 的词法环境相关联</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="title function_">f</span>(), <span class="title function_">f</span>(), <span class="title function_">f</span>()];</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> value = <span class="number">123</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(value);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> g = <span class="title function_">f</span>(); <span class="comment">// 当 g 函数存在时，该值会被保留在内存中</span></span><br><span class="line"></span><br><span class="line">g = <span class="literal">null</span>; <span class="comment">// ……现在内存被清理了</span></span><br></pre></td></tr></table></figure><h1 id="3-旧时的-“var”"><a href="#3-旧时的-“var”" class="headerlink" title="3. 旧时的 “var”"></a>3. 旧时的 “var”</h1><ul><li>没有块级作用域。在函数中定义，其作用域是整个函数。在函数外定义，作用域是全局。</li><li>同一个变量可以使用 var 声明多次</li><li>通过 var 定义的变量可以在定义之前被使用。即声明会被提升到函数顶部，但是赋值不会。</li><li>由于 var 变量在函数内的作用域为整个函数，因此可以通过一次性函数来模拟局部变量</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建 IIFE 的方法</span></span><br><span class="line"></span><br><span class="line">(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&quot;Parentheses around the function&quot;</span>);</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line">(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&quot;Parentheses around the whole thing&quot;</span>);</span><br><span class="line">&#125;());</span><br><span class="line"></span><br><span class="line">!<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&quot;Bitwise NOT operator starts the expression&quot;</span>);</span><br><span class="line">&#125;();</span><br><span class="line"></span><br><span class="line">+<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&quot;Unary plus starts the expression&quot;</span>);</span><br><span class="line">&#125;();</span><br></pre></td></tr></table></figure><h1 id="4-全局对象"><a href="#4-全局对象" class="headerlink" title="4. 全局对象"></a>4. 全局对象</h1><h1 id="5-函数对象，NFE"><a href="#5-函数对象，NFE" class="headerlink" title="5. 函数对象，NFE"></a>5. 函数对象，NFE</h1><h1 id="6-“new-Function”-语法"><a href="#6-“new-Function”-语法" class="headerlink" title="6. “new Function” 语法"></a>6. “new Function” 语法</h1><p>语法：</p><p><code>let func = new Function ([arg1, arg2, ...argN], functionBody);</code><br>由于历史原因，参数也可以按逗号分隔符的形式给出。</p><p>以下三种声明的含义相同：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Function</span>(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;return a + b&#x27;</span>); <span class="comment">// 基础语法</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Function</span>(<span class="string">&#x27;a,b&#x27;</span>, <span class="string">&#x27;return a + b&#x27;</span>); <span class="comment">// 逗号分隔</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Function</span>(<span class="string">&#x27;a , b&#x27;</span>, <span class="string">&#x27;return a + b&#x27;</span>); <span class="comment">// 逗号和空格分隔</span></span><br></pre></td></tr></table></figure><p>使用 new Function 创建的函数，它的 <code>[[Environment]]</code> 指向全局词法环境，而不是函数所在的外部词法环境。因此，我们不能在 new Function 中直接使用外部变量（没有闭包特性）。不过这样是好事，这有助于降低我们代码出错的可能。并且，从代码架构上讲，显式地使用参数传值是一种更好的方法，并且避免了与使用压缩程序而产生冲突的问题。</p><h1 id="7-调度：setTimeout-和-setInterval"><a href="#7-调度：setTimeout-和-setInterval" class="headerlink" title="7. 调度：setTimeout 和 setInterval"></a>7. 调度：setTimeout 和 setInterval</h1><h2 id="7-1-setTimeout"><a href="#7-1-setTimeout" class="headerlink" title="7.1 setTimeout"></a>7.1 setTimeout</h2><p><code>let timerId = setTimeout(func|code, [delay], [arg1], [arg2], ...)</code></p><p>参数说明：</p><ul><li>func|code<br>想要执行的函数或代码字符串。 一般传入的都是函数。由于某些历史原因，支持传入代码字符串，但是不建议这样做。</li><li>delay<br>执行前的延时，以毫秒为单位（1000 毫秒 = 1 秒），默认值是 0；</li><li>arg1，arg2…<br>要传入被执行函数（或代码字符串）的参数列表（IE9 以下不支持）</li></ul><p>setTimeout 在调用时会返回一个“定时器标识符（timer identifier）”，可以通过 clearTimeout 来取消调度。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> timerId = <span class="built_in">setTimeout</span>(...);</span><br><span class="line"><span class="built_in">clearTimeout</span>(timerId);</span><br></pre></td></tr></table></figure><h2 id="7-2-setInterval"><a href="#7-2-setInterval" class="headerlink" title="7.2 setInterval"></a>7.2 setInterval</h2><p><code>let timerId = setInterval(func|code, [delay], [arg1], [arg2], ...)</code></p><p>每间隔给定的时间周期性执行。想要阻止后续调用，我们需要调用 <code>clearInterval(timerId)</code></p><h2 id="7-3-嵌套的-setTimeout"><a href="#7-3-嵌套的-setTimeout" class="headerlink" title="7.3 嵌套的 setTimeout"></a>7.3 嵌套的 setTimeout</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> delay = <span class="number">5000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> timerId = <span class="built_in">setTimeout</span>(<span class="keyword">function</span> <span class="title function_">request</span>(<span class="params"></span>) &#123;</span><br><span class="line">  ...发送请求...</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (request failed due to server overload) &#123;</span><br><span class="line">    <span class="comment">// 下一次执行的间隔是当前的 2 倍</span></span><br><span class="line">    delay *= <span class="number">2</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  timerId = <span class="built_in">setTimeout</span>(request, delay);</span><br><span class="line"></span><br><span class="line">&#125;, delay);</span><br></pre></td></tr></table></figure><p>使用嵌套的 setTimeout 更灵活，可以根据当前系统负载进行动态调整下次执行的延迟时间。</p><p>嵌套的 setTimeout 同样可以周期性的执行某个函数，它与 setInterval 的区别是：<br>嵌套的 setTimeout 能够精确地设置函数两次执行之间的延时，而 setInterval 却不能。</p><p>使用 setInterval ：</p><img src="/JeckFS/2022/03/28/JS%E5%87%BD%E6%95%B0%E8%BF%9B%E9%98%B6/20220330-193930-880.png" class="" title="This is 1-th image."><p>使用嵌套的 setTimeout ：</p><img src="/JeckFS/2022/03/28/JS%E5%87%BD%E6%95%B0%E8%BF%9B%E9%98%B6/20220330-194045-336.png" class="" title="This is 2-th image."><p>请注意，所有的调度方法都不能 保证 确切的延时。</p><p>例如，浏览器内的计时器可能由于许多原因而变慢：</p><ul><li>CPU 过载。</li><li>浏览器页签处于后台模式。</li><li>笔记本电脑用的是电池供电（译注：使用电池供电会以降低性能为代价提升续航）。<br>所有这些因素，可能会将定时器的最小计时器分辨率（最小延迟）增加到 300ms 甚至 1000ms，具体以浏览器及其设置为准。</li></ul><h1 id="8-装饰器模式和转发，call-apply"><a href="#8-装饰器模式和转发，call-apply" class="headerlink" title="8. 装饰器模式和转发，call/apply"></a>8. 装饰器模式和转发，call/apply</h1><p>使用 call 设定上下文：</p><p>语法： <code>func.call(context, arg1, arg2, ...)</code></p><p>示例1：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sayHi</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> user = &#123; <span class="attr">name</span>: <span class="string">&quot;John&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> admin = &#123; <span class="attr">name</span>: <span class="string">&quot;Admin&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 call 将不同的对象传递为 &quot;this&quot;</span></span><br><span class="line">sayHi.<span class="title function_">call</span>( user ); <span class="comment">// John</span></span><br><span class="line">sayHi.<span class="title function_">call</span>( admin ); <span class="comment">// Admin</span></span><br></pre></td></tr></table></figure></p><p>示例2:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 我们将对 worker.slow 的结果进行缓存</span></span><br><span class="line"><span class="keyword">let</span> worker = &#123;</span><br><span class="line">  <span class="title function_">someMethod</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="title function_">slow</span>(<span class="params">x</span>) &#123;</span><br><span class="line">    <span class="comment">// 可怕的 CPU 过载任务</span></span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;Called with &quot;</span> + x);</span><br><span class="line">    <span class="keyword">return</span> x * <span class="variable language_">this</span>.<span class="title function_">someMethod</span>(); <span class="comment">// (*)</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 和之前例子中的代码相同</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">cachingDecorator</span>(<span class="params">func</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> cache = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">x</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (cache.<span class="title function_">has</span>(x)) &#123;</span><br><span class="line">      <span class="keyword">return</span> cache.<span class="title function_">get</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="title function_">func</span>(x); <span class="comment">// (**)</span></span><br><span class="line">    cache.<span class="title function_">set</span>(x, result);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">alert</span>( worker.<span class="title function_">slow</span>(<span class="number">1</span>) ); <span class="comment">// 原始方法有效</span></span><br><span class="line"></span><br><span class="line">worker.<span class="property">slow</span> = <span class="title function_">cachingDecorator</span>(worker.<span class="property">slow</span>); <span class="comment">// 现在对其进行缓存</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">alert</span>( worker.<span class="title function_">slow</span>(<span class="number">2</span>) ); <span class="comment">// 蛤！Error: Cannot read property &#x27;someMethod&#x27; of undefined</span></span><br></pre></td></tr></table></figure><p>出错的原因是：包装器将原始函数调用为 <code>(**)</code> 行中的 <code>func(x)</code>。并且，当这样调用时，函数将得到 <code>this = undefined</code>。</p><p>解决：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> worker = &#123;</span><br><span class="line">  <span class="title function_">someMethod</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="title function_">slow</span>(<span class="params">x</span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;Called with &quot;</span> + x);</span><br><span class="line">    <span class="keyword">return</span> x * <span class="variable language_">this</span>.<span class="title function_">someMethod</span>(); <span class="comment">// (*)</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">cachingDecorator</span>(<span class="params">func</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> cache = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">x</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (cache.<span class="title function_">has</span>(x)) &#123;</span><br><span class="line">      <span class="keyword">return</span> cache.<span class="title function_">get</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> result = func.<span class="title function_">call</span>(<span class="variable language_">this</span>, x); <span class="comment">// 现在 &quot;this&quot; 被正确地传递了</span></span><br><span class="line">    cache.<span class="title function_">set</span>(x, result);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">worker.<span class="property">slow</span> = <span class="title function_">cachingDecorator</span>(worker.<span class="property">slow</span>); <span class="comment">// 现在对其进行缓存</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">alert</span>( worker.<span class="title function_">slow</span>(<span class="number">2</span>) ); <span class="comment">// 工作正常</span></span><br><span class="line"><span class="title function_">alert</span>( worker.<span class="title function_">slow</span>(<span class="number">2</span>) ); <span class="comment">// 工作正常，没有调用原始函数（使用的缓存）</span></span><br></pre></td></tr></table></figure><p>func.apply 设定上下文：</p><p>基本语法： <code>func.apply(context, args)</code>，其中 args 是类数组对象。</p><p>方法借用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hash</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 类数组借用数组中的方法</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>( [].<span class="property">join</span>.<span class="title function_">apply</span>(<span class="variable language_">arguments</span>) ); <span class="comment">// 1,2</span></span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="title function_">hash</span>(<span class="number">1</span>,<span class="number">2</span>);</span><br></pre></td></tr></table></figure><p>通常，用装饰的函数替换一个函数或一个方法是安全的，除了一件小东西。如果原始函数有属性，例如 <code>func.calledCount</code> 或其他，则装饰后的函数将不再提供这些属性。因为这是装饰器。因此，如果有人使用它们，那么就需要小心。</p><p>例如，在上面的示例中，如果 slow 函数具有任何属性，而 <code>cachingDecorator(slow)</code> 则是一个没有这些属性的包装器。</p><p>一些包装器可能会提供自己的属性。例如，装饰器会计算一个函数被调用了多少次以及花费了多少时间，并通过包装器属性公开（expose）这些信息。</p><p>存在一种创建装饰器的方法，该装饰器可保留对函数属性的访问权限，但这需要使用特殊的 Proxy 对象来包装函数。我们将在后面的 Proxy 和 Reflect 中学习它。</p><h1 id="9-函数绑定"><a href="#9-函数绑定" class="headerlink" title="9. 函数绑定"></a>9. 函数绑定</h1><h2 id="9-1-bind-函数的基本使用"><a href="#9-1-bind-函数的基本使用" class="headerlink" title="9.1 bind 函数的基本使用"></a>9.1 bind 函数的基本使用</h2><p>丢失 this 的情况</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> user = &#123;</span><br><span class="line">  <span class="attr">firstName</span>: <span class="string">&quot;John&quot;</span>,</span><br><span class="line">  <span class="title function_">sayHi</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">`Hello, <span class="subst">$&#123;<span class="variable language_">this</span>.firstName&#125;</span>!`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(user.<span class="property">sayHi</span>, <span class="number">1000</span>); <span class="comment">// Hello, undefined!</span></span><br></pre></td></tr></table></figure><p>解决方案1: 使用包装器</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> user = &#123;</span><br><span class="line">  <span class="attr">firstName</span>: <span class="string">&quot;John&quot;</span>,</span><br><span class="line">  <span class="title function_">sayHi</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">`Hello, <span class="subst">$&#123;<span class="variable language_">this</span>.firstName&#125;</span>!`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  user.<span class="title function_">sayHi</span>(); <span class="comment">// Hello, John!</span></span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure><p>缺点：当 user 对象发生变化时会影响 user.sayHi 的 context 。如下示例展示了 context 的变化过程。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> user = &#123;</span><br><span class="line">  <span class="attr">firstName</span>: <span class="string">&quot;John&quot;</span>,</span><br><span class="line">  <span class="title function_">sayHi</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">`Hello, <span class="subst">$&#123;<span class="variable language_">this</span>.firstName&#125;</span>!`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> user.<span class="title function_">sayHi</span>(), <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ……user 的值在不到 1 秒的时间内发生了改变</span></span><br><span class="line">user = &#123;</span><br><span class="line">  <span class="title function_">sayHi</span>(<span class="params"></span>) &#123; <span class="title function_">alert</span>(<span class="string">&quot;Another user in setTimeout!&quot;</span>); &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Another user in setTimeout!</span></span><br></pre></td></tr></table></figure><p>解决方案2: 使用 bind() 将函数绑定到固定的 context 上。该 context 一旦绑定就不会变动，即使重复绑定也不会变动。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> user = &#123;</span><br><span class="line">  <span class="attr">firstName</span>: <span class="string">&quot;John&quot;</span>,</span><br><span class="line">  <span class="title function_">sayHi</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">`Hello, <span class="subst">$&#123;<span class="variable language_">this</span>.firstName&#125;</span>!`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> sayHi = user.<span class="property">sayHi</span>.<span class="title function_">bind</span>(user); <span class="comment">// (*)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以在没有对象（译注：与对象分离）的情况下运行它</span></span><br><span class="line"><span class="title function_">sayHi</span>(); <span class="comment">// Hello, John!</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(sayHi, <span class="number">1000</span>); <span class="comment">// Hello, John!</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 即使 user 的值在不到 1 秒内发生了改变</span></span><br><span class="line"><span class="comment">// sayHi 还是会使用预先绑定（pre-bound）的值，该值是对旧的 user 对象的引用</span></span><br><span class="line">user = &#123;</span><br><span class="line">  <span class="title function_">sayHi</span>(<span class="params"></span>) &#123; <span class="title function_">alert</span>(<span class="string">&quot;Another user in setTimeout!&quot;</span>); &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="9-2-偏函数"><a href="#9-2-偏函数" class="headerlink" title="9.2 偏函数"></a>9.2 偏函数</h1><p>所谓偏函数是指：bind 函数不仅绑定了 context ，同时也绑定了部分参数。这样在使用绑定函数时仅传递未绑定的参数即可。</p><p>bind 函数的完整语法：</p><p><code>let bound = func.bind(context, [arg1], [arg2], ...);</code></p><p>偏函数示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">mul</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a * b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> triple = mul.<span class="title function_">bind</span>(<span class="literal">null</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_">alert</span>( <span class="title function_">triple</span>(<span class="number">3</span>) ); <span class="comment">// = mul(3, 3) = 9</span></span><br><span class="line"><span class="title function_">alert</span>( <span class="title function_">triple</span>(<span class="number">4</span>) ); <span class="comment">// = mul(3, 4) = 12</span></span><br><span class="line"><span class="title function_">alert</span>( <span class="title function_">triple</span>(<span class="number">5</span>) ); <span class="comment">// = mul(3, 5) = 15</span></span><br></pre></td></tr></table></figure><h1 id="10-深入理解箭头函数"><a href="#10-深入理解箭头函数" class="headerlink" title="10. 深入理解箭头函数"></a>10. 深入理解箭头函数</h1><ul><li>箭头函数没有 this </li><li>箭头函数没有 arguments </li></ul><p>箭头函数中若使用了 this 与 arguments ，则其一定是外部词法环境的 this 与 arguments</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS数据类型</title>
      <link href="/JeckFS/2022/03/27/JS%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
      <url>/JeckFS/2022/03/27/JS%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="1-原始类型"><a href="#1-原始类型" class="headerlink" title="1. 原始类型"></a>1. 原始类型</h1><p>JS包括7种原始类型：string，number，bigint，boolean，symbol，null 和 undefined。<br>原始类型不是对象，它不能挂载任何属性和方法。在严格模式下，挂载属性和方法会报错，在非严格模式下会报 undeifined</p><p>原始类型包装器：<code>String/Number/Boolean</code>。<code>null/undefined</code> 没有对应的包装器，没有任何方法。</p><p>使用原始类型包装器与否的区别：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 区别1</span></span><br><span class="line"><span class="title function_">alert</span>( <span class="keyword">typeof</span> <span class="number">0</span> ); <span class="comment">// &quot;number&quot;</span></span><br><span class="line"><span class="title function_">alert</span>( <span class="keyword">typeof</span> <span class="keyword">new</span> <span class="title class_">Number</span>(<span class="number">0</span>) ); <span class="comment">// &quot;object&quot;!</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 区别2: 对象在 if 条件判断中始终为真</span></span><br><span class="line"><span class="keyword">let</span> zero = <span class="keyword">new</span> <span class="title class_">Number</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (zero) &#123; <span class="comment">// zero 为 true，因为它是一个对象</span></span><br><span class="line">  <span class="title function_">alert</span>( <span class="string">&quot;zero is truthy?!?&quot;</span> );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原始类型包装器的使用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 new</span></span><br><span class="line"><span class="keyword">let</span> zero = <span class="keyword">new</span> <span class="title class_">Number</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不使用 new</span></span><br><span class="line"><span class="keyword">let</span> num = <span class="title class_">Number</span>(<span class="string">&quot;123&quot;</span>); <span class="comment">// 将字符串转成数字</span></span><br></pre></td></tr></table></figure><h1 id="2-数字类型"><a href="#2-数字类型" class="headerlink" title="2. 数字类型"></a>2. 数字类型</h1><p>编写数字的方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> billion = <span class="number">1000000000</span>;</span><br><span class="line"><span class="keyword">let</span> billion = <span class="number">1_000_000_000</span>;</span><br><span class="line"><span class="keyword">let</span> billion = <span class="number">1e9</span>;  <span class="comment">// 10 亿，字面意思：数字 1 后面跟 9 个 0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 16进制</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">0xff</span>;</span><br><span class="line"><span class="keyword">let</span> a = <span class="number">0xFF</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 8进制</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">0o377</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2进制</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">0b111</span>;</span><br></pre></td></tr></table></figure><p>数字类型内建函数：</p><ul><li><code>num.toString(base)</code> : 返回在给定 base 进制数字系统中 num 的字符串表示形式</li><li><code>Math.floor</code> : 向下舍入</li><li><code>Math.ceil</code> : 向上舍入</li><li><code>Math.round</code> : 向最近的整数舍入</li><li><code>Math.trunc</code> : 移除小数点后的所有内容而没有舍入</li><li><code>toFixed(n)</code> : 将数字舍入到小数点后 n 位，并以字符串形式返回结果(存在四舍五入效果)</li><li><code>isNaN(value)</code> : 将其参数转换为数字，然后测试它是否为 NaN</li><li><code>isFinite(value)</code> : 将其参数转换为数字，如果是常规数字，则返回 true，而不是 <code>NaN/Infinity/-Infinity</code>。空字符串或仅有空格的字符串均被视为 0</li><li><code>parseInt(str, base)</code> : 从字符串 str 最左边开始提取一个整数，并转换成 base 进制</li><li><code>parseFloat()</code> : 从字符串最左边开始提取一个小数</li><li><code>Math.random()</code> : 返回一个从 0 到 1 的随机数（不包括 1）</li><li><code>Math.max(a, b, c...) / Math.min(a, b, c...)</code> : 从任意数量的参数中返回最大/最小值。</li><li><code>Math.pow(n, power)</code> : 返回 n 的给定（power）次幂</li></ul><p>函数调用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">255</span>;</span><br><span class="line"><span class="title function_">alert</span>( num.<span class="title function_">toString</span>(<span class="number">16</span>) );  <span class="comment">// ff</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">alert</span>( <span class="number">123456.</span>.<span class="title function_">toString</span>(<span class="number">36</span>) ); <span class="comment">// 2n9c</span></span><br></pre></td></tr></table></figure><h1 id="3-字符串类型"><a href="#3-字符串类型" class="headerlink" title="3. 字符串类型"></a>3. 字符串类型</h1><p>字符串定义：</p><ul><li>单引号</li><li>双引号</li><li>反引号：允许使用 <code>$&#123;…&#125;</code> 将任何表达式嵌入到字符串中；定义字符串常量时允许字符串换行；</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字符串常量</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;Hi&#x27;</span>;</span><br><span class="line"></span><br><span class="line">str[<span class="number">0</span>] = <span class="string">&#x27;h&#x27;</span>; <span class="comment">// error</span></span><br><span class="line"><span class="title function_">alert</span>( str[<span class="number">0</span>] ); <span class="comment">// 无法运行</span></span><br></pre></td></tr></table></figure><p>字符串基本操作：</p><ul><li>字符串长度：<code>str.length</code></li><li>访问字符串：<ul><li><code>str[0]</code> 或者 <code>str.charAt(0)</code>，区别是 <code>[]</code> 越界会返回 undefined ， <code>str.charAt()</code> 会返回空字符串</li><li><code>for...of</code> 遍历字符串</li></ul></li></ul><p>字符串内建函数：</p><ul><li><code>toUpperCase()</code> : 转换为大写</li><li><code>toLowerCase()</code> : 转换为小写</li><li><code>str.indexOf(substr, pos)</code> : 它从给定位置 pos 开始，在 str 中查找 substr，如果没有找到，则返回 -1，否则返回匹配成功的位置。</li><li><code>str.lastIndexOf(substr, pos)</code> : 它从字符串的末尾开始搜索到开头。</li><li><code>str.includes(substr, pos)</code> : 根据 str 中是否包含 substr 来返回 <code>true/false</code>，pos 指定了搜索的开始位置</li><li><code>str.startsWith(substr, pos)</code></li><li><code>str.endsWith(substr, pos)</code></li><li><code>str.slice(start [, end])</code> : 返回字符串从 start 到（但不包括）end 的部分。支持参数为负数的情况</li><li><code>str.substring(start [, end])</code> : 返回字符串在 start 和 end 之间 的部分。不支持负参数</li><li><code>str.substr(start [, length])</code> : 返回字符串从 start 开始的给定 length 的部分。支持负参数</li><li><code>str.trim()</code> : 删除字符串前后的空格 </li><li><code>str.repeat(n)</code> : 重复字符串 n 次</li></ul><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String">更多内建函数</a></p><h1 id="4-数组"><a href="#4-数组" class="headerlink" title="4. 数组"></a>4. 数组</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建空数组</span></span><br><span class="line"><span class="keyword">let</span> arr = <span class="keyword">new</span> <span class="title class_">Array</span>();</span><br><span class="line"><span class="keyword">let</span> arr = [];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一维数组初始化</span></span><br><span class="line"><span class="keyword">let</span> fruits = [<span class="string">&quot;Apple&quot;</span>, <span class="string">&quot;Orange&quot;</span>, <span class="string">&quot;Plum&quot;</span>];</span><br><span class="line"><span class="keyword">let</span> arr = [ <span class="string">&#x27;Apple&#x27;</span>, &#123; <span class="attr">name</span>: <span class="string">&#x27;John&#x27;</span> &#125;, <span class="literal">true</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123; <span class="title function_">alert</span>(<span class="string">&#x27;hello&#x27;</span>); &#125; ]; <span class="comment">//混合值</span></span><br><span class="line"><span class="keyword">let</span> arr = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="string">&quot;Apple&quot;</span>, <span class="string">&quot;Pear&quot;</span>, <span class="string">&quot;etc&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 多维数组初始化</span></span><br><span class="line"><span class="keyword">let</span> matrix = [</span><br><span class="line">  [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">  [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>],</span><br><span class="line">  [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>数组添加或删除操作：</p><ul><li><code>arr.pop()</code> : 从末端取出一个元素.</li><li><code>arr.push(v1, [v2, ...])</code> : 在末端添加一个元素.</li><li><code>arr.shift()</code> : 取出数组的第一个元素并返回它。会移动第一个元素之后的元素，较为耗时</li><li><code>arr.unshift(v1, [v2, ...])</code> : 在数组的首端添加元素 。会移动第一个元素之后的元素，较为耗时</li><li><code>splice(pos, deleteCount, ...items)</code> —— 从 pos 开始删除 deleteCount 个元素，并插入 items。当 deleteCount 为 0 时，表示插入 items。支持负向索引</li><li><code>slice(start, end)</code>  —— 创建一个新数组，将从索引 start 到索引 end（但不包括 end）的元素复制进去。支持负向索引。</li><li><code>concat(...items)</code> —— 返回一个新数组：复制当前数组的所有元素，并向其中添加 items。如果 items 中的任意一项是一个数组，那么就取其元素。对于具有 <code>Symbol.isConcatSpreadable</code> 属性的类数组对象，在进行 concat 操作时，会将类数组对象字段的 value concat 进去。</li></ul><p>在数组中搜索：</p><ul><li><code>arr.indexOf(item, from)</code> 从索引 from 开始搜索 item，如果找到则返回索引，否则返回 -1</li><li><code>arr.lastIndexOf(item, from)</code> —— 和上面相同，只是从右向左搜索</li><li><code>arr.includes(item, from)</code> —— 从索引 from 开始搜索 item，如果找到则返回 true（译注：如果没找到，则返回 false）</li><li><code>arr.find(func)</code> func 函数返回 true 表示找到并停止迭代，返回 false 会继续查找</li><li><code>arr.forEach(func)</code> —— 对每个元素都调用 func (不返回任何内容)</li><li><code>arr.findIndex(func)</code>（与 arr.find 方法）基本上是一样的，但它返回找到元素的索引，而不是元素本身。并且在未找到任何内容时返回 -1</li><li><code>arr.filter(func)</code> 返回所有匹配元素组成的数组</li></ul><p>转化数组：</p><ul><li><code>arr.map(func)</code> 将 arr 中的元素转换为其他值。</li><li><code>arr.sort(compareFunc)</code> 根据 comapreFunc 函数指定的规则进行排序，默认根据字符串的字典序排序。</li><li><code>arr.reverse()</code> 倒排数组元素</li><li><code>str.split(splitStr)</code> 分割字符串为数组</li><li><code>arr.join(joinStr)</code> 与 split 相反，它将元素拼接成一个字符串，元素之间以 joinStr 分割</li><li><code>arr.reduce(func)</code> 该函数一个接一个地应用于所有数组元素，并将其结果“搬运（carry on）”到下一个调用</li><li><code>arr.reduceRight(func)</code> 同 reduce ，只不过是从右至左遍历</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// arr.forEach</span></span><br><span class="line">arr.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">item, index, array</span>) &#123;</span><br><span class="line">  <span class="comment">// ... do something with item</span></span><br><span class="line">&#125;);</span><br><span class="line">[<span class="string">&quot;Bilbo&quot;</span>, <span class="string">&quot;Gandalf&quot;</span>, <span class="string">&quot;Nazgul&quot;</span>].<span class="title function_">forEach</span>(alert); <span class="comment">// 对每个元素都执行 alert</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// arr.find</span></span><br><span class="line"><span class="keyword">let</span> result = arr.<span class="title function_">find</span>(<span class="keyword">function</span>(<span class="params">item, index, array</span>) &#123;</span><br><span class="line">  <span class="comment">// 如果返回 true，则返回 item 并停止迭代</span></span><br><span class="line">  <span class="comment">// 对于假值（falsy）的情况，则返回 undefined</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// arr.filter</span></span><br><span class="line"><span class="keyword">let</span> results = arr.<span class="title function_">filter</span>(<span class="keyword">function</span>(<span class="params">item, index, array</span>) &#123;</span><br><span class="line">  <span class="comment">// 如果 true item 被 push 到 results，迭代继续</span></span><br><span class="line">  <span class="comment">// 如果什么都没找到，则返回空数组</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// arr.map</span></span><br><span class="line"><span class="keyword">let</span> result = arr.<span class="title function_">map</span>(<span class="keyword">function</span>(<span class="params">item, index, array</span>) &#123;</span><br><span class="line">  <span class="comment">// 返回新值而不是当前元素</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// arr.sort</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">compareNumeric</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (a &gt; b) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span> (a == b) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> (a &lt; b) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> arr = [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">15</span> ];</span><br><span class="line">arr.<span class="title function_">sort</span>(compareNumeric);</span><br><span class="line"><span class="title function_">alert</span>(arr);  <span class="comment">// 1, 2, 15</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// arr.reduce</span></span><br><span class="line"><span class="keyword">let</span> value = arr.<span class="title function_">reduce</span>(<span class="keyword">function</span>(<span class="params">accumulator, item, index, array</span>) &#123;</span><br><span class="line">  <span class="comment">// accumulator —— 是上一个函数调用的结果，第一次等于 initial（如果提供了 initial 的话）</span></span><br><span class="line">  <span class="comment">// item —— 当前的数组元素。</span></span><br><span class="line">  <span class="comment">// index —— 当前索引。</span></span><br><span class="line">  <span class="comment">// arr —— 数组本身</span></span><br><span class="line">&#125;, [initial]);</span><br></pre></td></tr></table></figure><p>数组的遍历：</p><ul><li><code>arr.length</code> : 返回数组长度</li><li><code>for...of</code> : 遍历数组元素。不能获取当前元素的索引，只是获取元素</li><li><code>arr.toString()</code> : 数组没有 <code>Symbol.toPrimitive</code>，也没有 valueOf，它们只能执行 <code>toString</code> 进行转换，所以这里 <code>[]</code> 就变成了一个空字符串，<code>[1]</code> 变成了 “1”，<code>[1,2]</code> 变成了 “1,2”</li><li><code>arr.forEach(func)</code>  对每个元素都调用 func (不返回任何内容)</li></ul><p>数组的其他操作：</p><ul><li><code>arr.some(fn)/arr.every(fn)</code> 检查数组</li><li><code>arr.fill(value, start, end)</code> —— 从索引 start 到 end，用重复的 value 填充数组</li><li><code>arr.copyWithin(target, start, end)</code> —— 将从位置 start 到 end 的所有元素复制到 自身 的 target 位置（覆盖现有元素）</li><li><code>arr.flat(depth)/arr.flatMap(fn)</code> 从多维数组创建一个新的扁平数组</li><li><code>Array.of(element0[, element1[, …[, elementN]]])</code> 基于可变数量的参数创建一个新的 Array 实例，而不需要考虑参数的数量或类型</li></ul><p>数组的 length 属性：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line">arr.<span class="property">length</span> = <span class="number">2</span>; <span class="comment">// 截断到只剩 2 个元素</span></span><br><span class="line"><span class="title function_">alert</span>( arr ); <span class="comment">// [1, 2]</span></span><br><span class="line"></span><br><span class="line">arr.<span class="property">length</span> = <span class="number">5</span>; <span class="comment">// 又把 length 加回来</span></span><br><span class="line"><span class="title function_">alert</span>( arr[<span class="number">3</span>] ); <span class="comment">// undefined：被截断的那些数值并没有回来</span></span><br><span class="line"></span><br><span class="line">arr.<span class="property">length</span> = <span class="number">0</span>; <span class="comment">// 清空数组</span></span><br></pre></td></tr></table></figure><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array">更多数组方法介绍</a></p><h1 id="5-Iterable-object（可迭代对象"><a href="#5-Iterable-object（可迭代对象" class="headerlink" title="5.Iterable object（可迭代对象"></a>5.Iterable object（可迭代对象</h1><p>可以应用 <code>for..of</code> 的对象被称为 可迭代的。</p><ul><li>技术上来说，可迭代对象必须实现 Symbol.iterator 方法。<ul><li><code>obj[Symbol.iterator]()</code> 的结果被称为 迭代器（iterator）。由它处理进一步的迭代过程。</li><li>一个迭代器必须有 <code>next()</code> 方法，它返回一个 <code>&#123;done: Boolean, value: any&#125;</code> 对象，这里 <code>done:true</code> 表明迭代结束，否则 value 就是下一个值。</li></ul></li><li><code>Symbol.iterator</code> 方法会被 <code>for..of</code> 自动调用，但我们也可以直接调用它。</li><li>内建的可迭代对象例如字符串和数组，都实现了 <code>Symbol.iterator</code>。</li><li>字符串迭代器能够识别代理对（surrogate pair）。（译注：代理对也就是 UTF-16 扩展字符。）</li></ul><p>有索引属性和 length 属性的对象被称为 类数组对象。这种对象可能还具有其他属性和方法，但是没有数组的内建方法。</p><p>如果我们仔细研究一下规范 —— 就会发现大多数内建方法都假设它们需要处理的是可迭代对象或者类数组对象，而不是“真正的”数组，因为这样抽象度更高。</p><p><code>Array.from(obj[, mapFn, thisArg])</code> 将可迭代对象或类数组对象 obj 转化为真正的数组 Array，然后我们就可以对它应用数组的方法。可选参数 mapFn 和 thisArg 允许我们将函数应用到每个元素。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 示例</span></span><br><span class="line"><span class="keyword">let</span> range = &#123;</span><br><span class="line">  <span class="attr">from</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">to</span>: <span class="number">5</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. for..of 调用首先会调用这个：</span></span><br><span class="line">range[<span class="title class_">Symbol</span>.<span class="property">iterator</span>] = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ……它返回迭代器对象（iterator object）：</span></span><br><span class="line">  <span class="comment">// 2. 接下来，for..of 仅与下面的迭代器对象一起工作，要求它提供下一个值</span></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">current</span>: <span class="variable language_">this</span>.<span class="property">from</span>,</span><br><span class="line">    <span class="attr">last</span>: <span class="variable language_">this</span>.<span class="property">to</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. next() 在 for..of 的每一轮循环迭代中被调用</span></span><br><span class="line">    <span class="title function_">next</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">// 4. 它将会返回 &#123;done:.., value :...&#125; 格式的对象</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">current</span> &lt;= <span class="variable language_">this</span>.<span class="property">last</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">done</span>: <span class="literal">false</span>, <span class="attr">value</span>: <span class="variable language_">this</span>.<span class="property">current</span>++ &#125;;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">done</span>: <span class="literal">true</span> &#125;;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 现在它可以运行了！</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> num <span class="keyword">of</span> range) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(num); <span class="comment">// 1, 然后是 2, 3, 4, 5</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="6-Map-and-Set（映射和集合）"><a href="#6-Map-and-Set（映射和集合）" class="headerlink" title="6.Map and Set（映射和集合）"></a>6.Map and Set（映射和集合）</h1><p>Map —— 是一个带键的数据项的集合。</p><p>方法和属性如下：</p><ul><li><code>new Map([iterable])</code> —— 创建 map，可选择带有 <code>[key,value]</code> 对的 iterable（例如数组）来进行初始化。</li><li><code>map.set(key, value)</code> —— 根据键存储值，返回 map 自身。</li><li><code>map.get(key)</code> —— 根据键来返回值，如果 map 中不存在对应的 key，则返回 undefined。</li><li><code>map.has(key)</code> —— 如果 key 存在则返回 true，否则返回 false。</li><li><code>map.delete(key)</code> —— 删除指定键对应的值，如果在调用时 key 存在，则返回 true，否则返回 false。</li><li><code>map.clear()</code> —— 清空 map 。</li><li><code>map.size</code> —— 返回当前元素个数。</li></ul><p>与普通对象 Object 的不同点：</p><p>任何键、对象都可以作为键。<br>有其他的便捷方法，如 size 属性。</p><blockquote><p>【注意】<br><code>map[key]</code> 不是使用 Map 的正确方式。<code>map[key]</code> 会将 map 视为 Object 类型。此时 key 就只能是 string 或者 Symbol 等。</p></blockquote><p>Map 的遍历：</p><ul><li><code>map.keys()</code> —— 遍历并返回所有的键（returns an iterable for keys），</li><li><code>map.values()</code> —— 遍历并返回所有的值（returns an iterable for values），</li><li><code>map.entries()</code> —— 遍历并返回所有的实体（returns an iterable for entries）<code>[key, value]，for..of</code> 在默认情况下使用的就是这个。</li><li><code>map.forEach(function(value, key, map)&#123;&#125;)</code></li></ul><p>创建 Map 对象</p><ul><li><code>Object.entries()</code> ：从对象创建 Map</li><li><code>Object.fromEntries()</code> ：从 Map 创建对象</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化 Map 变量</span></span><br><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>([</span><br><span class="line">  [<span class="string">&#x27;1&#x27;</span>,  <span class="string">&#x27;str1&#x27;</span>],</span><br><span class="line">  [<span class="number">1</span>,    <span class="string">&#x27;num1&#x27;</span>],</span><br><span class="line">  [<span class="literal">true</span>, <span class="string">&#x27;bool1&#x27;</span>]</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从对象创建 Map</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;John&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">30</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>(<span class="title class_">Object</span>.<span class="title function_">entries</span>(obj));</span><br><span class="line"><span class="keyword">let</span> obj = <span class="title class_">Object</span>.<span class="title function_">fromEntries</span>(map); <span class="comment">// 省掉 .entries()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 从 Map 创建对象</span></span><br><span class="line"><span class="keyword">let</span> prices = <span class="title class_">Object</span>.<span class="title function_">fromEntries</span>([</span><br><span class="line">  [<span class="string">&#x27;banana&#x27;</span>, <span class="number">1</span>],</span><br><span class="line">  [<span class="string">&#x27;orange&#x27;</span>, <span class="number">2</span>],</span><br><span class="line">  [<span class="string">&#x27;meat&#x27;</span>, <span class="number">4</span>]</span><br><span class="line">]);</span><br></pre></td></tr></table></figure><p>Set —— 是一组唯一值的集合。</p><p>方法和属性：</p><ul><li><code>new Set([iterable])</code> —— 创建 set，可选择带有 iterable（例如数组）来进行初始化。</li><li><code>set.add(value)</code> —— 添加一个值（如果 value 存在则不做任何修改），返回 set 本身。</li><li><code>set.delete(value)</code> —— 删除值，如果 value 在这个方法调用的时候存在则返回 true ，否则返回 false。</li><li><code>set.has(value)</code> —— 如果 value 在 set 中，返回 true，否则返回 false。</li><li><code>set.clear()</code> —— 清空 set。</li><li><code>set.size</code> —— 元素的个数。</li></ul><p>Set 的遍历</p><ul><li><code>set.forEach(function(value, valueAgain, set)&#123;&#125;)</code></li><li><code>set.keys()</code> —— 遍历并返回所有的值（returns an iterable object for values），</li><li><code>set.values()</code> —— 与 <code>set.keys()</code> 作用相同，这是为了兼容 Map，</li><li><code>set.entries()</code> —— 遍历并返回所有的实体（returns an iterable object for entries）<code>[value, value]</code>，它的存在也是为了兼容 Map。</li></ul><p>在 Map 和 Set 中迭代总是按照值插入的顺序进行的，所以我们不能说这些集合是无序的，但是我们不能对元素进行重新排序，也不能直接按其编号来获取元素。</p><h1 id="7-WeakMap-and-WeakSet（弱映射和弱集合）"><a href="#7-WeakMap-and-WeakSet（弱映射和弱集合）" class="headerlink" title="7.WeakMap and WeakSet（弱映射和弱集合）"></a>7.WeakMap and WeakSet（弱映射和弱集合）</h1><p>WeakMap 是类似于 Map 的集合，它仅允许对象作为键，并且一旦通过其他方式无法访问它们，便会将它们与其关联值一同删除。</p><p>WeakSet 是类似于 Set 的集合，它仅存储对象，并且一旦通过其他方式无法访问它们，便会将其删除。</p><p>它们的主要优点是它们对对象是弱引用，所以被它们引用的对象很容易地被垃圾收集器移除。</p><p>这是以不支持 clear、size、keys、values 等作为代价换来的……</p><p>WeakMap 和 WeakSet 被用作“主要”对象存储之外的“辅助”数据结构。一旦将对象从主存储器中删除，如果该对象仅被用作 WeakMap 或 WeakSet 的键，那么它将被自动清除。</p><p>WeakMap 能够使用的方法：</p><ul><li><code>weakMap.get(key)</code></li><li><code>weakMap.set(key, value)</code></li><li><code>weakMap.delete(key)</code></li><li><code>weakMap.has(key)</code></li></ul><p>WeakSet 能够使用的方法：</p><ul><li>add()</li><li>set()</li><li>delete()</li></ul><p>不支持方法：</p><ul><li>size()</li><li>keys()</li></ul><h1 id="8-Object-keys，values，entries"><a href="#8-Object-keys，values，entries" class="headerlink" title="8.Object.keys，values，entries"></a>8.Object.keys，values，entries</h1><ul><li><code>Object.keys(obj)</code> —— 返回一个包含该对象所有的键的数组。</li><li><code>Object.values(obj)</code> —— 返回一个包含该对象所有的值的数组。</li><li><code>Object.entries(obj)</code> —— 返回一个包含该对象所有 [key, value] 键值对的数组。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> user = &#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span> : <span class="string">&quot;Join&quot;</span>,</span><br><span class="line">    <span class="string">&quot;age&quot;</span> : <span class="number">30</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">entries</span>(user)); <span class="comment">//[ [ &#x27;name&#x27;, &#x27;Join&#x27; ], [ &#x27;age&#x27;, 30 ] ]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">keys</span>(user)); <span class="comment">// [ &#x27;name&#x27;, &#x27;age&#x27; ]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">values</span>(user)); <span class="comment">// [ &#x27;Join&#x27;, 30 ]</span></span><br></pre></td></tr></table></figure><blockquote><p>【注意】<code>Object.keys/values/entries</code> 会忽略 symbol 属性。如果我们也想要 Symbol 类型的键，那么这儿有一个单独的方法 <code>Object.getOwnPropertySymbols</code>，它会返回一个只包含 Symbol 类型的键的数组。另外，还有一种方法 <code>Reflect.ownKeys(obj)</code>，它会返回 所有 键。</p></blockquote><h1 id="9-解构赋值"><a href="#9-解构赋值" class="headerlink" title="9.解构赋值"></a>9.解构赋值</h1><p>解构赋值可以立即将一个<strong>对象或数组</strong>映射到多个变量上。</p><p>解构对象的完整语法：</p><p><code>let &#123;prop : varName = default, ...rest&#125; = object</code><br>这表示属性 prop 会被赋值给变量 varName，如果没有这个属性的话，就会使用默认值 default。</p><p>没有对应映射的对象属性会被复制到 rest 对象。</p><p>解构数组的完整语法：</p><p><code>let [item1 = default, item2, ...rest] = array</code><br>数组的第一个元素被赋值给 item1，第二个元素被赋值给 item2，剩下的所有元素被复制到另一个数组 rest。</p><p>从嵌套数组/对象中提取数据也是可以的，此时等号左侧必须和等号右侧有相同的结构。</p><blockquote><ul><li>解构赋值可以发生在函数传参过程中。</li><li>嵌套解构时要求等号左右两边在结构上应保持一致。</li><li>进行对象解构时，应使用 let ，否则 应该将 等号左边 用 <code>()</code> 包裹。</li><li>可以在解构时使用 <code>...rest</code> 接收其余的内容。</li></ul></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> options = &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&quot;My menu&quot;</span>,</span><br><span class="line">  <span class="attr">items</span>: [<span class="string">&quot;Item1&quot;</span>, <span class="string">&quot;Item2&quot;</span>]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">showMenu</span>(<span class="params">&#123;</span></span><br><span class="line"><span class="params">  title = <span class="string">&quot;Untitled&quot;</span>,</span></span><br><span class="line"><span class="params">  width: w = <span class="number">100</span>,  // width goes to w</span></span><br><span class="line"><span class="params">  height: h = <span class="number">200</span>, // height goes to h</span></span><br><span class="line"><span class="params">  items: [item1, item2] // items first element goes to item1, second to item2</span></span><br><span class="line"><span class="params">&#125;</span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>( <span class="string">`<span class="subst">$&#123;title&#125;</span> <span class="subst">$&#123;w&#125;</span> <span class="subst">$&#123;h&#125;</span>`</span> ); <span class="comment">// My Menu 100 200</span></span><br><span class="line">  <span class="title function_">alert</span>( item1 ); <span class="comment">// Item1</span></span><br><span class="line">  <span class="title function_">alert</span>( item2 ); <span class="comment">// Item2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">showMenu</span>(options);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> options = &#123;</span><br><span class="line">  <span class="attr">size</span>: &#123;</span><br><span class="line">    <span class="attr">width</span>: <span class="number">100</span>,</span><br><span class="line">    <span class="attr">height</span>: <span class="number">200</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">items</span>: [<span class="string">&quot;Cake&quot;</span>, <span class="string">&quot;Donut&quot;</span>],</span><br><span class="line">  <span class="attr">extra</span>: <span class="literal">true</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为了清晰起见，解构赋值语句被写成多行的形式</span></span><br><span class="line"><span class="keyword">let</span> &#123;</span><br><span class="line">  <span class="attr">size</span>: &#123; <span class="comment">// 把 size 赋值到这里</span></span><br><span class="line">    width,</span><br><span class="line">    height</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">items</span>: [item1, item2], <span class="comment">// 把 items 赋值到这里</span></span><br><span class="line">  title = <span class="string">&quot;Menu&quot;</span> <span class="comment">// 在对象中不存在（使用默认值）</span></span><br><span class="line">&#125; = options;</span><br><span class="line"></span><br><span class="line"><span class="title function_">alert</span>(title);  <span class="comment">// Menu</span></span><br><span class="line"><span class="title function_">alert</span>(width);  <span class="comment">// 100</span></span><br><span class="line"><span class="title function_">alert</span>(height); <span class="comment">// 200</span></span><br><span class="line"><span class="title function_">alert</span>(item1);  <span class="comment">// Cake</span></span><br><span class="line"><span class="title function_">alert</span>(item2);  <span class="comment">// Donut</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> title, width, height;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 现在就可以了</span></span><br><span class="line">(&#123;title, width, height&#125; = &#123;<span class="attr">title</span>: <span class="string">&quot;Menu&quot;</span>, <span class="attr">width</span>: <span class="number">200</span>, <span class="attr">height</span>: <span class="number">100</span>&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title function_">alert</span>( title ); <span class="comment">// Menu</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> options = &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&quot;Menu&quot;</span>,</span><br><span class="line">  <span class="attr">height</span>: <span class="number">200</span>,</span><br><span class="line">  <span class="attr">width</span>: <span class="number">100</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// title = 名为 title 的属性</span></span><br><span class="line"><span class="comment">// rest = 存有剩余属性的对象</span></span><br><span class="line"><span class="keyword">let</span> &#123;title, ...rest&#125; = options;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 现在 title=&quot;Menu&quot;, rest=&#123;height: 200, width: 100&#125;</span></span><br><span class="line"><span class="title function_">alert</span>(rest.<span class="property">height</span>);  <span class="comment">// 200</span></span><br><span class="line"><span class="title function_">alert</span>(rest.<span class="property">width</span>);   <span class="comment">// 100</span></span><br></pre></td></tr></table></figure><h1 id="10-日期和时间"><a href="#10-日期和时间" class="headerlink" title="10.日期和时间"></a>10.日期和时间</h1><h1 id="11-JSON-方法，toJSON"><a href="#11-JSON-方法，toJSON" class="headerlink" title="11.JSON 方法，toJSON"></a>11.JSON 方法，toJSON</h1><p><code>JSON.stringify</code> 将对象转换为 JSON。<br><code>JSON.parse</code> 将 JSON 转换回对象。</p><h2 id="11-1-JSON-stringify"><a href="#11-1-JSON-stringify" class="headerlink" title="11.1 JSON.stringify"></a>11.1 JSON.stringify</h2><p>一些特定于 JavaScript 的对象属性会被 JSON.stringify 跳过: </p><ul><li>函数属性（方法）。</li><li>Symbol 类型的键和值。</li><li>存储 undefined 的属性。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> user = &#123;</span><br><span class="line">  <span class="title function_">sayHi</span>(<span class="params"></span>) &#123; <span class="comment">// 被忽略</span></span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  [<span class="title class_">Symbol</span>(<span class="string">&quot;id&quot;</span>)]: <span class="number">123</span>, <span class="comment">// 被忽略</span></span><br><span class="line">  <span class="attr">something</span>: <span class="literal">undefined</span> <span class="comment">// 被忽略</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">alert</span>( <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(user) ); <span class="comment">// &#123;&#125;（空对象）</span></span><br></pre></td></tr></table></figure><p><code>JSON.stringify()</code> 完整语法： <code>let json = JSON.stringify(value[, replacer, space])</code></p><ul><li>value<br>要编码的值。</li><li>replacer<br>要编码的属性数组或映射函数 <code>function(key, value)</code>。</li><li>space<br>用于格式化的空格数量</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> room = &#123;</span><br><span class="line">  <span class="attr">number</span>: <span class="number">23</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> meetup = &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&quot;Conference&quot;</span>,</span><br><span class="line">  <span class="attr">participants</span>: [&#123;<span class="attr">name</span>: <span class="string">&quot;John&quot;</span>&#125;, &#123;<span class="attr">name</span>: <span class="string">&quot;Alice&quot;</span>&#125;],</span><br><span class="line">  <span class="attr">place</span>: room <span class="comment">// meetup 引用了 room</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">room.<span class="property">occupiedBy</span> = meetup; <span class="comment">// room 引用了 meetup</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">alert</span>( <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(meetup, <span class="keyword">function</span> <span class="title function_">replacer</span>(<span class="params">key, value</span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">`<span class="subst">$&#123;key&#125;</span>: <span class="subst">$&#123;value&#125;</span>`</span>);</span><br><span class="line">  <span class="keyword">return</span> (key == <span class="string">&#x27;occupiedBy&#x27;</span>) ? <span class="literal">undefined</span> : value;</span><br><span class="line">&#125;));</span><br><span class="line"></span><br><span class="line"><span class="comment">/* key:value pairs that come to replacer:</span></span><br><span class="line"><span class="comment">:             [object Object]</span></span><br><span class="line"><span class="comment">title:        Conference</span></span><br><span class="line"><span class="comment">participants: [object Object],[object Object]</span></span><br><span class="line"><span class="comment">0:            [object Object]</span></span><br><span class="line"><span class="comment">name:         John</span></span><br><span class="line"><span class="comment">1:            [object Object]</span></span><br><span class="line"><span class="comment">name:         Alice</span></span><br><span class="line"><span class="comment">place:        [object Object]</span></span><br><span class="line"><span class="comment">number:       23</span></span><br><span class="line"><span class="comment">occupiedBy: [object Object]</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>若在对象中重写 <code>toJSON()</code> 则 <code>JSON.stringify()</code> 在进行 JSON 转换时会自动调用 <code>toJSON()</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> room = &#123;</span><br><span class="line">  <span class="attr">number</span>: <span class="number">23</span>,</span><br><span class="line">  <span class="title function_">toJSON</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">number</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> meetup = &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&quot;Conference&quot;</span>,</span><br><span class="line">  room</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">alert</span>( <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(room) ); <span class="comment">// 23</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">alert</span>( <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(meetup) );</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  &#123;</span></span><br><span class="line"><span class="comment">    &quot;title&quot;:&quot;Conference&quot;,</span></span><br><span class="line"><span class="comment">    &quot;room&quot;: 23</span></span><br><span class="line"><span class="comment">  &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="11-2-JSON-parse"><a href="#11-2-JSON-parse" class="headerlink" title="11.2 JSON.parse"></a>11.2 JSON.parse</h2><p>完整语法：</p><p><code>let value = JSON.parse(str, [reviver]);</code></p><ul><li>str<br>要解析的 JSON 字符串。</li><li>reviver<br>可选的函数 <code>function(key,value)</code>，该函数将为每个 <code>(key, value)</code> 对调用，并可以对值进行转换。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;&#123;&quot;title&quot;:&quot;Conference&quot;,&quot;date&quot;:&quot;2017-11-30T12:00:00.000Z&quot;&#125;&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> meetup = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(str);</span><br><span class="line"><span class="title function_">alert</span>( meetup.<span class="property">date</span>.<span class="title function_">getDate</span>() ); <span class="comment">// Error!</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;&#123;&quot;title&quot;:&quot;Conference&quot;,&quot;date&quot;:&quot;2017-11-30T12:00:00.000Z&quot;&#125;&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> meetup = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(str, <span class="keyword">function</span>(<span class="params">key, value</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (key == <span class="string">&#x27;date&#x27;</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Date</span>(value);</span><br><span class="line">  <span class="keyword">return</span> value;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="title function_">alert</span>( meetup.<span class="property">date</span>.<span class="title function_">getDate</span>() ); <span class="comment">// 现在正常运行了！</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS对象</title>
      <link href="/JeckFS/2022/03/26/JS%E5%AF%B9%E8%B1%A1/"/>
      <url>/JeckFS/2022/03/26/JS%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="1-对象的属性操作"><a href="#1-对象的属性操作" class="headerlink" title="1.对象的属性操作"></a>1.对象的属性操作</h1><p>空对象的创建</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> user = <span class="keyword">new</span> <span class="title class_">Object</span>(); <span class="comment">// “构造函数” 的语法</span></span><br><span class="line"><span class="keyword">let</span> user = &#123;&#125;;  <span class="comment">// “字面量” 的语法</span></span><br></pre></td></tr></table></figure><p>为字面量对象添加属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">attr = <span class="string">&quot;values&quot;</span></span><br><span class="line"><span class="keyword">let</span> user = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;John&quot;</span>,</span><br><span class="line">  attr, <span class="comment">// 简写属性 与 attr: attr 相同</span></span><br><span class="line">  <span class="attr">for</span>: <span class="string">&quot;for_value&quot;</span>, <span class="comment">// 使用关键字作为对象的key，js会自动将for转换成字符串“for”</span></span><br><span class="line">  <span class="number">0</span>: <span class="string">&quot;0&quot;</span>, <span class="comment">// js会自动将整形0转为字符串&quot;0&quot;</span></span><br><span class="line">  <span class="attr">age</span>: <span class="number">30</span>,</span><br><span class="line">  <span class="string">&quot;likes birds&quot;</span>: <span class="literal">true</span>  <span class="comment">// 多词属性名必须加引号</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">user[<span class="string">&quot;likes birds&quot;</span>] = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">key = <span class="string">&quot;likes birds&quot;</span></span><br><span class="line">user[key] = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象属性的删除：</span></span><br><span class="line"><span class="keyword">delete</span> user.<span class="property">age</span>;</span><br><span class="line"><span class="keyword">delete</span> user[<span class="string">&quot;likes birds&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过计算得到key</span></span><br><span class="line"><span class="keyword">let</span> fruit = <span class="title function_">prompt</span>(<span class="string">&quot;Which fruit to buy?&quot;</span>, <span class="string">&quot;apple&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> bag = &#123;</span><br><span class="line">  [fruit]: <span class="number">5</span>, <span class="comment">// 属性名是从 fruit 变量中得到的</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="title function_">alert</span>( bag.<span class="property">apple</span> ); <span class="comment">// 5 如果 fruit=&quot;apple&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> fruit = <span class="string">&#x27;apple&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> bag = &#123;</span><br><span class="line">  [fruit + <span class="string">&#x27;Computers&#x27;</span>]: <span class="number">5</span> <span class="comment">// bag.appleComputers = 5</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>属性存在性测试：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法一</span></span><br><span class="line"><span class="keyword">let</span> user = &#123;&#125;;</span><br><span class="line"><span class="title function_">alert</span>( user.<span class="property">noSuchProperty</span> === <span class="literal">undefined</span> ); <span class="comment">// true 意思是没有这个属性</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法2，in 的左侧必须是变量名或者带引号的字符串，若字符串不带引号则认为是变量</span></span><br><span class="line"><span class="keyword">let</span> user = &#123; <span class="attr">name</span>: <span class="string">&quot;John&quot;</span>, <span class="attr">age</span>: <span class="number">30</span> &#125;;</span><br><span class="line"><span class="title function_">alert</span>( <span class="string">&quot;age&quot;</span> <span class="keyword">in</span> user ); <span class="comment">// true，user.age 存在</span></span><br><span class="line"><span class="title function_">alert</span>( <span class="string">&quot;blabla&quot;</span> <span class="keyword">in</span> user ); <span class="comment">// false，user.blabla 不存在。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 两种方式的区别：当对象属性值为 undefined 时，只能使用 in 来判别</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">test</span>: <span class="literal">undefined</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="title function_">alert</span>( obj.<span class="property">test</span> ); <span class="comment">// 显示 undefined，所以属性不存在？</span></span><br><span class="line"><span class="title function_">alert</span>( <span class="string">&quot;test&quot;</span> <span class="keyword">in</span> obj ); <span class="comment">// true，属性存在！</span></span><br></pre></td></tr></table></figure><p>遍历对象的属性：<code>for...in</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> user = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;John&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">30</span>,</span><br><span class="line">  <span class="attr">isAdmin</span>: <span class="literal">true</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> user) &#123;</span><br><span class="line">  <span class="comment">// keys</span></span><br><span class="line">  <span class="title function_">alert</span>( key );  <span class="comment">// name, age, isAdmin</span></span><br><span class="line">  <span class="comment">// 属性键的值</span></span><br><span class="line">  <span class="title function_">alert</span>( user[key] ); <span class="comment">// John, 30, true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>属性的顺序：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// key为整数的对象可根据整数进行排序</span></span><br><span class="line"><span class="keyword">let</span> codes = &#123;</span><br><span class="line">  <span class="string">&quot;49&quot;</span>: <span class="string">&quot;Germany&quot;</span>,</span><br><span class="line">  <span class="string">&quot;41&quot;</span>: <span class="string">&quot;Switzerland&quot;</span>,</span><br><span class="line">  <span class="string">&quot;44&quot;</span>: <span class="string">&quot;Great Britain&quot;</span>,</span><br><span class="line">  <span class="comment">// ..,</span></span><br><span class="line">  <span class="string">&quot;1&quot;</span>: <span class="string">&quot;USA&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> code <span class="keyword">in</span> codes) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(code); <span class="comment">// 1, 41, 44, 49</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 非整数属性是按照创建的顺序来排列的</span></span><br><span class="line"><span class="keyword">let</span> user = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;John&quot;</span>,</span><br><span class="line">  <span class="attr">surname</span>: <span class="string">&quot;Smith&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line">user.<span class="property">age</span> = <span class="number">25</span>; <span class="comment">// 增加一个</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> prop <span class="keyword">in</span> user) &#123;</span><br><span class="line">  <span class="title function_">alert</span>( prop ); <span class="comment">// name, surname, age</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 禁止对key为整数的对象进行属性排序：key前添加一个 + 号即可</span></span><br><span class="line"><span class="keyword">let</span> codes = &#123;</span><br><span class="line">  <span class="string">&quot;+49&quot;</span>: <span class="string">&quot;Germany&quot;</span>,</span><br><span class="line">  <span class="string">&quot;+41&quot;</span>: <span class="string">&quot;Switzerland&quot;</span>,</span><br><span class="line">  <span class="string">&quot;+44&quot;</span>: <span class="string">&quot;Great Britain&quot;</span>,</span><br><span class="line">  <span class="comment">// ..,</span></span><br><span class="line">  <span class="string">&quot;+1&quot;</span>: <span class="string">&quot;USA&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> code <span class="keyword">in</span> codes) &#123;</span><br><span class="line">  <span class="title function_">alert</span>( +code ); <span class="comment">// 49, 41, 44, 1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-对象方法，this"><a href="#2-对象方法，this" class="headerlink" title="2.对象方法，this"></a>2.对象方法，this</h1><p>为对象添加方法属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方式1：将匿名函数挂在对象上</span></span><br><span class="line"><span class="keyword">let</span> user = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;John&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">30</span></span><br><span class="line">&#125;;</span><br><span class="line">user.<span class="property">sayHi</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&quot;Hello!&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line">user.<span class="title function_">sayHi</span>(); <span class="comment">// Hello!</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 方式2：将定义好的函数挂到对象上</span></span><br><span class="line"><span class="keyword">let</span> user = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 首先，声明函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sayHi</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&quot;Hello!&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 然后将其作为一个方法添加</span></span><br><span class="line">user.<span class="property">sayHi</span> = sayHi;</span><br><span class="line">user.<span class="title function_">sayHi</span>(); <span class="comment">// Hello!</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 方式3：直接在对象中定义函数</span></span><br><span class="line">user = &#123;</span><br><span class="line">  <span class="attr">sayHi</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 方法简写看起来更好，对吧？</span></span><br><span class="line"><span class="keyword">let</span> user = &#123;</span><br><span class="line">  <span class="title function_">sayHi</span>(<span class="params"></span>) &#123; <span class="comment">// 与 &quot;sayHi: function()&#123;...&#125;&quot; 一样</span></span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>对象中的 this：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> user = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;John&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">30</span>,</span><br><span class="line"></span><br><span class="line">  <span class="title function_">sayHi</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// &quot;this&quot; 指的是“当前的对象”即 user 对象</span></span><br><span class="line">    <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">user.<span class="title function_">sayHi</span>(); <span class="comment">// John</span></span><br></pre></td></tr></table></figure><p>函数中的 this：</p><blockquote><p>在 JavaScript 中，this 是“自由”的，它的值是在调用时计算出来的，它的值并不取决于方法声明的位置，而是取决于在“点符号前”的是什么对象。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> user = &#123; <span class="attr">name</span>: <span class="string">&quot;John&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> admin = &#123; <span class="attr">name</span>: <span class="string">&quot;Admin&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sayHi</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>( <span class="variable language_">this</span>.<span class="property">name</span> );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在两个对象中使用相同的函数</span></span><br><span class="line">user.<span class="property">f</span> = sayHi;</span><br><span class="line">admin.<span class="property">f</span> = sayHi;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这两个调用有不同的 this 值</span></span><br><span class="line"><span class="comment">// 函数内部的 &quot;this&quot; 是“点符号前面”的那个对象</span></span><br><span class="line">user.<span class="title function_">f</span>(); <span class="comment">// John（this == user）</span></span><br><span class="line">admin.<span class="title function_">f</span>(); <span class="comment">// Admin（this == admin）</span></span><br><span class="line"></span><br><span class="line">admin[<span class="string">&#x27;f&#x27;</span>](); <span class="comment">// Admin（使用点符号或方括号语法来访问这个方法，都没有关系。）</span></span><br></pre></td></tr></table></figure><p>箭头函数中没有 this</p><blockquote><p>如果我们在这样的函数中引用 this，this 值取决于外部“正常的”函数。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> user = &#123;</span><br><span class="line">  <span class="attr">firstName</span>: <span class="string">&quot;Ilya&quot;</span>,</span><br><span class="line">  <span class="title function_">sayHi</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="title function_">arrow</span> = (<span class="params"></span>) =&gt; <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">firstName</span>);</span><br><span class="line">    <span class="title function_">arrow</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">user.<span class="title function_">sayHi</span>(); <span class="comment">// Ilya</span></span><br></pre></td></tr></table></figure><p>关于 this 的一个坑：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">makeUser</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;John&quot;</span>,</span><br><span class="line">    <span class="attr">ref</span>: <span class="variable language_">this</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> user = <span class="title function_">makeUser</span>();</span><br><span class="line"><span class="title function_">alert</span>( user.<span class="property">ref</span>.<span class="property">name</span> ); <span class="comment">// Error: Cannot read property &#x27;name&#x27; of undefined</span></span><br></pre></td></tr></table></figure><p>错误原因：<br>这里 makeUser() 中的 this 的值是 undefined，因为它是被作为函数调用的，而不是通过点符号被作为方法调用。<br>this 的值是对于整个函数的，代码段和对象字面量对它都没有影响。<br>所以 ref: this 实际上取的是当前函数的 this。</p><p>正确写法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">makeUser</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;John&quot;</span>,</span><br><span class="line">    <span class="title function_">ref</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> user = <span class="title function_">makeUser</span>();</span><br><span class="line"><span class="title function_">alert</span>( user.<span class="title function_">ref</span>().<span class="property">name</span> ); <span class="comment">// John</span></span><br></pre></td></tr></table></figure><p>现在正常了，因为 user.ref() 是一个方法。this 的值为点符号 . 前的这个对象。</p><h1 id="3-对象的引用与复制"><a href="#3-对象的引用与复制" class="headerlink" title="3.对象的引用与复制"></a>3.对象的引用与复制</h1><p>基本数据类型的拷贝是直接复制值，而对象的拷贝只是复制的引用。</p><img src="/JeckFS/2022/03/26/JS%E5%AF%B9%E8%B1%A1/220220326-105353-724.png" class="" title="This is 2-th image."><img src="/JeckFS/2022/03/26/JS%E5%AF%B9%E8%B1%A1/320220326-105430-907.png" class="" title="This is 3-th image."><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 仅当两个对象为同一对象时，两者才相等。</span></span><br><span class="line"><span class="keyword">let</span> name = <span class="string">&quot;zhangsan&quot;</span></span><br><span class="line"><span class="keyword">let</span> sex = <span class="string">&quot;男&quot;</span></span><br><span class="line"><span class="keyword">let</span> a = &#123;</span><br><span class="line">    name,</span><br><span class="line">    sex,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> b = &#123;</span><br><span class="line">    name,</span><br><span class="line">    sex,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> c = a</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a == b) <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a == c) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>对象的克隆：Object.assign(dest, [src1, src2, src3…])</p><ul><li>将 src1，src2… 中的属性合并到 dest 中，相同的属性会被覆盖。</li><li>仅仅复制基本数据类型属性，对于引用类型属性则复制的是其引用</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> user = &#123; <span class="attr">name</span>: <span class="string">&quot;John&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> permissions1 = &#123; <span class="attr">canView</span>: <span class="literal">true</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> permissions2 = &#123; <span class="attr">canEdit</span>: <span class="literal">true</span> &#125;;</span><br><span class="line"><span class="comment">// 将 permissions1 和 permissions2 中的所有属性都拷贝到 user 中</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">assign</span>(user, permissions1, permissions2);</span><br><span class="line"><span class="comment">// 现在 user = &#123; name: &quot;John&quot;, canView: true, canEdit: true &#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Object.assign() 的属性覆盖</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;zhangsan&quot;</span>,</span><br><span class="line">    <span class="attr">sex</span>: <span class="string">&quot;男&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> b = &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="string">&quot;123&quot;</span>,</span><br><span class="line">    <span class="attr">sex</span>: <span class="string">&quot;女&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> c = &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="string">&quot;456&quot;</span>,</span><br><span class="line">    <span class="attr">sex</span>: <span class="string">&quot;0&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">assign</span>(a, b, c)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a) <span class="comment">// &#123; name: &#x27;zhangsan&#x27;, sex: &#x27;0&#x27;, id: &#x27;456&#x27; &#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> user = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;John&quot;</span>,</span><br><span class="line">  <span class="attr">sizes</span>: &#123;</span><br><span class="line">    <span class="attr">height</span>: <span class="number">182</span>,</span><br><span class="line">    <span class="attr">width</span>: <span class="number">50</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> clone = <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, user);</span><br><span class="line"></span><br><span class="line"><span class="title function_">alert</span>( user.<span class="property">sizes</span> === clone.<span class="property">sizes</span> ); <span class="comment">// true，同一个对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// user 和 clone 分享同一个 sizes</span></span><br><span class="line">user.<span class="property">sizes</span>.<span class="property">width</span>++;       <span class="comment">// 通过其中一个改变属性值</span></span><br><span class="line"><span class="title function_">alert</span>(clone.<span class="property">sizes</span>.<span class="property">width</span>); <span class="comment">// 51，能从另外一个看到变更的结果</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>深拷贝可以使用 <a href="https://lodash.com">lodash</a> 库的 <a href="https://lodash.com/docs/4.17.15">_.cloneDeep(obj)</a>。</p><h1 id="4-操作符与操作符-new"><a href="#4-操作符与操作符-new" class="headerlink" title="4.操作符与操作符 new"></a>4.操作符与操作符 new</h1><p>构造函数：<br>构造函数在技术上是常规函数。不过有两个约定：</p><ul><li>它们的命名以大写字母开头。</li><li>它们只能由 “new” 操作符来执行。</li></ul><p>当一个函数被使用 new 操作符执行时，它按照以下步骤：</p><ul><li>一个新的空对象被创建并分配给 this。</li><li>函数体执行。通常它会修改 this，为其添加新的属性。</li><li>返回 this 的值。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">User</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">isAdmin</span> = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> user = <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;Jack&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_">alert</span>(user.<span class="property">name</span>); <span class="comment">// Jack</span></span><br><span class="line"><span class="title function_">alert</span>(user.<span class="property">isAdmin</span>); <span class="comment">// false</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// new User(...) 做的就是如下类似事情</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">User</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="comment">// this = &#123;&#125;;（隐式创建）</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 添加属性到 this</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">isAdmin</span> = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// return this;（隐式返回）</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>构造器模式测试： new.target</p><ul><li>在一个函数内部，我们可以使用 new.target 属性来检查它是否被使用 new 进行调用了。</li><li>对于常规调用，它为 undefined，对于使用 new 的调用，则等于该函数</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">User</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="keyword">new</span>.<span class="property">target</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不带 &quot;new&quot;：</span></span><br><span class="line"><span class="title class_">User</span>(); <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 带 &quot;new&quot;：</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">User</span>(); <span class="comment">// function User &#123; ... &#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">User</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="keyword">new</span>.<span class="property">target</span>) &#123; <span class="comment">// 如果你没有通过 new 运行我</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>(name); <span class="comment">// ……我会给你添加 new</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> john = <span class="title class_">User</span>(<span class="string">&quot;John&quot;</span>); <span class="comment">// 将调用重定向到新用户</span></span><br><span class="line"><span class="title function_">alert</span>(john.<span class="property">name</span>); <span class="comment">// John</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>构造器的 return</p><ul><li>如果 return 返回的是一个对象，则返回这个对象，而不是 this。</li><li>如果 return 返回的是一个原始类型，则忽略。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">BigUser</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&quot;John&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">name</span>: <span class="string">&quot;Godzilla&quot;</span> &#125;;  <span class="comment">// &lt;-- 返回这个对象</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">alert</span>( <span class="keyword">new</span> <span class="title class_">BigUser</span>().<span class="property">name</span> );  <span class="comment">// Godzilla，得到了那个对象</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">SmallUser</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&quot;John&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span>; <span class="comment">// &lt;-- 返回 this</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">alert</span>( <span class="keyword">new</span> <span class="title class_">SmallUser</span>().<span class="property">name</span> );  <span class="comment">// John</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用构造函数来创建对象会带来很大的灵活性。构造函数可能有一些参数，这些参数定义了如何构造对象以及要放入什么。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">User</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">sayHi</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>( <span class="string">&quot;My name is: &quot;</span> + <span class="variable language_">this</span>.<span class="property">name</span> );</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> john = <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;John&quot;</span>);</span><br><span class="line"></span><br><span class="line">john.<span class="title function_">sayHi</span>(); <span class="comment">// My name is: John</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">john = &#123;</span></span><br><span class="line"><span class="comment">   name: &quot;John&quot;,</span></span><br><span class="line"><span class="comment">   sayHi: function() &#123; ... &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用 new 在创建对象时应注意：</p><ul><li>函数中的方法需要 this.funcName = function(){}，而不能是 funcName(){}</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Calculator</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">read</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">a</span> = +<span class="title function_">prompt</span>(<span class="string">&quot;a?&quot;</span>,<span class="number">2</span>)</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">b</span> = +<span class="title function_">prompt</span>(<span class="string">&quot;b?&quot;</span>, <span class="number">4</span>)</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">sum</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">a</span>+<span class="variable language_">this</span>.<span class="property">b</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">mul</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">a</span>* <span class="variable language_">this</span>.<span class="property">b</span></span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> calculator = <span class="keyword">new</span> <span class="title class_">Calculator</span>();</span><br><span class="line">calculator.<span class="title function_">read</span>();</span><br><span class="line"></span><br><span class="line"><span class="title function_">alert</span>( <span class="string">&quot;Sum=&quot;</span> + calculator.<span class="title function_">sum</span>() );</span><br><span class="line"><span class="title function_">alert</span>( <span class="string">&quot;Mul=&quot;</span> + calculator.<span class="title function_">mul</span>() );</span><br></pre></td></tr></table></figure><h1 id="5-可选链"><a href="#5-可选链" class="headerlink" title="5.可选链 ?."></a>5.可选链 <code>?.</code></h1><p>【注意】node v12.x 不支持可选链</p><p>在引用对象的属性的时候，若属性不存在时会报错，为了不报错（比如返回 undefined）则可以使用 <code>?.</code> 的方式来引用属性。</p><p>例如 value?.prop：</p><ul><li>如果 value 存在，则结果与 value.prop 相同。（如果 <code>?.</code> 左侧存在，则继续引用）</li><li>否则（当 value 为 undefined/null 时）则返回 undefined。</li></ul><blockquote><p>如果根据我们的代码逻辑，user 对象必须存在，但 address 是可选的，那么我们应该这样写 <code>user.address?.street</code>，而不是这样 <code>user?.address?.street</code>。所以，如果 user 恰巧因为失误变为 undefined，我们会看到一个编程错误并修复它。否则，代码中的错误在不恰当的地方被消除了，这会导致调试更加困难。<br>?. 前的变量必须已声明，否则会触发错误<br>// ReferenceError: user is not defined (未声明变量 user )<br>user?.address;</p></blockquote><p>短路效应：<br>如果 <code>?.</code> 左边部分不存在，就会立即停止运算（“短路效应”）。所以，如果后面有任何函数调用或者副作用，它们均不会执行。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> user = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">let</span> x = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">user?.<span class="title function_">sayHi</span>(x++); <span class="comment">// 没有 &quot;sayHi&quot;，因此代码执行没有触达 x++</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">alert</span>(x); <span class="comment">// 0，值没有增加</span></span><br></pre></td></tr></table></figure><p>其他变体：<code>?.(), ?.[]</code><br><code>?.()</code> 用于调用一个可能不存在的函数。<br><code>?.[]</code> 用于引用一个可能不存在的属性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> userAdmin = &#123;</span><br><span class="line">  <span class="title function_">admin</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;I am admin&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> userGuest = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// `?.()` 会检查它左边的部分：如果 admin 函数存在，那么就调用运行它（对于 userAdmin）。否则（对于 userGuest）运算停止，没有报错。</span></span><br><span class="line">userAdmin.<span class="property">admin</span>?.(); <span class="comment">// I am admin</span></span><br><span class="line"></span><br><span class="line">userGuest.<span class="property">admin</span>?.(); <span class="comment">// 啥都没有（没有这样的方法）</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> key = <span class="string">&quot;firstName&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> user1 = &#123;</span><br><span class="line">  <span class="attr">firstName</span>: <span class="string">&quot;John&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> user2 = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">alert</span>( user1?.[key] ); <span class="comment">// John</span></span><br><span class="line"><span class="title function_">alert</span>( user2?.[key] ); <span class="comment">// undefined</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>与 delete 一起使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> user?.<span class="property">name</span>; <span class="comment">// 如果 user 存在，则删除 user.name</span></span><br></pre></td></tr></table></figure><p>可以使用 ?. 来安全地读取或删除，但不能写入</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> user = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">user?.<span class="property">name</span> = <span class="string">&quot;John&quot;</span>; <span class="comment">// Error，不起作用</span></span><br><span class="line"><span class="comment">// 因为它在计算的是 undefined = &quot;John&quot;</span></span><br></pre></td></tr></table></figure><p>【总结】<br>可选链 ?. 语法有三种形式：</p><ul><li><code>obj?.prop</code> —— 如果 obj 存在则返回 <code>obj.prop</code>，否则返回 undefined。</li><li><code>obj?.[prop]</code> —— 如果 obj 存在则返回 <code>obj[prop]</code>，否则返回 undefined。</li><li><code>obj.method?.()</code> —— 如果 <code>obj.method</code> 存在则调用 <code>obj.method()</code>，否则返回 undefined。<br>正如我们所看到的，这些语法形式用起来都很简单直接。<code>?.</code> 检查左边部分是否为 null/undefined，如果不是则继续运算。</li></ul><p><code>?.</code> 链使我们能够安全地访问嵌套属性。</p><p>但是，我们应该谨慎地使用 <code>?.</code>，仅在当左边部分不存在也没问题的情况下使用为宜。以保证在代码中有编程上的错误出现时，也不会对我们隐藏。</p><h1 id="6-Symbol-类型"><a href="#6-Symbol-类型" class="headerlink" title="6. Symbol 类型"></a>6. Symbol 类型</h1><p>Symbol 类型的基本知识：</p><ul><li>Symbol 是唯一标识符的基本类型。即使是 symbolName 相同，也认为是两个不同的 Symbol 变量</li><li>Symbol 类型变量创建：<code>new Symbol(&quot;symbolName&quot;)</code></li><li>Symbol 不会自动转换为字符串，可以使用 <code>symbolVariable.toString()</code> 或者 <code>symbolVariable.description</code> 来转换为字符串</li><li>字面量中使用 Symbol 变量做属性名需要将 Symbol 变量用 <code>[]</code> 包裹</li><li>全局注册表：Symbol 总是不同的值，即使它们有相同的名字。如果我们希望同名的 Symbol 相等，那么我们应该使用全局注册表：<code>Symbol.for(key)</code> 返回（如果全局注册表没有的话则创建）一个以 key 作为名字的全局 Symbol。使用 <code>Symbol.for</code> 多次调用 key 相同的 Symbol 时，返回的就是同一个 Symbol。另外可以使用 <code>Symbol.keyFor(symbolVariable)</code> 来根据 symbol 变量获取对应的 key</li><li>从技术上说，Symbol 不是 100% 隐藏的。有一个内建方法 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertySymbols">Object.getOwnPropertySymbols(obj)</a> 允许我们获取所有的 Symbol。还有一个名为 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect/ownKeys">Reflect.ownKeys(obj)</a> 的方法可以返回一个对象的 所有 键，包括 Symbol。所以它们并不是真正的隐藏。但是大多数库、内建方法和语法结构都没有使用这些方法。 </li></ul><p>Symbol 类型的应用场景：</p><ul><li>隐藏对象属性。如果我们想要向“属于”另一个脚本或者库的对象添加一个属性，我们可以创建一个 Symbol 并使用它作为属性的键。Symbol 属性不会出现在 for..in 中，因此它不会意外地被与其他属性一起处理。并且，它不会被直接访问，因为另一个脚本没有我们的 symbol。因此，该属性将受到保护，防止被意外使用或重写。</li><li>JavaScript 使用了许多系统 Symbol，这些 Symbol 可以作为 <code>Symbol.*</code> 访问。我们可以使用它们来改变一些内建行为。例如，在本教程的后面部分，我们将使用 <code>Symbol.iterator</code> 来进行 <a href="https://zh.javascript.info/iterable">迭代</a> 操作，使用 <code>Symbol.toPrimitive</code> 来设置 <a href="https://zh.javascript.info/object-toprimitive">对象原始值的转换</a> 等等。</li></ul><h1 id="7-对象原始值的转换"><a href="#7-对象原始值的转换" class="headerlink" title="7.对象原始值的转换"></a>7.对象原始值的转换</h1><p>对象在参与数学运算、逻辑运算或者 <code>alert()</code> 等时，会自动触发对象到原始值的转换。转换时仅有三种方式：</p><ul><li>对象 到 string hint ： 如 对象作为属性 key 时；对象作为 alert 参数时等</li><li>对象 到  number hint： 对象在参与数学运算、逻辑运算时</li><li>对象 到 default hint： 当运算符“不确定”期望值的类型时。如二元加法 <code>+</code> 可用于字符串（连接），也可以用于数字（相加），所以字符串和数字这两种类型都可以。因此，当二元加法得到对象类型的参数时，它将依据 “default” hint 来对其进行转换。特殊地，像 <code>&lt;</code> 和 <code>&gt;</code> 这样的小于/大于比较运算符，也可以同时用于字符串和数字。不过，它们使用 “number” hint，而不是 “default”。</li></ul><p>对象到原始值的转换规则：</p><ul><li>调用 <code>obj[Symbol.toPrimitive](hint)</code> —— 带有 symbol 键 <code>Symbol.toPrimitive</code>（系统 symbol）的方法，如果这个方法存在的话，</li><li>否则，如果 hint 是 “string” —— 优先尝试 <code>obj.toString()</code> 然后尝试 <code>obj.valueOf()</code>。</li><li>否则，如果 hint 是 “number” 或 “default” —— 优先尝试 <code>obj.valueOf()</code> 然后尝试 <code>obj.toString()</code>。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果 Symbol.toPrimitive 方法存在，则它会被用于所有 hint，无需更多其他方法。因为通过 hint 参数可以判断转换成原始值的类型到底是 string 还是 number 还是 default</span></span><br><span class="line">obj[<span class="title class_">Symbol</span>.<span class="property">toPrimitive</span>] = <span class="keyword">function</span>(<span class="params">hint</span>) &#123;</span><br><span class="line">  <span class="comment">// 这里是将此对象转换为原始值的代码</span></span><br><span class="line">  <span class="comment">// 它必须返回一个原始值</span></span><br><span class="line">  <span class="comment">// hint = &quot;string&quot;、&quot;number&quot; 或 &quot;default&quot; 中的一个</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 【示例】</span></span><br><span class="line"><span class="keyword">let</span> user = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;John&quot;</span>,</span><br><span class="line">  <span class="attr">money</span>: <span class="number">1000</span>,</span><br><span class="line"></span><br><span class="line">  [<span class="title class_">Symbol</span>.<span class="property">toPrimitive</span>](hint) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">`hint: <span class="subst">$&#123;hint&#125;</span>`</span>);</span><br><span class="line">    <span class="keyword">return</span> hint == <span class="string">&quot;string&quot;</span> ? <span class="string">`&#123;name: &quot;<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>&quot;&#125;`</span> : <span class="variable language_">this</span>.<span class="property">money</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 转换演示：</span></span><br><span class="line"><span class="title function_">alert</span>(user); <span class="comment">// hint: string -&gt; &#123;name: &quot;John&quot;&#125;</span></span><br><span class="line"><span class="title function_">alert</span>(+user); <span class="comment">// hint: number -&gt; 1000</span></span><br><span class="line"><span class="title function_">alert</span>(user + <span class="number">500</span>); <span class="comment">// hint: default -&gt; 1500</span></span><br></pre></td></tr></table></figure><p>默认情况下，普通对象具有 toString 和 valueOf 方法：</p><ul><li>toString 方法返回一个字符串 “[object Object]”。</li><li>valueOf 方法返回对象自身。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 【示例】</span></span><br><span class="line"><span class="keyword">let</span> user = &#123;<span class="attr">name</span>: <span class="string">&quot;John&quot;</span>&#125;;</span><br><span class="line"><span class="title function_">alert</span>(user); <span class="comment">// [object Object]</span></span><br><span class="line"><span class="title function_">alert</span>(user.<span class="title function_">valueOf</span>() === user); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>通过 <code>toString</code> 和 <code>valueOf</code> 组合可以实现 <code>obj[Symbol.toPrimitive](hint)</code> 的效果</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 【示例】</span></span><br><span class="line"><span class="keyword">let</span> user = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;John&quot;</span>,</span><br><span class="line">  <span class="attr">money</span>: <span class="number">1000</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 对于 hint=&quot;string&quot;</span></span><br><span class="line">  <span class="title function_">toString</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`&#123;name: &quot;<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>&quot;&#125;`</span>;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 对于 hint=&quot;number&quot; 或 &quot;default&quot;</span></span><br><span class="line">  <span class="title function_">valueOf</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">money</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">alert</span>(user); <span class="comment">// toString -&gt; &#123;name: &quot;John&quot;&#125;</span></span><br><span class="line"><span class="title function_">alert</span>(+user); <span class="comment">// valueOf -&gt; 1000</span></span><br><span class="line"><span class="title function_">alert</span>(user + <span class="number">500</span>); <span class="comment">// valueOf -&gt; 1500</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>miaosha</title>
      <link href="/JeckFS/2022/03/11/miaosha/"/>
      <url>/JeckFS/2022/03/11/miaosha/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Docker-启动组件"><a href="#1-Docker-启动组件" class="headerlink" title="1.Docker 启动组件"></a>1.Docker 启动组件</h1><p><a href="https://www.cnblogs.com/ageovb/p/15328796.html">参考链接</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Docker 启动 zookeeper 命令</span></span><br><span class="line">docker run -d --name zookeeper -v /Users/yaofushang/data/docker-volumn/zk/data:/opt/zookeeper/data -v /Users/yaofushang/data/docker-volumn/zk/conf:/zookeeper-3.4.12/conf -p 127.0.0.1:2181:2181 zookeeper:3.4.12</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Docker 启动 redis</span></span><br><span class="line">docker run -d --name redis -p 127.0.0.1:6379:6379 -v /Users/yaofushang/data/docker-volumn/redis/conf/redis.conf:/etc/redis/redis.conf -v /Users/yaofushang/data/docker-volumn/redis/data:/data redis:3.2.10 redis-server /etc/redis/redis.conf</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Docker 连接 redis server</span></span><br><span class="line">docker exec -it 1ec redis-cli -h 127.0.0.1 -p 6379 -a 123</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">rabbitmq 启动</span></span><br><span class="line">docker run -it --name rabbitmq -p 127.0.0.1:25672:25672 -p 127.0.0.1:4369:4369 -p 127.0.0.1:5671:5671 -p 127.0.0.1:5672:5672 -v /Users/yaofushang/data/docker-volumn/rabbitmq/conf/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf rabbitmq:3.7.8</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">mysql 启动</span></span><br><span class="line">docker run -it --name mysql -p 127.0.0.1:3306:3306 -v /Users/yaofushang/data/docker-volumn/mysql:/etc/mysql mysql/mysql-server --defaults-file=/etc/mysql/conf/my.cnf</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">命令行登陆 mysql （免密登陆）</span></span><br><span class="line">docker exec -it 249 mysql -h localhost -u root</span><br></pre></td></tr></table></figure><h1 id="2-组件教程"><a href="#2-组件教程" class="headerlink" title="2.组件教程"></a>2.组件教程</h1><h2 id="2-1-Zookeeper"><a href="#2-1-Zookeeper" class="headerlink" title="2.1 Zookeeper"></a>2.1 Zookeeper</h2><p><a href="https://blog.csdn.net/yin18827152962/article/details/122118704">Zookeeper 整体概览</a></p><p><a href="https://zookeeper.apache.org/doc/r3.4.14/">Zookeeper 3.4.14 官方文档</a></p><h2 id="2-2-分布式一致性算法"><a href="#2-2-分布式一致性算法" class="headerlink" title="2.2 分布式一致性算法"></a>2.2 分布式一致性算法</h2><p><a href="https://zhuanlan.zhihu.com/p/31727291">教程1</a><br><a href="https://zhuanlan.zhihu.com/p/31780743">教程2</a><br><a href="https://www.youtube.com/watch?v=bkWL4mtiVbs">youtube 视频教程</a></p><h2 id="2-3-组件配置"><a href="#2-3-组件配置" class="headerlink" title="2.3 组件配置"></a>2.3 组件配置</h2><h3 id="2-3-1-rabbitmq"><a href="#2-3-1-rabbitmq" class="headerlink" title="2.3.1 rabbitmq"></a>2.3.1 rabbitmq</h3><p><a href="https://www.cnblogs.com/kaishirenshi/p/12132703.html">rabbitmq配置项</a></p><h1 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续"></a>未完待续</h1>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker中安装并配置zookeeper</title>
      <link href="/JeckFS/2022/03/11/Docker%E4%B8%AD%E5%AE%89%E8%A3%85%E5%B9%B6%E9%85%8D%E7%BD%AEzookeeper/"/>
      <url>/JeckFS/2022/03/11/Docker%E4%B8%AD%E5%AE%89%E8%A3%85%E5%B9%B6%E9%85%8D%E7%BD%AEzookeeper/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/ageovb/p/15328796.html">参考链接</a></p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>应用多级缓存模式支撑海量读服务</title>
      <link href="/JeckFS/2022/03/10/%E5%BA%94%E7%94%A8%E5%A4%9A%E7%BA%A7%E7%BC%93%E5%AD%98%E6%A8%A1%E5%BC%8F%E6%94%AF%E6%92%91%E6%B5%B7%E9%87%8F%E8%AF%BB%E6%9C%8D%E5%8A%A1/"/>
      <url>/JeckFS/2022/03/10/%E5%BA%94%E7%94%A8%E5%A4%9A%E7%BA%A7%E7%BC%93%E5%AD%98%E6%A8%A1%E5%BC%8F%E6%94%AF%E6%92%91%E6%B5%B7%E9%87%8F%E8%AF%BB%E6%9C%8D%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/qiansg123/article/details/80122334">参考教程</a></p><p><a href="https://tech.youzan.com/tmc/">参考教程</a></p><p><a href="https://juejin.cn/post/6844903950051721230">参考教程</a></p><p><a href="https://blog.csdn.net/g6u8w7p06dco99fq3/article/details/97621982">参考教程</a></p><p><a href="https://blog.csdn.net/zjttlance/article/details/80234341">参考教程</a></p><p><a href="https://blog.csdn.net/qq_39399966/article/details/103136008">参考教程</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 缓存 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot加载配置文件</title>
      <link href="/JeckFS/2022/03/08/springboot%E5%8A%A0%E8%BD%BD%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
      <url>/JeckFS/2022/03/08/springboot%E5%8A%A0%E8%BD%BD%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/huanzi-qch/p/11122107.html">参考教程</a></p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redisson分布式锁教程</title>
      <link href="/JeckFS/2022/03/08/redisson%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E6%95%99%E7%A8%8B/"/>
      <url>/JeckFS/2022/03/08/redisson%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<img src="/JeckFS/2022/03/08/redisson%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E6%95%99%E7%A8%8B/Snipaste_2022-03-08_09-42-42.png" class="" title="This is 1-th image."><p>存在的问题：存在并发问题。比如10个线程扣减库存，最终发现只扣减了5个商品的情况。【超卖】</p><img src="/JeckFS/2022/03/08/redisson%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E6%95%99%E7%A8%8B/Snipaste_2022-03-08_09-45-11.png" class="" title="This is 1-th image."><p>存在问题：在分布式条件下， java 中的 synchronized 只能保证当前实例的线程是安全的，其他实例则不能保证。</p><img src="/JeckFS/2022/03/08/redisson%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E6%95%99%E7%A8%8B/Snipaste_2022-03-08_09-58-10.png" class="" title="This is 1-th image."><p>使用 redis setxn 简单实现分布式锁：</p><img src="/JeckFS/2022/03/08/redisson%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E6%95%99%E7%A8%8B/Snipaste_2022-03-08_10-05-25.png" class="" title="This is 1-th image."><p>这么实现的问题：</p><ul><li>当中间逻辑代码出现异常时，导致分布式死锁。即使将删除 key 的操作放在 finally 中也是会出现这个问题，当出现宕机，断电，重启等问题，仍不能保证 finally 中的内容被执行。</li></ul><img src="/JeckFS/2022/03/08/redisson%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E6%95%99%E7%A8%8B/Snipaste_2022-03-08_10-12-11.png" class="" title="This is 1-th image."><p>虽然加了超时时间，但是由于 setxn 与 设置超时时间不满足原子性，所以当在这两句之间出现宕机等问题仍然会导致死锁。</p><img src="/JeckFS/2022/03/08/redisson%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E6%95%99%E7%A8%8B/Snipaste_2022-03-08_10-18-05.png" class="" title="This is 1-th image."><p>将设置 key 与超时时间一起设置，满足原子性。</p><img src="/JeckFS/2022/03/08/redisson%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E6%95%99%E7%A8%8B/Snipaste_2022-03-08_10-20-49.png" class="" title="This is 1-th image."><p>上述代码仍然存在超卖问题。<br>原因：业务逻辑的执行时间超过了 key 失效时间。这就可能导致线程A删除了线程B加的锁（key）</p><p>初步解决：本线程仅释放自己加的锁（每个线程的 value 中加入标识自己线程的数据）</p><img src="/JeckFS/2022/03/08/redisson%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E6%95%99%E7%A8%8B/Snipaste_2022-03-08_10-29-33.png" class="" title="This is 1-th image."><p>问题：当即将释放锁的时候，突然卡了一下，导致分布式 key 被 redis 超时删除。当其他线程加锁后，当前线程再执行删除分布式锁的 key 就会导致线程删除其他线程加的锁。</p><img src="/JeckFS/2022/03/08/redisson%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E6%95%99%E7%A8%8B/Snipaste_2022-03-08_10-33-59.png" class="" title="This is 1-th image."><p>解决：保证释放锁的原子性</p><p>锁续命：搞一个定时任务，在分布式锁的 key 超时时间内，使用定时任务重新设置 key 的实效时间。当主线程完成，定时任务取消锁续命。</p><p>由于并发情况下编程会出很多bug， 因此使用 redisson 来实现分布式锁：</p><img src="/JeckFS/2022/03/08/redisson%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E6%95%99%E7%A8%8B/Snipaste_2022-03-08_10-45-20.png" class="" title="This is 1-th image."><img src="/JeckFS/2022/03/08/redisson%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E6%95%99%E7%A8%8B/Snipaste_2022-03-08_10-47-05.png" class="" title="This is 1-th image."><p>redis 的主从架构会带来一些分布式锁实效的风险。比如当 key 已经写入到 master 中并返回给客户端成功时，突然挂掉此时 slave 中是没有该 key 的，这就导致其他线程加锁执行。产生同一段代码多个线程同时执行的问题。</p><ul><li>redis 很难解决主从架构 key 不丢失的问题。可以使用 redlock 来保证 key 不丢失。redlock 类似 zookeeper 的实现方式。redis 会向多个 redis 实例中写入 key， 当超过半数写入成功则返回成功。当 master 挂掉后，依据一定规则选出一个 redis 备份实例充当 master 。这样性能低。若不采用 redlock 的方式，可以用定时任务扫描出错的记录。</li><li>使用 redis 做分布式锁，性能好</li><li>使用 zookeeper 不会存在这个问题，zookeeper 是强一致的。 </li></ul><img src="/JeckFS/2022/03/08/redisson%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E6%95%99%E7%A8%8B/Snipaste_2022-03-08_11-14-59.png" class="" title="This is 1-th image."><blockquote><p>【补充】如何提升并发？可以借鉴 ConcurrentMap 中分段锁的概念。将 key 分成 n 份，每份存储一部分库存，这样并发度就会提升 n 倍。当扣减不足时，可以多个 key 合并。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 分布式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jacoco基础教程</title>
      <link href="/JeckFS/2022/03/06/jacoco%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/"/>
      <url>/JeckFS/2022/03/06/jacoco%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<img src="/JeckFS/2022/03/06/jacoco%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/1.png" class="" title="This is 1-th image.">]]></content>
      
      
      <categories>
          
          <category> 测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode73-矩阵置零</title>
      <link href="/JeckFS/2022/02/05/leetcode73-%E7%9F%A9%E9%98%B5%E7%BD%AE%E9%9B%B6/"/>
      <url>/JeckFS/2022/02/05/leetcode73-%E7%9F%A9%E9%98%B5%E7%BD%AE%E9%9B%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><img src="/JeckFS/2022/02/05/leetcode73-%E7%9F%A9%E9%98%B5%E7%BD%AE%E9%9B%B6/1.png" class="" title="This is 1-th image."><img src="/JeckFS/2022/02/05/leetcode73-%E7%9F%A9%E9%98%B5%E7%BD%AE%E9%9B%B6/2.png" class="" title="This is 2-th image."><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Pair</span>&#123;</span><br><span class="line">        <span class="type">int</span> x,y;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Pair</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.x = x;</span><br><span class="line">            <span class="built_in">this</span>.y = y;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 将 x 行， y 列置为 0</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">helper</span><span class="params">(<span class="type">int</span>[][] matrix, <span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span>[] row, <span class="type">int</span>[] col)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (row[x] == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; matrix[x].length; i++) &#123;</span><br><span class="line">                matrix[x][i] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            row[x] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (col[y] == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; matrix.length; i++) &#123;</span><br><span class="line">                matrix[i][y] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            col[y] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setZeroes</span><span class="params">(<span class="type">int</span>[][] matrix)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] col = <span class="keyword">new</span> <span class="title class_">int</span>[matrix[<span class="number">0</span>].length]; <span class="comment">// 列</span></span><br><span class="line">        <span class="type">int</span>[] row = <span class="keyword">new</span> <span class="title class_">int</span>[matrix.length]; <span class="comment">// 行</span></span><br><span class="line">        List&lt;Pair&gt; save = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// col[i]=0 表示第 i 行不全为 0；col[i]=1 表示第 i 行已经置为 0；同理 row</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; matrix.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; matrix[i].length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (matrix[i][j] == <span class="number">0</span>) &#123;</span><br><span class="line">                    save.add(<span class="keyword">new</span> <span class="title class_">Pair</span>(i,j));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (Pair pair : save) &#123;</span><br><span class="line">            helper(matrix, pair.x, pair.y, row, col);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> leetcode其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode其他 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode38-外观数列</title>
      <link href="/JeckFS/2022/02/04/leetcode38-%E5%A4%96%E8%A7%82%E6%95%B0%E5%88%97/"/>
      <url>/JeckFS/2022/02/04/leetcode38-%E5%A4%96%E8%A7%82%E6%95%B0%E5%88%97/</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><img src="/JeckFS/2022/02/04/leetcode38-%E5%A4%96%E8%A7%82%E6%95%B0%E5%88%97/1.png" class="" title="This is 1-th image."><img src="/JeckFS/2022/02/04/leetcode38-%E5%A4%96%E8%A7%82%E6%95%B0%E5%88%97/2.png" class="" title="This is 2-th image."><img src="/JeckFS/2022/02/04/leetcode38-%E5%A4%96%E8%A7%82%E6%95%B0%E5%88%97/3.png" class="" title="This is 3-th image."><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">char</span>[] next(<span class="type">char</span>[] init)&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">pointer</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">char</span>[] res = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">5000</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; len;) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">cnt</span> <span class="operator">=</span> <span class="number">1</span>, j;</span><br><span class="line">            <span class="keyword">for</span> (j = i; j + <span class="number">1</span> &lt; len &amp;&amp; init[j] == init[j+<span class="number">1</span>]; j++) &#123;</span><br><span class="line">                ++cnt;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (i == j) &#123; <span class="comment">// 该字符仅出现一次</span></span><br><span class="line">                res[pointer++] = <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                res[pointer++] = (<span class="type">char</span>)(cnt+<span class="number">48</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            res[pointer++] = init[i];</span><br><span class="line">            i = j + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        len = pointer;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 中文（1ms, 95.72%）</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">countAndSay</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>) <span class="keyword">return</span> <span class="string">&quot;1&quot;</span>;</span><br><span class="line">        <span class="type">char</span>[] init = &#123;<span class="string">&#x27;1&#x27;</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            init = next(init);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>(init, <span class="number">0</span>, len);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> leetcode其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode其他 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode31-下一个排列</title>
      <link href="/JeckFS/2022/02/04/leetcode31-%E4%B8%8B%E4%B8%80%E4%B8%AA%E6%8E%92%E5%88%97/"/>
      <url>/JeckFS/2022/02/04/leetcode31-%E4%B8%8B%E4%B8%80%E4%B8%AA%E6%8E%92%E5%88%97/</url>
      
        <content type="html"><![CDATA[<img src="/JeckFS/2022/02/04/leetcode31-%E4%B8%8B%E4%B8%80%E4%B8%AA%E6%8E%92%E5%88%97/1.png" class="" title="This is 1-th image."><img src="/JeckFS/2022/02/04/leetcode31-%E4%B8%8B%E4%B8%80%E4%B8%AA%E6%8E%92%E5%88%97/2.png" class="" title="This is 2-th image."><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>从后往前查找升序序列 t ，剩余字串为 s， 记录 s 的最后一个字符的位置 l。然后从 t 中找出比 <code>nums[l]</code> 大的最小的字符位置 t1，然后交换位置 l 与 t1 的元素，并将 <code>[l+1, nums.length)</code> 按照从小到大的顺序排列即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="comment">// 将数组 nums 从 start 到 end 的元素反转</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reverse</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> start, <span class="type">int</span> end)</span>&#123;</span><br><span class="line">        <span class="type">int</span> t;</span><br><span class="line">        <span class="keyword">while</span> (start +<span class="number">1</span> &lt; nums.length &amp;&amp; nums[start] &lt; nums[start +<span class="number">1</span>] ) ++start;</span><br><span class="line">        <span class="keyword">while</span> (start &lt; end) &#123;</span><br><span class="line">            t = nums[start];</span><br><span class="line">            nums[start] = nums[end];</span><br><span class="line">            nums[end] = t;</span><br><span class="line">            ++start;</span><br><span class="line">            --end;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用快速排序将数组 nums 从 start 到 end 进行排序</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> start, <span class="type">int</span> end)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (start &gt;=  end) <span class="keyword">return</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> nums[start], i = start, j = end;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">            <span class="keyword">while</span> (i &lt; j &amp;&amp; nums[j] &gt;= temp) --j;</span><br><span class="line">            <span class="keyword">if</span> (i == j) nums[i] = temp;</span><br><span class="line">            <span class="keyword">else</span> nums[i] = nums[j];</span><br><span class="line">            <span class="keyword">while</span> (i &lt; j &amp;&amp; nums[i] &lt;= temp) ++i;</span><br><span class="line">            <span class="keyword">if</span> (i == j) nums[j] = temp;</span><br><span class="line">            <span class="keyword">else</span> nums[j] = nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        sort(nums, start, i-<span class="number">1</span>);</span><br><span class="line">        sort(nums, i+<span class="number">1</span>, end);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">index</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> start, <span class="type">int</span> end, <span class="type">int</span> e)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">idx</span> <span class="operator">=</span> start;</span><br><span class="line">        <span class="keyword">while</span> (start &lt;= end) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[start] &gt; e &amp;&amp; nums[idx] &gt; nums[start]) &#123;</span><br><span class="line">                idx = start;</span><br><span class="line">            &#125;</span><br><span class="line">            ++start;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> idx;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 交换 nums 数组中，位置 i 与位置 j 的元素位置</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> nums[i];</span><br><span class="line">        nums[i] = nums[j];</span><br><span class="line">        nums[j] = t;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 中文(0ms, 100%)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">nextPermutation</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="comment">// 查找 l 的具体位置（原序列分为序列 s, t，其中 t 表示从后往前看的升序序列，剩余序例为 s ，l 指向序列 s 的最后一个字符）</span></span><br><span class="line">        <span class="type">int</span> l;</span><br><span class="line">        <span class="keyword">for</span> (l = nums.length-<span class="number">1</span>; l-<span class="number">1</span> &gt;= <span class="number">0</span> &amp;&amp; nums[l] &lt;= nums[l-<span class="number">1</span>]; l--);</span><br><span class="line">        --l;</span><br><span class="line">        <span class="keyword">if</span> (l == -<span class="number">1</span>) &#123;<span class="comment">// 整个序列都是将序序列，则逆序输出该序列即可</span></span><br><span class="line">            reverse(nums, <span class="number">0</span>, nums.length-<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 查找序列 t 中比 nums[l] 大的最小字符的索引位置</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> index(nums, l+<span class="number">1</span>, nums.length-<span class="number">1</span>, nums[l]);</span><br><span class="line">        <span class="comment">// 交换位置 t 与位置 l 的字符</span></span><br><span class="line">        swap(nums, t, l);</span><br><span class="line">        sort(nums, l+<span class="number">1</span>, nums.length-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> leetcode其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode其他 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring-bean加载流程</title>
      <link href="/JeckFS/2022/01/22/spring-bean%E5%8A%A0%E8%BD%BD%E6%B5%81%E7%A8%8B/"/>
      <url>/JeckFS/2022/01/22/spring-bean%E5%8A%A0%E8%BD%BD%E6%B5%81%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="AbstractApplicationContext"><a href="#AbstractApplicationContext" class="headerlink" title="AbstractApplicationContext"></a>AbstractApplicationContext</h1><p>该类是 ApplicationContext 接口的一个抽象实现类，简单地实现了公共上下文功能。使用模板模式，让具体的实现在子类中实现。<br>该类能够自动注册 BeanFactoryPostProcessor , BeanPostProcessor , ApplicationListener （这几个类在上下文中都定义为 bean ）<br>由于该类继承自 DefaultResourceLoader ，其 resource 资源的加载通过 DefaultResourceLoader 来实现。不过仅能以全类名的方式加载。</p><h1 id="ConfigurableApplicationContext"><a href="#ConfigurableApplicationContext" class="headerlink" title="ConfigurableApplicationContext"></a>ConfigurableApplicationContext</h1><p>SPI 接口将由大多数应用程序上下文实现。此外，还实现了 ApplicationContext 接口。<br><strong>配置方法与生命周期方法</strong>都在该类中进行。该接口作为 ApplicationContext 的客户端来运行。</p><h1 id="ApplicationContext"><a href="#ApplicationContext" class="headerlink" title="ApplicationContext"></a>ApplicationContext</h1><p>该接口是为应用提供配置的核心接口。当应用运行时，该接口是只读的，但是若其实现类支持的话该接口可被重新加载。<br>一个 ApplicationContext 将会提供：</p><ul><li>Bean factory 方法（用于获取 Components ）  （继承 ListableBeanFactory 接口）</li><li>以通用方式加载文件资源的能力 （继承自 ResourceLoader 接口）</li><li>给监听器发布事件的能力 （继承自 ApplicationEventPublisher 接口）</li><li>解析消息、支持国家化的能力 （继承自 MessageSource 接口）</li><li>除了标准 BeanFactory 生命周期功能， ApplicationContext 实现检测和调用 ApplicationContextAware 以及 link ResourceLoaderAware ， ApplicationEventPublisherAware 和{ MessageSourceAware 。</li></ul><h1 id="AbstractApplicationContext-1"><a href="#AbstractApplicationContext-1" class="headerlink" title="AbstractApplicationContext"></a>AbstractApplicationContext</h1><h2 id="1-成员变量"><a href="#1-成员变量" class="headerlink" title="1.成员变量"></a>1.成员变量</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> ResourcePatternResolver</span><br><span class="line"><span class="keyword">final</span> List&lt;BeanFactoryPostProcessor&gt; beanFactoryPostProcessor</span><br><span class="line">：用于在refresh中调用</span><br><span class="line">ApplicationStartUp变量</span><br><span class="line"><span class="keyword">final</span> AtomicBoolean active：标识当前context是否是激活状态</span><br><span class="line"><span class="keyword">final</span> AtomicBoolean closed：标识当前context是否已经处于关闭状态</span><br><span class="line"><span class="keyword">final</span> Object startupShutdownMonitor：用于监视refresh以及destroy的同步监视器</span><br><span class="line">ApplicationStartup applicationStartup：应用启动指标</span><br><span class="line"><span class="keyword">final</span> Set&lt;ApplicationListener&lt;?&gt;&gt; applicationListeners：统计(存储)已有监听器</span><br><span class="line"><span class="keyword">final</span> ResourcePatternResolver resourcePatternResolver</span><br></pre></td></tr></table></figure><h1 id="GenericApplicationContext"><a href="#GenericApplicationContext" class="headerlink" title="GenericApplicationContext"></a>GenericApplicationContext</h1><h2 id="1-成员变量-1"><a href="#1-成员变量-1" class="headerlink" title="1.成员变量"></a>1.成员变量</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> DefaultListableBeanFactory beanFactory;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">private</span> ResourceLoader resourceLoader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">customClassLoader</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="type">AtomicBoolean</span> <span class="variable">refreshed</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicBoolean</span>();</span><br></pre></td></tr></table></figure><h1 id="DefaultListableBeanFactory"><a href="#DefaultListableBeanFactory" class="headerlink" title="DefaultListableBeanFactory"></a>DefaultListableBeanFactory</h1><p>ConfigurableListableBeanFactory BeanDefinitionRegistry 接口的默认实现类</p><h2 id="1-成员变量-2"><a href="#1-成员变量-2" class="headerlink" title="1.成员变量"></a>1.成员变量</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DefaultListableBeanFactory</span> <span class="keyword">extends</span> <span class="title class_">AbstractAutowireCapableBeanFactory</span></span><br><span class="line"><span class="keyword">implements</span> <span class="title class_">ConfigurableListableBeanFactory</span>, BeanDefinitionRegistry, Serializable &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Class&lt;?&gt; javaxInjectProviderClass;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">javaxInjectProviderClass =</span><br><span class="line">ClassUtils.forName(<span class="string">&quot;jakarta.inject.Provider&quot;</span>, DefaultListableBeanFactory.class.getClassLoader());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (ClassNotFoundException ex) &#123;</span><br><span class="line"><span class="comment">// JSR-330 API not available - Provider interface simply not supported then.</span></span><br><span class="line">javaxInjectProviderClass = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/** Map from serialized id to factory instance. */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;String, Reference&lt;DefaultListableBeanFactory&gt;&gt; serializableFactories =</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;(<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Optional id for this factory, for serialization purposes. */</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">private</span> String serializationId;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Whether to allow re-registration of a different definition with the same name. */</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">allowBeanDefinitionOverriding</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Whether to allow eager class loading even for lazy-init beans. */</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">allowEagerClassLoading</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Optional OrderComparator for dependency Lists and arrays. */</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">private</span> Comparator&lt;Object&gt; dependencyComparator;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Resolver to use for checking if a bean definition is an autowire candidate. */</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">AutowireCandidateResolver</span> <span class="variable">autowireCandidateResolver</span> <span class="operator">=</span> SimpleAutowireCandidateResolver.INSTANCE;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Map from dependency type to corresponding autowired value. */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;Class&lt;?&gt;, Object&gt; resolvableDependencies = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;(<span class="number">16</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Map of bean definition objects, keyed by bean name. */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, BeanDefinition&gt; beanDefinitionMap = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;(<span class="number">256</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Map from bean name to merged BeanDefinitionHolder. */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, BeanDefinitionHolder&gt; mergedBeanDefinitionHolders = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;(<span class="number">256</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Map of singleton and non-singleton bean names, keyed by dependency type. */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;Class&lt;?&gt;, String[]&gt; allBeanNamesByType = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;(<span class="number">64</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Map of singleton-only bean names, keyed by dependency type. */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;Class&lt;?&gt;, String[]&gt; singletonBeanNamesByType = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;(<span class="number">64</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/** List of bean definition names, in registration order. */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> List&lt;String&gt; beanDefinitionNames = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(<span class="number">256</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/** List of names of manually registered singletons, in registration order. */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> Set&lt;String&gt; manualSingletonNames = <span class="keyword">new</span> <span class="title class_">LinkedHashSet</span>&lt;&gt;(<span class="number">16</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Cached array of bean definition names in case of frozen configuration. */</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> String[] frozenBeanDefinitionNames;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Whether bean definition metadata may be cached for all beans. */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="type">boolean</span> configurationFrozen;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="1-AnnotationConfigApplicationContext"><a href="#1-AnnotationConfigApplicationContext" class="headerlink" title="1. AnnotationConfigApplicationContext"></a>1. AnnotationConfigApplicationContext</h1><p>AnnotationConfigApplicationContext 作为独立的应用上下文，接受 component classes 作为输入（尤其是使用 @Configuration 注解修饰的类）。</p><p>注册 bean 的方式有两种：</p><ul><li>调用 register() 函数，逐个注入 classes</li><li>调用 scan() 函数，注册 classpath 下的 bean</li></ul><p>AnnotationConfigApplicationContext 对象的创建需要创建两个成员变量，分别是 AnnotatedBeanDefinitionReader （注册 bean ）、ClassPathBeanDefinitionScanner （bean definition 扫描器）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Create a new AnnotationConfigApplicationContext that needs to be populated</span></span><br><span class="line"><span class="comment"> * through &#123;<span class="doctag">@link</span> #register&#125; calls and then manually &#123;<span class="doctag">@linkplain</span> #refresh refreshed&#125;.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">AnnotationConfigApplicationContext</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">StartupStep</span> <span class="variable">createAnnotatedBeanDefReader</span> <span class="operator">=</span> <span class="built_in">this</span>.getApplicationStartup().start(<span class="string">&quot;spring.context.annotated-bean-reader.create&quot;</span>);</span><br><span class="line"><span class="built_in">this</span>.reader = <span class="keyword">new</span> <span class="title class_">AnnotatedBeanDefinitionReader</span>(<span class="built_in">this</span>);</span><br><span class="line">createAnnotatedBeanDefReader.end();</span><br><span class="line"><span class="built_in">this</span>.scanner = <span class="keyword">new</span> <span class="title class_">ClassPathBeanDefinitionScanner</span>(<span class="built_in">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-1-AnnotatedBeanDefinitionReader"><a href="#1-1-AnnotatedBeanDefinitionReader" class="headerlink" title="1.1 AnnotatedBeanDefinitionReader"></a>1.1 AnnotatedBeanDefinitionReader</h2><p> bean classes 的可编程注册适配器。</p><p> ClassPathBeanDefinitionScanner 类的替代品，仅用于显示注册的类。</p><h2 id="1-2-ClassPathBeanDefinitionScanner"><a href="#1-2-ClassPathBeanDefinitionScanner" class="headerlink" title="1.2 ClassPathBeanDefinitionScanner"></a>1.2 ClassPathBeanDefinitionScanner</h2><p> 将指定包下的类通过一定规则过滤后 将Class 信息包装成 BeanDefinition 的形式注册到IOC容器中。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Spring源码阅读 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring-boot源码调试环境搭建</title>
      <link href="/JeckFS/2022/01/16/spring-boot%E6%BA%90%E7%A0%81%E8%B0%83%E8%AF%95%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
      <url>/JeckFS/2022/01/16/spring-boot%E6%BA%90%E7%A0%81%E8%B0%83%E8%AF%95%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<p>本篇文章以搭建 2.3.x 版本的 spring-boot 源码调试环境。</p><h1 id="1-从github克隆代码"><a href="#1-从github克隆代码" class="headerlink" title="1.从github克隆代码"></a>1.从github克隆代码</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">为了速度，这里从gitee中克隆</span></span><br><span class="line">git clone https://gitee.com/[my-spring-boot].git -b 2.3.x</span><br></pre></td></tr></table></figure><h1 id="2-修改-gradle-镜像地址"><a href="#2-修改-gradle-镜像地址" class="headerlink" title="2.修改 gradle 镜像地址"></a>2.修改 gradle 镜像地址</h1><p>去 <a href="https://maven.aliyun.com">阿里云云效 maven</a> 或者 <a href="https://developer.aliyun.com/mvn/view">仓库文件</a> 查看最新的镜像地址。</p><p>主要修改 spring-boot 项目中的四个 gradle 配置文件，分别是项目根目录下的 build.gradle , settings.gradle ，以及 buildSrc 下的 build.gradle 与 settings.gradle 。将 respositories 中的 maven 镜像修改为阿里云镜像地址。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">maven &#123; url &#x27;https://maven.aliyun.com/repository/public/&#x27; &#125;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">spring 非必选</span></span><br><span class="line">maven &#123; url &#x27;https://maven.aliyun.com/repository/spring/&#x27; &#125;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">spring-plugin 非必选</span></span><br><span class="line">maven &#123; url &#x27;https://maven.aliyun.com/repository/spring-plugin&#x27; &#125;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">gradle-plugin 是必须要添加的，否则 spring-boot 中的插件依赖将无法下载</span></span><br><span class="line">maven &#123; url &#x27;https://maven.aliyun.com/repository/gradle-plugin&#x27; &#125;</span><br></pre></td></tr></table></figure><p>在 spring-boot 项目根路径下的 build.gradle 的第一行添加如下脚本：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">buildscript</span> &#123;</span><br><span class="line"><span class="keyword">repositories</span> &#123;</span><br><span class="line">maven &#123; url <span class="string">&#x27;https://maven.aliyun.com/repository/public/&#x27;</span> &#125;</span><br><span class="line">maven &#123; url <span class="string">&#x27;https://maven.aliyun.com/repository/spring/&#x27;</span> &#125;</span><br><span class="line">maven &#123; url <span class="string">&#x27;https://maven.aliyun.com/repository/gradle-plugin&#x27;</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在构建过程中，本人使用的系统是 mac ，遇到了下面这个问题，这个问题也不是一定会遇到，若报 :buildSrc:test 编译不通过的问题就按照如下操作即可。</p><p>然后找到 buildSrc 下的 build.gradle ，将 test 函数的 useJUnitPlatform() 注释掉，否则可能会有 <code>org.opentest4j.AssertionFailedError</code> 的报错。</p><p>如下所示：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">test &#123;</span><br><span class="line"><span class="comment">//useJUnitPlatform()</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="该用本地的-gradle-进行编译"><a href="#该用本地的-gradle-进行编译" class="headerlink" title="该用本地的 gradle 进行编译"></a>该用本地的 gradle 进行编译</h1><p>打开 spring-boot 项目根目录 -&gt; gradle -&gt; wrapper -&gt; gradle-wrapper.properties 文件，将 distributionUrl 的取值修改为本地下载的 gradle 压缩包路径，这里配置的路径为 file:///Users/yaofushang/software/gradle-7.3.3/gradle-7.3.3.zip ，如果不配置，则每次启动时都会从远程下载。</p><p>然后双击 shift 键， settings -&gt; gradle ，按照下图进行设置</p><img src="/JeckFS/2022/01/16/spring-boot%E6%BA%90%E7%A0%81%E8%B0%83%E8%AF%95%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/1.png" class="" title="This is 1-th image."><h1 id="配置本地-jdk"><a href="#配置本地-jdk" class="headerlink" title="配置本地 jdk"></a>配置本地 jdk</h1><p>打开 spring-boot 项目的 project structure 将所有 jdk 的路径配置为本地jdk，包括上图配置本地 gradle 所使用的 jdk 。</p><p>然后重新让 gradle 编译即可。为了速度，可以适当调整 idea 与 gradle jvm 的内存大小。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">-Xms2048m</span></span><br><span class="line"><span class="attr">-Xmx4096m</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#新增如下配置，解决heap堆内存空间不够问题</span></span><br><span class="line"><span class="attr">gradlePropertiesProp</span>=<span class="string">gradlePropertiesValue</span></span><br><span class="line"><span class="attr">sysProp</span>=<span class="string">shouldBeOverWrittenBySysProp</span></span><br><span class="line"><span class="attr">systemProp.system</span>=<span class="string">systemValue</span></span><br><span class="line"><span class="attr">org.gradle.caching</span>=<span class="string">false</span></span><br><span class="line"><span class="attr">org.gradle.jvmargs</span>=<span class="string">-Xms2048m -Xmx4096m</span></span><br><span class="line"><span class="attr">org.gradle.parallel</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">org.gradle.daemon</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">org.gradle.configureondemand</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 断言状态码</span></span><br><span class="line">pm.<span class="title function_">test</span>(<span class="string">&quot;Status code is 200&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">pm.<span class="property">reponse</span>.<span class="property">to</span>.<span class="property">have</span>.<span class="title function_">status</span>(<span class="number">200</span>);<span class="comment">//这里填写的200是预期结果，实际结果是请求返回结果</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 断言状态消息</span></span><br><span class="line">pm.<span class="title function_">test</span>(<span class="string">&quot;Status code name has string&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">pm.<span class="property">response</span>.<span class="property">to</span>.<span class="property">have</span>.<span class="title function_">status</span>(<span class="string">&quot;OK&quot;</span>);<span class="comment">//断言响应状态消息包含OK</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 断言响应头存在 Content-Type</span></span><br><span class="line">pm.<span class="title function_">test</span>(<span class="string">&quot;Content-Type is presend&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">pm.<span class="property">reponse</span>.<span class="property">to</span>.<span class="property">have</span>.<span class="title function_">header</span>(<span class="string">&quot;Content-Type&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 断言响应体包含 xx 字符串</span></span><br><span class="line">pm.<span class="title function_">test</span>(<span class="string">&quot;Body matches string&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">pm.<span class="title function_">expect</span>(pm.<span class="property">response</span>.<span class="title function_">text</span>()).<span class="property">to</span>.<span class="title function_">include</span>(<span class="string">&quot;string_you_want_to_search&quot;</span>)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 断言响应体等于或不等于 xx 字符串</span></span><br><span class="line">pm.<span class="title function_">test</span>(<span class="string">&quot;Body is correct&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">pm.<span class="property">response</span>.<span class="property">to</span>.<span class="property">have</span>.<span class="title function_">body</span>(<span class="string">&quot;response_body_string&quot;</span>) <span class="comment">// 获取响应体等于 resopnse_body_string</span></span><br><span class="line"></span><br><span class="line">pm.<span class="title function_">except</span>(str1).<span class="property">to</span>.<span class="title function_">equal</span>(xxx); <span class="comment">// 等于 xxx 字符串</span></span><br><span class="line">pm.<span class="title function_">except</span>(str1).<span class="property">to</span>.<span class="title function_">equal</span>(xxx); <span class="comment">// 不等于 xxx 字符串</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 断言响应体某个键名的值, 报文类型只能为 JSON 格式</span></span><br><span class="line">pm.<span class="title function_">test</span>(<span class="string">&quot;Your test name&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">var</span> json = pm.<span class="property">reponse</span>.<span class="title function_">json</span>()<span class="comment">//获取JSON格式的响应体</span></span><br><span class="line">pm.<span class="title function_">expect</span>(json.<span class="property">value</span>).<span class="property">to</span>.<span class="title function_">eql</span>(<span class="number">100</span>)<span class="comment">//获取json中键名为value的值然后和100比较</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 断言响应时间小于200ms</span></span><br><span class="line">pm.<span class="title function_">test</span>(<span class="string">&quot;Response time is less than 200ms&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">pm.<span class="title function_">expect</span>(pm.<span class="property">response</span>.<span class="property">responseTime</span>).<span class="property">to</span>.<span class="property">be</span>.<span class="title function_">below</span>(<span class="number">200</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Xml转JSON</span></span><br><span class="line"><span class="keyword">let</span> json = <span class="title function_">xml2Json</span>(text)</span><br><span class="line"><span class="comment">// JSON格式字符串转JSON</span></span><br><span class="line"><span class="keyword">let</span> json = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(jsonString)</span><br><span class="line"><span class="comment">// JSON格式转JSON字符串</span></span><br><span class="line"><span class="keyword">let</span> jsonString = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(jsonData)</span><br><span class="line"><span class="keyword">let</span> jsonString = jsonData.<span class="title function_">toString</span>()</span><br><span class="line"><span class="comment">// 请求返回获取response的json格式</span></span><br><span class="line"><span class="keyword">let</span> jsonResponse = pm.<span class="property">response</span>.<span class="title function_">json</span>()</span><br><span class="line"><span class="comment">// 获取请求request的json格式</span></span><br><span class="line"><span class="keyword">let</span> jsonRequest = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(pm.<span class="property">request</span>.<span class="property">body</span>.<span class="property">raw</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//json格式内容提取</span></span><br><span class="line"><span class="keyword">let</span> jsonData = pm.<span class="property">reponse</span>.<span class="title function_">json</span>()</span><br><span class="line"><span class="keyword">let</span> user_id = jsonData.<span class="property">data</span>.<span class="property">roles</span>.<span class="property">points</span>[<span class="number">1</span>]  <span class="comment">// 获取jsonData下data下roles下points列表的某个元素</span></span><br><span class="line"><span class="keyword">let</span> id = jsonData.<span class="property">data</span>.<span class="property">roles</span>.<span class="title function_">slice</span>(-<span class="number">1</span>)[<span class="number">0</span>] <span class="comment">// 获取该列表最后一个元素</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置变量</span></span><br><span class="line">pm.<span class="property">globals</span>.<span class="title function_">set</span>(<span class="string">&quot;变量名&quot;</span>, 变量值)</span><br><span class="line">pm.<span class="property">environment</span>.<span class="title function_">set</span>(<span class="string">&quot;变量名&quot;</span>, 变量值)</span><br><span class="line">pm.<span class="property">collectionVariables</span>.<span class="title function_">set</span>(<span class="string">&quot;变量名&quot;</span>, 变量值)</span><br><span class="line">postman.<span class="title function_">setGlobalVariable</span>(<span class="string">&quot;变量名&quot;</span>, 变量值)</span><br><span class="line">postman.<span class="title function_">setEnvironmentVariable</span>(<span class="string">&quot;变量名&quot;</span>, 变量值)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 报文中获取变量</span></span><br><span class="line">&#123;&#123;变量名&#125;&#125;</span><br><span class="line"><span class="comment">// 代码中获取变量</span></span><br><span class="line">pm.<span class="property">globals</span>.<span class="title function_">get</span>(<span class="string">&quot;变量名&quot;</span>)</span><br><span class="line">pm.<span class="property">environment</span>.<span class="title function_">get</span>(<span class="string">&quot;变量名&quot;</span>)</span><br><span class="line">pm.<span class="property">collectionVariables</span>.<span class="title function_">get</span>(<span class="string">&quot;变量名&quot;</span>)</span><br><span class="line">postman.<span class="title function_">getGlobalVariable</span>(<span class="string">&quot;变量名&quot;</span>)</span><br><span class="line">postman.<span class="title function_">getEnvironmentVariable</span>(<span class="string">&quot;变量名&quot;</span>)</span><br><span class="line">globals[<span class="string">&quot;变量名&quot;</span>]</span><br><span class="line">environment[<span class="string">&quot;变量名&quot;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 清除某个变量</span></span><br><span class="line">postman.<span class="title function_">clearGlobalVariable</span>(<span class="string">&quot;变量名&quot;</span>)</span><br><span class="line">postman.<span class="title function_">clearEnvironmentVariable</span>(<span class="string">&quot;变量名&quot;</span>)</span><br><span class="line"></span><br><span class="line">pm.<span class="property">globals</span>.<span class="title function_">unset</span>(<span class="string">&quot;变量名&quot;</span>)</span><br><span class="line">pm.<span class="property">environment</span>.<span class="title function_">unset</span>(<span class="string">&quot;变量名&quot;</span>)</span><br><span class="line">pm.<span class="property">collectionVariables</span>.<span class="title function_">unset</span>(<span class="string">&quot;变量名&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 清除全部变量</span></span><br><span class="line">postman.<span class="title function_">clearEnvironmentVariables</span>()</span><br><span class="line"></span><br><span class="line">pm.<span class="property">globals</span>.<span class="title function_">clear</span>()</span><br><span class="line">pm.<span class="property">environment</span>.<span class="title function_">clear</span>()</span><br><span class="line">pm.<span class="property">collectionVariables</span>.<span class="title function_">clear</span>()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mac-jdk多环境配置</title>
      <link href="/JeckFS/2022/01/02/mac-jdk%E5%A4%9A%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
      <url>/JeckFS/2022/01/02/mac-jdk%E5%A4%9A%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="使用-jenv-环境管理-jdk-多版本"><a href="#使用-jenv-环境管理-jdk-多版本" class="headerlink" title="使用 jenv 环境管理 jdk 多版本"></a>使用 jenv 环境管理 jdk 多版本</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装 jenv</span></span><br><span class="line">brew install jenv</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置 jenv</span></span><br><span class="line">echo &#x27;export PATH=&quot;$HOME/.jenv/bin:$PATH&quot;&#x27; &gt;&gt; ~/.zshrc</span><br><span class="line">echo &#x27;eval &quot;$(jenv init -)&quot;&#x27; &gt;&gt; ~/.zshrc</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">列出已安装的 jdk 路径</span></span><br><span class="line"><span class="meta prompt_">AigeStudio@aige$ </span><span class="language-bash">/usr/libexec/java_home -V</span></span><br><span class="line">Matching Java Virtual Machines (4):</span><br><span class="line">    12.0.1, x86_64: &quot;OpenJDK 12.0.1&quot;    /Library/Java/JavaVirtualMachines/openjdk-12.0.1.jdk/Contents/Home</span><br><span class="line">    1.8.0_212, x86_64:  &quot;AdoptOpenJDK 8&quot;    /Library/Java/JavaVirtualMachines/adoptopenjdk-8.jdk/Contents/Home</span><br><span class="line">    1.6.0_65-b14-468, x86_64:   &quot;Java SE 6&quot; /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home</span><br><span class="line">    1.6.0_65-b14-468, i386: &quot;Java SE 6&quot; /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">jenv add 将路径添加到 jenv 中，让 jenv 管理多个版本的 jdk</span></span><br><span class="line"><span class="meta prompt_">AigeStudio@aige$ </span><span class="language-bash">jenv add /Library/Java/JavaVirtualMachines/openjdk-12.0.1.jdk/Contents/Home</span></span><br><span class="line"><span class="meta prompt_">AigeStudio@aige$ </span><span class="language-bash">jenv add /Library/Java/JavaVirtualMachines/adoptopenjdk-8.jdk/Contents/Home</span></span><br><span class="line"><span class="meta prompt_">AigeStudio@aige$ </span><span class="language-bash">jenv add /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">jenv versions 列出所有的 jdk</span></span><br><span class="line"><span class="meta prompt_">AigeStudio@aige$ </span><span class="language-bash">jenv versions</span></span><br><span class="line">  system</span><br><span class="line">  1.6</span><br><span class="line">  1.6.0.65</span><br><span class="line">  1.8</span><br><span class="line">  1.8.0.212</span><br><span class="line">  12.0</span><br><span class="line">* 12.0.1 (set by /Users/aige/.jenv/version)</span><br><span class="line">  openjdk64-1.8.0.212</span><br><span class="line">  openjdk64-12.0.1</span><br><span class="line">  oracle64-1.6.0.65</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看正在使用的 jdk 版本</span></span><br><span class="line">java -version</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">jenv 工具的使用</span></span><br><span class="line">❯ jenv -h</span><br><span class="line">jenv 0.5.4</span><br><span class="line">Usage: jenv &lt;command&gt; [&lt;args&gt;]</span><br><span class="line"></span><br><span class="line">Some useful jenv commands are:</span><br><span class="line">   commands    List all available jenv commands</span><br><span class="line">   local       Set or show the local application-specific Java version</span><br><span class="line">   global      Set or show the global Java version</span><br><span class="line">   shell       Set or show the shell-specific Java version</span><br><span class="line">   rehash      Rehash jenv shims (run this after installing executables)</span><br><span class="line">   version     Show the current Java version and its origin</span><br><span class="line">   versions    List all Java versions available to jenv</span><br><span class="line">   which       Display the full path to an executable</span><br><span class="line">   whence      List all Java versions that contain the given executable</span><br><span class="line">   add         Add JDK into jenv. A alias name will be generated by parsing &quot;java -version&quot;</span><br><span class="line"></span><br><span class="line">See `jenv help &lt;command&gt;&#x27; for information on a specific command.</span><br><span class="line">For full documentation, see: https://github.com/jenv/jenv/blob/master/README.md</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> others </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring响应式编程</title>
      <link href="/JeckFS/2022/01/02/Spring%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
      <url>/JeckFS/2022/01/02/Spring%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="Reactive-Programming-amp-Reactive-Streams"><a href="#Reactive-Programming-amp-Reactive-Streams" class="headerlink" title="Reactive Programming &amp; Reactive Streams"></a>Reactive Programming &amp; Reactive Streams</h1><p>Reactive Streams 是提供给开发者使用的用于响应式编程的一组 API 。与 JPA 、 JDBC 类似， Reactive Streams 提供了可编程的 API 接口。</p><h2 id="响应式系统特点"><a href="#响应式系统特点" class="headerlink" title="响应式系统特点"></a>响应式系统特点</h2><ul><li>Responseive（快速响应）<br>响应迅速。这种快速响应的能力将会使得更及时的发现问题并有效解决。响应式系统聚焦于提供快速的、一致的响应时间以提高响应的质量。这样的好处是能够减少错误的发生概率，提高用户的满意度。</li><li>Resilient（快速恢复）</li></ul><p>TODO 未完待续<br><a href="https://springframework.guru/reactive-streams-in-java/">参考文档1</a><br><a href="https://www.reactivemanifesto.org/zh-CN">参考文档2</a></p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo博客迁移</title>
      <link href="/JeckFS/2021/12/26/hexo%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB/"/>
      <url>/JeckFS/2021/12/26/hexo%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.jianshu.com/p/153490a029a5">参考教程</a></p><h1 id="1-本地博客系统的目录结构"><a href="#1-本地博客系统的目录结构" class="headerlink" title="1.本地博客系统的目录结构"></a>1.本地博客系统的目录结构</h1><p>.<br>├── .deploy_git<br>├── .git<br>├── .gitignore<br>├── _config.yml<br>├── db.json<br>├── node_modules<br>├── package-lock.json<br>├── package.json<br>├── public<br>├── scaffolds<br>├── source<br>└── themes</p><p>本地博客系统主要分为两个部分，一是：博客网站显示的相关静态文件（<code>.deploy_git，public</code>），二是：编译网站静态文件的源码文件。</p><ul><li>静态文件<br><code>public</code> 中的文件是本地运行后， hexo 根据 <code>.md</code> 文件生成的网站静态文件。<br><code>.deploy_git</code> 中存放的是 hexo d 后编译生成的静态文件，这些文件是要被推送到 git 仓库中的，在浏览器中访问的网页就是从这里读取到的静态文件。</li><li>源码文件</li></ul><p>.<br>├── .gitignore<br>├── _config.yml<br>├── package-lock.json<br>├── package.json<br>├── scaffolds<br>├── source<br>└── themes</p><h1 id="2-hexo-博客迁移"><a href="#2-hexo-博客迁移" class="headerlink" title="2.hexo 博客迁移"></a>2.hexo 博客迁移</h1><p>迁移的方法主要是将博客系统的源码文件推送到仓库的新分支上（这里是 hexo 分支），在其他电脑中只需要clone下来，重新搭建 hexo 环境即可。</p><p>搭建 hexo 环境的命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置git全局邮箱和用户名</span></span><br><span class="line">git config --global user.name <span class="string">&quot;yourgithubname&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;yourgithubemail&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置 ssh key</span></span><br><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;youremail&quot;</span></span><br><span class="line"><span class="comment">##生成后填到github和coding上（有coding平台的话）</span></span><br><span class="line"><span class="comment">##验证是否成功</span></span><br><span class="line">ssh -T git@github.com</span><br><span class="line">ssh -T git@git.coding.net <span class="comment">#(有coding平台的话)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 nodejs</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 hexo</span></span><br><span class="line">sudo npm install hexo-cli -g</span><br><span class="line"></span><br><span class="line"><span class="comment"># clone 仓库的 hexo 分支，并进入到克隆的文件夹中安装 npm 环境</span></span><br><span class="line"><span class="built_in">cd</span> xxx.github.io</span><br><span class="line">npm install</span><br><span class="line">npm install hexo-deployer-git --save</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成，部署</span></span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>小结：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">简单的说就是把Hexo环境push到hexo分支：</span><br><span class="line">1. 创建仓库，http://xxx.github.io；</span><br><span class="line">2. 创建两个分支：master 与 hexo；</span><br><span class="line">3. 设置hexo为默认分支（因为我们只需要手动管理这个分支上的Hexo网站文件）；</span><br><span class="line">4. 使用git <span class="built_in">clone</span> git@github.com:xxx/xxx.github.io.git拷贝仓库；</span><br><span class="line">5. 在本地文件夹下通过Git bash依次执行npm install hexo、hexo init、npm install 和 npm install hexo-deployer-git（此时当前分支应显示为hexo）</span><br><span class="line">6. 修改_config.yml中的deploy参数，分支应为master；</span><br><span class="line">7. 依次执行git add .、git commit -m <span class="string">&quot;...&quot;</span>、git push origin hexo提交网站相关的文件；</span><br><span class="line">8. 执行hexo g -d生成网站并部署到GitHub上。* </span><br></pre></td></tr></table></figure><p>【注意】nodejs 的版本应该为12.*，否则会出现一些问题。</p>]]></content>
      
      
      <categories>
          
          <category> others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> others </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>electron-基础篇</title>
      <link href="/JeckFS/2021/11/12/electron-%E5%9F%BA%E7%A1%80%E7%AF%87/"/>
      <url>/JeckFS/2021/11/12/electron-%E5%9F%BA%E7%A1%80%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<p>Electron 是基于 Chromium 来实现的。</p><img src="/JeckFS/2021/11/12/electron-%E5%9F%BA%E7%A1%80%E7%AF%87/1.png" class="" title="This is 1-th image."><p>Chromium 也是一个桌面应用，它有右键菜单、创建窗口、管理浏览器 Tab 页面以及扩展程序需等等，而处理这些事项的进程称为主进程。Renderer 称为渲染进程。<br>一个 Browser 与 多个 Renderer 以 IPC 的方式进行通信。主进程中的 RenderProcessHost 与渲染进程中的 RenderProcess 用于专门处理 IPC 事件。</p><p>RenderView ：使用 Webkit 排版展示页面。</p><p>ResourceDispatcher ： 用于处理资源请求。当页面请求资源时，通过 ResourceDispatcher 创建一个请求 ID ，然后转发到 IPC ，在 Browser 中的进程中处理返回。</p><p>多进程架构：多个 Renderer 、进程间需要多个 IPC 通信。</p><p>web 端仅仅关注 Renderer 。</p><img src="/JeckFS/2021/11/12/electron-%E5%9F%BA%E7%A1%80%E7%AF%87/2.png" class="" title="This is 2-th image."><p>与 Chromium 一样， Electron 也使用多进程架构。与 Chromium 不同的是：在各个进程中暴露了 Native API 、进入了 Nodejs。仅此在 Electron 中可以使用 Nodejs，使用 Node 管理窗口，在页面中可以使用 Node 库。</p><p>在主线程中同一个时间下，仅能运行一个时间循环，但是 Nodejs的时间循环是基于 libuv，而 Chromium 基于<br>MessageBump ，因此 Electron 的难点是如何整合事件循环。</p><p>实现有两种方式：</p><img src="/JeckFS/2021/11/12/electron-%E5%9F%BA%E7%A1%80%E7%AF%87/3.png" class="" title="This is 3-th image."><p>Electron 起了一个新的安全线程使用 Nodejs 通过 libuv 去轮询 backend_fd （事件的文件描述符），当 Node.js 有一个新的事件后，通过 PostTask 转发到 Chromium 的事件循环中，这样就实现了 Electron 的事件融合。</p><img src="/JeckFS/2021/11/12/electron-%E5%9F%BA%E7%A1%80%E7%AF%87/4.png" class="" title="This is 4-th image."><p><a href="https://www.electronjs.org/blog/electron-internals-node-integration">参考教程</a></p><p><strong>番茄钟制作</strong></p><img src="/JeckFS/2021/11/12/electron-%E5%9F%BA%E7%A1%80%E7%AF%87/5.png" class="" title="This is 5-th image."><img src="/JeckFS/2021/11/12/electron-%E5%9F%BA%E7%A1%80%E7%AF%87/6.png" class="" title="This is 6-th image."><img src="/JeckFS/2021/11/12/electron-%E5%9F%BA%E7%A1%80%E7%AF%87/7.png" class="" title="This is 7-th image."><img src="/JeckFS/2021/11/12/electron-%E5%9F%BA%E7%A1%80%E7%AF%87/8.png" class="" title="This is 8-th image."><img src="/JeckFS/2021/11/12/electron-%E5%9F%BA%E7%A1%80%E7%AF%87/9.png" class="" title="This is 9-th image."><p><code>win.loadURL(url)</code> 加载远程页面；<br><code>win.loadFile(path)</code> 加载本地文件；</p><p>代码编写：</p><p><a href="https://github.com/husa/timer.js">定时组件</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">###########################################################</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">############ 3-6-remote-control-local-mock ################</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">###########################################################</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">demo 目录下</span></span><br><span class="line">npm init -y</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">demp/app/renderer/src</span></span><br><span class="line">npx create-react-app main --use-npm</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">demo</span></span><br><span class="line">npm i electron --save-dev</span><br><span class="line">npm install electron-is-dev --save</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">demo/renderer/src/main</span></span><br><span class="line">npm i customize-cra react-app-rewired --save-dev </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">demo</span></span><br><span class="line">npm i concurrently --save-dev</span><br><span class="line">npm i wait-on --save-dev</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">demo/ 安装 robot.js robotjs (基于 C++ 写的，在不同的平台不同的node环境，需要重新编译)</span></span><br><span class="line">npm install robotjs --save</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编译 robotjs 的两种方法</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 1. demo/ 下编译 robotjs，编译方法见 PPT（需要知道 electron version 以及 node 的版本对应的 abi）</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 2. 使用 electron-rebuild （不去要知道 electron version 和 node 对应的 abi） 在 demo/ 下安装</span></span></span><br><span class="line">npm install electron-rebuild —save-dev</span><br><span class="line">npx electron-rebuild</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">demo/ 下安装 vkey (用于按键转换)  robots.js 只能在主进程中运行</span></span><br><span class="line">npm install vkey --save</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#</span></span> </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">###########################################################</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">############ 10-signal ################</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">###########################################################</span></span></span><br><span class="line"></span><br><span class="line">测试 websocket 服务： websocket.org/echo.html</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>知识点：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">React Hook</span><br></pre></td></tr></table></figure><h1 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h1><p>主线程（main.js）中的 ipcMain.handle 中的回调函数一定要返回一个结果。一般通过 Promise 配合 async 通过 resolve 方法进行返回</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Electron </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ssh通信原理及用途</title>
      <link href="/JeckFS/2021/11/07/ssh%E9%80%9A%E4%BF%A1%E5%8E%9F%E7%90%86%E5%8F%8A%E7%94%A8%E9%80%94/"/>
      <url>/JeckFS/2021/11/07/ssh%E9%80%9A%E4%BF%A1%E5%8E%9F%E7%90%86%E5%8F%8A%E7%94%A8%E9%80%94/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/f-ck-need-u/p/10482832.html">ssh通信原理及用途</a></p><p><a href="https://blog.51cto.com/moerjinrong/2300084">内网穿透</a></p><img src="/JeckFS/2021/11/07/ssh%E9%80%9A%E4%BF%A1%E5%8E%9F%E7%90%86%E5%8F%8A%E7%94%A8%E9%80%94/1.png" class="" title="This is 1-th image."><p><code>autossh -M 5000 -o &quot;ServerAliveInterval 30&quot; -CNR 6000:localhost:22 $user2@8.8.8.8</code></p><p><code>ssh $user3@localhost -p 6000</code></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>研磨设计模式-桥接模式</title>
      <link href="/JeckFS/2021/10/24/%E7%A0%94%E7%A3%A8%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/"/>
      <url>/JeckFS/2021/10/24/%E7%A0%94%E7%A3%A8%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="场景描述"><a href="#场景描述" class="headerlink" title="场景描述"></a>场景描述</h1><p>业务功能：发送提示消息。<br>消息类型：普通消息、加急消息、特急消息。<br>消息发送方式：站内消息、邮件、手机短消息</p><p>加急消息在普通消息上添加加急，另外提供监控方法以反应加急消息的处理进度。特急消息在普通消息的基础上提供催促的功能。<br>这三种消息都要支持三种消息发送方式。</p><img src="/JeckFS/2021/10/24/%E7%A0%94%E7%A3%A8%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/1.png" class="" title="This is 1-th image."><p>这种基于 <strong>继承</strong> 的方式实现在面对消息类型或者消息发送方式的扩展时，会增加大量的类：增加一个消息就要实现三种发送方式，或者说增加一种消息发送方式就要在消息中增加支持该发送方式的方法。极不利于扩展。</p><img src="/JeckFS/2021/10/24/%E7%A0%94%E7%A3%A8%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/2.png" class="" title="This is 2-th image."><p><strong>解决办法</strong><br>从上图可以看出业务逻辑的实现分为两个维度，一个是发送新消息的方式，一个是消息的类型。 <strong>不利于扩展的原因是因为消息的抽象与实现混杂在一起，一个维度的变化引起另一个维度的变化</strong>。解决办法就是将抽象部分与实现部分分开。</p><h1 id="桥接模式的结构与本质"><a href="#桥接模式的结构与本质" class="headerlink" title="桥接模式的结构与本质"></a>桥接模式的结构与本质</h1><img src="/JeckFS/2021/10/24/%E7%A0%94%E7%A3%A8%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/3.png" class="" title="This is 3-th image."><p>抽象部分需要使用实现部分提供的基本操作来完成较高层次的操作。因此在 Abstraction 需要依赖 Implementor 的实现。</p><p>对于消息发送业务，可以按照如下类图来实现。</p><img src="/JeckFS/2021/10/24/%E7%A0%94%E7%A3%A8%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/4.png" class="" title="This is 4-th image."><p>桥接模式中的桥接是 <strong>单向</strong> 的，也就是 <strong>只能是抽象部分的对象去使用具体实现部分的对象，不能反过来，也就是个单向桥。</strong></p><p>桥接的好处：使得抽象部分与实现部分可以独立变化，独立扩展。</p><p>桥接模式的调用时序图：</p><img src="/JeckFS/2021/10/24/%E7%A0%94%E7%A3%A8%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/5.png" class="" title="This is 5-th image."><h1 id="谁来桥接？抽象部分依赖的实现部分对象的实现方式"><a href="#谁来桥接？抽象部分依赖的实现部分对象的实现方式" class="headerlink" title="谁来桥接？抽象部分依赖的实现部分对象的实现方式"></a>谁来桥接？抽象部分依赖的实现部分对象的实现方式</h1><img src="/JeckFS/2021/10/24/%E7%A0%94%E7%A3%A8%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/6.png" class="" title="This is 6-th image."><h1 id="桥接模式的应用"><a href="#桥接模式的应用" class="headerlink" title="桥接模式的应用"></a>桥接模式的应用</h1><h2 id="1-JDBC-的实现"><a href="#1-JDBC-的实现" class="headerlink" title="1. JDBC 的实现"></a>1. JDBC 的实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">String sql=<span class="string">&quot;具体要执行的 sql 语句&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.装在驱动</span></span><br><span class="line">Class.forName(<span class="string">&quot;驱动的名字&quot;</span>);</span><br><span class="line"><span class="comment">// 2.创建连接</span></span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(<span class="string">&quot;连接数据库服务的 URL&quot;</span>,<span class="string">&quot;用户名&quot;</span>,<span class="string">&quot;密码&quot;</span>);</span><br><span class="line"><span class="comment">// 2.创建 statement 或者是 preparedStatement</span></span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">pstmt</span> <span class="operator">=</span> conn.preparedStatement(sql);</span><br><span class="line"><span class="comment">// 4.执行 sql ，如果是查询，在获取 ResultSet</span></span><br><span class="line"><span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> pstmt.executeQuery(sql);</span><br><span class="line"><span class="comment">// 5.循环从 ResultSet 中把值取出来，封装到数据对象中去</span></span><br><span class="line"><span class="keyword">while</span>(rs.next())&#123;</span><br><span class="line">    <span class="comment">// 取值示意，按名称取值</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">uuid</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;uuid&quot;</span>);</span><br><span class="line">    <span class="comment">// 取值示意，按索引取值</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> rs.getInt(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 6.关闭</span></span><br><span class="line">rs.close();</span><br><span class="line">pstmt.close();</span><br><span class="line">conn.close();</span><br></pre></td></tr></table></figure><p>上面是面向 JDBC 的 API 开发的，这些接口就相当于桥接模式中抽象部分的接口。通过 DriverManager 来得到这些 API 的实现（驱动程序）</p><img src="/JeckFS/2021/10/24/%E7%A0%94%E7%A3%A8%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/7.png" class="" title="This is 7-th image."><h2 id="2-三层架构的桥接实现"><a href="#2-三层架构的桥接实现" class="headerlink" title="2. 三层架构的桥接实现"></a>2. 三层架构的桥接实现</h2><img src="/JeckFS/2021/10/24/%E7%A0%94%E7%A3%A8%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/8.png" class="" title="This is 8-th image."><p>通过接口来进行调用，使得表现层和逻辑层分离开来，也就是说表现层的变化不会影响到逻辑层，同理逻辑层的变化也不会影响到表现层。这也是同一套逻辑层和数据层可以同时支持不同的表现层实现的原因。在逻辑层和数据层之间也是通过接口来调用，同样将逻辑层和数据层分离，使得他们可以独立地扩展。尤其是数据层，可能会有很多的实现方式，比如数据库实现、文件实现等，即使是数据库实现，又有针对不同数据库的实现，如 Oracle 、 DB2 等。</p><img src="/JeckFS/2021/10/24/%E7%A0%94%E7%A3%A8%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/9.png" class="" title="This is 9-th image."><p>从上图可以看出 <strong>桥接模式是可以连续组合使用的，一个桥接模式的实现部分，可以为下一个桥接模式的抽象部分。</strong></p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>研磨设计模式-组合模式</title>
      <link href="/JeckFS/2021/10/16/%E7%A0%94%E7%A3%A8%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/"/>
      <url>/JeckFS/2021/10/16/%E7%A0%94%E7%A3%A8%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="1-问题描述"><a href="#1-问题描述" class="headerlink" title="1.问题描述"></a>1.问题描述</h1><p><strong>商品类别树</strong></p><img src="/JeckFS/2021/10/16/%E7%A0%94%E7%A3%A8%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/1.png" class="" title="This is 1-th image."><p>商品类别树分为容器节点（或者组合对象，如服装、男装、女装）与叶子节点（叶子对象，如衬衣、夹克、裙子、套装）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 叶子对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Leaf</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 组合对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Composite</span>&#123;</span><br><span class="line">    <span class="comment">// 用于记录包含其他组合对象</span></span><br><span class="line">    <span class="keyword">private</span> Collection&lt;Composite&gt; childComposite = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用于记录包含的其他叶子对象</span></span><br><span class="line">    <span class="keyword">private</span> Collection&lt;Leaf&gt; childLeaf = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addComposite</span><span class="params">(Composite c)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.childComposite.add(c);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addLeaf</span><span class="params">(Leaf leaf)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.childLeaf.add(leaf);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户端调用</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span>&#123;</span><br><span class="line">        <span class="type">Composite</span> <span class="variable">root</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Composite</span>(<span class="string">&quot;服装&quot;</span>);</span><br><span class="line">        <span class="type">Composite</span> <span class="variable">c1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Composite</span>(<span class="string">&quot;男装&quot;</span>)；</span><br><span class="line">        <span class="type">Leaf</span> <span class="variable">leaf1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Leaf</span>(<span class="string">&quot;衬衣&quot;</span>);</span><br><span class="line">        <span class="type">Leaf</span> <span class="variable">leaf2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Leaf</span>(<span class="string">&quot;夹克&quot;</span>);</span><br><span class="line"></span><br><span class="line">        root.addComposite(c1);</span><br><span class="line">        c1.addLeaf(leaf1);</span><br><span class="line">        c2.addLeaf(leaf2);</span><br><span class="line"></span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在代码实现时，考虑到程序的复杂度，不应该区分组合对象与叶子对象。对于这种 <strong>具有整体与部分关系，并能组合成树形结构的对象结构</strong> 应该使用 <strong>组合模式</strong> 的方式实现。</p><h1 id="2-组合模式定义"><a href="#2-组合模式定义" class="headerlink" title="2.组合模式定义"></a>2.组合模式定义</h1><p>将对象组合成树型结构以表示“部分-整体”的层次结构。组合模式使得用户对单个对象和组合对象的使用具有一致性。</p><h1 id="3-解决方式"><a href="#3-解决方式" class="headerlink" title="3.解决方式"></a>3.解决方式</h1><p>将组合对象与叶子对象使用 <strong>抽象类（可以表示组合对象也可以表示叶子对象）</strong> 统一起来，不必区分他们之间的区别。</p><h2 id="3-1-高透明性"><a href="#3-1-高透明性" class="headerlink" title="3.1 高透明性"></a>3.1 高透明性</h2><p><strong>示意图</strong></p><img src="/JeckFS/2021/10/16/%E7%A0%94%E7%A3%A8%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/2.png" class="" title="This is 2-th image."><img src="/JeckFS/2021/10/16/%E7%A0%94%E7%A3%A8%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/3.png" class="" title="This is 3-th image."><p>所谓透明性是指客户端只需要面对 Component 而无须关系具体的组件类型。通常的实现方式是：在 Component 中声明管理子组件的操作，并在 Component 中为这些方法提供默认的实现，如果是子对象不支持的功能，默认的实现可以抛出一个异常来表示不支持这个功能。<br>但是由于子组件并不是都支持 Component 中的方法，若不以异常形式表示不支持某项功能，在调用不支持该功能的组件调用可能会出现问题，因此高透明性是以牺牲安全性为代价的。</p><img src="/JeckFS/2021/10/16/%E7%A0%94%E7%A3%A8%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/4.png" class="" title="This is 4-th image."><img src="/JeckFS/2021/10/16/%E7%A0%94%E7%A3%A8%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/5.png" class="" title="This is 5-th image."><img src="/JeckFS/2021/10/16/%E7%A0%94%E7%A3%A8%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/6.png" class="" title="This is 6-th image."><img src="/JeckFS/2021/10/16/%E7%A0%94%E7%A3%A8%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/7.png" class="" title="This is 7-th image."><img src="/JeckFS/2021/10/16/%E7%A0%94%E7%A3%A8%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/8.png" class="" title="This is 8-th image."><img src="/JeckFS/2021/10/16/%E7%A0%94%E7%A3%A8%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/9.png" class="" title="This is 9-th image."><img src="/JeckFS/2021/10/16/%E7%A0%94%E7%A3%A8%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/10.png" class="" title="This is 10-th image."><h2 id="3-2-高安全性"><a href="#3-2-高安全性" class="headerlink" title="3.2 高安全性"></a>3.2 高安全性</h2><img src="/JeckFS/2021/10/16/%E7%A0%94%E7%A3%A8%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/11.png" class="" title="This is 11-th image."><p>与高透明性不同的是 Component 不再维护 Leaf 与 Composite 中的方法，而下发到各自去实现。这样客户端在使用的时候，就必须区分到底使用的是 Component 对象还是叶子对象，对于客户而言就不是透明的了，因为客户需要清楚的直到叶子对象和组合对象的功能。</p><img src="/JeckFS/2021/10/16/%E7%A0%94%E7%A3%A8%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/12.png" class="" title="This is 12-th image."><img src="/JeckFS/2021/10/16/%E7%A0%94%E7%A3%A8%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/13.png" class="" title="This is 13-th image."><img src="/JeckFS/2021/10/16/%E7%A0%94%E7%A3%A8%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/14.png" class="" title="This is 14-th image."><p>这种方式就退化成 问题描述 中客户端使用的方式了。因此推荐使用高透明性的方式。</p><p><strong>父组件的引用</strong> 可以在 Component 中添加一个记录父组件的对象，如下所示</p><img src="/JeckFS/2021/10/16/%E7%A0%94%E7%A3%A8%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/15.png" class="" title="This is 15-th image."><img src="/JeckFS/2021/10/16/%E7%A0%94%E7%A3%A8%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/16.png" class="" title="This is 16-th image."><p><strong>应当注意循环引用的问题</strong></p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>研磨设计模式-外观模式</title>
      <link href="/JeckFS/2021/10/16/%E7%A0%94%E7%A3%A8%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/"/>
      <url>/JeckFS/2021/10/16/%E7%A0%94%E7%A3%A8%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="外观模式的定义"><a href="#外观模式的定义" class="headerlink" title="外观模式的定义"></a>外观模式的定义</h1><p>所谓 <strong>外观</strong> 指的是模块对外暴露的方法。对于存在多个模块协作向外部提供服务（服务端）的情况，外观模式封装了该服务的使用接口，客户端通过调用接口的方法完成对该服务的使用。外观模式并不给服务添加新的功能接口，而是为了外部减少与服务内多个模块的交互，松散耦合，从而让外部能更简单的使用服务。如果不通过外观类（外观接口）对服务的使用进行封装，客户端在调用时需要理清不同模块之间的依赖关系，以及调用关系，而外观模式恰恰是对服务的封装使得客户端不必花费精力理解各个模块的依赖关系。当然，客户端也可以按需直接调用其中的具体模块。在服务进行扩展时，只需要保证外观接口不变即可，内部模块随意改动。</p><img src="/JeckFS/2021/10/16/%E7%A0%94%E7%A3%A8%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/1.png" class="" title="This is 1-th image."><h1 id="外观模式的实现"><a href="#外观模式的实现" class="headerlink" title="外观模式的实现"></a>外观模式的实现</h1><p><strong>Facade 实现为 interface</strong></p><p>一个模块的接口中定义的方法可以分为两部分，一部分是给子系统外部使用的，一部分是子系统内部的模块间互相调用时使用的。有了 Facade 接口，那么对于子系统内部的接口功能就不同暴露给子系统的外部了。</p><img src="/JeckFS/2021/10/16/%E7%A0%94%E7%A3%A8%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/2.png" class="" title="This is 2-th image."><p><strong>实现为一个单例</strong></p><p>将 Facade 实现为一个单例模式的类。</p><h1 id="外观模式与中介者模式的区别"><a href="#外观模式与中介者模式的区别" class="headerlink" title="外观模式与中介者模式的区别"></a>外观模式与中介者模式的区别</h1><img src="/JeckFS/2021/10/16/%E7%A0%94%E7%A3%A8%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/3.png" class="" title="This is 3-th image.">]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker常用组合命令</title>
      <link href="/JeckFS/2021/10/13/docker%E5%B8%B8%E7%94%A8%E7%BB%84%E5%90%88%E5%91%BD%E4%BB%A4/"/>
      <url>/JeckFS/2021/10/13/docker%E5%B8%B8%E7%94%A8%E7%BB%84%E5%90%88%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除停止运行的容器</span></span><br><span class="line"></span><br><span class="line">docker ps -a  --format <span class="string">&quot;&#123;&#123;.ID&#125;&#125; &#123;&#123;.Status&#125;&#125;&quot;</span> | awk <span class="string">&#x27;&#123;if($2==&quot;Exited&quot;) print $1&#125;&#x27;</span>| xargs docker <span class="built_in">rm</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行 mysql 容器</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># docker run  --name mysql5.7.35  -e MYSQL_ROOT_PASSWORD=123 -d mysql:5.7.35 env LANG=C.UTF-8</span></span><br><span class="line">docker run  --name mysql5.7.35  -e MYSQL_ROOT_PASSWORD=123 -e LANG=zh_CN.UTF-8 -d mysql:5.7.35</span><br><span class="line"></span><br><span class="line"><span class="comment"># 登录 MySQL</span></span><br><span class="line">docker run -it --<span class="built_in">rm</span> -e LANG=zh_CN.UTF-8 mysql:5.7.35  mysql -h172.17.0.2 -u root -p --default-character-set utf8</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 换源</span></span><br><span class="line">RUN sed -i <span class="string">&#x27;1,$d&#x27;</span> /etc/apt/sources.list</span><br><span class="line">ADD sources.list /etc/apt/sources.list</span><br><span class="line"><span class="comment"># 更新源并安装 locales</span></span><br><span class="line">RUN apt-get update &amp;&amp; apt-get install -y locales</span><br><span class="line"><span class="comment"># 去除 locale.gen 的注释</span></span><br><span class="line">RUN sed -i <span class="string">&#x27;s/# zh_CN/zh_CN/g&#x27;</span> /etc/locale.gen</span><br><span class="line"><span class="comment"># 安装字体</span></span><br><span class="line">RUN locale-gen zh_CN.UTF-8 &amp;&amp; <span class="built_in">export</span> LANG=zh_CN.UTF-8</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="更换-mysql-镜像的字符集（解决-mysql-镜像不能输入中文的问题）："><a href="#更换-mysql-镜像的字符集（解决-mysql-镜像不能输入中文的问题）：" class="headerlink" title="更换 mysql 镜像的字符集（解决 mysql 镜像不能输入中文的问题）："></a>更换 mysql 镜像的字符集（解决 mysql 镜像不能输入中文的问题）：</h1><p><strong>支持 Debian</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在 Dockerfile 所在的目录下将以下内容保存为 sources.list</span></span><br><span class="line">deb http://mirrors.aliyun.com/debian/ buster main non-free contrib</span><br><span class="line">deb http://mirrors.aliyun.com/debian/ buster-updates main non-free contrib</span><br><span class="line">deb http://mirrors.aliyun.com/debian/ buster-backports main non-free contrib</span><br><span class="line">deb http://mirrors.aliyun.com/debian-security buster/updates main</span><br><span class="line"></span><br><span class="line">deb-src http://mirrors.aliyun.com/debian/ buster main non-free contrib</span><br><span class="line">deb-src http://mirrors.aliyun.com/debian/ buster-updates main non-free contrib</span><br><span class="line">deb-src http://mirrors.aliyun.com/debian/ buster-backports main non-free contrib</span><br><span class="line">deb-src http://mirrors.aliyun.com/debian-security buster/updates main</span><br></pre></td></tr></table></figure><p>cd /etc/apt &amp;&amp; echo “deb <a href="http://mirrors.aliyun.com/debian/">http://mirrors.aliyun.com/debian/</a> buster main non-free contrib” &gt;&gt; sources.list.b &amp;&amp; echo “deb <a href="http://mirrors.aliyun.com/debian/">http://mirrors.aliyun.com/debian/</a> buster-updates main non-free contrib” &gt;&gt; sources.list.b &amp;&amp; echo “deb <a href="http://mirrors.aliyun.com/debian/">http://mirrors.aliyun.com/debian/</a> buster-backports main non-free contrib” &gt;&gt; sources.list.b &amp;&amp; echo “deb <a href="http://mirrors.aliyun.com/debian-security">http://mirrors.aliyun.com/debian-security</a> buster/updates main” &gt;&gt; sources.list.b &amp;&amp; mv sources.list.b sources.list</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">FROM mysql:5.7.35</span><br><span class="line"><span class="comment"># 换源</span></span><br><span class="line">RUN sed -i <span class="string">&#x27;1,$d&#x27;</span> /etc/apt/sources.list</span><br><span class="line">ADD sources.list /etc/apt/sources.list</span><br><span class="line"><span class="comment"># 更新源并安装 locales</span></span><br><span class="line">RUN apt-get update &amp;&amp; apt-get install -y vim &amp;&amp; apt-get install -y locales</span><br><span class="line"><span class="comment"># 去除 locale.gen 的注释</span></span><br><span class="line">RUN sed -i <span class="string">&#x27;s/# zh_CN/zh_CN/g&#x27;</span> /etc/locale.gen</span><br><span class="line"><span class="comment"># 安装字体</span></span><br><span class="line">RUN locale-gen zh_CN.UTF-8 &amp;&amp; <span class="built_in">export</span> LANG=zh_CN.UTF-8</span><br></pre></td></tr></table></figure><p>docker run -p 192.168.12.101:8080:8080 \<br>    -e SPRING_DATASOURCE_URL=”jdbc:mysql://192.168.12.101:3306/ApolloConfigDB?characterEncoding=utf8” \<br>    -e SPRING_DATASOURCE_USERNAME=root -e SPRING_DATASOURCE_PASSWORD=123 \<br>    -d -v /tmp/logs:/opt/logs —name apollo-configservice apolloconfig/apollo-configservice:1.9.0</p><p>docker run -p 192.168.12.101:8090:8090 \<br>    -e SPRING_DATASOURCE_URL=”jdbc:mysql://192.168.12.101:3306/ApolloConfigDB?characterEncoding=utf8” \<br>    -e SPRING_DATASOURCE_USERNAME=root -e SPRING_DATASOURCE_PASSWORD=123 \<br>    -d -v /tmp/logs:/opt/logs —name apollo-adminservice apolloconfig/apollo-adminservice:1.9.0</p><p>docker run -p 192.168.12.101:8070:8070 \<br>    -e SPRING_DATASOURCE_URL=”jdbc:mysql://192.168.12.101:3306/ApolloPortalDB?characterEncoding=utf8” \<br>    -e SPRING_DATASOURCE_USERNAME=root -e SPRING_DATASOURCE_PASSWORD=123 \<br>    -e APOLLO_PORTAL_ENVS=dev \<br>    -e DEV_META=<a href="http://192.168.12.101:8080">http://192.168.12.101:8080</a> \<br>    -d -v /tmp/logs:/opt/logs —name apollo-portal apolloconfig/apollo-portal:1.9.0</p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单点登录</title>
      <link href="/JeckFS/2021/10/13/%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95/"/>
      <url>/JeckFS/2021/10/13/%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<p><a href="https://developer.aliyun.com/article/636281?accounttraceid=fa04d1de221641cdadec42743fbacc7esyaz">教程</a></p><p>单点登录就是一次登录验证后访问多个系统，不用每个系统都做一次登录验证。</p><p>具体方法是，使用 CAS Server 给用户提供给一个 Server Ticket (ST) ，在浏览器第一次访问某个系统时，该系统先向 CAS 校验 ST 的正确性，然后再确定是否有访问权限。</p><img src="/JeckFS/2021/10/13/%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95/1.png" class="" title="This is 1-th image.">]]></content>
      
      
      <categories>
          
          <category> 架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 架构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>esb</title>
      <link href="/JeckFS/2021/10/12/esb/"/>
      <url>/JeckFS/2021/10/12/esb/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.jianshu.com/p/10ec5b86296f">ESB（企业服务总线）相关知识点总结</a></p>]]></content>
      
      
      <categories>
          
          <category> 架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 架构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>eaip</title>
      <link href="/JeckFS/2021/10/12/eaip/"/>
      <url>/JeckFS/2021/10/12/eaip/</url>
      
        <content type="html"><![CDATA[<p>EAIP：enterprise application integration platform</p><p>用于将不同的系统集成其一起的平台。</p><img src="/JeckFS/2021/10/12/eaip/1.png" class="" title="This is 1-th image."><img src="/JeckFS/2021/10/12/eaip/2.png" class="" title="This is 2-th image."><img src="/JeckFS/2021/10/12/eaip/3.png" class="" title="This is 3-th image."><img src="/JeckFS/2021/10/12/eaip/4.png" class="" title="This is 4-th image."><img src="/JeckFS/2021/10/12/eaip/5.png" class="" title="This is 5-th image."><img src="/JeckFS/2021/10/12/eaip/6.png" class="" title="This is 6-th image."><img src="/JeckFS/2021/10/12/eaip/7.png" class="" title="This is 7-th image."><img src="/JeckFS/2021/10/12/eaip/8.png" class="" title="This is 8-th image."><img src="/JeckFS/2021/10/12/eaip/9.png" class="" title="This is 9-th image."><img src="/JeckFS/2021/10/12/eaip/10.png" class="" title="This is 10-th image."><h1 id="Spring-Integration"><a href="#Spring-Integration" class="headerlink" title="Spring Integration"></a>Spring Integration</h1><img src="/JeckFS/2021/10/12/eaip/11.png" class="" title="This is 11-th image."><img src="/JeckFS/2021/10/12/eaip/12.png" class="" title="This is 12-th image."><p>这里的 Message Endpoint 指的是 Filter</p><img src="/JeckFS/2021/10/12/eaip/13.png" class="" title="This is 13-th image."><img src="/JeckFS/2021/10/12/eaip/14.png" class="" title="This is 14-th image."><img src="/JeckFS/2021/10/12/eaip/15.png" class="" title="This is 15-th image."><img src="/JeckFS/2021/10/12/eaip/16.png" class="" title="This is 16-th image."><p>Message Endpoint 的作用：</p><img src="/JeckFS/2021/10/12/eaip/17.png" class="" title="This is 17-th image."><img src="/JeckFS/2021/10/12/eaip/18.png" class="" title="This is 18-th image."><img src="/JeckFS/2021/10/12/eaip/19.png" class="" title="This is 19-th image."><img src="/JeckFS/2021/10/12/eaip/20.png" class="" title="This is 20-th image."><img src="/JeckFS/2021/10/12/eaip/21.png" class="" title="This is 21-th image."><img src="/JeckFS/2021/10/12/eaip/22.png" class="" title="This is 22-th image."><img src="/JeckFS/2021/10/12/eaip/23.png" class="" title="This is 23-th image."><img src="/JeckFS/2021/10/12/eaip/24.png" class="" title="This is 24-th image."><img src="/JeckFS/2021/10/12/eaip/25.png" class="" title="This is 25-th image."><p>示例</p><img src="/JeckFS/2021/10/12/eaip/26.png" class="" title="This is 26-th image.">]]></content>
      
      
      <categories>
          
          <category> 架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 架构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql-mysql索引</title>
      <link href="/JeckFS/2021/10/10/mysql-mysql%E7%B4%A2%E5%BC%95/"/>
      <url>/JeckFS/2021/10/10/mysql-mysql%E7%B4%A2%E5%BC%95/</url>
      
        <content type="html"><![CDATA[<p>MySQL 语句执行流程：</p><img src="/JeckFS/2021/10/10/mysql-mysql%E7%B4%A2%E5%BC%95/1.png" class="" title="This is 1-th image."><p>索引主要是从 <strong>减少 IO 读取的数据量、减少 IO 次数</strong>两个方面进行优化。</p><p><strong>索引的数据结构选择</strong></p><img src="/JeckFS/2021/10/10/mysql-mysql%E7%B4%A2%E5%BC%95/2.png" class="" title="This is 2-th image."><p><strong>mysql 数据结构的选择</strong></p><ul><li>hash 表</li></ul><img src="/JeckFS/2021/10/10/mysql-mysql%E7%B4%A2%E5%BC%95/3.png" class="" title="This is 3-th image."><ul><li>二叉排序树</li></ul><p>当插入是有序的情况时，二叉排序树会退化为一个链表</p><ul><li>二叉平衡树</li></ul><p>插入时不满足平衡条件会调整二叉树。因此 AVL 的插入较慢，查询较快。适用于写少读多的场景</p><ul><li>红黑树</li></ul><p>放松了二叉平衡树左右子树深度差值不超过 1 的限制，只要满足左右子树深度差值不超过 2 倍即可。问题是，当节点数量较大时，树的深度也会增长，因此 IO 次数会增加。</p><p>MySQL 默认会从磁盘中读取 16KB 的数据。</p><p>创建索引时，使用 int 类型还是 varchar 类型？<br>看谁占用的字节少，每个 key 占用的字节越少，表中存储的数据就越多。</p><p>MySQL 中的 B+ 树一般为 3 至 4 层，足以支持千万级别的数据存储。</p><p><strong>索引类型</strong></p><ul><li>主键索引<br>键在主键上</li><li>唯一索引<br>键在唯一列上</li><li>普通索引（辅助索引）<br>键在其他列上</li><li>全文索引<br>一般不在数据库中建立全文索引，而是使用其他框架，如<br>lucene → solr → es</li><li>联合索引<br>键在多列上</li></ul><p><strong>回表</strong><br>当使用其他索引的时候，叶子节点并不包含整行的数据，需要去主键索引中查找的过程叫回表。</p><p><strong>覆盖索引</strong><br>当普通的 B+ 树中包含要查询的所有字段时，可以不回表，此时称之为覆盖索引。</p><p><strong>最左匹配原则</strong><br>适用于组合索引的情况（name, age 创建组合索引）</p><ul><li><code>select * from table where name=? and age=?</code> 可以使用组合索引</li><li><code>select * from table where age=?</code> 不能使用组合索引</li><li><code>select * from table where name=?</code> 可以使用组合索引</li><li><code>select * fromm table where age=? and name=?</code> 不能使用组合索引</li></ul><p><strong>索引下推</strong><br><code>select * from table where name=? and age=?</code><br>没有索引下推前，先根据 name 的值去存储引擎中取数据，然后在 server 层中做 age 的条件过滤；<br>有索引下推后，根据 name 和 age 两个列的值去存储引擎中做数据筛选，不需要在 server 层中做条件过滤了。所谓“下推”指的是原来在 server 层做的数据过滤操作下推到存储引擎中来完成。（mysql 5.7 以后才具有的特性）</p><h1 id="主从复制延迟问题"><a href="#主从复制延迟问题" class="headerlink" title="主从复制延迟问题"></a>主从复制延迟问题</h1><p><strong>什么是 mysql 主从复制</strong></p><p>三种关键日志：</p><ul><li>binlog （隶属于 mysql 服务）</li><li>undo log （隶属于 innodb）</li><li>redo log （隶属于 innodb）</li></ul><p>主从复制主要使用了 binlog 日志。</p><img src="/JeckFS/2021/10/10/mysql-mysql%E7%B4%A2%E5%BC%95/4.png" class="" title="This is 4-th image."><p>延迟出现的原因分析：</p><ul><li>master 采用顺序写入的方式写入 Binary log 中，这一点不是产生延迟的原因。</li><li>在 master 向 slave 中传输文件的过程中考虑到传输效率，一般是采用专线（单独的光纤等）而不会走公网。这一点也不是延迟的主要原因。</li><li>当 slave 接收到文件会采用顺序写入的方式写入 Relay log 中，速度也较快。</li><li>在 slave 读取 Relay log 时仍然采用顺序读取的方式，这一点不是产生延迟的原因</li><li>因此延迟主要发生在执行 SQL 的时候，当执行 <code>update table set name-zhangsan where id=1; update table set name=lisi where id=2</code> 时采用的是随机写入的方式，这是延迟的主要原因。因为 id=1 的记录与 id=2 的记录可能不存在同一个磁盘块上，因此 IO 性能急剧降低。</li></ul><p>由于 master 与 slave 的 IO 操作采用顺序读写的方式，效率很高，而重放日志的速度有很慢，因此 Relay log 会产生日志堆积的问题。</p><p>为了降低延迟在日志重放时，采用多线程方式（MTS： multi-thread slave）。由于不同的 SQL 语句可能属于一个事务，或者有一定的先后顺序，这样在并行执行的时候会存在并发执行的问题，在 mysql5.6 中并发执行的粒度为 <code>库</code>，5.7 中才执行 <code>表、行</code> 。并发粒度可以使用 <code>show variables like &#39;%parallel%&#39;</code> 进行查看。</p><p><strong>主从复制如何搭建</strong></p><p><strong>主从复制延迟问题是什么</strong></p><p><strong>主从复制延迟的产生原因是什么</strong></p><p><strong>如何解决主从复制延迟问题</strong></p><img src="/JeckFS/2021/10/10/mysql-mysql%E7%B4%A2%E5%BC%95/8.png" class="" title="This is 8-th image."><img src="/JeckFS/2021/10/10/mysql-mysql%E7%B4%A2%E5%BC%95/9.png" class="" title="This is 9-th image."><p>分发规则：</p><ul><li>更新同一行的多个事务，必须要分发到同一个 worker 中执行。</li><li><p>同一个事务的不同 SQL 语句，分发给同一个 worker 执行。<br><del>若并发粒度为“库”，则在 worker 上添加 <code>db</code> 标识；</del><br><del>若并发粒度为“表”，则在 worker 上添加 <code>库名.表明</code> 标识；</del><br><del>若并发粒度为“行”，则在 worker 上添加 <code>库名.表名+唯一值</code> 标识；</del></p><p>数据库中使用 GTID(全局事务 ID ) 实现</p></li></ul><p>  两阶段提交<br>  <a href="https://mp.weixin.qq.com/s/_LK8bdHPw9bZ9W1b3i5UZA">组提交</a><br>  双 1 操作 （双 1 设置）<br>  主从延迟判断</p><p><strong>你了解 MTS 吗</strong></p><img src="/JeckFS/2021/10/10/mysql-mysql%E7%B4%A2%E5%BC%95/5.png" class="" title="This is 5-th image."><img src="/JeckFS/2021/10/10/mysql-mysql%E7%B4%A2%E5%BC%95/6.png" class="" title="This is 6-th image."><p>大事务尽量避免，主要解决 4，6</p><img src="/JeckFS/2021/10/10/mysql-mysql%E7%B4%A2%E5%BC%95/7.png" class="" title="This is 7-th image."><h1 id="读写分离"><a href="#读写分离" class="headerlink" title="读写分离"></a>读写分离</h1><h1 id="分库分表"><a href="#分库分表" class="headerlink" title="分库分表"></a>分库分表</h1>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>go-包管理</title>
      <link href="/JeckFS/2021/10/08/go-%E5%8C%85%E7%AE%A1%E7%90%86/"/>
      <url>/JeckFS/2021/10/08/go-%E5%8C%85%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p><strong>多个文件中使用同一个包，在 entry.go 中引用 version.go 中的 version 变量。在 go run 时，需要将两个文件都带着。</strong></p><p>【注意】即使 version.go 中的 version 变量没有首字母大写，但在 entry.go 中仍然可以访问到是因为 entry.go 中的 version 变量和 entry.go 同属于一个<strong>包的</strong> Scope 下。</p><img src="/JeckFS/2021/10/08/go-%E5%8C%85%E7%AE%A1%E7%90%86/1.png" class="" title="This is 1-th image."><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 运行</span></span><br><span class="line"><span class="keyword">go</span> run src/app/version.<span class="keyword">go</span> src/app/entry.<span class="keyword">go</span></span><br></pre></td></tr></table></figure><p><strong>不同包之间的方法调用</strong></p><p>main.go 是项目入口地址，其中引用了 calculator 包下的 Add 和 Sub 方法。</p><img src="/JeckFS/2021/10/08/go-%E5%8C%85%E7%AE%A1%E7%90%86/2.png" class="" title="This is 2-th image."><hr><p><a href="https://learnku.com/go/t/27649">参考教程</a></p><p>在包的 Scope 下声明的变量没有依赖问题，在方法中声明变量时，其依赖的变量要在之前被提前声明才可以。</p><hr><p><strong>包的别名</strong><br>场景：greet 包下又出现 greet 包的情况，在导入到其他包时，父包与子包不同同时导入，除非给（父<code>/</code>子）包其别名。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">./</span><br><span class="line">├── greet</span><br><span class="line">│   ├── greet</span><br><span class="line">│   │   └── child.go</span><br><span class="line">│   └── parent.go</span><br><span class="line">└── main</span><br><span class="line">    └── main.go</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// parent.go</span></span><br><span class="line"><span class="keyword">package</span> greet</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Message = <span class="string">&quot;Hey there. I am parent.&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;greet/parent.go ==&gt; init()&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// child.go</span></span><br><span class="line"><span class="keyword">package</span> greet</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Message = <span class="string">&quot;Hey there. I am child.&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;greet/greet/child.go ==&gt; init()&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// main.go</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="comment">// 当父包子包出现同名时，需要给包起别名以避免冲突</span></span><br><span class="line">parent <span class="string">&quot;c1/greet&quot;</span></span><br><span class="line">child <span class="string">&quot;c1/greet/greet&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;main/main.go ==&gt; init()&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(child.Message)</span><br><span class="line">fmt.Println(parent.Message)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>k8s权威指南</title>
      <link href="/JeckFS/2021/09/28/k8s%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97/"/>
      <url>/JeckFS/2021/09/28/k8s%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<h1 id="Pod"><a href="#Pod" class="headerlink" title="Pod"></a>Pod</h1><h2 id="9-10-自定义调度器"><a href="#9-10-自定义调度器" class="headerlink" title="9.10. 自定义调度器"></a>9.10. 自定义调度器</h2><p>自定义调度器的具体调度策略可以通过任意语言来实现（调度器），比如 shell ， Go 等。当调度器定义完毕后，可以通过 Pod 的 yml 文件中指定 <code>spec.schedulerName: 调度器名</code> 来引用。</p><p>【注意】调度器不存在的话， Pod 会一直处于 Pending 状态。</p><h2 id="9-11-Pod-容灾调度"><a href="#9-11-Pod-容灾调度" class="headerlink" title="9.11. Pod 容灾调度"></a>9.11. Pod 容灾调度</h2><p>实现同一种 Pod 在不同区域（城市）进行部署的方式。该机制会保证每个区域中分布多少个 Pod 。具体是通过 <code>topologySpreadConstraints.maxSkew</code> 字段来实现。 maxSkew 字段指定了各个 Zone 上调度时能够容忍的最大不均衡数，该字段值越大表明越不均衡，越小就越均衡。</p><img src="/JeckFS/2021/09/28/k8s%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97/1.png" class="" title="This is 1-th image."><p>对于上述情况， Zone A 与 Zone B 已经存在一个 Pod， Zone C 中没有，假设 maxSkew 字段的值为 0 ，当有第三个 Pod 来时，会计算 Zone A 的 skew 值为 1 ， Zone B 为1 ， Zone C 为 0 ，因此此时 maxSkew 的值为 1-0=1 ，为了达到 maxSkew 为 0 的情况，需要将第三个 Pod 调度到 Zone C 中。</p><p>容灾的实现方式就是使用 Pod 的亲和性调度将需要部署在一起的 Pod 进行捆绑，然后选择其中一个 Pod ，加持 Even Pod Spreading 调度规则。最终效果如下。</p><img src="/JeckFS/2021/09/28/k8s%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97/2.png" class="" title="This is 2-th image."><h1 id="10-Init-Container-（初始化容器）"><a href="#10-Init-Container-（初始化容器）" class="headerlink" title="10 Init Container （初始化容器）"></a>10 Init Container （初始化容器）</h1><p>容器启动前所有的初始化操作都可以通过 init Container 来实现。 </p><p>初始化容器也是一种容器，不同之处在于：</p><ul><li>初始化容器必须先于应用容器之前运行，在其结束完了之后，应用容器才启动运行。</li><li>init container 中资源限制的直射与应用容器略有不同。<ul><li>多个 init container 都定义了资源请求<code>/</code>资源限制，则取最大值作为所有 init container 的资源请求值<code>/</code>资源限制值。</li><li>pod 的有效资源请求值<code>/</code>资源限制值取以下两者中的较大值：<ul><li>所有应用容器的资源请求值<code>/</code>资源限制值之和</li><li>init container 的有效资源请求值<code>/</code>资源限制值</li></ul></li><li>……</li></ul></li><li>init container 不能设置 readinessProbe</li></ul><h1 id="11-Pod-的升级与回滚"><a href="#11-Pod-的升级与回滚" class="headerlink" title="11 Pod 的升级与回滚"></a>11 Pod 的升级与回滚</h1><h2 id="11-1-Deployment-的升级"><a href="#11-1-Deployment-的升级" class="headerlink" title="11.1 Deployment 的升级"></a>11.1 Deployment 的升级</h2><p>将 Pod 中的 Nginx:1.7.9 镜像升级为 Nginx:1.8：</p><ul><li>方式一<br><code>kubectl set image deployment/nginx-deployment nginx=nginx:1.8</code></li><li>方式二：通过 kubectl edit 命令升级镜像为 Nginx:1.8<br><code>kubectl edit deployment/nginx-deployment</code></li></ul><p>这两种方式都会导致镜像自动更新。</p><p>通过 kubectl rollout status 可以查看更新过程：</p><p><code>kubectl rollout status deployment/nginx-deployment</code></p><p>Deployment 中指定 Pod 的更新策略：</p><ul><li><code>spec.strategy.type=Recreate</code>： Pod 更新时，先“杀掉”所有正在运行的 Pod ， 然后穿件新的 Pod</li><li><code>spec.strategy.type=RollingUpdate</code>： 滚动更新<ul><li><code>maxUnavailable</code>： 用于指定 Deployment 在跟新过程中不可用状态的 Pod 的数量上限。可设为整数值也可设为百分比。当设为 30% 时，基本更新过程为：滚动更新开始时立即将副本数量缩小至所需副本数量的 70% ，一旦新的 Pod 创建并准备好，旧的 ReplicaSet 就进一步缩容，新的 Replicaset 又继续扩容。整个过程中系统在任意时刻都可以确保可用状态的 Pod 总数量至少占 Pod 期望副本总数量的 70%</li><li><code>maxSurge</code>：用于指定在 Deployment 更新 Pod 的过程中 Pod 总数量超过 Pod 期望副本数量的最大值。可为整数或百分比。当 maxSurge 为 30% 时更新过程中会确保新旧 ReplicaSet 的 Pod 副本数量之和不超过期望副本数量的 130% 。</li></ul></li></ul><p>【注意】</p><ul><li>多重更新：上一次更新没完，又发起更新时， Deployment 会为每一次更新都创建一个 RepicaSet ，而新的 ReplicaSet 创建成功后，会逐个增加 Pod 的副本数量，同时之前的 ReplicaSet 停止扩容（更新），并将其加入旧版本的 ReplicaSet 列表中，然后开始缩容至 0 的操作。</li><li>最好不要添加、更新、删除 Deployment 标签选择器</li></ul><h2 id="11-2-Deployment-的回滚"><a href="#11-2-Deployment-的回滚" class="headerlink" title="11.2 Deployment 的回滚"></a>11.2 Deployment 的回滚</h2><p>查看 Deployment 部署的历史记录：<br><code>kubectl rollout history deployment/nginx-deployment</code></p><p><code>kubectl rollout history deployment/nginx-deployment --revision=3</code> 查看版本为 3 的更新记录的详细信息。</p><p><code>kubectl rollout undo deployment/nginx-deployment --to-revision=3</code> 回退到指定版本号。</p><p><code>kubectl describe deployment/nginx-deployment</code> 查看回滚到版本 3 的操作过程</p><img src="/JeckFS/2021/09/28/k8s%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97/3.png" class="" title="This is 3-th image."><h2 id="11-3-暂定和恢复-Deployment-的部署操作"><a href="#11-3-暂定和恢复-Deployment-的部署操作" class="headerlink" title="11.3 暂定和恢复 Deployment 的部署操作"></a>11.3 暂定和恢复 Deployment 的部署操作</h2><p>使用命令行这种配置方式，容易每次命令执行完成后，就会引发 Deployment 的更新操作。为了避免频繁的 Deployment 更新，可以通过 <code>kubectl rollout pause deployment/nginx-deployment</code> 暂停 Deployment 的更新操作。在所有配置通过命令设置完成后，再通过 <code>kubectl rollout resume deploy nginx-deployment</code> 恢复更新即可。</p><blockquote><p><code>kubectl set resource deployment nginx-deployment -c=ngin --limits=cpu=200m,memory=512Mi</code> 更新 resources 配置</p></blockquote><h2 id="11-4-其他管理对象的更新策略"><a href="#11-4-其他管理对象的更新策略" class="headerlink" title="11.4 其他管理对象的更新策略"></a>11.4 其他管理对象的更新策略</h2><h3 id="11-4-1-DaemonSet-的更新策略"><a href="#11-4-1-DaemonSet-的更新策略" class="headerlink" title="11.4.1 DaemonSet 的更新策略"></a>11.4.1 DaemonSet 的更新策略</h3><ul><li>OnDelete ： DaemonSet 的默认升级策略。在创建好新的 DaemonSet 配置后，新的 Pod 不会自动创建，而是要用户手动删除旧版本的 Pod ，才触发新建操作。</li><li>RollingUpdate ：旧版本的 Pod 会被杀掉，然后自动创建新版本的 DaemonSet Pod 。与 Deployment 不同的是，一是不支持查看和管理 DaemonSet 的更新历史记录；二是 DaemonSet 的回滚并不能同 Deployment 一样直接通过 kubectl rollback 来实现，必须通过再次太计较旧版本配置的方式实现。使用 RollingUpdate 的方式升级时，需要指定 <code>spec.updateStrategy.type=RollingUpdate</code></li></ul><h3 id="11-4-2-StatefulSet-的更新策略"><a href="#11-4-2-StatefulSet-的更新策略" class="headerlink" title="11.4.2 StatefulSet 的更新策略"></a>11.4.2 StatefulSet 的更新策略</h3><ul><li>RollingUpdate ：按照 StatefuSet 终止 Pod 的顺序一致，即从序号最大的 Pod 开始重建，每次更新一个 Pod。注意，当 StatefulSet 的 Pod Management Policy 被设置为 OrderedReady 时，则可能在更新过程中出现问题</li><li>OnDelete ：需要用户手动删除 Pod 来触发 StatefulSet Controller 来创建实例（手动升级模式）</li><li>Partitioned ：用户指定一个序号，StatefulSet 中序号大于等于此序号的 Pod 实例会全部被升级，小于此序号的 Pod 则保留旧版本不变，即使 Pod 被删除、重建。这种策略常用于按计划分步骤的系统升级过程中。</li></ul><h1 id="12-Pod-的扩缩容"><a href="#12-Pod-的扩缩容" class="headerlink" title="12 Pod 的扩缩容"></a>12 Pod 的扩缩容</h1><h2 id="12-1-手动扩缩容机制"><a href="#12-1-手动扩缩容机制" class="headerlink" title="12.1 手动扩缩容机制"></a>12.1 手动扩缩容机制</h2><p><code>kubectl scale deployment nginx-deployment --replicas 5</code> 将副本数量变更为 5 个。</p><h2 id="12-2-自动扩缩容机制"><a href="#12-2-自动扩缩容机制" class="headerlink" title="12.2 自动扩缩容机制"></a>12.2 自动扩缩容机制</h2><blockquote><p>k8s 使用 Metrics Server 采集 Pod 性能指标数据，然后将数据通过聚合 API 如 metrics.k8s.io 、 custom.metrics.k8s.io 和 external.metrics.k8s.io 提供给 HPA 控制器进行查询。 HPA 控制器基于 Master 的 kube-controller-manager 服务启动参数 <code>--horizontal-pod-autoscaler-sync-period</code> 定义的探测周期（默认 15s ），周期性探测目标 Pod 的资源性能指标，并与 HPA 资源对象中的扩缩容条件进行对比，在满足条件时通过控制 RC<code>/</code>Deployment 对  Pod  进行 scale 操作。</p></blockquote><p>可检测的指标有：</p><ul><li>Pod 资源使用率： Pod 级别指标，通常为一个比率值，如 CPU 使用率</li><li>Pod 自定义指标： Pod 级别指标，通常为一个数值，如接收的请求数量。</li><li>Object 自定义指标或外部自定义指标：通常为一个数值，需要容器应用以某种方式提供，如通过 HTTP URL <code>/metrics</code> 提供，或者使用外部服务提供的指标采集 URL 。</li></ul><p>HPA 版本：</p><ul><li><code>autoscaling/v1</code> ：仅支持基于 CPU 使用率指标的自动扩缩容。</li><li><code>autoscaling/v2</code> ：支持基于内存使用率、自定以指标、外部指标的自动扩缩容。支持多指标缩放，对于多个指标， HPA 仅采用缩放幅度最大的指标。</li></ul><p><strong>扩缩容算法详解</strong></p><p><code>期望副本数量=ceil(当前副本数量 * (当前指标值 / 期望指标值))</code></p><blockquote><p>ceil ：向上取整</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>apollo不同主机同时搭建DEV,UAT,PRO环境</title>
      <link href="/JeckFS/2021/09/20/apollo%E4%B8%8D%E5%90%8C%E4%B8%BB%E6%9C%BA%E5%90%8C%E6%97%B6%E6%90%AD%E5%BB%BADEV-UAT-PRO%E7%8E%AF%E5%A2%83/"/>
      <url>/JeckFS/2021/09/20/apollo%E4%B8%8D%E5%90%8C%E4%B8%BB%E6%9C%BA%E5%90%8C%E6%97%B6%E6%90%AD%E5%BB%BADEV-UAT-PRO%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 微服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu终端美化</title>
      <link href="/JeckFS/2021/09/19/ubuntu%E7%BB%88%E7%AB%AF%E7%BE%8E%E5%8C%96/"/>
      <url>/JeckFS/2021/09/19/ubuntu%E7%BB%88%E7%AB%AF%E7%BE%8E%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h1 id="终端美化之-powerlevel10k"><a href="#终端美化之-powerlevel10k" class="headerlink" title="终端美化之 powerlevel10k"></a>终端美化之 powerlevel10k</h1><p><strong>最终效果：</strong></p><img src="/JeckFS/2021/09/19/ubuntu%E7%BB%88%E7%AB%AF%E7%BE%8E%E5%8C%96/1.png" class="" title="This is 1-th image."><p><strong>安装教程</strong></p><p><a href="https://github.com/romkatv/powerlevel10k">github下载powerlevel10k</a></p><blockquote><p>安装 powerlevel10k 需要安装 MesloLGS NF 字体。<br><a href="https://aur.archlinux.org/packages/ttf-meslo-nerd-font-powerlevel10k/">字体下载</a></p></blockquote><h1 id="ohmyzsh-插件"><a href="#ohmyzsh-插件" class="headerlink" title="ohmyzsh 插件"></a>ohmyzsh 插件</h1><p><strong>zsh-syntax-highlighting 语法高亮插件</strong></p><p><a href="https://github.com/zsh-users/zsh-syntax-highlighting">github 搜索 zsh-syntax-highlighting 并下载安装</a></p><p><strong>zsh-autosuggestions 自动补全插件</strong></p><p><a href="https://github.com/zsh-users/zsh-autosuggestions">github 搜索 zsh-autosuggestions 并下载安装</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>APM-skywalking-书籍目录笔记</title>
      <link href="/JeckFS/2021/09/15/APM-skywalking-%E4%B9%A6%E7%B1%8D%E7%9B%AE%E5%BD%95%E7%AC%94%E8%AE%B0/"/>
      <url>/JeckFS/2021/09/15/APM-skywalking-%E4%B9%A6%E7%B1%8D%E7%9B%AE%E5%BD%95%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/weixin_39975683/article/details/111581308">skywalking原理_40张图剖析分布式追踪系统原理及实践</a></p><h1 id="第1章-全面认识-skywalking"><a href="#第1章-全面认识-skywalking" class="headerlink" title="第1章 全面认识 skywalking"></a>第1章 全面认识 skywalking</h1><p><strong>什么是 Skywalking</strong><br>Skywalking 是针对于分布式系统的应用性能监控（Application Performance Monitor， APM）和可观测性分析平台（Observability Analysis Platform, OAP）。提供了 <strong>多维度应用性能分析手段，从分布式拓扑图到应用性能指标、Trace、日志的关联分析与告警</strong>。</p><h1 id="第2章-Skywalking安装与配置"><a href="#第2章-Skywalking安装与配置" class="headerlink" title="第2章 Skywalking安装与配置"></a>第2章 Skywalking安装与配置</h1><h2 id="2-1-项目编译与工程结构"><a href="#2-1-项目编译与工程结构" class="headerlink" title="2.1 项目编译与工程结构"></a>2.1 项目编译与工程结构</h2><p><strong>项目的编译</strong></p><ul><li>从 GitHub 构建</li><li>从源代码发行构建</li><li>高级编译（仅编译指定模块）</li><li>构建 Docker 镜像</li></ul><p><strong>工程结构</strong><br>skywalking 是一个 maven 项目，由多个子 module 组成。具体如下：</p><ul><li>spm-sniffer ： JavaAgent 实现部分<ul><li>apm-agent ： JavaAgent 的入口</li><li>apm-agent-core ： JavaAgent 的核心处理逻辑，如自动埋点、收集数据等功能</li><li>apm-sdk-plugin ： 稳定的第三方插件</li><li>apm-toolkit-activation ： skywalking 支持的自己的扩展插件</li><li>apm-test-tools ： 测试工具插件</li><li>bootstrap-plugins ： JDK 插件</li><li>optional-plugins ： 可选的第三方插件</li></ul></li><li>apm-application-toolkit ： 日志相关<ul><li>apm-toolkit-log4j-1.x</li><li>apm-toolkit-log4j-2.x</li><li>apm-toolkit-logback-1.x</li><li>apm-toolkit-opentracing</li><li>apm-toolkit-trace</li></ul></li><li>opa-server ： 后端服务组件介绍<ul><li>server-core ： 核心处理逻辑</li><li>server-receiver-plugin ： 后端支持的收集数据的方式，如从 JavaAgent 中获取参数，从 Envoy 中获取 metries 参数等</li><li>server-cluster-plugin ： </li><li>server-storage-plugin</li><li>server-library</li><li>server-starter</li><li>server-query-plugin</li><li>server-alarm-plugin</li><li>server-testing</li><li>oal-rt</li><li>server-telemetry</li><li>exporter</li><li>server-configuration</li></ul></li><li>apm-webapp</li><li>apm-dist</li></ul><h2 id="2-2-JavaAgent-安装"><a href="#2-2-JavaAgent-安装" class="headerlink" title="2.2 JavaAgent 安装"></a>2.2 JavaAgent 安装</h2><ul><li>Agent 目录结构</li><li>Agent 的相关配置</li><li>Skywalking 支持的插件，及可选插件的使用方式</li><li>高级用法<ul><li>配置覆盖</li><li>自定义配置文件</li><li>客户端采样</li><li>TLS</li><li>命名空间</li><li>Application Toolkit API 与 OpenTracing API （ traceID 的相关操作，如将 traceID 输出到日志中的相关配置，跨进程传递， Trace 上下文补充等）</li></ul></li></ul><h2 id="2-3-后端与-UI-部署"><a href="#2-3-后端与-UI-部署" class="headerlink" title="2.3 后端与 UI 部署"></a>2.3 后端与 UI 部署</h2><ul><li>skywalking 后端工程目录结构</li><li>application.yml 详解<ul><li>核心模块 core</li><li>集群模块 cluster ： oap 后端的集群部署相关配置</li><li>存储模块 storage</li><li>查询模块 query</li><li>报警模块 alarm</li><li>数据接收模块 receivers ： 探针与集群的通信</li><li>Telemetry 监控数据模块</li><li>动态配置模块</li><li>Metric Exporter 模块</li></ul></li><li>skywalking 在 k8s 中部署</li><li>skywalking 的后端存储，以及数据过期设置（skywalking 存储数据的类型）</li><li>为应对大量数据上报带来的压力， skywalking 后端配置采样率</li><li>告警规则设置、 webhooks</li><li>为了对客户端上报的数据进行二次分析与开发，需要使用 exporter(Metrics Exporter) 相关配置进行二次转发。</li><li>UI 部署（UI 查询的实现原理）</li></ul><h1 id="第4章-轻量级队列内核"><a href="#第4章-轻量级队列内核" class="headerlink" title="第4章 轻量级队列内核"></a>第4章 轻量级队列内核</h1><h2 id="4-1-轻量级队列内核"><a href="#4-1-轻量级队列内核" class="headerlink" title="4.1 轻量级队列内核"></a>4.1 轻量级队列内核</h2><ul><li>数据结构<ul><li><code>Buffer</code> ： 数据的实际存放地<ul><li><code>Object[] buffer</code> ： 用于存储数据的队列。长度固定，</li><li><code>AtomicRangeInteger index</code> ： 一个原子循环索引，与 buffer 数组一起实现一个循环队列、</li><li><code>BufferStrategy strategy</code> ：队列策略。当数据生产者向 Buffer 的某个索引中存储数据时，发现该索引还存有旧数据没有消费完时的解决策略。</li><li><code>List&lt;QuueueBlockingCallback&lt;T&gt;&gt; callbacks</code> ： 数据阻塞时的回调函数。该回调仅在 BufferStrategy.BLOCKING 策略下起作用。</li></ul></li><li><code>Channel</code> ： 管理 Buffer 的再低<ul><li><code>Buffer&lt;T&gt;[] bufferChannels</code> ： 一个 Buffer 数组</li><li><code>IDataPartitioner&lt;T&gt; dataPartitioner</code> ： 当数据写入 Channel 时，dataPartitioner 决定将数据存储在哪个 Buffer 中，以及存储数据失败时的重试次数。</li><li><code>long size</code> ： Channel 能够容纳数据的大小，值为 Channel 中 Buffer 的数量乘以内部 Buffer 数组的长度。</li></ul></li><li><code>DataCarrier</code> ： 队列内核与其他模块交互的媒介，其在初始化时需要 CHANNEL_SIZE （当前 Channel 中有多少个 Buffer 队列）, BUFFER_SIZE （每个 Buffer 队列的大小）两个参数。</li></ul></li><li>生产消息<ul><li>数据分发 <code>IDataPartitioner</code> ： 默认实现为从第一个 Buffer 到最有一个 Buffer 无限循环选择。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IDataPartitioner</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">partition</span><span class="params">(<span class="type">int</span> total, T data)</span>; <span class="comment">// 决定当前数据应存储在哪个 Buffer 中，total 为 Buffer 队列的个数，data 为生产的数据，返回值为具体 Buffer 的索引值。</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">maxRetryCount</span><span class="params">()</span>; <span class="comment">// 重试次数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>数据的存储策略<ul><li>BLOCKING ： 循环阻塞，等待当前 Buffer 队列中的 index 空间为空，阻塞过程中会回调 Buffer 的回调方法。</li><li>OVERRIDE ： 新数据覆盖旧数据</li><li>IF_POSSIBLE ： 从当前 index 起往后找 n 位，若空余则存下来，否则丢弃掉。重试次数通过 IDataPartitioner 的 maxRetryCount 控制。</li></ul></li></ul></li><li>消费消息<ul><li>队列为无锁队列却能保证线程安全的原因：每个 buffer 仅分配给指定的线程，从此以后该 buffer 不再被其他线程访问。<ul><li>Buffer 队列的数量 ≥ 消费者线程数量：每个消费线程按照顺序绑定一个或者多个 Buffer 队列。</li><li>Buffer 队列的数量 ＜ 消费者线程数量：此时一个 Buffer 队列可能对应多个消费者线程，解决线程安全的方式是将 Buffer 队列按照消费者线程数量等比划分，每个消费者线程对应一个划分后的空间。</li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 微服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>skywalking-其他主机接入skywalking日志</title>
      <link href="/JeckFS/2021/09/14/skywalking-%E5%85%B6%E4%BB%96%E4%B8%BB%E6%9C%BA%E6%8E%A5%E5%85%A5skywalking%E6%97%A5%E5%BF%97/"/>
      <url>/JeckFS/2021/09/14/skywalking-%E5%85%B6%E4%BB%96%E4%B8%BB%E6%9C%BA%E6%8E%A5%E5%85%A5skywalking%E6%97%A5%E5%BF%97/</url>
      
        <content type="html"><![CDATA[<h1 id="1-添加-logback-xml-日志配置文件"><a href="#1-添加-logback-xml-日志配置文件" class="headerlink" title="1.添加 logback.xml 日志配置文件"></a>1.添加 logback.xml 日志配置文件</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">scan</span>=<span class="string">&quot;true&quot;</span> <span class="attr">debug</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;consoleAppender&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$d&#123;HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;36&#125;:%L- %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span> <span class="attr">class</span>=<span class="string">&quot;java.nio.charset.Charset&quot;</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;grpc-log&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.skywalking.apm.toolkit.log.logback.v1.x.log.GRPCLogClientAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.encoder.LayoutWrappingEncoder&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">layout</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.skywalking.apm.toolkit.log.logback.v1.x.mdc.TraceIdMDCPatternLogbackLayout&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">Pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%X&#123;tid&#125;] [%thread] %-5level %logger&#123;36&#125; -%msg%n<span class="tag">&lt;/<span class="name">Pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;grpc-log&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;consoleAppender&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里面必须 GRPCLogClientAppender 的配置。</p><h1 id="2-添加-apm-toolkit-logback-1-x-依赖"><a href="#2-添加-apm-toolkit-logback-1-x-依赖" class="headerlink" title="2.添加 apm-toolkit-logback-1.x 依赖"></a>2.添加 apm-toolkit-logback-1.x 依赖</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.skywalking<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>apm-toolkit-logback-1.x<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;skywalking.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="3-在-skwalking-agent-中配置-gRPC-reporter-☆☆☆☆☆"><a href="#3-在-skwalking-agent-中配置-gRPC-reporter-☆☆☆☆☆" class="headerlink" title="3.在 skwalking-agent 中配置 gRPC reporter ☆☆☆☆☆"></a>3.在 skwalking-agent 中配置 gRPC reporter ☆☆☆☆☆</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">plugin.toolkit.log.grpc.reporter.server_host=$&#123;SW_GRPC_LOG_SERVER_HOST:127.0.0.1&#125;</span><br><span class="line">plugin.toolkit.log.grpc.reporter.server_port=$&#123;SW_GRPC_LOG_SERVER_PORT:11800&#125;</span><br><span class="line">plugin.toolkit.log.grpc.reporter.max_message_size=$&#123;SW_GRPC_LOG_MAX_MESSAGE_SIZE:10485760&#125;</span><br><span class="line">plugin.toolkit.log.grpc.reporter.upstream_timeout=$&#123;SW_GRPC_LOG_GRPC_UPSTREAM_TIMEOUT:30&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 微服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>防火墙</title>
      <link href="/JeckFS/2021/09/07/%E9%98%B2%E7%81%AB%E5%A2%99/"/>
      <url>/JeckFS/2021/09/07/%E9%98%B2%E7%81%AB%E5%A2%99/</url>
      
        <content type="html"><![CDATA[<h1 id="ubuntu"><a href="#ubuntu" class="headerlink" title="ubuntu"></a>ubuntu</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看防火墙状态</span></span><br><span class="line">ufw status</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">关闭防火墙</span></span><br><span class="line">ufw disable</span><br></pre></td></tr></table></figure><h1 id="centos7"><a href="#centos7" class="headerlink" title="centos7"></a>centos7</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看防火墙</span></span><br><span class="line">firewall-cmd --state</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">临时关闭防火墙</span></span><br><span class="line">systemctl stop firewalld.service</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">永久关闭防火墙</span></span><br><span class="line">systemctl diabled firewalld</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>APM-skywalking</title>
      <link href="/JeckFS/2021/09/04/APM-skywalking/"/>
      <url>/JeckFS/2021/09/04/APM-skywalking/</url>
      
        <content type="html"><![CDATA[<h1 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1 介绍"></a>1 介绍</h1><p><strong>主要解决问题</strong>：</p><ul><li>在微服务调用中，不同模块系统复杂的调用关系会带来某模块调用失败时难以定位故障点的问题。</li><li>性能分析：在系统中某个子系统出现性能降低，有可能是其下游系统出现问题，在这种复杂的调用关系中，如何定位性能降低的原因。</li><li>链路梳理：需求迭代快，系统之间调用关系变化频繁，靠人工难以梳理清楚系统拓扑链路（系统之间的调用关系）。</li></ul><p><strong>分布式链路追踪</strong>的思想源自 Google 的一篇论文( Dapper )，各个公司参照该论文实现了自己的分布式链路追踪系统。为了解决不同分布式链路追踪系统的更换或添加需要适配的问题， OpenTracing 通过提供与平台无关、厂商无关的 API ，解决了这个问题。</p><p><strong>skywalking 架构图</strong></p><img src="/JeckFS/2021/09/04/APM-skywalking/1.png" class="" title="This is 1-th image."><img src="/JeckFS/2021/09/04/APM-skywalking/2.png" class="" title="This is 2-th image."><img src="/JeckFS/2021/09/04/APM-skywalking/3.png" class="" title="This is 3-th image."><img src="/JeckFS/2021/09/04/APM-skywalking/4.png" class="" title="This is 4-th image."><img src="/JeckFS/2021/09/04/APM-skywalking/5.png" class="" title="This is 5-th image."><img src="/JeckFS/2021/09/04/APM-skywalking/6.png" class="" title="This is 6-th image."><img src="/JeckFS/2021/09/04/APM-skywalking/7.png" class="" title="This is 7-th image."><img src="/JeckFS/2021/09/04/APM-skywalking/8.png" class="" title="This is 8-th image."><img src="/JeckFS/2021/09/04/APM-skywalking/9.png" class="" title="This is 9-th image."><img src="/JeckFS/2021/09/04/APM-skywalking/10.png" class="" title="This is 10-th image."><img src="/JeckFS/2021/09/04/APM-skywalking/11.png" class="" title="This is 11-th image."><img src="/JeckFS/2021/09/04/APM-skywalking/12.png" class="" title="This is 12-th image."><p>Skywalking 默认使用 H2 作为数据源，将其注释掉改为 Elasticsearch。</p><p><code>startup.sh</code>启动后端服务与 UI 界面。</p><img src="/JeckFS/2021/09/04/APM-skywalking/13.png" class="" title="This is 13-th image."><img src="/JeckFS/2021/09/04/APM-skywalking/14.png" class="" title="This is 14-th image."><img src="/JeckFS/2021/09/04/APM-skywalking/15.png" class="" title="This is 15-th image."><img src="/JeckFS/2021/09/04/APM-skywalking/16.png" class="" title="This is 16-th image."><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./shutdown.sh</span><br><span class="line">./startup.sh</span><br></pre></td></tr></table></figure><img src="/JeckFS/2021/09/04/APM-skywalking/17.png" class="" title="This is 17-th image."><img src="/JeckFS/2021/09/04/APM-skywalking/18.png" class="" title="This is 18-th image."><img src="/JeckFS/2021/09/04/APM-skywalking/19.png" class="" title="This is 19-th image."><p>执行 bin 目录下的 startup.sh 文件启动 tomcat ，然后访问地址。</p><img src="/JeckFS/2021/09/04/APM-skywalking/20.png" class="" title="This is 20-th image."><img src="/JeckFS/2021/09/04/APM-skywalking/21.png" class="" title="This is 21-th image."><p>上传 springboot 的 jar 包。</p><img src="/JeckFS/2021/09/04/APM-skywalking/22.png" class="" title="This is 22-th image."><img src="/JeckFS/2021/09/04/APM-skywalking/23.png" class="" title="This is 23-th image."><img src="/JeckFS/2021/09/04/APM-skywalking/24.png" class="" title="This is 24-th image."><img src="/JeckFS/2021/09/04/APM-skywalking/25.png" class="" title="This is 25-th image."><img src="/JeckFS/2021/09/04/APM-skywalking/26.png" class="" title="This is 26-th image."><p>执行创建表语句：</p><img src="/JeckFS/2021/09/04/APM-skywalking/27.png" class="" title="This is 27-th image."><p>编写使用数据库的源码客户端。<br>在运行该客户端时，应该将 bin 下的 agent 拷贝一份。</p><img src="/JeckFS/2021/09/04/APM-skywalking/28.png" class="" title="This is 28-th image."><p>使用浏览器访问接口进行测试。</p><p>通过 Skywalking 的 Database Dashboard 可以看到访问数据库的性能监控。<br>在跨度信息中也可以看到执行每条 SQL 命令的耗时以及 SQL 语句。</p><img src="/JeckFS/2021/09/04/APM-skywalking/29.png" class="" title="This is 29-th image."><img src="/JeckFS/2021/09/04/APM-skywalking/30.png" class="" title="This is 30-th image."><img src="/JeckFS/2021/09/04/APM-skywalking/31.png" class="" title="This is 31-th image."><img src="/JeckFS/2021/09/04/APM-skywalking/32.png" class="" title="This is 32-th image."><img src="/JeckFS/2021/09/04/APM-skywalking/33.png" class="" title="This is 33-th image."><img src="/JeckFS/2021/09/04/APM-skywalking/34.png" class="" title="This is 34-th image."><img src="/JeckFS/2021/09/04/APM-skywalking/35.png" class="" title="This is 35-th image."><p>需要在被监控的系统的 pom 中添加 Skywalking trace 工具包的依赖。其版本应与 Skywalking 相同。</p><img src="/JeckFS/2021/09/04/APM-skywalking/36.png" class="" title="This is 36-th image."><p>在被监控的系统中需要添加一些代码：</p><img src="/JeckFS/2021/09/04/APM-skywalking/37.png" class="" title="This is 37-th image."><img src="/JeckFS/2021/09/04/APM-skywalking/38.png" class="" title="This is 38-th image."><img src="/JeckFS/2021/09/04/APM-skywalking/39.png" class="" title="This is 39-th image."><img src="/JeckFS/2021/09/04/APM-skywalking/40.png" class="" title="This is 40-th image."><img src="/JeckFS/2021/09/04/APM-skywalking/41.png" class="" title="This is 41-th image."><img src="/JeckFS/2021/09/04/APM-skywalking/42.png" class="" title="This is 42-th image."><img src="/JeckFS/2021/09/04/APM-skywalking/43.png" class="" title="This is 43-th image."><p>这样即使调用了接口 <code>/exclude</code> ，它也不会被 Skywalking 监控到。</p><img src="/JeckFS/2021/09/04/APM-skywalking/44.png" class="" title="This is 44-th image."><p>使用默认规则：</p><img src="/JeckFS/2021/09/04/APM-skywalking/45.png" class="" title="This is 45-th image."><img src="/JeckFS/2021/09/04/APM-skywalking/46.png" class="" title="This is 46-th image."><img src="/JeckFS/2021/09/04/APM-skywalking/47.png" class="" title="This is 47-th image."><img src="/JeckFS/2021/09/04/APM-skywalking/48.png" class="" title="This is 48-th image."><p>修改告警规则：</p><img src="/JeckFS/2021/09/04/APM-skywalking/49.png" class="" title="This is 49-th image."><p>修改规则后需要重启 Skywalking 的后端服务。即重新运行 <code>oapService.sh</code></p><p>当告警发生后会触发 <code>/webhook</code> 接口，通过该接口获取到告警信息，用户可以通过 <code>/show</code> 接口获取告警信息。</p><img src="/JeckFS/2021/09/04/APM-skywalking/50.png" class="" title="This is 50-th image."><img src="/JeckFS/2021/09/04/APM-skywalking/51.png" class="" title="This is 51-th image."><img src="/JeckFS/2021/09/04/APM-skywalking/52.png" class="" title="This is 52-th image."><img src="/JeckFS/2021/09/04/APM-skywalking/53.png" class="" title="This is 53-th image."><p>使用 Byte Buddy 与 javaagent 技术对方法进行拦截。</p><p>187 106<br>570 59<br>863 106</p><h1 id="e32416"><a href="#e32416" class="headerlink" title="e32416"></a>e32416</h1><p>1069 213</p>]]></content>
      
      
      <categories>
          
          <category> 微服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud视频-Sentinel</title>
      <link href="/JeckFS/2021/09/02/SpringCloud%E8%A7%86%E9%A2%91-Sentinel/"/>
      <url>/JeckFS/2021/09/02/SpringCloud%E8%A7%86%E9%A2%91-Sentinel/</url>
      
        <content type="html"><![CDATA[<img src="/JeckFS/2021/09/02/SpringCloud%E8%A7%86%E9%A2%91-Sentinel/1.png" class="" title="This is 1-th image."><p>需要将Java客户端与控制台关联，才能实时监控到服务的运行状态。</p>]]></content>
      
      
      <categories>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker-使用docker构建服务</title>
      <link href="/JeckFS/2021/09/01/docker-%E4%BD%BF%E7%94%A8docker%E6%9E%84%E5%BB%BA%E6%9C%8D%E5%8A%A1/"/>
      <url>/JeckFS/2021/09/01/docker-%E4%BD%BF%E7%94%A8docker%E6%9E%84%E5%BB%BA%E6%9C%8D%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<p><strong>停止运行的容器</strong><br>docker ps | awk ‘{if(NR!=1)print $1}’ | xargs docker stop</p><p><strong>删除已经停止的容器</strong><br>docker ps -a | awk ‘{if(NR!=1)print $1}’ | xargs docker rm</p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker-容器间互联</title>
      <link href="/JeckFS/2021/08/31/docker-%E5%AE%B9%E5%99%A8%E9%97%B4%E4%BA%92%E8%81%94/"/>
      <url>/JeckFS/2021/08/31/docker-%E5%AE%B9%E5%99%A8%E9%97%B4%E4%BA%92%E8%81%94/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Docker内部网络"><a href="#1-Docker内部网络" class="headerlink" title="1.Docker内部网络"></a>1.Docker内部网络</h1><p><strong>关于docker0网络接口</strong></p><ul><li>安装docker时创建，是一个虚拟的<strong>以太网桥</strong>，连接了容器与本地宿主网络。能够实现容器与宿主机的互ping，不同容器间互ping。范围是172.16 ~ 172.30。所有容器的网关地址也由docker0而来，Docker容器都会在这个接口上分配一个IP地址。</li><li>Docker每创建一个容器就创建一组互联的网络接口。这组接口相当于管道，一端作为容器里的eth0接口，另一端作为宿主机的端口（接口名以veth开头）且绑定到docker0网桥。</li><li>Docker创建了一个虚拟子网，该子网由宿主机与所有的Docker容器共享。</li><li><p>使用这种方式时，当容器重启后IP地址会变化。</p></li><li><blockquote><p>```</p></blockquote></li><li><blockquote><p>docker0: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500</p></blockquote></li><li><blockquote><pre><code>inet 172.17.0.1  netmask 255.255.0.0  broadcast 172.17.255.255</code></pre></blockquote></li><li><blockquote><pre><code>inet6 fe80::42:f0ff:fe40:204d  prefixlen 64  scopeid 0x20&lt;link&gt;</code></pre></blockquote></li><li><blockquote><pre><code>ether 02:42:f0:40:20:4d  txqueuelen 0  (Ethernet)</code></pre></blockquote></li><li><blockquote><pre><code>RX packets 84926  bytes 3532900 (3.3 MiB)</code></pre></blockquote></li><li><blockquote><pre><code>RX errors 0  dropped 0  overruns 0  frame 0</code></pre></blockquote></li><li><blockquote><pre><code>TX packets 110168  bytes 240247314 (229.1 MiB)</code></pre></blockquote></li><li><blockquote><pre><code>TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</code></pre></blockquote></li><li>&gt;</li><li><blockquote><p>eth0: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500</p></blockquote></li><li><blockquote><pre><code>inet 172.17.0.3  netmask 255.255.0.0  broadcast 172.17.255.255</code></pre></blockquote></li><li><blockquote><pre><code>ether 02:42:ac:11:00:03  txqueuelen 0  (Ethernet)</code></pre></blockquote></li><li><blockquote><pre><code>RX packets 3712  bytes 6953536 (6.9 MB)</code></pre></blockquote></li><li><blockquote><pre><code>RX errors 0  dropped 0  overruns 0  frame 0</code></pre></blockquote></li><li><blockquote><pre><code>TX packets 3208  bytes 178153 (178.1 KB)</code></pre></blockquote></li><li><blockquote><pre><code>TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</code></pre></blockquote></li><li></li><li><blockquote><p>vethafdae0a: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500</p></blockquote></li><li><blockquote><pre><code>inet6 fe80::e846:68ff:fe2d:6b67  prefixlen 64  scopeid 0x20&lt;link&gt;</code></pre></blockquote></li><li><blockquote><pre><code>ether ea:46:68:2d:6b:67  txqueuelen 0  (Ethernet)</code></pre></blockquote></li><li><blockquote><pre><code>RX packets 3208  bytes 178153 (173.9 KiB)</code></pre></blockquote></li><li><blockquote><pre><code>RX errors 0  dropped 0  overruns 0  frame 0</code></pre></blockquote></li><li><blockquote><pre><code>TX packets 3712  bytes 6953536 (6.6 MiB)</code></pre></blockquote></li><li><blockquote><pre><code>TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</code></pre></blockquote></li><li><blockquote><p>```</p></blockquote></li></ul><h1 id="2-Docker-Networking"><a href="#2-Docker-Networking" class="headerlink" title="2. Docker Networking"></a>2. Docker Networking</h1><ul><li>容器可以实现跨越不同的宿主机来通信。</li><li>可以创建运行于单个主机上的桥接网络，也可以创建overlay网络（允许跨多台宿主机通讯）</li><li>一个容器可以隶属于多个Docker网络</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建名为app的桥接网络</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker network create app</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">列出当前系统中所有的网络</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker network <span class="built_in">ls</span></span></span><br><span class="line"></span><br><span class="line">NETWORK ID          NAME                DRIVER              SCOPE</span><br><span class="line">354630fb32c2        app                 bridge              local</span><br><span class="line">a8ccd3e2279c        bridge              bridge              local</span><br><span class="line">835c8b88d7fe        host                host                local</span><br><span class="line">cf9cf35ab944        none                null                local</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除一个网络</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker network <span class="built_in">rm</span> [NETWORK ID | NAME]</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在Docker网络总创建Redis容器</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker run -d --net=app --name db 2498535739/redis:3.0</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看app网络的信息</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker network inspect app</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将正在运行的容器db2连接到Docker网络</span></span><br><span class="line">docker network connect app db2</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">从网络中断开一个容器</span></span><br><span class="line">docker network disconnect app db2</span><br></pre></td></tr></table></figure><h1 id="3-Docker链接-Docker-1-9之前使用"><a href="#3-Docker链接-Docker-1-9之前使用" class="headerlink" title="3.Docker链接(Docker 1.9之前使用)"></a>3.Docker链接(Docker 1.9之前使用)</h1><ul><li>提供服务的容器不用在使用镜像启动时不用端口就可以启动。使用—link标志链接到服务所在的容器的容器能够自动链接到这个端口，该端口不对宿主机公开，该模型较为安全。</li><li>在启动Docker守护进程时可以使用<code>--icc=false</code>标志关闭所有没有链接的容器间通信。</li><li>使用链接可以使得服务为多个容器服务。</li><li>可以使用<code>--link</code>标志连接到多个容器。</li><li>容器链接仅能工作于一台Docker宿主机中，不能链接位于不同Docker宿主机上的容器。对于多宿主机的网络环境，需要使用Docker Networking。</li></ul><h1 id="删除未运行的容器"><a href="#删除未运行的容器" class="headerlink" title="删除未运行的容器"></a>删除未运行的容器</h1><p>docker ps -a | awk  ‘{if(NR!=1)print $1}’| xargs docker rm</p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>k8s的小知识点</title>
      <link href="/JeckFS/2021/08/26/k8s%E7%9A%84%E5%B0%8F%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
      <url>/JeckFS/2021/08/26/k8s%E7%9A%84%E5%B0%8F%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h1 id="volumeMounts-subPath"><a href="#volumeMounts-subPath" class="headerlink" title="volumeMounts.subPath"></a>volumeMounts.subPath</h1><p>pod-volume-test.yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">pod-volume-test</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">apache</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">nginx:1.14-alpine</span></span><br><span class="line">      <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line">      <span class="attr">volumeMounts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">volume-test</span>  <span class="comment"># 引用pod定义的共享存储卷的名称，需用volumes[]中定义的卷名</span></span><br><span class="line">          <span class="attr">mountPath:</span> <span class="string">/var/www/html/main.html</span>  <span class="comment"># 存储卷在容器内mount的绝对路径</span></span><br><span class="line">          <span class="attr">subPath:</span> <span class="string">main.html</span>  <span class="comment"># 引用volumes.configmap.items.path中的内容</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">volume-test</span></span><br><span class="line">          <span class="attr">mountPath:</span> <span class="string">/var/www/html/path.txt</span></span><br><span class="line">          <span class="attr">subPath:</span> <span class="string">path.txt</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">volume-test</span></span><br><span class="line">      <span class="attr">configMap:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">cm-apache</span></span><br><span class="line">        <span class="attr">items:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">html</span>  <span class="comment"># 使用configMap(cm-apache)中data中定义的key（这里是html、path）</span></span><br><span class="line">            <span class="attr">path:</span> <span class="string">main.html</span>  <span class="comment"># 定义文件名</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">path</span></span><br><span class="line">            <span class="attr">path:</span> <span class="string">path.txt</span></span><br></pre></td></tr></table></figure><p>cm-apache.yaml<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">cm-apache</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">html:</span> <span class="string">hello</span> <span class="string">world</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">/var/www/html</span></span><br></pre></td></tr></table></figure></p><p>subpath在此处的作用：</p><ul><li>由于使用configmap定义的存储卷在volumeMounts中挂载时，mountPath中的路径只能是目录。若使用subpath，则最后一级为具体的文件，而文件引用的内容需用volumes.configMap.items.path中定义的内容。</li></ul><p>产生的效果就是volume-test存储卷下的<code>/var/www/html</code>目录下产生main.html与path.txt两个文件</p><p>效果展示：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">root@node1:~# kubectl exec -it pod-volume-test /bin/sh</span><br><span class="line">/ # cd /var/www/html/</span><br><span class="line">/var/www/html # ls</span><br><span class="line">main.html  path.txt</span><br><span class="line">/var/www/html # cat main.html &amp;&amp; echo -e &quot;\n&quot;</span><br><span class="line">hello world</span><br><span class="line"></span><br><span class="line">/var/www/html # cat path.txt &amp;&amp; echo -e &quot;\n&quot;</span><br><span class="line">/var/www/html</span><br><span class="line"></span><br><span class="line">/var/www/html # </span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络配置相关</title>
      <link href="/JeckFS/2021/08/24/%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE%E7%9B%B8%E5%85%B3/"/>
      <url>/JeckFS/2021/08/24/%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE%E7%9B%B8%E5%85%B3/</url>
      
        <content type="html"><![CDATA[<h1 id="virtualbox虚拟机搭建k8s前的网络配置"><a href="#virtualbox虚拟机搭建k8s前的网络配置" class="headerlink" title="virtualbox虚拟机搭建k8s前的网络配置"></a>virtualbox虚拟机搭建k8s前的网络配置</h1><blockquote><p>要求：</p><ul><li>虚拟机可以访问互联网与宿主机</li><li>虚拟机配置静态IP</li><li>配置virtualbox的端口映射，宿主机可以通过ssh登录虚拟机</li></ul></blockquote><h2 id="1-在virtualbox中配置全局NAT网络"><a href="#1-在virtualbox中配置全局NAT网络" class="headerlink" title="1.在virtualbox中配置全局NAT网络"></a>1.在virtualbox中配置全局NAT网络</h2><p>管理→全局设定→网络</p><img src="/JeckFS/2021/08/24/%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE%E7%9B%B8%E5%85%B3/1.png" class="" title="This is 1-th image."><p>添加一条item（NatNetwork1），双击NatNetwork1，将网络CIDR更改为虚拟机静态ip对应的网段（这里设置为192.168.101.0/24）</p><p>点击“端口转发”，配置宿主机的ip:port与虚拟机的ip:port</p><img src="/JeckFS/2021/08/24/%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE%E7%9B%B8%E5%85%B3/2.png" class="" title="This is 2-th image."><h2 id="2-在具体的某个虚拟机的配置中配置网卡"><a href="#2-在具体的某个虚拟机的配置中配置网卡" class="headerlink" title="2.在具体的某个虚拟机的配置中配置网卡"></a>2.在具体的某个虚拟机的配置中配置网卡</h2><p>右击该虚拟机选择“设置”→“网络”</p><p>启用网卡1与网卡2。</p><ul><li>在网卡1中使用“NAT网络”，界面名称使用全局配置的NatNetwork1，否则虚拟机找不到网关（直接后果是无法连接dns服务器，无法解析主机名）。</li></ul><img src="/JeckFS/2021/08/24/%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE%E7%9B%B8%E5%85%B3/3.png" class="" title="This is 3-th image."><ul><li>在网卡2中使用“仅主机(Host-Only)网络”</li></ul><img src="/JeckFS/2021/08/24/%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE%E7%9B%B8%E5%85%B3/4.png" class="" title="This is 4-th image."><h2 id="3-启动虚拟机并在虚拟机中配置静态IP"><a href="#3-启动虚拟机并在虚拟机中配置静态IP" class="headerlink" title="3.启动虚拟机并在虚拟机中配置静态IP"></a>3.启动虚拟机并在虚拟机中配置静态IP</h2><p>编辑<code>/etc/sysconfig/network-scripts/ifcfg-enp0s3</code>：</p><ul><li>将<code>BOOTPROTO=&quot;static&quot;</code>修改为<code>BOOTPROTO=&quot;static&quot;</code></li><li><code>ONBOOT=&quot;yes&quot;</code>该项必须设置为yes</li><li>添加如下条目</li><li>```shell</li><li>IPADDR=192.168.101.15</li><li>NETMASK=255.255.255.0</li><li>GATEWAY=192.168.101.1</li><li>DNS1=114.114.114.114</li><li>DNS2=8.8.8.8</li><li>```</li></ul><p>保存并退出，然后重启网络。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart network</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 其他 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>k8s</title>
      <link href="/JeckFS/2021/08/19/k8s/"/>
      <url>/JeckFS/2021/08/19/k8s/</url>
      
        <content type="html"><![CDATA[<img src="/JeckFS/2021/08/19/k8s/1.png" class="" title="This is 1-th image."><img src="/JeckFS/2021/08/19/k8s/2.png" class="" title="This is 2-th image."><img src="/JeckFS/2021/08/19/k8s/3.png" class="" title="This is 3-th image."><img src="/JeckFS/2021/08/19/k8s/4.png" class="" title="This is 4-th image."><img src="/JeckFS/2021/08/19/k8s/5.png" class="" title="This is 5-th image."><img src="/JeckFS/2021/08/19/k8s/6.png" class="" title="This is 6-th image."><img src="/JeckFS/2021/08/19/k8s/7.png" class="" title="This is 7-th image."><img src="/JeckFS/2021/08/19/k8s/8.png" class="" title="This is 8-th image."><img src="/JeckFS/2021/08/19/k8s/9.png" class="" title="This is 9-th image."><img src="/JeckFS/2021/08/19/k8s/10.png" class="" title="This is 10-th image."><img src="/JeckFS/2021/08/19/k8s/11.png" class="" title="This is 11-th image."><img src="/JeckFS/2021/08/19/k8s/12.png" class="" title="This is 12-th image."><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 在node节点上执行</span><br><span class="line">swapoff -a &amp;&amp; kubeadm reset</span><br><span class="line">systemctl daemon-reload &amp;&amp; systemctl restart kubelet &amp;&amp; iptables -F &amp;&amp; iptables -t nat -F &amp;&amp; iptables -t mangle -F &amp;&amp; iptables -X  </span><br></pre></td></tr></table></figure><p><strong>【问题】</strong></p><ul><li><code>kubectl get nodes</code> 报错 The connection to the server localhost:8080 was refused - did you specify the right host or port?<br>解决：将 master 节点中的 <code>.kube</code> 复制到 node1 node2 中一份</li><li><code>quay-mirror.qiniu.com/flannel</code>下载失败，直接使用 <code>quay.io</code> 下载，虽然慢但是可以下载下来</li><li><code>kubelet</code> 服务在 node 节点上启动失败：运行 <code>kubeadm reset --force</code> 重新在 master node 节点上部署， node 节点重新加入 master 节点，以及复制 <code>.kube</code> 文件给 node 节点</li></ul><p>仅仅需要更改apiserver-advertise-address为master节点的ip地址即可。其他的不改。</p><img src="/JeckFS/2021/08/19/k8s/13.png" class="" title="This is 13-th image."><img src="/JeckFS/2021/08/19/k8s/14.png" class="" title="This is 14-th image."><p>NotReady的原因是没有为集群安装网络。</p><img src="/JeckFS/2021/08/19/k8s/15.png" class="" title="This is 15-th image."><p>仅在master中操作</p><img src="/JeckFS/2021/08/19/k8s/16.png" class="" title="This is 16-th image."><img src="/JeckFS/2021/08/19/k8s/17.png" class="" title="This is 17-th image."><img src="/JeckFS/2021/08/19/k8s/18.png" class="" title="This is 18-th image."><img src="/JeckFS/2021/08/19/k8s/19.png" class="" title="This is 19-th image."><img src="/JeckFS/2021/08/19/k8s/20.png" class="" title="This is 20-th image."><img src="/JeckFS/2021/08/19/k8s/21.png" class="" title="This is 21-th image."><img src="/JeckFS/2021/08/19/k8s/22.png" class="" title="This is 22-th image."><p><code>kubectl apply -f nginx-pox.yaml</code>中apply的作用是没有资源就创建一个，有的话就更新。</p><img src="/JeckFS/2021/08/19/k8s/23.png" class="" title="This is 23-th image."><img src="/JeckFS/2021/08/19/k8s/24.png" class="" title="This is 24-th image."><img src="/JeckFS/2021/08/19/k8s/25.png" class="" title="This is 25-th image."><img src="/JeckFS/2021/08/19/k8s/26.png" class="" title="This is 26-th image."><img src="/JeckFS/2021/08/19/k8s/27.png" class="" title="This is 27-th image."><img src="/JeckFS/2021/08/19/k8s/28.png" class="" title="This is 28-th image."><img src="/JeckFS/2021/08/19/k8s/29.png" class="" title="This is 29-th image."><img src="/JeckFS/2021/08/19/k8s/30.png" class="" title="This is 30-th image."><img src="/JeckFS/2021/08/19/k8s/31.png" class="" title="This is 31-th image."><img src="/JeckFS/2021/08/19/k8s/32.png" class="" title="This is 32-th image."><img src="/JeckFS/2021/08/19/k8s/33.png" class="" title="This is 33-th image."><img src="/JeckFS/2021/08/19/k8s/34.png" class="" title="This is 34-th image."><img src="/JeckFS/2021/08/19/k8s/35.png" class="" title="This is 35-th image."><img src="/JeckFS/2021/08/19/k8s/36.png" class="" title="This is 36-th image."><img src="/JeckFS/2021/08/19/k8s/37.png" class="" title="This is 37-th image."><img src="/JeckFS/2021/08/19/k8s/38.png" class="" title="This is 38-th image."><img src="/JeckFS/2021/08/19/k8s/39.png" class="" title="This is 39-th image."><img src="/JeckFS/2021/08/19/k8s/40.png" class="" title="This is 40-th image."><img src="/JeckFS/2021/08/19/k8s/41.png" class="" title="This is 41-th image."><img src="/JeckFS/2021/08/19/k8s/42.png" class="" title="This is 42-th image."><img src="/JeckFS/2021/08/19/k8s/43.png" class="" title="This is 43-th image."><img src="/JeckFS/2021/08/19/k8s/44.png" class="" title="This is 44-th image."><img src="/JeckFS/2021/08/19/k8s/45.png" class="" title="This is 45-th image."><img src="/JeckFS/2021/08/19/k8s/46.png" class="" title="This is 46-th image."><p>对于pod的ip地址是随着pod的创建与销毁而改变的。</p><img src="/JeckFS/2021/08/19/k8s/47.png" class="" title="This is 47-th image."><img src="/JeckFS/2021/08/19/k8s/48.png" class="" title="This is 48-th image."><img src="/JeckFS/2021/08/19/k8s/49.png" class="" title="This is 49-th image."><img src="/JeckFS/2021/08/19/k8s/50.png" class="" title="This is 50-th image."><img src="/JeckFS/2021/08/19/k8s/51.png" class="" title="This is 51-th image."><img src="/JeckFS/2021/08/19/k8s/52.png" class="" title="This is 52-th image."><img src="/JeckFS/2021/08/19/k8s/53.png" class="" title="This is 53-th image."><img src="/JeckFS/2021/08/19/k8s/54.png" class="" title="This is 54-th image."><img src="/JeckFS/2021/08/19/k8s/55.png" class="" title="This is 55-th image."><img src="/JeckFS/2021/08/19/k8s/56.png" class="" title="This is 56-th image."><img src="/JeckFS/2021/08/19/k8s/57.png" class="" title="This is 57-th image."><img src="/JeckFS/2021/08/19/k8s/58.png" class="" title="This is 58-th image."><img src="/JeckFS/2021/08/19/k8s/59.png" class="" title="This is 59-th image."><img src="/JeckFS/2021/08/19/k8s/60.png" class="" title="This is 60-th image."><img src="/JeckFS/2021/08/19/k8s/61.png" class="" title="This is 61-th image."><img src="/JeckFS/2021/08/19/k8s/62.png" class="" title="This is 62-th image."><img src="/JeckFS/2021/08/19/k8s/63.png" class="" title="This is 63-th image."><p>ClusterIP仅能在集群内部被访问。</p><img src="/JeckFS/2021/08/19/k8s/64.png" class="" title="This is 64-th image."><img src="/JeckFS/2021/08/19/k8s/65.png" class="" title="This is 65-th image."><img src="/JeckFS/2021/08/19/k8s/66.png" class="" title="This is 66-th image."><img src="/JeckFS/2021/08/19/k8s/67.png" class="" title="This is 67-th image."><p>Pod 详解</p><img src="/JeckFS/2021/08/19/k8s/68.png" class="" title="This is 68-th image."><img src="/JeckFS/2021/08/19/k8s/69.png" class="" title="This is 69-th image."><img src="/JeckFS/2021/08/19/k8s/70.png" class="" title="This is 70-th image."><img src="/JeckFS/2021/08/19/k8s/71.png" class="" title="This is 71-th image."><img src="/JeckFS/2021/08/19/k8s/72.png" class="" title="This is 72-th image."><img src="/JeckFS/2021/08/19/k8s/73.png" class="" title="This is 73-th image."><img src="/JeckFS/2021/08/19/k8s/74.png" class="" title="This is 74-th image."><img src="/JeckFS/2021/08/19/k8s/75.png" class="" title="This is 75-th image."><img src="/JeckFS/2021/08/19/k8s/76.png" class="" title="This is 76-th image."><img src="/JeckFS/2021/08/19/k8s/77.png" class="" title="This is 77-th image."><img src="/JeckFS/2021/08/19/k8s/78.png" class="" title="This is 78-th image."><img src="/JeckFS/2021/08/19/k8s/79.png" class="" title="This is 79-th image."><img src="/JeckFS/2021/08/19/k8s/80.png" class="" title="This is 80-th image."><p><code>command args</code> 命令与 容器镜像中的启动命令的关系： <a href="https://cloud.tencent.com/developer/article/1638844">参考</a></p><div class="table-container"><table><thead><tr><th>描述</th><th>Docker 字段名称</th><th>k8s 字段名称</th></tr></thead><tbody><tr><td>容器执行的命令</td><td>Entrypoint</td><td>command</td></tr><tr><td>传给命令的参数</td><td>Cmd</td><td>args</td></tr></tbody></table></div><ul><li>如果在 Pod 配置中没有设置 command 或者 args，那么将使用 Docker 镜像自带的命令及其参数。</li><li>如果在 Pod 配置中只设置了 command 但是没有设置 args，那么容器启动时只会执行该命令，Docker 镜像中自带的命令及其参数会被忽略。</li><li>如果在 Pod 配置中只设置了 args，那么 Docker 镜像中自带的命令会使用该新参数作为其执行时的参数。</li><li>如果在 Pod 配置中同时设置了 command 与 args，那么 Docker 镜像中自带的命令及其参数会被忽略。容器启动时只会执行配置中设置的命令，并使用配置中设置的参数作为命令的参数。</li></ul><img src="/JeckFS/2021/08/19/k8s/81.png" class="" title="This is 81-th image."><img src="/JeckFS/2021/08/19/k8s/82.png" class="" title="This is 82-th image."><img src="/JeckFS/2021/08/19/k8s/83.png" class="" title="This is 83-th image."><img src="/JeckFS/2021/08/19/k8s/84.png" class="" title="This is 84-th image."><img src="/JeckFS/2021/08/19/k8s/85.png" class="" title="This is 85-th image."><img src="/JeckFS/2021/08/19/k8s/86.png" class="" title="This is 86-th image."><img src="/JeckFS/2021/08/19/k8s/87.png" class="" title="This is 87-th image."><img src="/JeckFS/2021/08/19/k8s/88.png" class="" title="This is 88-th image."><img src="/JeckFS/2021/08/19/k8s/89.png" class="" title="This is 89-th image."><img src="/JeckFS/2021/08/19/k8s/90.png" class="" title="This is 90-th image."><img src="/JeckFS/2021/08/19/k8s/91.png" class="" title="This is 91-th image."><img src="/JeckFS/2021/08/19/k8s/92.png" class="" title="This is 92-th image."><img src="/JeckFS/2021/08/19/k8s/93.png" class="" title="This is 93-th image."><img src="/JeckFS/2021/08/19/k8s/94.png" class="" title="This is 94-th image."><img src="/JeckFS/2021/08/19/k8s/95.png" class="" title="This is 95-th image."><img src="/JeckFS/2021/08/19/k8s/96.png" class="" title="This is 96-th image."><img src="/JeckFS/2021/08/19/k8s/97.png" class="" title="This is 97-th image."><img src="/JeckFS/2021/08/19/k8s/98.png" class="" title="This is 98-th image."><p>Pod 生命周期</p><img src="/JeckFS/2021/08/19/k8s/99.png" class="" title="This is 99-th image."><img src="/JeckFS/2021/08/19/k8s/100.png" class="" title="This is 100-th image."><img src="/JeckFS/2021/08/19/k8s/101.png" class="" title="This is 101-th image."><img src="/JeckFS/2021/08/19/k8s/102.png" class="" title="This is 102-th image."><img src="/JeckFS/2021/08/19/k8s/103.png" class="" title="This is 103-th image."><img src="/JeckFS/2021/08/19/k8s/104.png" class="" title="This is 104-th image."><img src="/JeckFS/2021/08/19/k8s/105.png" class="" title="This is 105-th image."><img src="/JeckFS/2021/08/19/k8s/106.png" class="" title="This is 106-th image."><img src="/JeckFS/2021/08/19/k8s/107.png" class="" title="This is 107-th image."><img src="/JeckFS/2021/08/19/k8s/108.png" class="" title="This is 108-th image."><img src="/JeckFS/2021/08/19/k8s/109.png" class="" title="This is 109-th image."><img src="/JeckFS/2021/08/19/k8s/110.png" class="" title="This is 110-th image."><img src="/JeckFS/2021/08/19/k8s/111.png" class="" title="This is 111-th image."><p>容器探测</p><img src="/JeckFS/2021/08/19/k8s/112.png" class="" title="This is 112-th image."><img src="/JeckFS/2021/08/19/k8s/113.png" class="" title="This is 113-th image."><img src="/JeckFS/2021/08/19/k8s/114.png" class="" title="This is 114-th image."><img src="/JeckFS/2021/08/19/k8s/115.png" class="" title="This is 115-th image."><img src="/JeckFS/2021/08/19/k8s/116.png" class="" title="This is 116-th image."><img src="/JeckFS/2021/08/19/k8s/117.png" class="" title="This is 117-th image."><img src="/JeckFS/2021/08/19/k8s/118.png" class="" title="This is 118-th image."><img src="/JeckFS/2021/08/19/k8s/119.png" class="" title="This is 119-th image."><img src="/JeckFS/2021/08/19/k8s/120.png" class="" title="This is 120-th image."><img src="/JeckFS/2021/08/19/k8s/121.png" class="" title="This is 121-th image."><img src="/JeckFS/2021/08/19/k8s/122.png" class="" title="This is 122-th image."><img src="/JeckFS/2021/08/19/k8s/123.png" class="" title="This is 123-th image."><img src="/JeckFS/2021/08/19/k8s/124.png" class="" title="This is 124-th image."><p>Pod 调度</p><img src="/JeckFS/2021/08/19/k8s/125.png" class="" title="This is 125-th image."><img src="/JeckFS/2021/08/19/k8s/126.png" class="" title="This is 126-th image."><img src="/JeckFS/2021/08/19/k8s/127.png" class="" title="This is 127-th image."><img src="/JeckFS/2021/08/19/k8s/128.png" class="" title="This is 128-th image."><img src="/JeckFS/2021/08/19/k8s/129.png" class="" title="This is 129-th image."><img src="/JeckFS/2021/08/19/k8s/130.png" class="" title="This is 130-th image."><img src="/JeckFS/2021/08/19/k8s/131.png" class="" title="This is 131-th image."><img src="/JeckFS/2021/08/19/k8s/132.png" class="" title="This is 132-th image."><img src="/JeckFS/2021/08/19/k8s/133.png" class="" title="This is 133-th image."><img src="/JeckFS/2021/08/19/k8s/134.png" class="" title="This is 134-th image."><img src="/JeckFS/2021/08/19/k8s/135.png" class="" title="This is 135-th image."><img src="/JeckFS/2021/08/19/k8s/136.png" class="" title="This is 136-th image."><img src="/JeckFS/2021/08/19/k8s/137.png" class="" title="This is 137-th image."><img src="/JeckFS/2021/08/19/k8s/138.png" class="" title="This is 138-th image."><img src="/JeckFS/2021/08/19/k8s/139.png" class="" title="This is 139-th image."><img src="/JeckFS/2021/08/19/k8s/140.png" class="" title="This is 140-th image."><img src="/JeckFS/2021/08/19/k8s/141.png" class="" title="This is 141-th image."><img src="/JeckFS/2021/08/19/k8s/142.png" class="" title="This is 142-th image."><img src="/JeckFS/2021/08/19/k8s/143.png" class="" title="This is 143-th image."><img src="/JeckFS/2021/08/19/k8s/144.png" class="" title="This is 144-th image."><img src="/JeckFS/2021/08/19/k8s/145.png" class="" title="This is 145-th image."><img src="/JeckFS/2021/08/19/k8s/146.png" class="" title="This is 146-th image."><img src="/JeckFS/2021/08/19/k8s/147.png" class="" title="This is 147-th image."><img src="/JeckFS/2021/08/19/k8s/148.png" class="" title="This is 148-th image."><img src="/JeckFS/2021/08/19/k8s/149.png" class="" title="This is 149-th image."><img src="/JeckFS/2021/08/19/k8s/150.png" class="" title="This is 150-th image."><img src="/JeckFS/2021/08/19/k8s/151.png" class="" title="This is 151-th image."><img src="/JeckFS/2021/08/19/k8s/152.png" class="" title="This is 152-th image."><img src="/JeckFS/2021/08/19/k8s/153.png" class="" title="This is 153-th image."><img src="/JeckFS/2021/08/19/k8s/154.png" class="" title="This is 154-th image."> <img src="/JeckFS/2021/08/19/k8s/155.png" class="" title="This is 155-th image."><p>Exists作用在key上，若配置了key就不用配置value了。</p><p>Pod 控制器详解</p><img src="/JeckFS/2021/08/19/k8s/156.png" class="" title="This is 156-th image."><img src="/JeckFS/2021/08/19/k8s/157.png" class="" title="This is 157-th image."><img src="/JeckFS/2021/08/19/k8s/158.png" class="" title="This is 158-th image."><img src="/JeckFS/2021/08/19/k8s/159.png" class="" title="This is 159-th image."><img src="/JeckFS/2021/08/19/k8s/160.png" class="" title="This is 160-th image."><img src="/JeckFS/2021/08/19/k8s/161.png" class="" title="This is 161-th image."><img src="/JeckFS/2021/08/19/k8s/162.png" class="" title="This is 162-th image."><img src="/JeckFS/2021/08/19/k8s/163.png" class="" title="This is 163-th image."><img src="/JeckFS/2021/08/19/k8s/164.png" class="" title="This is 164-th image."><img src="/JeckFS/2021/08/19/k8s/165.png" class="" title="This is 165-th image."><img src="/JeckFS/2021/08/19/k8s/166.png" class="" title="This is 166-th image."><p>Deployment</p><img src="/JeckFS/2021/08/19/k8s/167.png" class="" title="This is 167-th image."><img src="/JeckFS/2021/08/19/k8s/168.png" class="" title="This is 168-th image."><img src="/JeckFS/2021/08/19/k8s/169.png" class="" title="This is 169-th image."><img src="/JeckFS/2021/08/19/k8s/170.png" class="" title="This is 170-th image."><img src="/JeckFS/2021/08/19/k8s/171.png" class="" title="This is 171-th image."><img src="/JeckFS/2021/08/19/k8s/172.png" class="" title="This is 172-th image."><img src="/JeckFS/2021/08/19/k8s/173.png" class="" title="This is 173-th image."><img src="/JeckFS/2021/08/19/k8s/174.png" class="" title="This is 174-th image."><img src="/JeckFS/2021/08/19/k8s/175.png" class="" title="This is 175-th image."><img src="/JeckFS/2021/08/19/k8s/176.png" class="" title="This is 176-th image."><img src="/JeckFS/2021/08/19/k8s/177.png" class="" title="This is 177-th image."><img src="/JeckFS/2021/08/19/k8s/178.png" class="" title="This is 178-th image."><img src="/JeckFS/2021/08/19/k8s/179.png" class="" title="This is 179-th image."><img src="/JeckFS/2021/08/19/k8s/180.png" class="" title="This is 180-th image."><img src="/JeckFS/2021/08/19/k8s/181.png" class="" title="This is 181-th image."><img src="/JeckFS/2021/08/19/k8s/182.png" class="" title="This is 182-th image."><img src="/JeckFS/2021/08/19/k8s/183.png" class="" title="This is 183-th image."><img src="/JeckFS/2021/08/19/k8s/184.png" class="" title="This is 184-th image."><img src="/JeckFS/2021/08/19/k8s/185.png" class="" title="This is 185-th image."><p>HPA</p><img src="/JeckFS/2021/08/19/k8s/186.png" class="" title="This is 186-th image."><img src="/JeckFS/2021/08/19/k8s/187.png" class="" title="This is 187-th image."><img src="/JeckFS/2021/08/19/k8s/188.png" class="" title="This is 188-th image."><img src="/JeckFS/2021/08/19/k8s/189.png" class="" title="This is 189-th image."><img src="/JeckFS/2021/08/19/k8s/190.png" class="" title="This is 190-th image."><img src="/JeckFS/2021/08/19/k8s/191.png" class="" title="This is 191-th image."><img src="/JeckFS/2021/08/19/k8s/192.png" class="" title="This is 192-th image."><img src="/JeckFS/2021/08/19/k8s/193.png" class="" title="This is 193-th image."><img src="/JeckFS/2021/08/19/k8s/194.png" class="" title="This is 194-th image."><img src="/JeckFS/2021/08/19/k8s/195.png" class="" title="This is 195-th image."><p>DaemonSet</p><img src="/JeckFS/2021/08/19/k8s/196.png" class="" title="This is 196-th image."><img src="/JeckFS/2021/08/19/k8s/197.png" class="" title="This is 197-th image."><img src="/JeckFS/2021/08/19/k8s/198.png" class="" title="This is 198-th image."><img src="/JeckFS/2021/08/19/k8s/199.png" class="" title="This is 199-th image."><img src="/JeckFS/2021/08/19/k8s/200.png" class="" title="This is 200-th image."><p>Job</p><img src="/JeckFS/2021/08/19/k8s/201.png" class="" title="This is 201-th image."><img src="/JeckFS/2021/08/19/k8s/201.png" class="" title="This is 201-th image."><img src="/JeckFS/2021/08/19/k8s/202.png" class="" title="This is 202-th image."><img src="/JeckFS/2021/08/19/k8s/203.png" class="" title="This is 203-th image."><img src="/JeckFS/2021/08/19/k8s/204.png" class="" title="This is 204-th image."><img src="/JeckFS/2021/08/19/k8s/205.png" class="" title="This is 205-th image."><img src="/JeckFS/2021/08/19/k8s/206.png" class="" title="This is 206-th image."><img src="/JeckFS/2021/08/19/k8s/207.png" class="" title="This is 207-th image."><p>CronJob</p><img src="/JeckFS/2021/08/19/k8s/208.png" class="" title="This is 208-th image."><img src="/JeckFS/2021/08/19/k8s/209.png" class="" title="This is 209-th image."><img src="/JeckFS/2021/08/19/k8s/210.png" class="" title="This is 210-th image."><img src="/JeckFS/2021/08/19/k8s/211.png" class="" title="This is 211-th image."><img src="/JeckFS/2021/08/19/k8s/212.png" class="" title="This is 212-th image."><p>Service</p><img src="/JeckFS/2021/08/19/k8s/213.png" class="" title="This is 213-th image."><img src="/JeckFS/2021/08/19/k8s/214.png" class="" title="This is 214-th image."><img src="/JeckFS/2021/08/19/k8s/215.png" class="" title="This is 215-th image."><img src="/JeckFS/2021/08/19/k8s/216.png" class="" title="This is 216-th image."><img src="/JeckFS/2021/08/19/k8s/217.png" class="" title="This is 217-th image."><img src="/JeckFS/2021/08/19/k8s/218.png" class="" title="This is 218-th image."><img src="/JeckFS/2021/08/19/k8s/219.png" class="" title="This is 219-th image."><img src="/JeckFS/2021/08/19/k8s/220.png" class="" title="This is 220-th image."><p>通过命令 <code>kubectl edit cm kube-proxy -n kube-system</code>修改该文件，将其中的mode选项修改为ipvs</p><img src="/JeckFS/2021/08/19/k8s/221.png" class="" title="This is 221-th image."><img src="/JeckFS/2021/08/19/k8s/222.png" class="" title="This is 222-th image."><img src="/JeckFS/2021/08/19/k8s/223.png" class="" title="This is 223-th image."><img src="/JeckFS/2021/08/19/k8s/224.png" class="" title="This is 224-th image."><img src="/JeckFS/2021/08/19/k8s/225.png" class="" title="This is 225-th image."><img src="/JeckFS/2021/08/19/k8s/226.png" class="" title="This is 226-th image."><img src="/JeckFS/2021/08/19/k8s/227.png" class="" title="This is 227-th image."><img src="/JeckFS/2021/08/19/k8s/228.png" class="" title="This is 228-th image."><img src="/JeckFS/2021/08/19/k8s/229.png" class="" title="This is 229-th image."><img src="/JeckFS/2021/08/19/k8s/230.png" class="" title="This is 230-th image."><img src="/JeckFS/2021/08/19/k8s/231.png" class="" title="This is 231-th image."><img src="/JeckFS/2021/08/19/k8s/232.png" class="" title="This is 232-th image."><img src="/JeckFS/2021/08/19/k8s/233.png" class="" title="This is 233-th image."><img src="/JeckFS/2021/08/19/k8s/234.png" class="" title="This is 234-th image."><img src="/JeckFS/2021/08/19/k8s/235.png" class="" title="This is 235-th image."><img src="/JeckFS/2021/08/19/k8s/236.png" class="" title="This is 236-th image."><img src="/JeckFS/2021/08/19/k8s/237.png" class="" title="This is 237-th image."><img src="/JeckFS/2021/08/19/k8s/238.png" class="" title="This is 238-th image."><img src="/JeckFS/2021/08/19/k8s/239.png" class="" title="This is 239-th image."><p>Ingress</p><img src="/JeckFS/2021/08/19/k8s/240.png" class="" title="This is 240-th image."><img src="/JeckFS/2021/08/19/k8s/241.png" class="" title="This is 241-th image."><img src="/JeckFS/2021/08/19/k8s/242.png" class="" title="This is 242-th image."><img src="/JeckFS/2021/08/19/k8s/243.png" class="" title="This is 243-th image."><img src="/JeckFS/2021/08/19/k8s/244.png" class="" title="This is 244-th image."><img src="/JeckFS/2021/08/19/k8s/245.png" class="" title="This is 245-th image."><img src="/JeckFS/2021/08/19/k8s/246.png" class="" title="This is 246-th image."><img src="/JeckFS/2021/08/19/k8s/247.png" class="" title="This is 247-th image."><img src="/JeckFS/2021/08/19/k8s/248.png" class="" title="This is 248-th image."><img src="/JeckFS/2021/08/19/k8s/249.png" class="" title="This is 249-th image."><img src="/JeckFS/2021/08/19/k8s/250.png" class="" title="This is 250-th image."><img src="/JeckFS/2021/08/19/k8s/251.png" class="" title="This is 251-th image."><img src="/JeckFS/2021/08/19/k8s/252.png" class="" title="This is 252-th image."><img src="/JeckFS/2021/08/19/k8s/253.png" class="" title="This is 253-th image."><img src="/JeckFS/2021/08/19/k8s/254.png" class="" title="This is 254-th image."><p>数据存储</p><img src="/JeckFS/2021/08/19/k8s/255.png" class="" title="This is 255-th image."><img src="/JeckFS/2021/08/19/k8s/256.png" class="" title="This is 256-th image."><img src="/JeckFS/2021/08/19/k8s/257.png" class="" title="This is 257-th image."><img src="/JeckFS/2021/08/19/k8s/258.png" class="" title="This is 258-th image."><img src="/JeckFS/2021/08/19/k8s/259.png" class="" title="This is 259-th image."><img src="/JeckFS/2021/08/19/k8s/260.png" class="" title="This is 260-th image."><img src="/JeckFS/2021/08/19/k8s/261.png" class="" title="This is 261-th image."><img src="/JeckFS/2021/08/19/k8s/262.png" class="" title="This is 262-th image."><img src="/JeckFS/2021/08/19/k8s/263.png" class="" title="This is 263-th image."><img src="/JeckFS/2021/08/19/k8s/264.png" class="" title="This is 264-th image."><img src="/JeckFS/2021/08/19/k8s/265.png" class="" title="This is 265-th image."><img src="/JeckFS/2021/08/19/k8s/266.png" class="" title="This is 266-th image."><img src="/JeckFS/2021/08/19/k8s/267.png" class="" title="This is 267-th image."><img src="/JeckFS/2021/08/19/k8s/268.png" class="" title="This is 268-th image."><img src="/JeckFS/2021/08/19/k8s/269.png" class="" title="This is 269-th image."><img src="/JeckFS/2021/08/19/k8s/270.png" class="" title="This is 270-th image."><img src="/JeckFS/2021/08/19/k8s/271.png" class="" title="This is 271-th image."><img src="/JeckFS/2021/08/19/k8s/272.png" class="" title="This is 272-th image."><img src="/JeckFS/2021/08/19/k8s/273.png" class="" title="This is 273-th image."><img src="/JeckFS/2021/08/19/k8s/274.png" class="" title="This is 274-th image."><img src="/JeckFS/2021/08/19/k8s/275.png" class="" title="This is 275-th image."><img src="/JeckFS/2021/08/19/k8s/276.png" class="" title="This is 276-th image."><img src="/JeckFS/2021/08/19/k8s/277.png" class="" title="This is 277-th image."><img src="/JeckFS/2021/08/19/k8s/278.png" class="" title="This is 278-th image."><img src="/JeckFS/2021/08/19/k8s/279.png" class="" title="This is 279-th image."><img src="/JeckFS/2021/08/19/k8s/280.png" class="" title="This is 280-th image."><img src="/JeckFS/2021/08/19/k8s/281.png" class="" title="This is 281-th image."><img src="/JeckFS/2021/08/19/k8s/282.png" class="" title="This is 282-th image."><img src="/JeckFS/2021/08/19/k8s/283.png" class="" title="This is 283-th image."><img src="/JeckFS/2021/08/19/k8s/284.png" class="" title="This is 284-th image."><img src="/JeckFS/2021/08/19/k8s/285.png" class="" title="This is 285-th image."><img src="/JeckFS/2021/08/19/k8s/286.png" class="" title="This is 286-th image."><img src="/JeckFS/2021/08/19/k8s/287.png" class="" title="This is 287-th image."><p>pvc中accessModes需要与pv中匹配，否则将挂载失败。</p><img src="/JeckFS/2021/08/19/k8s/288.png" class="" title="This is 288-th image."><img src="/JeckFS/2021/08/19/k8s/289.png" class="" title="This is 289-th image."><img src="/JeckFS/2021/08/19/k8s/290.png" class="" title="This is 290-th image."><img src="/JeckFS/2021/08/19/k8s/291.png" class="" title="This is 291-th image."><img src="/JeckFS/2021/08/19/k8s/292.png" class="" title="This is 292-th image."><img src="/JeckFS/2021/08/19/k8s/293.png" class="" title="This is 293-th image."><img src="/JeckFS/2021/08/19/k8s/294.png" class="" title="This is 294-th image."><img src="/JeckFS/2021/08/19/k8s/295.png" class="" title="This is 295-th image."><p>ConfigMap</p><img src="/JeckFS/2021/08/19/k8s/296.png" class="" title="This is 296-th image."><img src="/JeckFS/2021/08/19/k8s/297.png" class="" title="This is 297-th image."><img src="/JeckFS/2021/08/19/k8s/298.png" class="" title="This is 298-th image."><img src="/JeckFS/2021/08/19/k8s/299.png" class="" title="This is 299-th image."><img src="/JeckFS/2021/08/19/k8s/300.png" class="" title="This is 300-th image."><img src="/JeckFS/2021/08/19/k8s/301.png" class="" title="This is 301-th image."><p>安全认证</p><img src="/JeckFS/2021/08/19/k8s/302.png" class="" title="This is 302-th image."><img src="/JeckFS/2021/08/19/k8s/303.png" class="" title="This is 303-th image."><img src="/JeckFS/2021/08/19/k8s/304.png" class="" title="This is 304-th image."><img src="/JeckFS/2021/08/19/k8s/305.png" class="" title="This is 305-th image."><img src="/JeckFS/2021/08/19/k8s/306.png" class="" title="This is 306-th image."><img src="/JeckFS/2021/08/19/k8s/307.png" class="" title="This is 307-th image."><img src="/JeckFS/2021/08/19/k8s/308.png" class="" title="This is 308-th image."><img src="/JeckFS/2021/08/19/k8s/309.png" class="" title="This is 309-th image."><img src="/JeckFS/2021/08/19/k8s/310.png" class="" title="This is 310-th image."><img src="/JeckFS/2021/08/19/k8s/311.png" class="" title="This is 311-th image."><img src="/JeckFS/2021/08/19/k8s/312.png" class="" title="This is 312-th image."><img src="/JeckFS/2021/08/19/k8s/313.png" class="" title="This is 313-th image."><img src="/JeckFS/2021/08/19/k8s/314.png" class="" title="This is 314-th image."><img src="/JeckFS/2021/08/19/k8s/315.png" class="" title="This is 315-th image."><img src="/JeckFS/2021/08/19/k8s/316.png" class="" title="This is 316-th image."><img src="/JeckFS/2021/08/19/k8s/317.png" class="" title="This is 317-th image."><img src="/JeckFS/2021/08/19/k8s/318.png" class="" title="This is 318-th image."><img src="/JeckFS/2021/08/19/k8s/319.png" class="" title="This is 319-th image."><img src="/JeckFS/2021/08/19/k8s/320.png" class="" title="This is 320-th image."><img src="/JeckFS/2021/08/19/k8s/321.png" class="" title="This is 321-th image."><img src="/JeckFS/2021/08/19/k8s/322.png" class="" title="This is 322-th image."><p>DashBoard</p><img src="/JeckFS/2021/08/19/k8s/323.png" class="" title="This is 323-th image."><img src="/JeckFS/2021/08/19/k8s/324.png" class="" title="This is 324-th image."><img src="/JeckFS/2021/08/19/k8s/325.png" class="" title="This is 325-th image."><img src="/JeckFS/2021/08/19/k8s/326.png" class="" title="This is 326-th image."><img src="/JeckFS/2021/08/19/k8s/327.png" class="" title="This is 327-th image."><img src="/JeckFS/2021/08/19/k8s/328.png" class="" title="This is 328-th image."><p><a href="https://www.bilibili.com/video/BV1Qv41167ck?p=85&amp;spm_id_from=pageDriver">视频教程</a></p><p>kubeadm init \<br>  —apiserver-advertise-address=192.168.101.15 \<br>  —image-repository registry.aliyuncs.com/google_containers \<br>  —kubernetes-version v1.18.0 \<br>  —service-cidr=10.96.0.0/12 \<br>  —pod-network-cidr=10.244.0.0/16</p>]]></content>
      
      
      <categories>
          
          <category> kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud视频-Feign</title>
      <link href="/JeckFS/2021/08/12/SpringCloud%E8%A7%86%E9%A2%91-Feign/"/>
      <url>/JeckFS/2021/08/12/SpringCloud%E8%A7%86%E9%A2%91-Feign/</url>
      
        <content type="html"><![CDATA[<p><a href="https://zhuanlan.zhihu.com/p/133378040">补充教程</a></p><p>SpringBoot版本：2.1.4.RELEASE<br>SpringCloud版本：Greenwich.SR2</p><h1 id="1-编写openFeignServer-提供服务的模块"><a href="#1-编写openFeignServer-提供服务的模块" class="headerlink" title="1.编写openFeignServer(提供服务的模块)"></a>1.编写openFeignServer(提供服务的模块)</h1><h2 id="1-1-pom文件"><a href="#1-1-pom文件" class="headerlink" title="1.1 pom文件"></a>1.1 pom文件</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="1-2-Controller"><a href="#1-2-Controller" class="headerlink" title="1.2 Controller"></a>1.2 Controller</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(<span class="built_in">this</span>.getClass());</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/create&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> CommonResult <span class="title function_">create</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span> &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;provider:UserController:create(User user)&quot;</span>);</span><br><span class="line">        userService.create(user);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CommonResult</span>(<span class="string">&quot;操作成功&quot;</span>, <span class="number">200</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> CommonResult&lt;User&gt; <span class="title function_">getUser</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span> &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;provider:UserController:getUser(Long id)&quot;</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.getUser(id);</span><br><span class="line">        logger.info(<span class="string">&quot;根据id获取用户信息，用户名称为：&#123;&#125;&quot;</span>,user.getUsername());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CommonResult</span>&lt;&gt;(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/getUserByIds&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> CommonResult&lt;List&lt;User&gt;&gt; <span class="title function_">getUserByIds</span><span class="params">(<span class="meta">@RequestParam</span> List&lt;Long&gt; ids)</span> &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;provider:UserController:getUserByIds(List&lt;Long&gt; ids)&quot;</span>);</span><br><span class="line">        List&lt;User&gt; userList = userService.getUserByIds(ids);</span><br><span class="line">        logger.info(<span class="string">&quot;根据ids获取用户信息，用户列表为：&#123;&#125;&quot;</span>, userList);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CommonResult</span>&lt;&gt;(userList);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/getByUsername&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> CommonResult&lt;User&gt; <span class="title function_">getByUsername</span><span class="params">(<span class="meta">@RequestParam</span> String username)</span> &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;provider:UserController:getByUsername(String username)&quot;</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.getByUsername(username);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CommonResult</span>&lt;&gt;(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/update&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> CommonResult <span class="title function_">update</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span> &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;provider:UserController:update(User user)&quot;</span>);</span><br><span class="line">        userService.update(user);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CommonResult</span>(<span class="string">&quot;操作成功&quot;</span>, <span class="number">200</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/delete/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> CommonResult <span class="title function_">delete</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span> &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;provider:UserController:delete(Long id)&quot;</span>);</span><br><span class="line">        userService.delete(id);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CommonResult</span>(<span class="string">&quot;操作成功&quot;</span>, <span class="number">200</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-3-Service-amp-ServiceImpl"><a href="#1-3-Service-amp-ServiceImpl" class="headerlink" title="1.3 Service &amp; ServiceImpl"></a>1.3 Service &amp; ServiceImpl</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">create</span><span class="params">(User user)</span>;</span><br><span class="line"></span><br><span class="line">    User <span class="title function_">getUser</span><span class="params">(Long id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(User user)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(Long id)</span>;</span><br><span class="line"></span><br><span class="line">    User <span class="title function_">getByUsername</span><span class="params">(String username)</span>;</span><br><span class="line"></span><br><span class="line">    List&lt;User&gt; <span class="title function_">getUserByIds</span><span class="params">(List&lt;Long&gt; ids)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;User&gt; userList;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(<span class="built_in">this</span>.getClass());</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">create</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;provider:UserServiceImpl:create(User user)&quot;</span>);</span><br><span class="line">        userList.add(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">getUser</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;provider:UserServiceImpl:getUser(Long id)&quot;</span>);</span><br><span class="line">        List&lt;User&gt; findUserList = userList.stream().filter(userItem -&gt; userItem.getId().equals(id)).collect(Collectors.toList());</span><br><span class="line">        <span class="keyword">if</span> (!CollectionUtils.isEmpty(findUserList)) &#123;</span><br><span class="line">            <span class="keyword">return</span> findUserList.get(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;provider:UserServiceImpl:update(User user)&quot;</span>);</span><br><span class="line">        userList.stream().filter(userItem -&gt; userItem.getId().equals(user.getId())).forEach(userItem -&gt; &#123;</span><br><span class="line">            userItem.setUsername(user.getUsername());</span><br><span class="line">            userItem.setPassword(user.getPassword());</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;provider:UserServiceImpl:delete(Long id)&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> getUser(id);</span><br><span class="line">        <span class="keyword">if</span> (user != <span class="literal">null</span>) &#123;</span><br><span class="line">            userList.remove(user);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">getByUsername</span><span class="params">(String username)</span> &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;provider:UserServiceImpl:getByUsername(String username)&quot;</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;User&gt; findUserList = userList.stream().filter(userItem -&gt; userItem.getUsername().equals(username)).collect(Collectors.toList());</span><br><span class="line">        <span class="keyword">if</span> (!CollectionUtils.isEmpty(findUserList)) &#123;</span><br><span class="line">            <span class="keyword">return</span> findUserList.get(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">getUserByIds</span><span class="params">(List&lt;Long&gt; ids)</span> &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;provider:UserServiceImpl:getUserByIds(List&lt;Long&gt; ids)&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> userList.stream().filter(userItem -&gt; ids.contains(userItem.getId())).collect(Collectors.toList());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initData</span><span class="params">()</span> &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;provider:UserServiceImpl:initData()&quot;</span>);</span><br><span class="line"></span><br><span class="line">        userList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        userList.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">1L</span>, <span class="string">&quot;macro&quot;</span>, <span class="string">&quot;123456&quot;</span>));</span><br><span class="line">        userList.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">2L</span>, <span class="string">&quot;andy&quot;</span>, <span class="string">&quot;123456&quot;</span>));</span><br><span class="line">        userList.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">3L</span>, <span class="string">&quot;mark&quot;</span>, <span class="string">&quot;123456&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-4-启动类"><a href="#1-4-启动类" class="headerlink" title="1.4 启动类"></a>1.4 启动类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DProviderApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(DProviderApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-5-application-yml"><a href="#1-5-application-yml" class="headerlink" title="1.5 application.yml"></a>1.5 application.yml</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8201</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">provider</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:8001/eureka/,http://127.0.0.1:8002/eureka/</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="1-6-其他代码"><a href="#1-6-其他代码" class="headerlink" title="1.6 其他代码"></a>1.6 其他代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonResult</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CommonResult</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CommonResult</span><span class="params">(T data, String message, Integer code)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">        <span class="built_in">this</span>.message = message;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CommonResult</span><span class="params">(String message, Integer code)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(<span class="literal">null</span>, message, code);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CommonResult</span><span class="params">(T data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(data, <span class="string">&quot;操作成功&quot;</span>, <span class="number">200</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">getData</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setData</span><span class="params">(T data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMessage</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMessage</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCode</span><span class="params">(Integer code)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(Long id, String username, String password)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.username = username;</span><br><span class="line">        <span class="built_in">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUsername</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUsername</span><span class="params">(String username)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPassword</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPassword</span><span class="params">(String password)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-编写openFeignClient-消费服务模块"><a href="#2-编写openFeignClient-消费服务模块" class="headerlink" title="2. 编写openFeignClient(消费服务模块)"></a>2. 编写openFeignClient(消费服务模块)</h1><h2 id="2-1-pom文件"><a href="#2-1-pom文件" class="headerlink" title="2.1 pom文件"></a>2.1 pom文件</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-2-Controller"><a href="#2-2-Controller" class="headerlink" title="2.2 Controller"></a>2.2 Controller</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserFeignController</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(<span class="built_in">this</span>.getClass());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> CommonResult <span class="title function_">getUser</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span> &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;consumer:UserFeignController:getUser/&#123;id&#125;&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> userService.getUser(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/getByUsername&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> CommonResult <span class="title function_">getByUsername</span><span class="params">(<span class="meta">@RequestParam</span> String username)</span> &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;consumer:UserFeignController:getByUsername&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> userService.getByUsername(username);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/create&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> CommonResult <span class="title function_">create</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span> &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;consumer:UserFeignController:create&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> userService.create(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/update&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> CommonResult <span class="title function_">update</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span> &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;consumer:UserFeignController:update&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> userService.update(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/delete/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> CommonResult <span class="title function_">delete</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span> &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;consumer:UserFeignController:delete:&#123;id&#125;&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> userService.delete(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-3-Service-amp-ServiceImpl"><a href="#2-3-Service-amp-ServiceImpl" class="headerlink" title="2.3 Service &amp; ServiceImpl"></a>2.3 Service &amp; ServiceImpl</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient(value = &quot;PROVIDER&quot;,fallback = UserFallbackService.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="meta">@PostMapping(&quot;/user/create&quot;)</span></span><br><span class="line">    CommonResult <span class="title function_">create</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/user/&#123;id&#125;&quot;)</span></span><br><span class="line">    CommonResult&lt;User&gt; <span class="title function_">getUser</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/user/getByUsername&quot;)</span></span><br><span class="line">    CommonResult&lt;User&gt; <span class="title function_">getByUsername</span><span class="params">(<span class="meta">@RequestParam</span> String username)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/user/update&quot;)</span></span><br><span class="line">    CommonResult <span class="title function_">update</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/user/delete/&#123;id&#125;&quot;)</span></span><br><span class="line">    CommonResult <span class="title function_">delete</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserFallbackService</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(<span class="built_in">this</span>.getClass());</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> CommonResult <span class="title function_">create</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;comsumer:UserFallbackService:create(User)&quot;</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">defaultUser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(-<span class="number">1L</span>, <span class="string">&quot;defaultUser&quot;</span>, <span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CommonResult</span>&lt;&gt;(defaultUser);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> CommonResult&lt;User&gt; <span class="title function_">getUser</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;comsumer:UserFallbackService:getUser(id)&quot;</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">defaultUser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(-<span class="number">1L</span>, <span class="string">&quot;defaultUser&quot;</span>, <span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CommonResult</span>&lt;&gt;(defaultUser);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> CommonResult&lt;User&gt; <span class="title function_">getByUsername</span><span class="params">(String username)</span> &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;comsumer:UserFallbackService:getByUsername(String username)&quot;</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">defaultUser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(-<span class="number">1L</span>, <span class="string">&quot;defaultUser&quot;</span>, <span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CommonResult</span>&lt;&gt;(defaultUser);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> CommonResult <span class="title function_">update</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;comsumer:UserFallbackService:update(User)&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CommonResult</span>(<span class="string">&quot;调用失败，服务被降级&quot;</span>,<span class="number">500</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> CommonResult <span class="title function_">delete</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;comsumer:UserFallbackService:delete(Long id)&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CommonResult</span>(<span class="string">&quot;调用失败，服务被降级&quot;</span>,<span class="number">500</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-4-启动类"><a href="#2-4-启动类" class="headerlink" title="2.4 启动类"></a>2.4 启动类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConsumerApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(ConsumerApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-5-application-yml"><a href="#2-5-application-yml" class="headerlink" title="2.5 application.yml"></a>2.5 application.yml</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8202</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">user-service</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:8001/eureka/,http://127.0.0.1:8002/eureka/</span></span><br><span class="line"></span><br><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">hystrix:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment">#在Feign中开启Hystrix</span></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">com.macro.cloud.service.UserService:</span> <span class="string">debug</span></span><br></pre></td></tr></table></figure><h2 id="2-6-其他代码"><a href="#2-6-其他代码" class="headerlink" title="2.6 其他代码"></a>2.6 其他代码</h2><p><code>CommonResult</code>类与<code>User</code>类同 1.6 小节。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FeignConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    Logger.Level <span class="title function_">feignLoggerLevel</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Logger.Level.FULL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-小结"><a href="#3-小结" class="headerlink" title="3. 小结"></a>3. 小结</h1><h2 id="3-1-代码中使用注意事项"><a href="#3-1-代码中使用注意事项" class="headerlink" title="3.1 代码中使用注意事项"></a>3.1 代码中使用注意事项</h2><ul><li><code>@FeignClient</code>中的<code>value</code>是要调用的服务的注册名，即<code>OpenFeignServer</code>在<code>eureka</code>的注册名。</li><li><code>FeignClient</code> 的 <code>Request</code> 路径，方式和参数要和被调用的 <code>Rest</code> 服务保持一致。</li></ul><h2 id="3-2-多个参数传递问题"><a href="#3-2-多个参数传递问题" class="headerlink" title="3.2 多个参数传递问题"></a>3.2 多个参数传递问题</h2><p>一般我们会使用 <code>@GetMapping</code> 和 <code>@PostMapping</code> 两种方式来调用 <code>Rest</code> 服务。而接收的参数则会使用 <code>@RequestParam</code> 和 <code>@RequestBody</code> 来获取。</p><ul><li><code>@RequestBody</code>：<code>@RequestBody</code> 只能用在 <code>Post</code> 请求，并且一个 <code>Post</code> 请求只能有一个 <code>@RequestBody。</code>  <code>@RequestBody</code> 的参数可以包括复杂类型。</li><li><code>@RequestParam</code>：<code>@RequestParam</code> 可以用在 <code>Post</code> 和 <code>Get</code> 请求中，但是要注意： <code>@RequestParam</code> 的参数只能是基本类型或者 <code>Enum</code> ，或者 <code>List</code> 和 <code>Map</code> （ <code>List</code> 和 <code>Map</code> 里面也只能是基本类型）。所以 <code>@RequestParam</code> 可以和 <code>@RequestBody</code> 一起使用。</li><li><code>@SpringQueryMap</code>：用于 GET 请求，且参数有复合类型，如包含两个 String 属性的 User 对象。 <code>@SpringQueryMap</code> 后面的参数只能是普通的 <code>POJO</code> ，不能是复合类型，否则解析不了。如果必须使用复合类型，那么使用 <code>@RequestBody</code> 吧。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;getUserAge&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getUserAge</span><span class="params">(<span class="meta">@RequestParam(&quot;userId&quot;)</span> String userId, <span class="meta">@SpringQueryMap</span> User user)</span>;</span><br></pre></td></tr></table></figure><img src="/JeckFS/2021/08/12/SpringCloud%E8%A7%86%E9%A2%91-Feign/1.png" class="" title="This is 1-th image."><img src="/JeckFS/2021/08/12/SpringCloud%E8%A7%86%E9%A2%91-Feign/2.png" class="" title="This is 2-th image."><img src="/JeckFS/2021/08/12/SpringCloud%E8%A7%86%E9%A2%91-Feign/3.png" class="" title="This is 3-th image."><img src="/JeckFS/2021/08/12/SpringCloud%E8%A7%86%E9%A2%91-Feign/4.png" class="" title="This is 4-th image."><img src="/JeckFS/2021/08/12/SpringCloud%E8%A7%86%E9%A2%91-Feign/5.png" class="" title="This is 5-th image."><p>环境搭建：两个Eureka注册中心、两个service-provider</p><p>在service-consumer中通过openFeign远程调用服务。</p><p>service-sunsumer的搭建：</p><img src="/JeckFS/2021/08/12/SpringCloud%E8%A7%86%E9%A2%91-Feign/6.png" class="" title="This is 6-th image."><img src="/JeckFS/2021/08/12/SpringCloud%E8%A7%86%E9%A2%91-Feign/7.png" class="" title="This is 7-th image."><img src="/JeckFS/2021/08/12/SpringCloud%E8%A7%86%E9%A2%91-Feign/8.png" class="" title="This is 8-th image."><p>编写调用的核心代码</p><img src="/JeckFS/2021/08/12/SpringCloud%E8%A7%86%E9%A2%91-Feign/9.png" class="" title="This is 9-th image."><p>使用openFeign的注解修饰接口：</p><img src="/JeckFS/2021/08/12/SpringCloud%E8%A7%86%E9%A2%91-Feign/10.png" class="" title="This is 10-th image."><p>启动类使用@EnableFeignClients注解开启openFeign的使用。</p><img src="/JeckFS/2021/08/12/SpringCloud%E8%A7%86%E9%A2%91-Feign/11.png" class="" title="This is 11-th image."><img src="/JeckFS/2021/08/12/SpringCloud%E8%A7%86%E9%A2%91-Feign/12.png" class="" title="This is 12-th image."><img src="/JeckFS/2021/08/12/SpringCloud%E8%A7%86%E9%A2%91-Feign/13.png" class="" title="This is 13-th image."><img src="/JeckFS/2021/08/12/SpringCloud%E8%A7%86%E9%A2%91-Feign/14.png" class="" title="This is 14-th image."><img src="/JeckFS/2021/08/12/SpringCloud%E8%A7%86%E9%A2%91-Feign/15.png" class="" title="This is 15-th image."><img src="/JeckFS/2021/08/12/SpringCloud%E8%A7%86%E9%A2%91-Feign/16.png" class="" title="This is 16-th image."><img src="/JeckFS/2021/08/12/SpringCloud%E8%A7%86%E9%A2%91-Feign/17.png" class="" title="This is 17-th image."><img src="/JeckFS/2021/08/12/SpringCloud%E8%A7%86%E9%A2%91-Feign/18.png" class="" title="This is 18-th image."><img src="/JeckFS/2021/08/12/SpringCloud%E8%A7%86%E9%A2%91-Feign/19.png" class="" title="This is 19-th image."><p>在ProductServiceImpl实现类中添加如下方法：</p><img src="/JeckFS/2021/08/12/SpringCloud%E8%A7%86%E9%A2%91-Feign/20.png" class="" title="This is 20-th image."><img src="/JeckFS/2021/08/12/SpringCloud%E8%A7%86%E9%A2%91-Feign/21.png" class="" title="This is 21-th image."><img src="/JeckFS/2021/08/12/SpringCloud%E8%A7%86%E9%A2%91-Feign/22.png" class="" title="This is 22-th image."><p>在服务消费者中：</p><img src="/JeckFS/2021/08/12/SpringCloud%E8%A7%86%E9%A2%91-Feign/23.png" class="" title="This is 23-th image."><p>控制层进行调用。（地址P058）</p><img src="/JeckFS/2021/08/12/SpringCloud%E8%A7%86%E9%A2%91-Feign/24.png" class="" title="This is 24-th image."><img src="/JeckFS/2021/08/12/SpringCloud%E8%A7%86%E9%A2%91-Feign/25.png" class="" title="This is 25-th image."><img src="/JeckFS/2021/08/12/SpringCloud%E8%A7%86%E9%A2%91-Feign/26.png" class="" title="This is 26-th image."><p>在consumer中配置。</p><img src="/JeckFS/2021/08/12/SpringCloud%E8%A7%86%E9%A2%91-Feign/27.png" class="" title="This is 27-th image."><img src="/JeckFS/2021/08/12/SpringCloud%E8%A7%86%E9%A2%91-Feign/28.png" class="" title="This is 28-th image."><img src="/JeckFS/2021/08/12/SpringCloud%E8%A7%86%E9%A2%91-Feign/29.png" class="" title="This is 29-th image."><img src="/JeckFS/2021/08/12/SpringCloud%E8%A7%86%E9%A2%91-Feign/30.png" class="" title="This is 30-th image."><img src="/JeckFS/2021/08/12/SpringCloud%E8%A7%86%E9%A2%91-Feign/31.png" class="" title="This is 31-th image."><img src="/JeckFS/2021/08/12/SpringCloud%E8%A7%86%E9%A2%91-Feign/32.png" class="" title="This is 32-th image."><img src="/JeckFS/2021/08/12/SpringCloud%E8%A7%86%E9%A2%91-Feign/33.png" class="" title="This is 33-th image."><p>服务消费者：</p><img src="/JeckFS/2021/08/12/SpringCloud%E8%A7%86%E9%A2%91-Feign/34.png" class="" title="This is 34-th image."><img src="/JeckFS/2021/08/12/SpringCloud%E8%A7%86%E9%A2%91-Feign/35.png" class="" title="This is 35-th image."><img src="/JeckFS/2021/08/12/SpringCloud%E8%A7%86%E9%A2%91-Feign/36.png" class="" title="This is 36-th image."><img src="/JeckFS/2021/08/12/SpringCloud%E8%A7%86%E9%A2%91-Feign/37.png" class="" title="This is 37-th image."><p>需要配置logback.xml，缺少该文件信息。</p><img src="/JeckFS/2021/08/12/SpringCloud%E8%A7%86%E9%A2%91-Feign/38.png" class="" title="This is 38-th image."><img src="/JeckFS/2021/08/12/SpringCloud%E8%A7%86%E9%A2%91-Feign/39.png" class="" title="This is 39-th image."><img src="/JeckFS/2021/08/12/SpringCloud%E8%A7%86%E9%A2%91-Feign/40.png" class="" title="This is 40-th image."><img src="/JeckFS/2021/08/12/SpringCloud%E8%A7%86%E9%A2%91-Feign/41.png" class="" title="This is 41-th image."><p>next：</p><p><a href="https://www.bilibili.com/video/BV1mh411q7WM?p=64&amp;spm_id_from=pageDriver">https://www.bilibili.com/video/BV1mh411q7WM?p=64&amp;spm_id_from=pageDriver</a></p>]]></content>
      
      
      <categories>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud视频-Consul</title>
      <link href="/JeckFS/2021/08/12/SpringCloud%E8%A7%86%E9%A2%91-Consul/"/>
      <url>/JeckFS/2021/08/12/SpringCloud%E8%A7%86%E9%A2%91-Consul/</url>
      
        <content type="html"><![CDATA[<img src="/JeckFS/2021/08/12/SpringCloud%E8%A7%86%E9%A2%91-Consul/1.png" class="" title="This is 1-th image."><img src="/JeckFS/2021/08/12/SpringCloud%E8%A7%86%E9%A2%91-Consul/2.png" class="" title="This is 2-th image."><img src="/JeckFS/2021/08/12/SpringCloud%E8%A7%86%E9%A2%91-Consul/3.png" class="" title="This is 3-th image."><img src="/JeckFS/2021/08/12/SpringCloud%E8%A7%86%E9%A2%91-Consul/4.png" class="" title="This is 4-th image."><img src="/JeckFS/2021/08/12/SpringCloud%E8%A7%86%E9%A2%91-Consul/5.png" class="" title="This is 5-th image."><img src="/JeckFS/2021/08/12/SpringCloud%E8%A7%86%E9%A2%91-Consul/6.png" class="" title="This is 6-th image."><img src="/JeckFS/2021/08/12/SpringCloud%E8%A7%86%E9%A2%91-Consul/7.png" class="" title="This is 7-th image."><img src="/JeckFS/2021/08/12/SpringCloud%E8%A7%86%E9%A2%91-Consul/8.png" class="" title="This is 8-th image."><img src="/JeckFS/2021/08/12/SpringCloud%E8%A7%86%E9%A2%91-Consul/9.png" class="" title="This is 9-th image."><img src="/JeckFS/2021/08/12/SpringCloud%E8%A7%86%E9%A2%91-Consul/10.png" class="" title="This is 10-th image."><img src="/JeckFS/2021/08/12/SpringCloud%E8%A7%86%E9%A2%91-Consul/11.png" class="" title="This is 11-th image."><p>consul agent -dev -client=服务提供者的ip</p><img src="/JeckFS/2021/08/12/SpringCloud%E8%A7%86%E9%A2%91-Consul/12.png" class="" title="This is 12-th image."><h1 id="入门案例"><a href="#入门案例" class="headerlink" title="入门案例"></a>入门案例</h1><p>pom文件：</p><img src="/JeckFS/2021/08/12/SpringCloud%E8%A7%86%E9%A2%91-Consul/13.png" class="" title="This is 13-th image."><img src="/JeckFS/2021/08/12/SpringCloud%E8%A7%86%E9%A2%91-Consul/14.png" class="" title="This is 14-th image."><p>创建服务提供者service-provider，其依赖信息如下：</p><img src="/JeckFS/2021/08/12/SpringCloud%E8%A7%86%E9%A2%91-Consul/15.png" class="" title="This is 15-th image."><img src="/JeckFS/2021/08/12/SpringCloud%E8%A7%86%E9%A2%91-Consul/16.png" class="" title="This is 16-th image."><img src="/JeckFS/2021/08/12/SpringCloud%E8%A7%86%E9%A2%91-Consul/17.png" class="" title="This is 17-th image."><p>配置文件：</p><img src="/JeckFS/2021/08/12/SpringCloud%E8%A7%86%E9%A2%91-Consul/18.png" class="" title="This is 18-th image."><img src="/JeckFS/2021/08/12/SpringCloud%E8%A7%86%E9%A2%91-Consul/19.png" class="" title="This is 19-th image."><img src="/JeckFS/2021/08/12/SpringCloud%E8%A7%86%E9%A2%91-Consul/20.png" class="" title="This is 20-th image."><img src="/JeckFS/2021/08/12/SpringCloud%E8%A7%86%E9%A2%91-Consul/21.png" class="" title="This is 21-th image."><img src="/JeckFS/2021/08/12/SpringCloud%E8%A7%86%E9%A2%91-Consul/22.png" class="" title="This is 22-th image."><img src="/JeckFS/2021/08/12/SpringCloud%E8%A7%86%E9%A2%91-Consul/23.png" class="" title="This is 23-th image."><p>构建服务消费者</p><p>依赖信息：</p><img src="/JeckFS/2021/08/12/SpringCloud%E8%A7%86%E9%A2%91-Consul/24.png" class="" title="This is 24-th image."><img src="/JeckFS/2021/08/12/SpringCloud%E8%A7%86%E9%A2%91-Consul/25.png" class="" title="This is 25-th image."><img src="/JeckFS/2021/08/12/SpringCloud%E8%A7%86%E9%A2%91-Consul/26.png" class="" title="This is 26-th image."><img src="/JeckFS/2021/08/12/SpringCloud%E8%A7%86%E9%A2%91-Consul/27.png" class="" title="This is 27-th image."><img src="/JeckFS/2021/08/12/SpringCloud%E8%A7%86%E9%A2%91-Consul/28.png" class="" title="This is 28-th image."><img src="/JeckFS/2021/08/12/SpringCloud%E8%A7%86%E9%A2%91-Consul/29.png" class="" title="This is 29-th image."><img src="/JeckFS/2021/08/12/SpringCloud%E8%A7%86%E9%A2%91-Consul/30.png" class="" title="This is 30-th image."><img src="/JeckFS/2021/08/12/SpringCloud%E8%A7%86%E9%A2%91-Consul/31.png" class="" title="This is 31-th image."><img src="/JeckFS/2021/08/12/SpringCloud%E8%A7%86%E9%A2%91-Consul/32.png" class="" title="This is 32-th image."><img src="/JeckFS/2021/08/12/SpringCloud%E8%A7%86%E9%A2%91-Consul/33.png" class="" title="This is 33-th image."><img src="/JeckFS/2021/08/12/SpringCloud%E8%A7%86%E9%A2%91-Consul/34.png" class="" title="This is 34-th image."><img src="/JeckFS/2021/08/12/SpringCloud%E8%A7%86%E9%A2%91-Consul/35.png" class="" title="This is 35-th image."><img src="/JeckFS/2021/08/12/SpringCloud%E8%A7%86%E9%A2%91-Consul/36.png" class="" title="This is 36-th image."><img src="/JeckFS/2021/08/12/SpringCloud%E8%A7%86%E9%A2%91-Consul/37.png" class="" title="This is 37-th image."><img src="/JeckFS/2021/08/12/SpringCloud%E8%A7%86%E9%A2%91-Consul/38.png" class="" title="This is 38-th image."><img src="/JeckFS/2021/08/12/SpringCloud%E8%A7%86%E9%A2%91-Consul/39.png" class="" title="This is 39-th image."><img src="/JeckFS/2021/08/12/SpringCloud%E8%A7%86%E9%A2%91-Consul/40.png" class="" title="This is 40-th image."><img src="/JeckFS/2021/08/12/SpringCloud%E8%A7%86%E9%A2%91-Consul/41.png" class="" title="This is 41-th image."><img src="/JeckFS/2021/08/12/SpringCloud%E8%A7%86%E9%A2%91-Consul/42.png" class="" title="This is 42-th image.">]]></content>
      
      
      <categories>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud视频_Ribbon</title>
      <link href="/JeckFS/2021/08/12/SpringCloud%E8%A7%86%E9%A2%91-Ribbon/"/>
      <url>/JeckFS/2021/08/12/SpringCloud%E8%A7%86%E9%A2%91-Ribbon/</url>
      
        <content type="html"><![CDATA[<img src="/JeckFS/2021/08/12/SpringCloud%E8%A7%86%E9%A2%91-Ribbon/1.png" class="" title="This is 1-th image."><img src="/JeckFS/2021/08/12/SpringCloud%E8%A7%86%E9%A2%91-Ribbon/2.png" class="" title="This is 2-th image."><img src="/JeckFS/2021/08/12/SpringCloud%E8%A7%86%E9%A2%91-Ribbon/3.png" class="" title="This is 3-th image."><img src="/JeckFS/2021/08/12/SpringCloud%E8%A7%86%E9%A2%91-Ribbon/4.png" class="" title="This is 4-th image."><img src="/JeckFS/2021/08/12/SpringCloud%E8%A7%86%E9%A2%91-Ribbon/5.png" class="" title="This is 5-th image."><img src="/JeckFS/2021/08/12/SpringCloud%E8%A7%86%E9%A2%91-Ribbon/6.png" class="" title="This is 6-th image."><img src="/JeckFS/2021/08/12/SpringCloud%E8%A7%86%E9%A2%91-Ribbon/7.png" class="" title="This is 7-th image."><img src="/JeckFS/2021/08/12/SpringCloud%E8%A7%86%E9%A2%91-Ribbon/8.png" class="" title="This is 8-th image."><img src="/JeckFS/2021/08/12/SpringCloud%E8%A7%86%E9%A2%91-Ribbon/9.png" class="" title="This is 9-th image."><p>在消费者服务中打印调用的服务器的端口和地址即可看到调用的是哪个服务。</p><img src="/JeckFS/2021/08/12/SpringCloud%E8%A7%86%E9%A2%91-Ribbon/10.png" class="" title="This is 10-th image."><img src="/JeckFS/2021/08/12/SpringCloud%E8%A7%86%E9%A2%91-Ribbon/11.png" class="" title="This is 11-th image."><img src="/JeckFS/2021/08/12/SpringCloud%E8%A7%86%E9%A2%91-Ribbon/12.png" class="" title="This is 12-th image."><p>在点对点直连中可以不添加eureka的依赖，绕过注册中心直接请求服务。</p><img src="/JeckFS/2021/08/12/SpringCloud%E8%A7%86%E9%A2%91-Ribbon/13.png" class="" title="This is 13-th image."><img src="/JeckFS/2021/08/12/SpringCloud%E8%A7%86%E9%A2%91-Ribbon/14.png" class="" title="This is 14-th image.">]]></content>
      
      
      <categories>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud视频_Eureka</title>
      <link href="/JeckFS/2021/08/11/SpringCloud%E8%A7%86%E9%A2%91/"/>
      <url>/JeckFS/2021/08/11/SpringCloud%E8%A7%86%E9%A2%91/</url>
      
        <content type="html"><![CDATA[<p>SpringCloud Netflix第一代</p><img src="/JeckFS/2021/08/11/SpringCloud%E8%A7%86%E9%A2%91/1.png" class="" title="This is 1-th image."><p>SpringCloud Alibaba第二代</p><img src="/JeckFS/2021/08/11/SpringCloud%E8%A7%86%E9%A2%91/2.png" class="" title="This is 2-th image."><img src="/JeckFS/2021/08/11/SpringCloud%E8%A7%86%E9%A2%91/3.png" class="" title="This is 3-th image."><img src="/JeckFS/2021/08/11/SpringCloud%E8%A7%86%E9%A2%91/4.png" class="" title="This is 4-th image."><img src="/JeckFS/2021/08/11/SpringCloud%E8%A7%86%E9%A2%91/5.png" class="" title="This is 5-th image."><img src="/JeckFS/2021/08/11/SpringCloud%E8%A7%86%E9%A2%91/6.png" class="" title="This is 6-th image."><p>发行版本号的定义规则：</p><img src="/JeckFS/2021/08/11/SpringCloud%E8%A7%86%E9%A2%91/7.png" class="" title="This is 7-th image."><img src="/JeckFS/2021/08/11/SpringCloud%E8%A7%86%E9%A2%91/8.png" class="" title="This is 8-th image."><h1 id="Eureka"><a href="#Eureka" class="headerlink" title="Eureka"></a>Eureka</h1><img src="/JeckFS/2021/08/11/SpringCloud%E8%A7%86%E9%A2%91/9.png" class="" title="This is 9-th image."><img src="/JeckFS/2021/08/11/SpringCloud%E8%A7%86%E9%A2%91/10.png" class="" title="This is 10-th image."><img src="/JeckFS/2021/08/11/SpringCloud%E8%A7%86%E9%A2%91/11.png" class="" title="This is 11-th image."><img src="/JeckFS/2021/08/11/SpringCloud%E8%A7%86%E9%A2%91/12.png" class="" title="This is 12-th image."><img src="/JeckFS/2021/08/11/SpringCloud%E8%A7%86%E9%A2%91/13.png" class="" title="This is 13-th image."><img src="/JeckFS/2021/08/11/SpringCloud%E8%A7%86%E9%A2%91/14.png" class="" title="This is 14-th image."><img src="/JeckFS/2021/08/11/SpringCloud%E8%A7%86%E9%A2%91/15.png" class="" title="This is 15-th image."><img src="/JeckFS/2021/08/11/SpringCloud%E8%A7%86%E9%A2%91/16.png" class="" title="This is 16-th image."><p>eureka-demo的子模块eureka-server的依赖</p><img src="/JeckFS/2021/08/11/SpringCloud%E8%A7%86%E9%A2%91/17.png" class="" title="This is 17-th image."><img src="/JeckFS/2021/08/11/SpringCloud%E8%A7%86%E9%A2%91/18.png" class="" title="This is 18-th image."><p>注意添加的是spring-cloud-starter-netflix-eureka-server</p><p>eureka-server的配置文件：</p><img src="/JeckFS/2021/08/11/SpringCloud%E8%A7%86%E9%A2%91/19.png" class="" title="This is 19-th image."><p>最后在启动类上添加<code>@EnableEurekaServer</code>注解</p><p>下一个<br><a href="https://www.bilibili.com/video/BV1mh411q7WM?p=24&amp;spm_id_from=pageDriver">https://www.bilibili.com/video/BV1mh411q7WM?p=24&amp;spm_id_from=pageDriver</a></p><p>高可用Eureka注册中心（集群形式）</p><img src="/JeckFS/2021/08/11/SpringCloud%E8%A7%86%E9%A2%91/20.png" class="" title="This is 20-th image."><p>pom.xml：</p><p>并将register-with-eureka与fetch-registry删除(默认为true)。</p><img src="/JeckFS/2021/08/11/SpringCloud%E8%A7%86%E9%A2%91/21.png" class="" title="This is 21-th image."><img src="/JeckFS/2021/08/11/SpringCloud%E8%A7%86%E9%A2%91/22.png" class="" title="This is 22-th image."><p>在启动类中加入@EnableEurekaServer注解。</p><img src="/JeckFS/2021/08/11/SpringCloud%E8%A7%86%E9%A2%91/23.png" class="" title="This is 23-th image."><img src="/JeckFS/2021/08/11/SpringCloud%E8%A7%86%E9%A2%91/24.png" class="" title="This is 24-th image."><p>服务项目的依赖信息：</p><img src="/JeckFS/2021/08/11/SpringCloud%E8%A7%86%E9%A2%91/25.png" class="" title="This is 25-th image."><img src="/JeckFS/2021/08/11/SpringCloud%E8%A7%86%E9%A2%91/26.png" class="" title="This is 26-th image."><img src="/JeckFS/2021/08/11/SpringCloud%E8%A7%86%E9%A2%91/27.png" class="" title="This is 27-th image."><img src="/JeckFS/2021/08/11/SpringCloud%E8%A7%86%E9%A2%91/28.png" class="" title="This is 28-th image."><img src="/JeckFS/2021/08/11/SpringCloud%E8%A7%86%E9%A2%91/29.png" class="" title="This is 29-th image."><img src="/JeckFS/2021/08/11/SpringCloud%E8%A7%86%E9%A2%91/30.png" class="" title="This is 30-th image."><img src="/JeckFS/2021/08/11/SpringCloud%E8%A7%86%E9%A2%91/31.png" class="" title="This is 31-th image."><img src="/JeckFS/2021/08/11/SpringCloud%E8%A7%86%E9%A2%91/32.png" class="" title="This is 32-th image."><img src="/JeckFS/2021/08/11/SpringCloud%E8%A7%86%E9%A2%91/33.png" class="" title="This is 33-th image."><p>项目依赖：</p><p>继承父项目依赖。</p><img src="/JeckFS/2021/08/11/SpringCloud%E8%A7%86%E9%A2%91/34.png" class="" title="This is 34-th image."><p>不把消费者注册到注册中心，不向外提供任何服务，这样会远程拉取注册中心的信息，而在Eureka界面中找不到该服务。（实际中应该注册）。</p><img src="/JeckFS/2021/08/11/SpringCloud%E8%A7%86%E9%A2%91/35.png" class="" title="This is 35-th image."><img src="/JeckFS/2021/08/11/SpringCloud%E8%A7%86%E9%A2%91/36.png" class="" title="This is 36-th image."><img src="/JeckFS/2021/08/11/SpringCloud%E8%A7%86%E9%A2%91/37.png" class="" title="This is 37-th image."><img src="/JeckFS/2021/08/11/SpringCloud%E8%A7%86%E9%A2%91/38.png" class="" title="This is 38-th image."><img src="/JeckFS/2021/08/11/SpringCloud%E8%A7%86%E9%A2%91/39.png" class="" title="This is 39-th image."><img src="/JeckFS/2021/08/11/SpringCloud%E8%A7%86%E9%A2%91/40.png" class="" title="This is 40-th image."><img src="/JeckFS/2021/08/11/SpringCloud%E8%A7%86%E9%A2%91/41.png" class="" title="This is 41-th image."><img src="/JeckFS/2021/08/11/SpringCloud%E8%A7%86%E9%A2%91/42.png" class="" title="This is 42-th image."><img src="/JeckFS/2021/08/11/SpringCloud%E8%A7%86%E9%A2%91/43.png" class="" title="This is 43-th image."><p>打开<a href="http://localhost:9090/order/1查看效果">http://localhost:9090/order/1查看效果</a></p><p>消费服务的三种方式：</p><ul><li>DiscoveryClient</li><li>LoadBalancerClient</li><li>@LoadBalanced</li></ul><img src="/JeckFS/2021/08/11/SpringCloud%E8%A7%86%E9%A2%91/44.png" class="" title="This is 44-th image."><img src="/JeckFS/2021/08/11/SpringCloud%E8%A7%86%E9%A2%91/45.png" class="" title="This is 45-th image."><p>在OrderServiceImpl中改为修改后的方法：</p><img src="/JeckFS/2021/08/11/SpringCloud%E8%A7%86%E9%A2%91/46.png" class="" title="This is 46-th image."><img src="/JeckFS/2021/08/11/SpringCloud%E8%A7%86%E9%A2%91/47.png" class="" title="This is 47-th image."><img src="/JeckFS/2021/08/11/SpringCloud%E8%A7%86%E9%A2%91/48.png" class="" title="This is 48-th image."><img src="/JeckFS/2021/08/11/SpringCloud%E8%A7%86%E9%A2%91/49.png" class="" title="This is 49-th image."><img src="/JeckFS/2021/08/11/SpringCloud%E8%A7%86%E9%A2%91/50.png" class="" title="This is 50-th image."><img src="/JeckFS/2021/08/11/SpringCloud%E8%A7%86%E9%A2%91/51.png" class="" title="This is 51-th image."><p>CAP原则：</p><img src="/JeckFS/2021/08/11/SpringCloud%E8%A7%86%E9%A2%91/52.png" class="" title="This is 52-th image."><img src="/JeckFS/2021/08/11/SpringCloud%E8%A7%86%E9%A2%91/53.png" class="" title="This is 53-th image."><img src="/JeckFS/2021/08/11/SpringCloud%E8%A7%86%E9%A2%91/54.png" class="" title="This is 54-th image."><img src="/JeckFS/2021/08/11/SpringCloud%E8%A7%86%E9%A2%91/55.png" class="" title="This is 55-th image."><img src="/JeckFS/2021/08/11/SpringCloud%E8%A7%86%E9%A2%91/56.png" class="" title="This is 56-th image."><img src="/JeckFS/2021/08/11/SpringCloud%E8%A7%86%E9%A2%91/57.png" class="" title="This is 57-th image."><img src="/JeckFS/2021/08/11/SpringCloud%E8%A7%86%E9%A2%91/58.png" class="" title="This is 58-th image."><img src="/JeckFS/2021/08/11/SpringCloud%E8%A7%86%E9%A2%91/59.png" class="" title="This is 59-th image."><img src="/JeckFS/2021/08/11/SpringCloud%E8%A7%86%E9%A2%91/60.png" class="" title="This is 60-th image."><img src="/JeckFS/2021/08/11/SpringCloud%E8%A7%86%E9%A2%91/61.png" class="" title="This is 61-th image."><img src="/JeckFS/2021/08/11/SpringCloud%E8%A7%86%E9%A2%91/62.png" class="" title="This is 62-th image."><img src="/JeckFS/2021/08/11/SpringCloud%E8%A7%86%E9%A2%91/63.png" class="" title="This is 63-th image."><img src="/JeckFS/2021/08/11/SpringCloud%E8%A7%86%E9%A2%91/64.png" class="" title="This is 64-th image."><img src="/JeckFS/2021/08/11/SpringCloud%E8%A7%86%E9%A2%91/65.png" class="" title="This is 65-th image."><img src="/JeckFS/2021/08/11/SpringCloud%E8%A7%86%E9%A2%91/66.png" class="" title="This is 66-th image.">]]></content>
      
      
      <categories>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>logstash</title>
      <link href="/JeckFS/2021/07/26/logstash/"/>
      <url>/JeckFS/2021/07/26/logstash/</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/UbuntuTouch/article/details/105973985">Logostash</a><br><a href="https://elasticstack.blog.csdn.net/article/details/102728604">Logstash</a><br><a href="https://elasticstack.blog.csdn.net/">刘晓国博客</a></p><p>主要作用：转换和缓冲来自各种数据源的数据。<br>使用Logstash的<a href="https://www.elastic.co/guide/en/logstash/current/filter-plugins.html">Filter</a>对数据进行解析、丰富、转换等，最后根据需要存入不同的地方。</p><img src="/JeckFS/2021/07/26/logstash/1.png" class="" title="This is 1-th image."><img src="/JeckFS/2021/07/26/logstash/2.png" class="" title="This is 2-th image."><img src="/JeckFS/2021/07/26/logstash/3.png" class="" title="This is 3-th image."><img src="/JeckFS/2021/07/26/logstash/4.png" class="" title="This is 4-th image."><img src="/JeckFS/2021/07/26/logstash/5.png" class="" title="This is 5-th image."><img src="/JeckFS/2021/07/26/logstash/6.png" class="" title="This is 6-th image."><p><a href="https://www.elastic.co/guide/en/logstash/current/index.html">Input plugins、Filter plugins、Output plugins</a></p><img src="/JeckFS/2021/07/26/logstash/7.png" class="" title="This is 7-th image."><p><a href="https://www.elastic.co/cn/videos/">https://www.elastic.co/cn/videos/</a></p>]]></content>
      
      
      <categories>
          
          <category> 日志分析系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日志分析系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Elasticsearch</title>
      <link href="/JeckFS/2021/07/26/Elasticsearch/"/>
      <url>/JeckFS/2021/07/26/Elasticsearch/</url>
      
        <content type="html"><![CDATA[<p><a href="https://zhuanlan.zhihu.com/p/54384152">版本6.2.2教程</a></p><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.13/settings.html">版本7.13配置教程</a></p><h1 id="ES的配置"><a href="#ES的配置" class="headerlink" title="ES的配置"></a>ES的配置</h1><p>三个配置文件：</p><ul><li>elasticsearch.yml：elasticsearch的相关配置</li><li>jvm.options：elasticsearch运行的jvm相关设置</li><li>log4j2.properties elasticsearch日志的配置</li></ul><p>配置文件的默认路径： <code>/home/yfs/software/elasticsearch-7.13.4/config</code></p><p>可通过全局变量<code>ES_PATH_CONF</code>指定其他路径中的配置文件启动elasticsearch。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ---------------------------------- Cluster -----------------------------------</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Use a descriptive name for your cluster:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="attr">cluster.name:</span> <span class="string">my-application-yfs</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># ------------------------------------ Node ------------------------------------</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Use a descriptive name for the node:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="attr">node.name:</span> <span class="string">node-1-yfs</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Add custom attributes to the node:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#node.attr.rack: r1</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># ----------------------------------- Paths ------------------------------------</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Path to directory where to store the data (separate multiple locations by comma):</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#path.data: /path/to/data</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Path to log files:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#path.logs: /path/to/logs</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># ----------------------------------- Memory -----------------------------------</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Lock the memory on startup:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#bootstrap.memory_lock: true</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Make sure that the heap size is set to about half the memory available</span></span><br><span class="line"><span class="comment"># on the system and that the owner of the process is allowed to use this</span></span><br><span class="line"><span class="comment"># limit.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Elasticsearch performs poorly when the system is swapping the memory.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># ---------------------------------- Network -----------------------------------</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># By default Elasticsearch is only accessible on localhost. Set a different</span></span><br><span class="line"><span class="comment"># address here to expose this node on the network:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#network.host: 192.168.0.1   # 由开发模式转向生产模式时才会使用此配置项。</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># By default Elasticsearch listens for HTTP traffic on the first free port it</span></span><br><span class="line"><span class="comment"># finds starting at 9200. Set a specific HTTP port here:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#http.port: 9200</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># For more information, consult the network module documentation.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># --------------------------------- Discovery ----------------------------------</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Pass an initial list of hosts to perform discovery when this node is started:</span></span><br><span class="line"><span class="comment"># The default list of hosts is [&quot;127.0.0.1&quot;, &quot;[::1]&quot;]</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#discovery.seed_hosts: [&quot;host1&quot;, &quot;host2&quot;]</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Bootstrap the cluster using an initial set of master-eligible nodes:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#cluster.initial_master_nodes: [&quot;node-1&quot;, &quot;node-2&quot;]</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># For more information, consult the discovery and cluster formation module documentation.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># ---------------------------------- Various -----------------------------------</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Require explicit names when deleting indices:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#action.destructive_requires_name: true</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>elasticsearch安全配置：<br><a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.13/security-minimal-setup.html">教程</a></p><p><a href="https://www.bilibili.com/video/BV1FK4y1x7Dr?from=search&amp;seid=4992922076605689829">6.8视频教程</a></p><h1 id="Cluster"><a href="#Cluster" class="headerlink" title="Cluster"></a>Cluster</h1><p>启动elasticsearch时重写cluster与node的名字<br><code>[elasticsearch-6.6.1] bin/elasticsearch -Ecluster.name=my_cluster_name_yfs -Enode.name=my_node_name_yfs</code></p><h1 id="REST-API的使用"><a href="#REST-API的使用" class="headerlink" title="REST API的使用"></a>REST API的使用</h1><h2 id="1-Check-your-cluster-node-and-index-health-status-and-statistics"><a href="#1-Check-your-cluster-node-and-index-health-status-and-statistics" class="headerlink" title="1.Check your cluster, node, and index health, status, and statistics"></a>1.Check your cluster, node, and index health, status, and statistics</h2><img src="/JeckFS/2021/07/26/Elasticsearch/1.png" class="" title="This is 1-th image."><p>从中可以看到cluster的运行状态为‘green’。</p><ul><li>Green - everything is good (cluster is fully functional)</li><li>Yellow - all data is available but some replicas are not yet allocated (cluster is fully functional)</li><li>Red - some data is not available for whatever reason (cluster is partially functional)</li></ul><p>当cluster为红色时，可用的shards仍可以相应搜索请求。</p><p>列出</p><h2 id="2-Administer-your-cluster-node-and-index-data-and-metadata"><a href="#2-Administer-your-cluster-node-and-index-data-and-metadata" class="headerlink" title="2.Administer your cluster, node, and index data and metadata"></a>2.Administer your cluster, node, and index data and metadata</h2><p>List All Indices:<br><img src="/JeckFS/2021/07/26/Elasticsearch/2.png" class="" title="This is 2-th image."></p><p>Create an Index:</p><img src="/JeckFS/2021/07/26/Elasticsearch/3.png" class="" title="This is 3-th image."><img src="/JeckFS/2021/07/26/Elasticsearch/4.png" class="" title="This is 4-th image."><p>结果解释：<br>The results of the second command tells us that we now have 1 index named customer and it has 5 primary shards and 1 replica (the defaults) and it contains 0 documents in it.<br>从中可以看出health为yellow，表示replica没有分配到node，这是因为cluster中只有一个node的问题，当有新的node加入到cluster中后，其health状态就会变为green。</p><h2 id="3-Perform-CRUD-Create-Read-Update-and-Delete-and-search-operations-against-your-indexes"><a href="#3-Perform-CRUD-Create-Read-Update-and-Delete-and-search-operations-against-your-indexes" class="headerlink" title="3.Perform CRUD (Create, Read, Update, and Delete) and search operations against your indexes"></a>3.Perform CRUD (Create, Read, Update, and Delete) and search operations against your indexes</h2><p>插入一条数据并查询：</p><img src="/JeckFS/2021/07/26/Elasticsearch/5.png" class="" title="This is 5-th image."><p>删除index：</p><img src="/JeckFS/2021/07/26/Elasticsearch/6.png" class="" title="This is 6-th image."><p>使用elasticsearch的一般请求形式：<br><code>&lt;HTTP Verb&gt; /&lt;Index&gt;/&lt;Type&gt;/&lt;ID&gt;</code></p><p>document的修改与替换：</p><img src="/JeckFS/2021/07/26/Elasticsearch/7.png" class="" title="This is 7-th image."><p>使用POST插入document时可以不用写明id，此时id由系统随机生成。</p><img src="/JeckFS/2021/07/26/Elasticsearch/8.png" class="" title="This is 8-th image."><p>更新Document：（并不是in-place修改）<br>Whenever we do an update, Elasticsearch deletes the old document and then indexes a new document with the update applied to it in one shot.</p><img src="/JeckFS/2021/07/26/Elasticsearch/9.png" class="" title="This is 9-th image."><p>In the above example, <code>ctx._source</code> refers to the current source document that is about to be updated.</p><p><strong>批量处理<code>_bulk</code>：</strong></p><p>建立两个document：</p><img src="/JeckFS/2021/07/26/Elasticsearch/10.png" class="" title="This is 10-th image."><p>更新_id为1的name字段为’John Doe becomes Jane Doe’，然后删除_id=2的document。</p><img src="/JeckFS/2021/07/26/Elasticsearch/11.png" class="" title="This is 11-th image."><p>Note above that for the delete action, there is no corresponding source document after it since deletes only require the ID of the document to be deleted.</p><p>The Bulk API does not fail due to failures in one of the actions. If a single action fails for whatever reason, it will continue to process the remainder of the actions after it. When the bulk API returns, it will provide a status for each action (in the same order it was sent in) so that you can check if a specific action failed or not.</p><p><a href="https://cloud.tencent.com/developer/article/1022086">批量导入的格式</a></p><h3 id="1-search-API"><a href="#1-search-API" class="headerlink" title="1.search API"></a>1.search API</h3><p>search的两种方式一种是使用<a href="https://www.elastic.co/guide/en/elasticsearch/reference/6.6/search-uri-request.html">REST request API</a>，一种使用<a href="https://www.elastic.co/guide/en/elasticsearch/reference/6.6/search-request-body.html">REST request body</a></p><h2 id="4-Execute-advanced-search-operations-such-as-paging-sorting-filtering-scripting-aggregations-and-many-others"><a href="#4-Execute-advanced-search-operations-such-as-paging-sorting-filtering-scripting-aggregations-and-many-others" class="headerlink" title="4.Execute advanced search operations such as paging, sorting, filtering, scripting, aggregations, and many others"></a>4.Execute advanced search operations such as paging, sorting, filtering, scripting, aggregations, and many others</h2><h1 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h1><img src="/JeckFS/2021/07/26/Elasticsearch/12.png" class="" title="This is 12-th image."><img src="/JeckFS/2021/07/26/Elasticsearch/13.png" class="" title="This is 13-th image."><p>以下两种方式是等价的：</p><img src="/JeckFS/2021/07/26/Elasticsearch/14.png" class="" title="This is 14-th image."><hr><img src="/JeckFS/2021/07/26/Elasticsearch/15.png" class="" title="This is 15-th image."><img src="/JeckFS/2021/07/26/Elasticsearch/16.png" class="" title="This is 16-th image."><img src="/JeckFS/2021/07/26/Elasticsearch/17.png" class="" title="This is 17-th image."><img src="/JeckFS/2021/07/26/Elasticsearch/18.png" class="" title="This is 18-th image."><img src="/JeckFS/2021/07/26/Elasticsearch/19.png" class="" title="This is 19-th image."><img src="/JeckFS/2021/07/26/Elasticsearch/20.png" class="" title="This is 20-th image."><img src="/JeckFS/2021/07/26/Elasticsearch/21.png" class="" title="This is 21-th image."><img src="/JeckFS/2021/07/26/Elasticsearch/22.png" class="" title="This is 22-th image."><img src="/JeckFS/2021/07/26/Elasticsearch/23.png" class="" title="This is 23-th image."><img src="/JeckFS/2021/07/26/Elasticsearch/24.png" class="" title="This is 24-th image."><img src="/JeckFS/2021/07/26/Elasticsearch/25.png" class="" title="This is 25-th image."><hr><img src="/JeckFS/2021/07/26/Elasticsearch/26.png" class="" title="This is 26-th image."><img src="/JeckFS/2021/07/26/Elasticsearch/27.png" class="" title="This is 27-th image."><img src="/JeckFS/2021/07/26/Elasticsearch/28.png" class="" title="This is 28-th image."><img src="/JeckFS/2021/07/26/Elasticsearch/29.png" class="" title="This is 29-th image."><img src="/JeckFS/2021/07/26/Elasticsearch/30.png" class="" title="This is 30-th image."><img src="/JeckFS/2021/07/26/Elasticsearch/31.png" class="" title="This is 31-th image."><img src="/JeckFS/2021/07/26/Elasticsearch/32.png" class="" title="This is 32-th image."><img src="/JeckFS/2021/07/26/Elasticsearch/33.png" class="" title="This is 33-th image."><img src="/JeckFS/2021/07/26/Elasticsearch/34.png" class="" title="This is 34-th image."><p>mapping用来决定document中字段的类型，如</p><img src="/JeckFS/2021/07/26/Elasticsearch/102.png" class="" title="This is 102-th image."><img src="/JeckFS/2021/07/26/Elasticsearch/35.png" class="" title="This is 35-th image."><hr><img src="/JeckFS/2021/07/26/Elasticsearch/36.png" class="" title="This is 36-th image."><img src="/JeckFS/2021/07/26/Elasticsearch/37.png" class="" title="This is 37-th image."><img src="/JeckFS/2021/07/26/Elasticsearch/38.png" class="" title="This is 38-th image."><img src="/JeckFS/2021/07/26/Elasticsearch/39.png" class="" title="This is 39-th image."><img src="/JeckFS/2021/07/26/Elasticsearch/40.png" class="" title="This is 40-th image."><img src="/JeckFS/2021/07/26/Elasticsearch/41.png" class="" title="This is 41-th image."><img src="/JeckFS/2021/07/26/Elasticsearch/42.png" class="" title="This is 42-th image."><img src="/JeckFS/2021/07/26/Elasticsearch/43.png" class="" title="This is 43-th image."><hr><img src="/JeckFS/2021/07/26/Elasticsearch/44.png" class="" title="This is 44-th image."><img src="/JeckFS/2021/07/26/Elasticsearch/45.png" class="" title="This is 45-th image."><img src="/JeckFS/2021/07/26/Elasticsearch/46.png" class="" title="This is 46-th image."><img src="/JeckFS/2021/07/26/Elasticsearch/47.png" class="" title="This is 47-th image."><img src="/JeckFS/2021/07/26/Elasticsearch/48.png" class="" title="This is 48-th image."><img src="/JeckFS/2021/07/26/Elasticsearch/49.png" class="" title="This is 49-th image."><img src="/JeckFS/2021/07/26/Elasticsearch/50.png" class="" title="This is 50-th image."><img src="/JeckFS/2021/07/26/Elasticsearch/51.png" class="" title="This is 51-th image."><img src="/JeckFS/2021/07/26/Elasticsearch/52.png" class="" title="This is 52-th image."><img src="/JeckFS/2021/07/26/Elasticsearch/53.png" class="" title="This is 53-th image."><img src="/JeckFS/2021/07/26/Elasticsearch/54.png" class="" title="This is 54-th image."><img src="/JeckFS/2021/07/26/Elasticsearch/55.png" class="" title="This is 55-th image."><img src="/JeckFS/2021/07/26/Elasticsearch/56.png" class="" title="This is 56-th image."><img src="/JeckFS/2021/07/26/Elasticsearch/57.png" class="" title="This is 57-th image."><img src="/JeckFS/2021/07/26/Elasticsearch/58.png" class="" title="This is 58-th image."><hr><p>分词：</p><img src="/JeckFS/2021/07/26/Elasticsearch/59.png" class="" title="This is 59-th image."><hr><p>集群：</p><img src="/JeckFS/2021/07/26/Elasticsearch/60.png" class="" title="This is 60-th image."><img src="/JeckFS/2021/07/26/Elasticsearch/61.png" class="" title="This is 61-th image."><img src="/JeckFS/2021/07/26/Elasticsearch/62.png" class="" title="This is 62-th image."><img src="/JeckFS/2021/07/26/Elasticsearch/63.png" class="" title="This is 63-th image."><img src="/JeckFS/2021/07/26/Elasticsearch/64.png" class="" title="This is 64-th image."><img src="/JeckFS/2021/07/26/Elasticsearch/65.png" class="" title="This is 65-th image."><img src="/JeckFS/2021/07/26/Elasticsearch/66.png" class="" title="This is 66-th image."><img src="/JeckFS/2021/07/26/Elasticsearch/67.png" class="" title="This is 67-th image."><img src="/JeckFS/2021/07/26/Elasticsearch/68.png" class="" title="This is 68-th image."><img src="/JeckFS/2021/07/26/Elasticsearch/69.png" class="" title="This is 69-th image."><img src="/JeckFS/2021/07/26/Elasticsearch/70.png" class="" title="This is 70-th image."><img src="/JeckFS/2021/07/26/Elasticsearch/71.png" class="" title="This is 71-th image."><img src="/JeckFS/2021/07/26/Elasticsearch/72.png" class="" title="This is 72-th image."><img src="/JeckFS/2021/07/26/Elasticsearch/73.png" class="" title="This is 73-th image."><img src="/JeckFS/2021/07/26/Elasticsearch/74.png" class="" title="This is 74-th image."><img src="/JeckFS/2021/07/26/Elasticsearch/75.png" class="" title="This is 75-th image."><img src="/JeckFS/2021/07/26/Elasticsearch/76.png" class="" title="This is 76-th image."><hr><img src="/JeckFS/2021/07/26/Elasticsearch/78.png" class="" title="This is 78-th image."><img src="/JeckFS/2021/07/26/Elasticsearch/79.png" class="" title="This is 79-th image."><img src="/JeckFS/2021/07/26/Elasticsearch/80.png" class="" title="This is 80-th image."><img src="/JeckFS/2021/07/26/Elasticsearch/81.png" class="" title="This is 81-th image."><img src="/JeckFS/2021/07/26/Elasticsearch/82.png" class="" title="This is 82-th image."><img src="/JeckFS/2021/07/26/Elasticsearch/83.png" class="" title="This is 83-th image."><img src="/JeckFS/2021/07/26/Elasticsearch/84.png" class="" title="This is 84-th image."><img src="/JeckFS/2021/07/26/Elasticsearch/85.png" class="" title="This is 85-th image."><img src="/JeckFS/2021/07/26/Elasticsearch/86.png" class="" title="This is 86-th image."><img src="/JeckFS/2021/07/26/Elasticsearch/87.png" class="" title="This is 87-th image."><img src="/JeckFS/2021/07/26/Elasticsearch/88.png" class="" title="This is 88-th image."><img src="/JeckFS/2021/07/26/Elasticsearch/89.png" class="" title="This is 89-th image."><img src="/JeckFS/2021/07/26/Elasticsearch/90.png" class="" title="This is 90-th image."><img src="/JeckFS/2021/07/26/Elasticsearch/91.png" class="" title="This is 91-th image."><img src="/JeckFS/2021/07/26/Elasticsearch/92.png" class="" title="This is 92-th image."><img src="/JeckFS/2021/07/26/Elasticsearch/93.png" class="" title="This is 93-th image."><img src="/JeckFS/2021/07/26/Elasticsearch/94.png" class="" title="This is 94-th image."><img src="/JeckFS/2021/07/26/Elasticsearch/95.png" class="" title="This is 95-th image."><img src="/JeckFS/2021/07/26/Elasticsearch/96.png" class="" title="This is 96-th image."><img src="/JeckFS/2021/07/26/Elasticsearch/97.png" class="" title="This is 97-th image."><img src="/JeckFS/2021/07/26/Elasticsearch/98.png" class="" title="This is 98-th image."><img src="/JeckFS/2021/07/26/Elasticsearch/99.png" class="" title="This is 99-th image."><img src="/JeckFS/2021/07/26/Elasticsearch/100.png" class="" title="This is 100-th image."><img src="/JeckFS/2021/07/26/Elasticsearch/101.png" class="" title="This is 101-th image."><p><a href="https://www.bilibili.com/video/BV1iJ411c7Az?p=48&amp;spm_id_from=pageDriver">https://www.bilibili.com/video/BV1iJ411c7Az?p=48&amp;spm_id_from=pageDriver</a><br><a href="https://www.bilibili.com/video/BV1iJ411c7Az?p=48&amp;spm_id_from=pageDriver">https://www.bilibili.com/video/BV1iJ411c7Az?p=48&amp;spm_id_from=pageDriver</a></p>]]></content>
      
      
      <categories>
          
          <category> 日志分析系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日志分析系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>链路追踪</title>
      <link href="/JeckFS/2021/07/26/%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/"/>
      <url>/JeckFS/2021/07/26/%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/</url>
      
        <content type="html"><![CDATA[<p><a href="http://xjjdog.cn/arch/15723388139342.html#%E5%90%8D%E8%AF%8D%E8%A7%A3%E9%87%8A">参考地址</a></p><p>常用的框架：jaeger,pinpoint,Zipkin,CAT,skywalking。比较其优缺点。</p><p>jaeger：缺点：虽然可以搜集调用链信息并查询、但统计图表相对欠缺，尤其对于服务间调用关系部分，不够直观。</p><p>两者都是基于agent探针技术实施的。<a href="https://mp.weixin.qq.com/s/p2XWbydAVPqo7PDsOttqjA">探针的介绍</a></p>]]></content>
      
      
      <categories>
          
          <category> 微服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>服务熔断</title>
      <link href="/JeckFS/2021/07/26/%E6%9C%8D%E5%8A%A1%E7%86%94%E6%96%AD/"/>
      <url>/JeckFS/2021/07/26/%E6%9C%8D%E5%8A%A1%E7%86%94%E6%96%AD/</url>
      
        <content type="html"><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><ul><li>市面上出色的熔断组件：sentinel、<del>hystrix</del>、resilience4j。比较其优缺点。</li></ul><p><strong>基本原理</strong></p><p>处理流程：</p><img src="/JeckFS/2021/07/26/%E6%9C%8D%E5%8A%A1%E7%86%94%E6%96%AD/1.png" class="" title="This is 1-th image."><p>隔离方式：</p><ul><li><strong>线程隔离（默认）</strong>：使用一个线程池来存储当前的请求，线程池对请求作处理，设置任务返回处理超时时间，堆积的请求堆积入线程池队列。这种方式需要为每个依赖的服务申请线程池，有一定的资源消耗，好处是可以应对突发流量（流量洪峰来临时，处理不完可将数据存储到线程池队里慢慢处理）</li><li><strong>信号隔离</strong>：使用一个原子计数器（或信号量）来记录当前有多少个线程在运行，请求来先判断计数器的数值，若超过设置的最大线程个数则丢弃改类型的新请求，若不超过则执行计数操作请求来计数器+1，请求返回计数器-1。这种方式是严格的控制线程且立即返回模式，无法应对突发流量（流量洪峰来临时，处理的线程超过数量，其他的请求会直接返回，不继续去请求依赖的服务）</li></ul><p>熔断：</p><ul><li>如果某个目标服务调用慢或者大量超时，则此时熔断该服务的调用，对于后续调用请求，不再继续调用目标服务，直接返回，快速释放资源。如果目标服务情况好转，则恢复调用。这个过程，可以想象成保险丝的行为。</li></ul><p><a href="http://xjjdog.cn/arch/15689428405746.html#i%E9%9A%94%E7%A6%BB%E6%96%B9%E5%BC%8F">服务熔断</a></p>]]></content>
      
      
      <categories>
          
          <category> 微服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud核心组件</title>
      <link href="/JeckFS/2021/07/22/SpringCloud%E6%A0%B8%E5%BF%83%E7%BB%84%E4%BB%B6/"/>
      <url>/JeckFS/2021/07/22/SpringCloud%E6%A0%B8%E5%BF%83%E7%BB%84%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>随着产品业务的剧增，不同服务间面临着高耦合的风险，为了降低不同服务之间的耦合度，可将将不同的业务划分成不同的模块。</p><h1 id="Eureka"><a href="#Eureka" class="headerlink" title="Eureka"></a>Eureka</h1><p>不同的服务之间有依赖关系，为了找到依赖的服务，<strong>Eureka提供了服务注册的功能</strong>。每个服务的创建和销毁的事件要向Eureka打招呼。Eureka掌握着整个系统所有的服务的信息。当服务A需要调用服务B时，通过Eureka获取服务B的信息，拿到服务B的信息再调用服务B。</p><p>Eureka相当于一个中介者的角色。</p><h1 id="Ribbon与Feign"><a href="#Ribbon与Feign" class="headerlink" title="Ribbon与Feign"></a>Ribbon与Feign</h1><p>由于服务可以部署在多个服务器上，每个服务器的ip地址都是不同的。因此当服务A调用服务B时，到底选择哪个服务器，需要根据不同服务器的负载大小进行有选择的调用。这项功能（负载均衡）通过Ribbon来做。<br>为了做到负载均衡Ribbon运行时主要做四件事儿：</p><ul><li>优先选择在一个Zone且负载较少的Eureka Server，进行连接。（用于获取服务列表）</li><li>定期从Eureka更新、过滤服务和实例列表</li><li>根据Ribbon提供的负载均衡策略，从注册表中选择一个真正的实例地址。</li><li>通过Ribbon client对服务发起调用。</li></ul><img src="/JeckFS/2021/07/22/SpringCloud%E6%A0%B8%E5%BF%83%E7%BB%84%E4%BB%B6/1.png" class="" title="This is 1-th image."><p>仅仅使用Ribbon就可以完成当前服务对其他服务的调用，为了简化可以使用Feign配合使用。Feign使用了Java的动态代理机制，将Ribbon服务调用的逻辑封装出了一套简洁的接口调用方式。</p><h1 id="断路器-Hystrix"><a href="#断路器-Hystrix" class="headerlink" title="断路器 Hystrix"></a>断路器 Hystrix</h1><p>断路器的应用场景：一个请求的完成需要<strong>依次调用</strong>多个服务，若中间某个服务(旁路服务)出现故障将导致不能调用后续服务，因此请求一直完成不了。<br>所谓旁路服务是指该服务在完成请求时可有可无的操作，因此在该服务出现问题时，系统应阻断该服务，直接进行后续服务的调用，而不耽误处理用户请求。</p><h1 id="Api网关Zuul"><a href="#Api网关Zuul" class="headerlink" title="Api网关Zuul"></a>Api网关Zuul</h1><p><strong>网关其实是一对过滤器的集合，可以实现一些与业务无关的横切面功能</strong>。<br>Zuul的职责：</p><ul><li>安全认证。提供统一的认证方式和鉴权功能，避免重复开发。</li><li>熔断，限流。针对问题服务，进行熔断操作；对流量进行预估，限制访问。</li><li>日志监控。统一流量入口，进行流量分析和监控。</li><li>屏蔽内部细节，对外提供一致的接口。</li><li>实现灰度。使用自定义策略实现分流，达到测试的目的。</li></ul><img src="/JeckFS/2021/07/22/SpringCloud%E6%A0%B8%E5%BF%83%E7%BB%84%E4%BB%B6/1.png" class="" title="This is 2-th image."><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><img src="/JeckFS/2021/07/22/SpringCloud%E6%A0%B8%E5%BF%83%E7%BB%84%E4%BB%B6/1.png" class="" title="This is 3-th image."><p>1、服务注册中心，统一管理所有服务的信息，默认组件是Eureka。<br>2、RPC，网络通信组件，服务A怎么调用服务B。在SpringCloud中，就是Ribbon+Feign。<br>3、网关，拆分的服务怎么暴露接口，最终见人的样子。 默认组件是Zuul。</p><img src="/JeckFS/2021/07/22/SpringCloud%E6%A0%B8%E5%BF%83%E7%BB%84%E4%BB%B6/1.png" class="" title="This is 4-th image."><p><a href="http://xjjdog.cn/arch/15643605998324.html#_6%E3%80%81%E4%B8%80%E5%BC%A0%E8%81%9A%E5%90%88%E5%9B%BE">参考教程</a></p><h1 id="idea同一服务使用profile部署多实例"><a href="#idea同一服务使用profile部署多实例" class="headerlink" title="idea同一服务使用profile部署多实例"></a>idea同一服务使用profile部署多实例</h1><p><a href="https://blog.csdn.net/qq_39846820/article/details/103072966">参考教程</a></p><p><a href="https://www.cnblogs.com/hfultrastrong/p/8547236.html">eureka配置</a></p><p><strong>注意的地方</strong></p><ol><li>在同一个 application.yml 中配置三个eureka；</li><li>在配置每一个 eureka 时应指定节点标签，即 <code>spring.profiles=peer1</code></li><li>注释掉配置中的 <code>registerWithEureka: true</code> 与 <code>fetchRegistry: true</code></li><li>根据需要修改 hosts 文件</li><li>编辑启动项： 更改 Name ，在 Environment 中的 Program arguments 中配置 <code>--spring.profiles.active=peer1</code> ；然后勾选 Allow parallel run 选项。</li></ol><img src="/JeckFS/2021/07/22/SpringCloud%E6%A0%B8%E5%BF%83%E7%BB%84%E4%BB%B6/5.png" class="" title="This is 5-th image.">]]></content>
      
      
      <categories>
          
          <category> 微服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode879-盈利计划</title>
      <link href="/JeckFS/2021/07/11/leetcode879-%E7%9B%88%E5%88%A9%E8%AE%A1%E5%88%92/"/>
      <url>/JeckFS/2021/07/11/leetcode879-%E7%9B%88%E5%88%A9%E8%AE%A1%E5%88%92/</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><img src="/JeckFS/2021/07/11/leetcode879-%E7%9B%88%E5%88%A9%E8%AE%A1%E5%88%92/2021-07-11_14-52.png" class="" title="This is 1-th image."><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>与01背包问题类似。<br>首先定义状态<code>d[i][j][k]</code>为前i个工作中，恰好产生j元利润，恰好耗费k个人的方案数。</p><p>状态转义方程为：<br><code>d[i][j][k] = 不做第i个工作的方案数 + 做第i个工作的方案数</code><br>即：<br><code>d[i][j][k] = d[i-1][j][k] + d[i-1][j-pi][k-gi]</code></p><p>对与前i个工作，恰好产生0元利润耗费0个人的方案数正好为1；<br>因此有<code>d[0..i][0][0]=1</code></p><p>最终至少产生minProfit利润的子集方案数为<code>sum(d[group.length][minProfit..sum(profit)][0..n])</code></p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 超出内存限制</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">profitableSchemes</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> minProfit, <span class="type">int</span>[] group, <span class="type">int</span>[] profit)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">maxProfit</span> <span class="operator">=</span> Arrays.stream(profit).sum();</span><br><span class="line">    <span class="type">int</span>[][][] d = <span class="keyword">new</span> <span class="title class_">int</span>[group.length + <span class="number">1</span>][maxProfit + <span class="number">1</span>][n + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= group.length; i++) &#123;</span><br><span class="line">        d[i][<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= group.length; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt;= maxProfit; j++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt;= n; k++) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> j - profit[i - <span class="number">1</span>] &lt; <span class="number">0</span> || k - group[i - <span class="number">1</span>] &lt; <span class="number">0</span> ? <span class="number">0</span> : j == profit[i-<span class="number">1</span>] &amp;&amp; k == group[i-<span class="number">1</span>] ? Math.max(<span class="number">1</span>,d[i - <span class="number">1</span>][j - profit[i - <span class="number">1</span>]][k - group[i - <span class="number">1</span>]]) : d[i - <span class="number">1</span>][j - profit[i - <span class="number">1</span>]][k - group[i - <span class="number">1</span>]];</span><br><span class="line">                d[i][j][k] = (d[i - <span class="number">1</span>][j][k] + t) % <span class="number">1000000007</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> minProfit; j &lt;= maxProfit; j++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt;= n; k++) &#123;</span><br><span class="line">            res += d[group.length][j][k];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用背包九讲的思路进行优化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 427ms 5.02%(中文)</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">profitableSchemes</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> minProfit, <span class="type">int</span>[] group, <span class="type">int</span>[] profit)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">maxProfit</span> <span class="operator">=</span> Arrays.stream(profit).sum();</span><br><span class="line">    <span class="type">int</span>[][] d = <span class="keyword">new</span> <span class="title class_">int</span>[maxProfit + <span class="number">1</span>][n + <span class="number">1</span>];</span><br><span class="line">    d[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= group.length; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> maxProfit; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> n; k &gt;= <span class="number">0</span>; k--) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> j - profit[i - <span class="number">1</span>] &lt; <span class="number">0</span> || k - group[i - <span class="number">1</span>] &lt; <span class="number">0</span> </span><br><span class="line">                    ? <span class="number">0</span> </span><br><span class="line">                    : j == profit[i-<span class="number">1</span>] &amp;&amp; k == group[i-<span class="number">1</span>] </span><br><span class="line">                        ? Math.max(<span class="number">1</span>, d[j - profit[i - <span class="number">1</span>]][k - group[i - <span class="number">1</span>]]) </span><br><span class="line">                        : d[j - profit[i - <span class="number">1</span>]][k - group[i - <span class="number">1</span>]];</span><br><span class="line">                d[j][k] = (d[j][k] + t) % <span class="number">1000000007</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> minProfit; j &lt;= maxProfit; j++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt;= n; k++) &#123;</span><br><span class="line">            res = (res + d[j][k]) % <span class="number">1000000007</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 动态规划 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大话设计模式-建造者模式</title>
      <link href="/JeckFS/2021/05/02/%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
      <url>/JeckFS/2021/05/02/%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h1><p>用于构建复杂对象，并且对象的构建需要分成好几个步骤才能构建完成，并且构建步骤有一定的顺序性。</p><p>好处是使得建造代码与表示代码分离，由于建造者隐藏了该产品是如何组装的，所以若需要改变一个产品的内部表示，只需要在定义一个具体的建造者就可以。</p><img src="/JeckFS/2021/05/02/%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/1.png" class="" title="This is 1-th image."><p>在上图示例中，PersonDirector持有一个PersonBuilder的对象，并且createPerson()方法拥有构建对象的整个逻辑，具体对象每个部分的构建放在PersonBuilder类中。PersonThinBuilder和PersonFatBuilder是两种不同的实现。若想实现第三种人，直接继承PersonBuilder并重写其中的构建方法即可。</p><p>建造者模式的结构图：</p><img src="/JeckFS/2021/05/02/%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/2.png" class="" title="This is 2-th image.">]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大话设计模式-UML类图</title>
      <link href="/JeckFS/2021/05/02/UML%E7%B1%BB%E5%9B%BE/"/>
      <url>/JeckFS/2021/05/02/UML%E7%B1%BB%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<h1 id="UML类图图示样例"><a href="#UML类图图示样例" class="headerlink" title="UML类图图示样例"></a>UML类图图示样例</h1><img src="/JeckFS/2021/05/02/UML%E7%B1%BB%E5%9B%BE/1.png" class="" title="This is 1-th image."><h1 id="UML四大关系"><a href="#UML四大关系" class="headerlink" title="UML四大关系"></a>UML四大关系</h1><p>泛化、实现、关联、依赖</p><h2 id="1-关联关系"><a href="#1-关联关系" class="headerlink" title="1.关联关系"></a>1.关联关系</h2><p>所谓关联关系是指：一个类知道另一个类的属性和方法。</p><p>如图所示，“企鹅”需要根据“气候”指导自己的生活，因此需要对气候有相当的了解才可以。</p><p>体现在代码中就是：企鹅类持有对气候类的引用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Penguin</span> <span class="keyword">extends</span> <span class="title class_">Bird</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Climate climate; <span class="comment">// 引用“气候”类</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-依赖关系"><a href="#2-依赖关系" class="headerlink" title="2.依赖关系"></a>2.依赖关系</h2><img src="/JeckFS/2021/05/02/UML%E7%B1%BB%E5%9B%BE/5.png" class="" title="This is 5-th image."><p>在代码中体现为：</p><ul><li><strong>A方法</strong>的参数是B（耦合）</li><li><strong>A方法</strong>的参数是B的属性（紧耦合）</li><li><strong>A方法</strong>中实例化了B</li><li><strong>A方法</strong>的返回值是B</li></ul><p>如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Animal</span><span class="params">(Oxygen oxygen, Water water)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-聚合关系"><a href="#2-聚合关系" class="headerlink" title="2.聚合关系"></a>2.聚合关系</h2><p><strong>聚合表示一种弱的“拥有”关系，体现的是A对象可以包含B对象，但B对象不是A对象的一部分。</strong></p><p>如每只“大雁”都属于一个“雁群”，一个“雁群”可以有多只“大雁”。</p><img src="/JeckFS/2021/05/02/UML%E7%B1%BB%E5%9B%BE/3.png" class="" title="This is 3-th image."><p>体现在代码中是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">WideGooseAggregate</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> WideGoose[] arrayWideGoose;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-合成-组合关系"><a href="#3-合成-组合关系" class="headerlink" title="3.合成/组合关系"></a>3.合成/组合关系</h2><p><strong>合成是一种强的“拥有”关系，体现了严格的部分与整体的关系，部分与整体的生命周期一样。</strong></p><p>如“鸟”由“翅膀”组成，并且其生命周期也是相同的。</p><img src="/JeckFS/2021/05/02/UML%E7%B1%BB%E5%9B%BE/2.png" class="" title="This is 2-th image."><p>体现在代码中是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Bird</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Wing wing;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Bird</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// 在鸟Bird类中，初始化时，实例化翅膀Wing，他们之间同时生成</span></span><br><span class="line">        wing = <span class="keyword">new</span> <span class="title class_">Wing</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大话设计模式-抽象工厂模式</title>
      <link href="/JeckFS/2021/05/01/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
      <url>/JeckFS/2021/05/01/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>依赖抽象原则<br>变量不要持有具体类的引用<br>不要让类继承自具体类，要继承自抽象类或接口<br>不要覆盖基类中已实现的方法</p><p>简单工厂模式：定义了一个创建对象的类，由这个类来封装实例化对象的行为</p><p>工厂方法模式：定义了一个创建对象的抽象方法，由子类决定要实例化的类。<br>                    工厂方法模式将对象的实例化推迟到子类</p><p>抽象工厂模式：定义了一个接口用于创建相关或有依赖关系的对象族，而无需明确指定具体类</p><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><p>数据库：Sqlserver<br>表结构：user<br>数据访问层：SqlserverUser类<br>客户端需求：往user表中插入一条数据；从user表中获取一条数据</p><h1 id="版本1"><a href="#版本1" class="headerlink" title="版本1"></a>版本1</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//...getter &amp; setter</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SqlserverUser</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(User user)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;在SQL Server中给User表添加一条记录&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">getUser</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;在SQL Server中根据id得到User表中的一条记录&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        <span class="comment">// 用户通过SqlserverUser来操作User表中的数据</span></span><br><span class="line">        <span class="type">SqlserverUser</span> <span class="variable">su</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlserverUser</span>();  <span class="comment">// su对象被绑死在SQL Server上，当变更底层数据库时需要改动这部分代码</span></span><br><span class="line">        su.insert(user);</span><br><span class="line">        su.getUser(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="版本2：使用工厂方法模式重构"><a href="#版本2：使用工厂方法模式重构" class="headerlink" title="版本2：使用工厂方法模式重构"></a>版本2：使用工厂方法模式重构</h1><p><strong>工厂方法模式是定义一个用户创建对象的接口，让子类决定实例化哪一个类。</strong></p><p>需求变更：底层需要变更为Access数据库</p><p>在版本1中客户端代码与底层数据库耦合在一起，当更改底层数据库时，客户端代码需要一起改动。</p><p>类图：</p><img src="/JeckFS/2021/05/01/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/1.png" class="" title="This is 1-th image."><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IFactory</span> &#123;</span><br><span class="line">    IUser <span class="title function_">createUser</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SqlServerFactory</span> <span class="keyword">extends</span> <span class="title class_">SqlserverUser</span> <span class="keyword">implements</span> <span class="title class_">IFactory</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> IUser <span class="title function_">createUser</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SqlserverUser</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AcccessFactory</span> <span class="keyword">extends</span> <span class="title class_">AccessUser</span> <span class="keyword">implements</span> <span class="title class_">IFactory</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> IUser <span class="title function_">createUser</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AccessUser</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IUser</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(User user)</span>;</span><br><span class="line"></span><br><span class="line">    User <span class="title function_">getUser</span><span class="params">(<span class="type">int</span> id)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SqlserverUser</span> <span class="keyword">implements</span> <span class="title class_">IUser</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;在SQL Server中给User表添加一条数据&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">getUser</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;在SQL Server中根据id获取User表中的一条数据&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccessUser</span> <span class="keyword">implements</span> <span class="title class_">IUser</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;在Access中给User表添加一条数据&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">getUser</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;在Access中根据id从User表中获取一条数据&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line"><span class="comment">//        IFactory factory = new SqlServerFactory();</span></span><br><span class="line">        <span class="type">IFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AcccessFactory</span>();</span><br><span class="line">        <span class="type">IUser</span> <span class="variable">iu</span> <span class="operator">=</span> factory.createUser();</span><br><span class="line">        iu.insert(user);</span><br><span class="line">        iu.getUser(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样地，具体使用哪个数据库，同样需要创建对应的工厂，英雌这个版本也需要改变客户端的代码，但是声明IUser接口的对象iu事先根本不知道是在访问哪个数据库，却在运行时可以很好地完成工作，这就是所谓的<strong>业务逻辑与数据访问的解耦</strong>。</p><h1 id="版本3：用抽象工厂模式重构"><a href="#版本3：用抽象工厂模式重构" class="headerlink" title="版本3：用抽象工厂模式重构"></a>版本3：用抽象工厂模式重构</h1><p>需求变更：往department表中插入一条数据；从department表中获取一条数据</p><p>版本2仅提供了向user表中插入与查询的类结构，因此按照同样的方式编写向department表中插入与查询的类结构即可。<br>但是这种却<strong>不叫工厂方法模式</strong>。</p><p>类图结构：</p><img src="/JeckFS/2021/05/01/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/2.png" class="" title="This is 2-th image."><p>IDepartment接口，用于客户端访问，解除与具体数据库访问的耦合。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IDepartment</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(Department department)</span>;</span><br><span class="line"></span><br><span class="line">    Department <span class="title function_">getDepartment</span><span class="params">(<span class="type">int</span> id)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SqlserverDepartment</span> <span class="keyword">implements</span> <span class="title class_">IDepartment</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(Department department)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;在SQL Server中给Department表添加一条数据&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Department <span class="title function_">getDepartment</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;在SQL Server中根据id得到Department表中的一条数据&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccessDepartment</span> <span class="keyword">implements</span> <span class="title class_">IDepartment</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(Department department)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;在Access中给Department表添加一条数据&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Department <span class="title function_">getDepartment</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;在Access中根据id得到Department表中的一条数据&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IFactory</span> &#123;</span><br><span class="line">    IUser <span class="title function_">createUser</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    IDepartment <span class="title function_">createDepartment</span><span class="params">()</span>; <span class="comment">// 增加的方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SqlServerFactory</span> <span class="keyword">implements</span> <span class="title class_">IFactory</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> IUser <span class="title function_">createUser</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SqlserverUser</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> IDepartment <span class="title function_">createDepartment</span><span class="params">()</span> &#123; <span class="comment">// 增加的方法</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SqlserverDepartment</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AcccessFactory</span> <span class="keyword">implements</span> <span class="title class_">IFactory</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> IUser <span class="title function_">createUser</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AccessUser</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> IDepartment <span class="title function_">createDepartment</span><span class="params">()</span> &#123; <span class="comment">// 增加的方法</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AccessDepartment</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        <span class="type">Department</span> <span class="variable">department</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Department</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 只需确定实例化哪一个数据库访问对象</span></span><br><span class="line"><span class="comment">//        IFactory factory = new SqlServerFactory();</span></span><br><span class="line">        <span class="type">IFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AcccessFactory</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">IUser</span> <span class="variable">iu</span> <span class="operator">=</span> factory.createUser(); <span class="comment">// 解除了与数据库访问的依赖</span></span><br><span class="line">        iu.insert(user);</span><br><span class="line">        iu.getUser(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">IDepartment</span> <span class="variable">id</span> <span class="operator">=</span> factory.createDepartment();  <span class="comment">// 接触了与数据库访问的依赖</span></span><br><span class="line">        id.insert(department);</span><br><span class="line">        id.getDepartment(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><strong>所谓抽象工厂模式是指：提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类。</strong><br>其类图结构如下：</p><img src="/JeckFS/2021/05/01/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/3.png" class="" title="This is 3-th image."><p>AbstractProductA与AbstractProductB是两个抽象产品，之所以抽象，是因为它们有两种不同的实现。ProductA1、ProductA2、ProductB1、ProductB2就是对两个抽象产品的具体分类的实现。<br>IFactory是一个抽象工厂接口，他里面应该包含所有产品创建的抽象方法。ConcreteFactory1、ConcreteFactory2就是具体的工厂。<br>通常是在运行时再创建一个ConcreteFactory类的实例，这个具体的工厂再创建具有特定实现的产品对象，也就是说，为创建不同的产品对象，客户端需要使用不同的具体工厂。</p><p><strong>抽象工厂模式的优点：</strong></p><ul><li>易于交换产品系列。由于具体工厂类，例如<code>IFactory factory = new AccessFactory()</code>，在一个应用中只需要在初始化的时候出现一次，这就使得改变一个应用的具体工厂变得非常容易，他只需要改变具体工厂即可使用不同的产品配置。</li><li>它让具体的创建实例过程与客户端分离，客户端是通过它们的抽象接口操纵实例，产品的具体类名也被具体工厂的实现分离，不会出现在客户代码中。实现了依赖倒转原则。</li></ul><p><strong>依赖倒转原则</strong>（Dependency Inversion Principle，简称DIP）是指将两个模块之间的依赖关系倒置为依赖抽象类或接口。<br>在这里，创建实例的过程依赖于factory接口，这使得在客户端中创建实例中也只需依赖factory接口。</p><p><strong>抽象工厂模式的缺点：</strong></p><ul><li>如果现在增加项目表Project，就需要增加IProject、SqlserverProject、AccessProject三个类，另外还需要更改IFactory、SqlserverFactory、AccessFactory。</li><li>在所有用到访问user表和department表的类都需要创建具体的工厂，如有100这种类，需要声明<code>Ifactory factory = new SqlserverFactory()</code>100次。</li></ul><h1 id="版本4：使用简单工厂改进抽象工厂"><a href="#版本4：使用简单工厂改进抽象工厂" class="headerlink" title="版本4：使用简单工厂改进抽象工厂"></a>版本4：使用简单工厂改进抽象工厂</h1><img src="/JeckFS/2021/05/01/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/4.png" class="" title="This is 4-th image."><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DataAccess</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">db</span> <span class="operator">=</span> <span class="string">&quot;Sqlserver&quot;</span>;</span><br><span class="line">    <span class="comment">// private static String db = &quot;Access&quot;;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> IUser <span class="title function_">createUser</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">IUser</span> <span class="variable">result</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">switch</span> (db) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;Sqlserver&quot;</span>:</span><br><span class="line">                result = <span class="keyword">new</span> <span class="title class_">SqlserverUser</span>();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;Access&quot;</span>:</span><br><span class="line">                result = <span class="keyword">new</span> <span class="title class_">AccessUser</span>();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> IDepartment <span class="title function_">createDepartment</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">IDepartment</span> <span class="variable">result</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">switch</span> (db) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;Sqlserver&quot;</span>:</span><br><span class="line">                result = <span class="keyword">new</span> <span class="title class_">SqlserverDepartment</span>();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;Access&quot;</span>:</span><br><span class="line">                result = <span class="keyword">new</span> <span class="title class_">AccessDepartment</span>();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        <span class="type">IUser</span> <span class="variable">iu</span> <span class="operator">=</span> DataAccess.createUser();</span><br><span class="line">        iu.insert(user);</span><br><span class="line">        iu.getUser(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Department</span> <span class="variable">department</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Department</span>();</span><br><span class="line">        <span class="type">IDepartment</span> <span class="variable">id</span> <span class="operator">=</span> DataAccess.createDepartment();</span><br><span class="line">        id.insert(department);</span><br><span class="line">        id.getDepartment(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用户仅仅修改DataAccess中的db静态变量来指定使用什么数据库即可。此时客户端代码就不会产生具体使用哪一种工厂来创建实例的问题了，具体使用哪一种实例创建方式的逻辑在DataAccess类中，因此不需要改变客户端的代码。</p><p>但问题是这种switch、if的方式是最低等的，因为若有第三种数据库的话，DataAccess中的代码还是要更改。这个问题使用反射来重构。</p><h1 id="版本5：使用反射-抽象工厂重构"><a href="#版本5：使用反射-抽象工厂重构" class="headerlink" title="版本5：使用反射+抽象工厂重构"></a>版本5：使用反射+抽象工厂重构</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DataAccess</span> &#123;</span><br><span class="line"><span class="comment">//    private static String db = &quot;Sqlserver&quot;;</span></span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">db</span> <span class="operator">=</span> <span class="string">&quot;Access&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> IUser <span class="title function_">createUser</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, IllegalAccessException, InstantiationException &#123;</span><br><span class="line">        <span class="keyword">return</span> (IUser)Class.forName(<span class="string">&quot;a4.iuser.&quot;</span>+db + <span class="string">&quot;User&quot;</span>).newInstance();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> IDepartment <span class="title function_">createDepartment</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, IllegalAccessException, InstantiationException &#123;</span><br><span class="line">        <span class="keyword">return</span> (IDepartment)Class.forName(<span class="string">&quot;a4.idepartment.&quot;</span>+db+<span class="string">&quot;Department&quot;</span>).newInstance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在创建实例的过程中，使用反射来创建。这个时候只需要知道被创建对象的全路径名即可。另外，当引入第三种数据库时，DataAccess类中的代码中实例化对象的逻辑也不会改变，仅改变所使用的数据库名称即可。<br>但问题是这种方式仍然是需要改变DataAccess中的代码。终极优化是使用配置文件的方式解决。</p><h1 id="版本6：将具体使用那种数据库配置在properties文件中"><a href="#版本6：将具体使用那种数据库配置在properties文件中" class="headerlink" title="版本6：将具体使用那种数据库配置在properties文件中"></a>版本6：将具体使用那种数据库配置在properties文件中</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DataAccess</span> &#123;</span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">db</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">static</span> &#123;</span><br><span class="line">         <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line"></span><br><span class="line">         <span class="keyword">try</span> &#123;</span><br><span class="line">             <span class="type">FileInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;db.properties&quot;</span>);</span><br><span class="line">             properties.load(in);</span><br><span class="line">             db = properties.getProperty(<span class="string">&quot;dbName&quot;</span>);</span><br><span class="line">             in.close();</span><br><span class="line">         &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">             e.printStackTrace();</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> IUser <span class="title function_">createUser</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, IllegalAccessException, InstantiationException &#123;</span><br><span class="line">        <span class="keyword">return</span> (IUser)Class.forName(<span class="string">&quot;a5.iuser.&quot;</span>+db + <span class="string">&quot;User&quot;</span>).newInstance();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> IDepartment <span class="title function_">createDepartment</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, IllegalAccessException, InstantiationException &#123;</span><br><span class="line">        <span class="keyword">return</span> (IDepartment)Class.forName(<span class="string">&quot;a5.idepartment.&quot;</span>+db+<span class="string">&quot;Department&quot;</span>).newInstance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dbName=Sqlserver</span><br><span class="line">#dbName=Access</span><br></pre></td></tr></table></figure><p>当增加对项目表Project的操作时，仅仅需要定义IProject接口、SqlserverProject类、AccessProject类。另外在DataAccess类中添加createProject()方法即可。完美地应用了开闭原则和依赖倒转原则。</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>networkx</title>
      <link href="/JeckFS/2021/04/01/networkx/"/>
      <url>/JeckFS/2021/04/01/networkx/</url>
      
        <content type="html"><![CDATA[<h1 id="生成显示节点标签和边属性"><a href="#生成显示节点标签和边属性" class="headerlink" title="生成显示节点标签和边属性"></a>生成显示节点标签和边属性</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">ba = nx.barabasi_albert_graph(<span class="number">5</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 给边添加属性</span></span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> nx.edges(ba):</span><br><span class="line">    ba.edges[n][<span class="string">&#x27;some_attr&#x27;</span>] = random.randint(<span class="number">1</span>, <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">pos = nx.spring_layout(ba)</span><br><span class="line">edge_labels = nx.get_edge_attributes(ba, <span class="string">&#x27;some_attr&#x27;</span>)</span><br><span class="line"><span class="comment"># 显示边的some_attr属性</span></span><br><span class="line">nx.draw_networkx_edge_labels(ba, pos, edge_labels=edge_labels)</span><br><span class="line"><span class="comment"># 显示节点名称</span></span><br><span class="line">nx.draw_networkx_labels(ba, pos)</span><br><span class="line"><span class="comment"># 显示网络图谱</span></span><br><span class="line">nx.draw(ba, pos)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NetLogo</title>
      <link href="/JeckFS/2021/02/12/NetLogo/"/>
      <url>/JeckFS/2021/02/12/NetLogo/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">to setup</span><br><span class="line">  clear-all</span><br><span class="line">  create-turtles 100 [ setxy random-xcor random-ycor ]</span><br><span class="line">  reset-ticks</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">to go </span><br><span class="line">  move-turtles</span><br><span class="line">  tick</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">to move-turtles</span><br><span class="line">  ask turtles [       ;; 每个turtle都会执行方括号中的命令</span><br><span class="line">    pen-down          ;; 画出turtle的移动轨迹（只能用于turtle上）</span><br><span class="line">    right random 360  ;; 旋转一个随机的角度，范围为[0,359]</span><br><span class="line">    forward 0.2       ;; 前进1步</span><br><span class="line">  ]</span><br><span class="line">end</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// 将 patch 更改为绿色</span><br><span class="line">to setup</span><br><span class="line">  clear-all</span><br><span class="line">  setup-patches</span><br><span class="line">  setup-turtles</span><br><span class="line">  reset-ticks</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">to setup-patches</span><br><span class="line">  ask patches [ set pcolor green ]</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">to setup-turtles</span><br><span class="line">  create-turtles 100</span><br><span class="line">  ask turtles [ setxy random-xcor random-ycor ]</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>变量的定义：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">// 模拟羊吃草，草减少，草再生，羊生崽儿的过程</span><br><span class="line">turtles-own [ energy ] ;; turtles-own定义在所有函数的开头。为每个turtle添加一个变量 energy</span><br><span class="line"></span><br><span class="line">turtles-own [ energy ]</span><br><span class="line"></span><br><span class="line">to setup</span><br><span class="line">  clear-all</span><br><span class="line">  create</span><br><span class="line">  reset-ticks ;; 负责从 0 开始，重新启动 tick counter</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">to create</span><br><span class="line">  create-turtles number [ setxy random-xcor random-ycor] ;; 通过slider来控制变量number Slider的设置见下图</span><br><span class="line">  ask patches [ set pcolor green ]</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">to go </span><br><span class="line">  if ticks &gt;= 500 [ stop ] ;; ticks 用于报告 tick counter 的当前值</span><br><span class="line">  move-turtles</span><br><span class="line">  eat-grass</span><br><span class="line">  reproduce</span><br><span class="line">  check-death</span><br><span class="line">  regrow-grass</span><br><span class="line">  tick ;; 使 tick counter自增1</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">to move-turtles</span><br><span class="line">  ask turtles [</span><br><span class="line">    right random 360</span><br><span class="line">    forward 1</span><br><span class="line">    set energy energy - 1</span><br><span class="line">  ]</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">to eat-grass</span><br><span class="line">  ask turtles [</span><br><span class="line">    if pcolor = green [</span><br><span class="line">      set pcolor black</span><br><span class="line">      set energy energy + 10</span><br><span class="line">    ]</span><br><span class="line">    ifelse show-energy?</span><br><span class="line">      [ set label energy ]</span><br><span class="line">      [ set label &quot;&quot; ]</span><br><span class="line">  ]</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">to reproduce</span><br><span class="line">  ask turtles [</span><br><span class="line">    if energy &gt; 50 [</span><br><span class="line">      set energy energy - 50</span><br><span class="line">      hatch 1 [ set energy 50 ]</span><br><span class="line">    ]</span><br><span class="line">  ]</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">to check-death</span><br><span class="line">  ask turtles [</span><br><span class="line">    if energy &lt;= 0 [die]</span><br><span class="line">  ]</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">to regrow-grass</span><br><span class="line">  ask patches [</span><br><span class="line">    if random 100 &lt; 3 [ set pcolor green ]</span><br><span class="line">  ]</span><br><span class="line">end</span><br></pre></td></tr></table></figure><img src="/JeckFS/2021/02/12/NetLogo/3.png" class="" title="This is 3-th image."><p>Plot 组件的使用</p><img src="/JeckFS/2021/02/12/NetLogo/1.png" class="" title="This is 1-th image."><img src="/JeckFS/2021/02/12/NetLogo/2.png" class="" title="This is 2-th image."><h1 id="Links"><a href="#Links" class="headerlink" title="Links"></a>Links</h1><ul><li>link 不占用任何 patch 。不能计算 link 与 某个点的距离。</li><li>link 分为 有向边 和 无向边。</li><li><code>create-link-with create-links-with</code>用于创建无向边。</li><li><code>create-link-to create-links-to craete-link-from create-links-from</code>用于创建有向边</li><li>对于 unbreeded links ，要么是有向边，要么是无向边。不能同时具有无向边和有向边。除非所有的 unbreeded links 死亡。</li><li>带有 out 字眼的 Primitive 是应用与无向边或者出边的。</li><li>带有 in 字眼的 Primitive 是应用与无向边或者入边的。</li><li>没有 out 或 in 或 带有 with 字眼的 Primitive 可以用于所有的边。</li><li><code>undirected-link-breed directed-link-breed</code>用于声明 link breed</li><li><code>create-&lt;breed&gt;-with create-&lt;breeds&gt;-with</code>用于创建无向的 breed link</li><li><code>create-&lt;breed&gt;-to create-&lt;breeds&gt;-to create-&lt;breed&gt;-from create-&lt;breeds&gt;-from</code>用于创建有向的 breed link</li><li>两个节点之间只能有一条无向边，两条方向相反的有向边。</li></ul><p><strong>布局相关命令</strong></p><ul><li><code>layout-circle</code> 圆形布局</li></ul><img src="/JeckFS/2021/02/12/NetLogo/2.png" class="" title="This is 2-th image."><ul><li><code>layout-radial</code>树形布局（对于任何图都可以）</li></ul><img src="/JeckFS/2021/02/12/NetLogo/3.png" class="" title="This is 3-th image."><ul><li><code>layout-tutte</code> 给定锚节点（使用圆形布局），其余节点在中间。</li></ul><img src="/JeckFS/2021/02/12/NetLogo/4.png" class="" title="This is 4-th image."><ul><li><code>layout-spring</code> 节点互相排斥、连接互相牵引的弹簧网络。</li></ul><script type="math/tex; mode=display">\begin{bmatrix}  a & b \\  c & d\end{bmatrix}</script><script type="math/tex; mode=display">\begin{matrix}  0&0&0&60&40&0&0&0 \\  0&0&0&0&50&0&0&0 \\  0&0&0&0&70&0&0&0 \\  0&0&0&0&0&0&60&0 \\  0&0&0&0&0&70&40&50 \\  0&0&0&0&0&0&0&0 \\  0&0&0&0&0&0&0&0 \\  0&0&0&0&0&0&0&0\end{matrix}</script>]]></content>
      
      
      <categories>
          
          <category> 复杂系统仿真 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NetLogo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4-瞬时响应：网站的高性能架构</title>
      <link href="/JeckFS/2021/02/02/4-%E7%9E%AC%E6%97%B6%E5%93%8D%E5%BA%94%EF%BC%9A%E7%BD%91%E7%AB%99%E7%9A%84%E9%AB%98%E6%80%A7%E8%83%BD%E6%9E%B6%E6%9E%84/"/>
      <url>/JeckFS/2021/02/02/4-%E7%9E%AC%E6%97%B6%E5%93%8D%E5%BA%94%EF%BC%9A%E7%BD%91%E7%AB%99%E7%9A%84%E9%AB%98%E6%80%A7%E8%83%BD%E6%9E%B6%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h1 id="1-网站性能测试"><a href="#1-网站性能测试" class="headerlink" title="1.网站性能测试"></a>1.网站性能测试</h1><h2 id="1-1-性能测试指标"><a href="#1-1-性能测试指标" class="headerlink" title="1.1 性能测试指标"></a>1.1 性能测试指标</h2><ul><li><strong>响应时间</strong>：从发出请求开始到收到相应数据所需要的时间。</li></ul><img src="/JeckFS/2021/02/02/4-%E7%9E%AC%E6%97%B6%E5%93%8D%E5%BA%94%EF%BC%9A%E7%BD%91%E7%AB%99%E7%9A%84%E9%AB%98%E6%80%A7%E8%83%BD%E6%9E%B6%E6%9E%84/1.png" class="" title="This is 1-th image."><ul><li><strong>并发数</strong>：系统能够同事处理请求的数目。</li><li><strong>吞吐量</strong>：单位时间内系统处理的请求数量。单位：TPS（每秒事务数）、HPS（每秒HTTP请求数）、QPS（每秒查询数）。</li><li><strong>性能计数器</strong>：描述服务器火操作系统性能的一些数据指标。如System Load、对象与线程数、内存使用、CPU使用、磁盘与网络IO等指标。<br>System Load即系统负载，指当前正在被CPU执行和等待被CPU执行的进程数目总和，是反应系统忙闲程度的重要指标。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// top命令显示最近1分钟、10分钟、15分钟的运行队列平均进程数。</span><br><span class="line">top - 21:15:15 up 33 min,  5 users,  load average: 0.36, 0.46, 0.47</span><br></pre></td></tr></table></figure><h2 id="1-2-性能测试方法"><a href="#1-2-性能测试方法" class="headerlink" title="1.2 性能测试方法"></a>1.2 性能测试方法</h2><ul><li><strong>性能测试</strong></li><li><strong>负载测试</strong></li><li><strong>压力测试</strong></li><li><strong>稳定性测试</strong><br>在一段较长的时间内，不均匀地增加并发访问数，检测系统在该时段内是否稳定。</li></ul><img src="/JeckFS/2021/02/02/4-%E7%9E%AC%E6%97%B6%E5%93%8D%E5%BA%94%EF%BC%9A%E7%BD%91%E7%AB%99%E7%9A%84%E9%AB%98%E6%80%A7%E8%83%BD%E6%9E%B6%E6%9E%84/2.png" class="" title="This is 2-th image."><img src="/JeckFS/2021/02/02/4-%E7%9E%AC%E6%97%B6%E5%93%8D%E5%BA%94%EF%BC%9A%E7%BD%91%E7%AB%99%E7%9A%84%E9%AB%98%E6%80%A7%E8%83%BD%E6%9E%B6%E6%9E%84/3.png" class="" title="This is 3-th image."><h2 id="1-3-性能测试报告"><a href="#1-3-性能测试报告" class="headerlink" title="1.3 性能测试报告"></a>1.3 性能测试报告</h2><p>  先检查请求处理的各个环节的日志，确定有问题的环节，然后检查监控数据，分析影响性能的主要因素是内存、磁盘、网络还是CPU。定位到产生性能问题产生的具体原因后，进行性能优化。分为Web前端性能优化、应用服务器性能优化、存储器性能优化。</p><h1 id="2-Web前端性能优化"><a href="#2-Web前端性能优化" class="headerlink" title="2.Web前端性能优化"></a>2.Web前端性能优化</h1><ul><li><strong>浏览器访问优化</strong><ul><li>减少HTTP请求<br>在服务端，每个HTTP请求都会启动独立的线程去处理。通过合并CSS、合并JavaScript、合并图片为一个文件的方式，一次请求一并发送，减少了HTTP请求。</li><li>使用浏览器缓存</li></ul></li></ul><h1 id="3-应用服务器性能优化"><a href="#3-应用服务器性能优化" class="headerlink" title="3.应用服务器性能优化"></a>3.应用服务器性能优化</h1><h1 id="4-存储性能优化"><a href="#4-存储性能优化" class="headerlink" title="4.存储性能优化"></a>4.存储性能优化</h1>]]></content>
      
      
      <categories>
          
          <category> 大型网站技术架构李智慧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大型网站技术架构李智慧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CORS跨域请求</title>
      <link href="/JeckFS/2021/01/14/CORS%E8%B7%A8%E5%9F%9F%E8%AF%B7%E6%B1%82/"/>
      <url>/JeckFS/2021/01/14/CORS%E8%B7%A8%E5%9F%9F%E8%AF%B7%E6%B1%82/</url>
      
        <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;http://localhost:8080/get-graph&#x27;</span></span><br><span class="line">    , <span class="attr">type</span>: <span class="string">&#x27;post&#x27;</span></span><br><span class="line">    , <span class="attr">async</span>: <span class="literal">false</span></span><br><span class="line">    , <span class="attr">contentType</span>: <span class="string">&quot;application/json&quot;</span></span><br><span class="line">    , <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">result</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;result-&gt;&gt;&gt;&#x27;</span>, result)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FrontEndController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    MyService myService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@CrossOrigin</span>  </span><br><span class="line">    <span class="meta">@RequestMapping(value=&quot;/get-graph&quot;, produces=&quot;application/json;charset=UTF-8&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getGraph</span><span class="params">(HttpServletResponse response)</span>&#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;jsongraph.txt&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (!file.exists()) &#123;</span><br><span class="line">            <span class="keyword">return</span> JSON.toJSON(<span class="keyword">new</span> <span class="title class_">ResponseData</span>(<span class="number">200</span>,<span class="string">&quot;图数据正在生成...&quot;</span>,<span class="string">&quot;&quot;</span>)).toString();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">data</span> <span class="operator">=</span> myService.getJsonGraph();</span><br><span class="line">        System.out.println(data);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> JSON.toJSONString(<span class="keyword">new</span> <span class="title class_">ResponseData</span>(<span class="number">200</span>,<span class="string">&quot;数据传送完毕！&quot;</span>,data.toString()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解决方法：接口方法上添加<code>@CrossOrigin</code>注解，<code>@RequestMapping</code>中添加<code>produces=&quot;application/json;charset=UTF-8&quot;</code>参数。</p><p><a href="http://www.ruanyifeng.com/blog/2016/04/cors.html">重点参考教程</a><br><a href="https://www.cnblogs.com/yhcjhun/p/10879690.html">参考教程</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mock模拟从后端获取数据</title>
      <link href="/JeckFS/2021/01/13/Mock%E6%A8%A1%E6%8B%9F%E4%BB%8E%E5%90%8E%E7%AB%AF%E8%8E%B7%E5%8F%96%E6%95%B0%E6%8D%AE/"/>
      <url>/JeckFS/2021/01/13/Mock%E6%A8%A1%E6%8B%9F%E4%BB%8E%E5%90%8E%E7%AB%AF%E8%8E%B7%E5%8F%96%E6%95%B0%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a><a href="https://github.com/nuysoft/Mock/wiki/Getting-Started">安装</a></h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 安装</span><br><span class="line">npm install -g bower</span><br><span class="line">bower install --save mockjs</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;./bower_components/mockjs/dist/mock.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Mock</span>.<span class="title function_">mock</span>(<span class="string">&#x27;http://mockjs.com/api?page=1&amp;limit=10&#x27;</span>, <span class="string">&#x27;get&#x27;</span>, &#123;</span><br><span class="line">    <span class="string">&quot;code&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">&quot;msg&quot;</span>: <span class="title class_">Mock</span>.<span class="property">Random</span>.<span class="title function_">string</span>(<span class="number">2</span>, <span class="number">10</span>),</span><br><span class="line">    <span class="string">&quot;count&quot;</span>: <span class="title class_">Mock</span>.<span class="property">Random</span>.<span class="title function_">integer</span>(<span class="number">100</span>, <span class="number">1000</span>),</span><br><span class="line">    <span class="string">&quot;data|100&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// &quot;id&quot;: &quot;@integer(100,1000)&quot;,</span></span><br><span class="line">            <span class="string">&quot;id|+1&quot;</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="string">&quot;username&quot;</span>: <span class="string">&quot;@string(&#x27;lower&#x27;,10)&quot;</span>,</span><br><span class="line">            <span class="string">&quot;sex&quot;</span>: <span class="string">&quot;@string(&#x27;男女&#x27;,1)&quot;</span>,</span><br><span class="line">            <span class="string">&quot;city&quot;</span>: <span class="string">&quot;@string(&#x27;lower&#x27;,15)&quot;</span>,</span><br><span class="line">            <span class="string">&quot;sign&quot;</span>: <span class="string">&quot;签名-&quot;</span> + <span class="string">&quot;@integer(0,1000)&quot;</span>,</span><br><span class="line">            <span class="string">&quot;experience&quot;</span>: <span class="string">&quot;@integer(0,1000)&quot;</span>,</span><br><span class="line">            <span class="string">&quot;logins&quot;</span>: <span class="string">&quot;@integer(0,1000)&quot;</span>,</span><br><span class="line">            <span class="string">&quot;wealth&quot;</span>: <span class="string">&quot;@integer(0,1000)&quot;</span>,</span><br><span class="line">            <span class="string">&quot;classify&quot;</span>: <span class="string">&quot;@word(7)&quot;</span>,</span><br><span class="line">            <span class="string">&quot;score&quot;</span>: <span class="string">&quot;@float(60,100,3,5)&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    ]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><a href="https://www.cnblogs.com/zhaodezhuang/articles/10833937.html">用例1</a><br><a href="https://www.cnblogs.com/home-/p/11580749.html">用例2</a><br><a href="http://mockjs.com/examples.html">官方教程</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS</title>
      <link href="/JeckFS/2020/12/29/CSS/"/>
      <url>/JeckFS/2020/12/29/CSS/</url>
      
        <content type="html"><![CDATA[<h1 id="元素的显示模式"><a href="#元素的显示模式" class="headerlink" title="元素的显示模式"></a>元素的显示模式</h1><ul><li>1.块元素</li></ul><img src="/JeckFS/2020/12/29/CSS/1.png" class="" title="This is 1-th image."><ul><li>2.行元素</li></ul><img src="/JeckFS/2020/12/29/CSS/2.png" class="" title="This is 2-th image."><ul><li>3.行内块元素</li></ul><img src="/JeckFS/2020/12/29/CSS/3.png" class="" title="This is 3-th image."><h2 id="元素模式的转换"><a href="#元素模式的转换" class="headerlink" title="元素模式的转换"></a>元素模式的转换</h2><p>比如想要增加链接<code>\&lt;a\&gt;</code>的触发范围。</p><p>转换方式:</p><ul><li>转换为块元素<code>display:block</code></li><li>转换为行内元素<code>display:inline</code></li><li>转换为行内块<code>display:inline-block</code></li></ul><blockquote><p>文字居中的一个小技巧：<code>文字行高=盒子高度即：line-height=height</code></p></blockquote><h1 id="CSS三大特性"><a href="#CSS三大特性" class="headerlink" title="CSS三大特性"></a>CSS三大特性</h1><ul><li>层叠性</li></ul><img src="/JeckFS/2020/12/29/CSS/4.png" class="" title="This is 4-th image."><ul><li>继承性</li></ul><img src="/JeckFS/2020/12/29/CSS/5.png" class="" title="This is 5-th image."><p>行高的继承性：</p><img src="/JeckFS/2020/12/29/CSS/7.png" class="" title="This is 7-th image."><ul><li>优先级</li></ul><img src="/JeckFS/2020/12/29/CSS/8.png" class="" title="This is 8-th image."><img src="/JeckFS/2020/12/29/CSS/10.png" class="" title="This is 10-th image."><p>复合选择器的权重叠加问题：</p><img src="/JeckFS/2020/12/29/CSS/11.png" class="" title="This is 11-th image."><img src="/JeckFS/2020/12/29/CSS/12.png" class="" title="This is 12-th image."><img src="/JeckFS/2020/12/29/CSS/13.png" class="" title="This is 13-th image."><p><a href="https://www.bilibili.com/video/BV14J4114768?p=135">https://www.bilibili.com/video/BV14J4114768?p=135</a></p><h1 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h1><p>网页布局三大核心：盒子模型、浮动、定位。</p><img src="/JeckFS/2020/12/29/CSS/14.png" class="" title="This is 14-th image."><img src="/JeckFS/2020/12/29/CSS/15.png" class="" title="This is 15-th image."><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="comment">/*第二句层叠在第一句的上面，反之则不能达到上边框为红，其余为蓝的效果*/</span></span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid blue;</span><br><span class="line">    <span class="attribute">border-top</span>: <span class="number">1px</span> solid red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">table</span>, <span class="selector-tag">td</span>&#123;</span><br><span class="line">    <span class="attribute">border-collapse</span>: collapse;<span class="comment">/*合并表格单元格的边框*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/JeckFS/2020/12/29/CSS/17.png" class="" title="This is 17-th image."><img src="/JeckFS/2020/12/29/CSS/18.png" class="" title="This is 18-th image."><p>margin外边距用法与padding类似。margin不会撑开盒子。</p><p>利用margin实现块级盒子水平居中：</p><img src="/JeckFS/2020/12/29/CSS/19.png" class="" title="This is 19-th image."><img src="/JeckFS/2020/12/29/CSS/20.png" class="" title="This is 20-th image."><p>外边距合并还有其他解决方案：浮动、固定、绝对定位的盒子不会有塌陷问题。</p><img src="/JeckFS/2020/12/29/CSS/21.png" class="" title="This is 21-th image."><img src="/JeckFS/2020/12/29/CSS/22.png" class="" title="This is 22-th image."><img src="/JeckFS/2020/12/29/CSS/23.png" class="" title="This is 23-th image."><blockquote><p>列表去掉小圆点<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">li</span>&#123;</span><br><span class="line">  <span class="attribute">list-style</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><img src="/JeckFS/2020/12/29/CSS/24.png" class="" title="This is 24-th image."></blockquote><img src="/JeckFS/2020/12/29/CSS/25.png" class="" title="This is 25-th image."><img src="/JeckFS/2020/12/29/CSS/26.png" class="" title="This is 26-th image."><img src="/JeckFS/2020/12/29/CSS/27.png" class="" title="This is 27-th image."><img src="/JeckFS/2020/12/29/CSS/28.png" class="" title="This is 28-th image."><h1 id="浮动"><a href="#浮动" class="headerlink" title="浮动"></a>浮动</h1><p><a href="https://blog.csdn.net/u010358168/article/details/107168619">浮动</a></p><p>CSS 提供的三种传统布局方式：</p><ul><li>普通流（标准流/文档流）</li><li>浮动</li><li>定位</li></ul><img src="/JeckFS/2020/12/29/CSS/29.png" class="" title="This is 29-th image."><img src="/JeckFS/2020/12/29/CSS/30.png" class="" title="This is 30-th image."><img src="/JeckFS/2020/12/29/CSS/31.png" class="" title="This is 31-th image."><img src="/JeckFS/2020/12/29/CSS/32.png" class="" title="This is 32-th image."><img src="/JeckFS/2020/12/29/CSS/32.png" class="" title="This is 32-th image."><img src="/JeckFS/2020/12/29/CSS/33.png" class="" title="This is 33-th image."><img src="/JeckFS/2020/12/29/CSS/34.png" class="" title="This is 34-th image."><img src="/JeckFS/2020/12/29/CSS/35.png" class="" title="This is 35-th image."><img src="/JeckFS/2020/12/29/CSS/37.png" class="" title="This is 37-th image."><img src="/JeckFS/2020/12/29/CSS/38.png" class="" title="This is 38-th image."><img src="/JeckFS/2020/12/29/CSS/39.png" class="" title="This is 39-th image."><p>（浮动）子盒子撑开父盒子：清除浮动</p><img src="/JeckFS/2020/12/29/CSS/40.png" class="" title="This is 40-th image."><img src="/JeckFS/2020/12/29/CSS/41.png" class="" title="This is 41-th image."><img src="/JeckFS/2020/12/29/CSS/42.png" class="" title="This is 42-th image."><img src="/JeckFS/2020/12/29/CSS/43.png" class="" title="This is 43-th image."><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clear</span>&#123;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;damao&quot;</span>&gt;</span>浮动<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ermao&quot;</span>&gt;</span>浮动<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;clear&quot;</span>&gt;</span>清除浮动<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="/JeckFS/2020/12/29/CSS/44.png" class="" title="This is 44-th image."><img src="/JeckFS/2020/12/29/CSS/45.png" class="" title="This is 45-th image."><img src="/JeckFS/2020/12/29/CSS/46.png" class="" title="This is 46-th image."><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;clearfix&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;damao&quot;</span>&gt;</span>浮动<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ermao&quot;</span>&gt;</span>浮动<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="/JeckFS/2020/12/29/CSS/47.png" class="" title="This is 47-th image."><img src="/JeckFS/2020/12/29/CSS/48.png" class="" title="This is 48-th image."><img src="/JeckFS/2020/12/29/CSS/49.png" class="" title="This is 49-th image."><img src="/JeckFS/2020/12/29/CSS/50.png" class="" title="This is 50-th image."><blockquote><p>补充：导航栏的制作</p><img src="/JeckFS/2020/12/29/CSS/51.png" class="" title="This is 51-th image."><p><strong>浮动的盒子不会有margin塌陷的问题</strong></p></blockquote><h1 id="CSS定位"><a href="#CSS定位" class="headerlink" title="CSS定位"></a>CSS定位</h1><p><a href="https://blog.csdn.net/u010358168/article/details/107117359">定位</a></p><img src="/JeckFS/2020/12/29/CSS/56.png" class="" title="This is 56-th image."><img src="/JeckFS/2020/12/29/CSS/53.png" class="" title="This is 53-th image."><img src="/JeckFS/2020/12/29/CSS/54.png" class="" title="This is 54-th image."><p>定位方式：</p><img src="/JeckFS/2020/12/29/CSS/57.png" class="" title="This is 57-th image."><img src="/JeckFS/2020/12/29/CSS/58.png" class="" title="This is 58-th image."><img src="/JeckFS/2020/12/29/CSS/59.png" class="" title="This is 59-th image."><p><strong>子绝父相</strong></p><img src="/JeckFS/2020/12/29/CSS/60.png" class="" title="This is 60-th image."><img src="/JeckFS/2020/12/29/CSS/61.png" class="" title="This is 61-th image."><img src="/JeckFS/2020/12/29/CSS/62.png" class="" title="This is 62-th image."><p>黏性定位：stick。实现盒子滑动到一定程度，定在某个位置的效果。</p><img src="/JeckFS/2020/12/29/CSS/63.png" class="" title="This is 63-th image."><img src="/JeckFS/2020/12/29/CSS/64.png" class="" title="This is 64-th image."><img src="/JeckFS/2020/12/29/CSS/65.png" class="" title="This is 65-th image."><img src="/JeckFS/2020/12/29/CSS/66.png" class="" title="This is 66-th image."><img src="/JeckFS/2020/12/29/CSS/67.png" class="" title="This is 67-th image."><img src="/JeckFS/2020/12/29/CSS/68.png" class="" title="This is 68-th image."><img src="/JeckFS/2020/12/29/CSS/69.png" class="" title="This is 69-th image."><blockquote><p>一个盒子既有left又有right属性，则默认执行left。同理top，bottom默认执行top。</p></blockquote><h1 id="元素的显示与隐藏"><a href="#元素的显示与隐藏" class="headerlink" title="元素的显示与隐藏"></a>元素的显示与隐藏</h1><img src="/JeckFS/2020/12/29/CSS/70.png" class="" title="This is 70-th image."><img src="/JeckFS/2020/12/29/CSS/71.png" class="" title="This is 71-th image."><img src="/JeckFS/2020/12/29/CSS/72.png" class="" title="This is 72-th image."><img src="/JeckFS/2020/12/29/CSS/73.png" class="" title="This is 73-th image."><h1 id="CSS-高级样式"><a href="#CSS-高级样式" class="headerlink" title="CSS 高级样式"></a>CSS 高级样式</h1><h2 id="1-精灵图"><a href="#1-精灵图" class="headerlink" title="1.精灵图"></a>1.精灵图</h2><img src="/JeckFS/2020/12/29/CSS/74.png" class="" title="This is 74-th image."><img src="/JeckFS/2020/12/29/CSS/75.png" class="" title="This is 75-th image."><h2 id="2-字体图标"><a href="#2-字体图标" class="headerlink" title="2.字体图标"></a>2.字体图标</h2><img src="/JeckFS/2020/12/29/CSS/76.png" class="" title="This is 76-th image."><img src="/JeckFS/2020/12/29/CSS/77.png" class="" title="This is 77-th image."><img src="/JeckFS/2020/12/29/CSS/78.png" class="" title="This is 78-th image."><img src="/JeckFS/2020/12/29/CSS/79.png" class="" title="This is 79-th image."><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">span</span>&#123;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">&#x27;icomoon&#x27;</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">color</span>: pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/JeckFS/2020/12/29/CSS/80.png" class="" title="This is 80-th image."><h2 id="3-CSS三角"><a href="#3-CSS三角" class="headerlink" title="3.CSS三角"></a>3.CSS三角</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box1</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">border-top</span>: <span class="number">80px</span> solid red;</span><br><span class="line">    <span class="attribute">border-right</span>: <span class="number">80px</span> solid blue;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">80px</span> solid yellow;</span><br><span class="line">    <span class="attribute">border-left</span>: <span class="number">80px</span> solid grey;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box2</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">border-top</span>: <span class="number">80px</span> solid transparent;</span><br><span class="line">    <span class="attribute">border-right</span>: <span class="number">300px</span> solid transparent;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">80px</span> solid yellow;</span><br><span class="line">    <span class="attribute">border-left</span>: <span class="number">80px</span> solid transparent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/JeckFS/2020/12/29/CSS/81.png" class="" title="This is 81-th image."><h2 id="4-CSS用户界面样式"><a href="#4-CSS用户界面样式" class="headerlink" title="4.CSS用户界面样式"></a>4.CSS用户界面样式</h2><img src="/JeckFS/2020/12/29/CSS/82.png" class="" title="This is 82-th image."><img src="/JeckFS/2020/12/29/CSS/83.png" class="" title="This is 83-th image."><img src="/JeckFS/2020/12/29/CSS/84.png" class="" title="This is 83-th image."><h2 id="5-vertical-align属性应用"><a href="#5-vertical-align属性应用" class="headerlink" title="5.vertical-align属性应用"></a>5.vertical-align属性应用</h2><img src="/JeckFS/2020/12/29/CSS/85.png" class="" title="This is 85-th image."><img src="/JeckFS/2020/12/29/CSS/86.png" class="" title="This is 86-th image."><img src="/JeckFS/2020/12/29/CSS/88.png" class="" title="This is 88-th image."><img src="/JeckFS/2020/12/29/CSS/89.png" class="" title="This is 89-th image."><h2 id="6-溢出的文字省略号显示"><a href="#6-溢出的文字省略号显示" class="headerlink" title="6.溢出的文字省略号显示"></a>6.溢出的文字省略号显示</h2><img src="/JeckFS/2020/12/29/CSS/89.png" class="" title="This is 90-th image."><h1 id="7-常见布局技巧"><a href="#7-常见布局技巧" class="headerlink" title="7.常见布局技巧"></a>7.常见布局技巧</h1><p>margin设置为负值解决重叠边框变粗的问题。</p><img src="/JeckFS/2020/12/29/CSS/91.png" class="" title="This is 91-th image."><p>鼠标经过出现边框压住而不能显示完整边框的情况，需要使用<code>z-index</code>属性抬高盒子的高度。</p><img src="/JeckFS/2020/12/29/CSS/92.png" class="" title="This is 92-th image."><h1 id="CSS初始化"><a href="#CSS初始化" class="headerlink" title="CSS初始化"></a>CSS初始化</h1><h1 id="CSS3新特性"><a href="#CSS3新特性" class="headerlink" title="CSS3新特性"></a>CSS3新特性</h1><ul><li><strong>1.属性选择器</strong></li></ul><img src="/JeckFS/2020/12/29/CSS/93.png" class="" title="This is 93-th image."><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*必须是input 但是同时具有 value 这个属性，才会选择这个元素*/</span></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[value]</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: aqua;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;<span class="selector-tag">input</span> type=&quot;text&quot; value=&quot;hello world&quot;&gt;</span><br><span class="line">&lt;<span class="selector-tag">input</span> type=&quot;text&quot;&gt;</span><br></pre></td></tr></table></figure><ul><li><strong>2.结构伪类选择器</strong></li></ul><img src="/JeckFS/2020/12/29/CSS/94.png" class="" title="This is 94-th image."><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*选择ul中第一个li元素*/</span></span><br><span class="line"><span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:first</span>-child &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>nth-child(n)与nth-of-type(n)的区别：</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">nth-child(1)并不能将熊大选出来，因为nth-child会将section标签中所有的标签都从0排序，&lt;p&gt;&lt;div&gt;&lt;div&gt;的标号分别为1,2,3。nth-child(1)选择的恰好是p标签，但他不是div所以不会选择。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">section div:nth-child(1)首先匹配nth-child(1)然后匹配div。</span></span><br><span class="line"><span class="comment">section div:nth-of-type(1)首先匹配的是div然后匹配nth-of-type(1)。他选择的是熊大</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="selector-tag">section</span> <span class="selector-tag">div</span><span class="selector-pseudo">:nth-child</span>(<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;<span class="selector-tag">section</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">p</span>&gt;光头强&lt;/<span class="selector-tag">p</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">div</span>&gt;熊大&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">div</span>&gt;熊二&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">section</span>&gt;</span><br></pre></td></tr></table></figure><ul><li><strong>3.伪元素选择器</strong></li></ul><img src="/JeckFS/2020/12/29/CSS/95.png" class="" title="This is 95-th image."><p>E::before 和 E::after 都会在E元素内容的前后。</p><img src="/JeckFS/2020/12/29/CSS/96.png" class="" title="This is 96-th image."><p>div::before的权重是2。</p><ul><li><strong>4.CSS3盒子模型（不会撑大盒子）</strong></li></ul><img src="/JeckFS/2020/12/29/CSS/97.png" class="" title="This is 97-th image."><ul><li><strong>5.其他特性</strong></li></ul><img src="/JeckFS/2020/12/29/CSS/97.png" class="" title="This is 98-th image."><ul><li><strong>6.CSS3过渡</strong></li></ul><img src="/JeckFS/2020/12/29/CSS/99.png" class="" title="This is 99-th image."><h1 id="CSS3-2D转换"><a href="#CSS3-2D转换" class="headerlink" title="CSS3 2D转换"></a>CSS3 2D转换</h1><img src="/JeckFS/2020/12/29/CSS/100.png" class="" title="This is 100-th image."><h1 id="CSS3动画"><a href="#CSS3动画" class="headerlink" title="CSS3动画"></a>CSS3动画</h1><img src="/JeckFS/2020/12/29/CSS/101.png" class="" title="This is 101-th image."><h1 id="CSS3-3D转换"><a href="#CSS3-3D转换" class="headerlink" title="CSS3 3D转换"></a>CSS3 3D转换</h1><img src="/JeckFS/2020/12/29/CSS/102.png" class="" title="This is 102-th image."><p>反转盒子案例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">*&#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">    <span class="attribute">perspective</span>: <span class="number">400px</span>;<span class="comment">/*****/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">20px</span> auto;</span><br><span class="line">    <span class="attribute">transition</span>: all .<span class="number">4s</span>;</span><br><span class="line">    <span class="attribute">transform-style</span>: preserve-<span class="number">3</span>d;<span class="comment">/*给父级添加的*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotateY</span>(<span class="number">180deg</span>);<span class="comment">/*****/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.zheng</span>, <span class="selector-class">.fan</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.zheng</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: pink;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.fan</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotateY</span>(<span class="number">180deg</span>);<span class="comment">/*****/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">div</span> class=&quot;box&quot;&gt;</span><br><span class="line">        &lt;<span class="selector-tag">div</span> class=&quot;zheng&quot;&gt;正&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">        &lt;<span class="selector-tag">div</span> class=&quot;fan&quot;&gt;反&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">    &lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">body</span>&gt;</span><br></pre></td></tr></table></figure><p>3D导航栏案例：</p><img src="/JeckFS/2020/12/29/CSS/104.png" class="" title="This is 104-th image."><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line">*&#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">ul</span> <span class="selector-tag">li</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">list-style</span>: none;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">    <span class="attribute">perspective</span>: <span class="number">500px</span>;<span class="comment">/*注意这句加在body中的显示效果如图1,加在li中的效果如图2*/</span></span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">ul</span>&#123;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">80px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">transform-style</span>: preserve-<span class="number">3</span>d;</span><br><span class="line">    <span class="attribute">transition</span>: all .<span class="number">4s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotateX</span>(<span class="number">90deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.zheng</span>, <span class="selector-class">.xia</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>:<span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.zheng</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: pink;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateZ</span>(<span class="number">10px</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.xia</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: purple;</span><br><span class="line">    <span class="comment">/*必须先translate然后rotate*/</span></span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateY</span>(<span class="number">10px</span>)  <span class="built_in">rotateX</span>(-<span class="number">90deg</span>) ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">ul</span>&gt;</span><br><span class="line">        &lt;<span class="selector-tag">li</span>&gt;</span><br><span class="line">            &lt;<span class="selector-tag">div</span> class=&quot;box&quot;&gt;</span><br><span class="line">                &lt;<span class="selector-tag">div</span> class=&quot;zheng&quot;&gt;正对&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">                &lt;<span class="selector-tag">div</span> class=&quot;xia&quot;&gt;下方&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">            &lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">        &lt;/<span class="selector-tag">li</span>&gt;</span><br><span class="line">        &lt;<span class="selector-tag">li</span>&gt;</span><br><span class="line">            &lt;<span class="selector-tag">div</span> class=&quot;box&quot;&gt;</span><br><span class="line">                &lt;<span class="selector-tag">div</span> class=&quot;zheng&quot;&gt;正对&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">                &lt;<span class="selector-tag">div</span> class=&quot;xia&quot;&gt;下方&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">            &lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">        &lt;/<span class="selector-tag">li</span>&gt;</span><br><span class="line">        &lt;<span class="selector-tag">li</span>&gt;</span><br><span class="line">            &lt;<span class="selector-tag">div</span> class=&quot;box&quot;&gt;</span><br><span class="line">                &lt;<span class="selector-tag">div</span> class=&quot;zheng&quot;&gt;正对&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">                &lt;<span class="selector-tag">div</span> class=&quot;xia&quot;&gt;下方&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">            &lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">        &lt;/<span class="selector-tag">li</span>&gt;</span><br><span class="line">        &lt;<span class="selector-tag">li</span>&gt;</span><br><span class="line">            &lt;<span class="selector-tag">div</span> class=&quot;box&quot;&gt;</span><br><span class="line">                &lt;<span class="selector-tag">div</span> class=&quot;zheng&quot;&gt;正对&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">                &lt;<span class="selector-tag">div</span> class=&quot;xia&quot;&gt;下方&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">            &lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">        &lt;/<span class="selector-tag">li</span>&gt;</span><br><span class="line">        &lt;<span class="selector-tag">li</span>&gt;</span><br><span class="line">            &lt;<span class="selector-tag">div</span> class=&quot;box&quot;&gt;</span><br><span class="line">                &lt;<span class="selector-tag">div</span> class=&quot;zheng&quot;&gt;正对&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">                &lt;<span class="selector-tag">div</span> class=&quot;xia&quot;&gt;下方&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">            &lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">        &lt;/<span class="selector-tag">li</span>&gt;</span><br><span class="line">    &lt;/<span class="selector-tag">ul</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">body</span>&gt;</span><br></pre></td></tr></table></figure><p>旋转木马案例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">*&#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">    <span class="attribute">perspective</span>: <span class="number">500px</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">section</span>&#123; </span><br><span class="line">    <span class="attribute">position</span>: relative; </span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">150px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">50%</span> auto;</span><br><span class="line">    <span class="attribute">transform-style</span>: preserve-<span class="number">3</span>d;</span><br><span class="line">    <span class="attribute">animation</span>: rotate <span class="number">3s</span> linear infinite; </span><br><span class="line">    <span class="attribute">animation-play-state</span>: paused;</span><br><span class="line">    <span class="attribute">background-color</span>: pink;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@keyframes</span> rotate&#123; </span><br><span class="line">    <span class="number">0%</span>&#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">rotateY</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="number">100%</span>&#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">rotateY</span>(<span class="number">360deg</span>);</span><br><span class="line">    &#125;  </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="selector-tag">section</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">    <span class="attribute">animation-play-state</span>: running;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">section</span> <span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">&#x27;imgs/dog.png&#x27;</span>) no-repeat;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">section</span> <span class="selector-tag">div</span><span class="selector-pseudo">:nth-child</span>(<span class="number">1</span>)&#123; </span><br><span class="line">    <span class="comment">/* 必须先旋转好了 再移动距离 */</span></span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateZ</span>(<span class="number">260px</span>);</span><br><span class="line">&#125; </span><br><span class="line"><span class="selector-tag">section</span> <span class="selector-tag">div</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>)&#123;</span><br><span class="line">    <span class="attribute">transform</span>:<span class="built_in">rotateY</span>(<span class="number">60deg</span>) <span class="built_in">translateZ</span>(<span class="number">260px</span>) ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">section</span> <span class="selector-tag">div</span><span class="selector-pseudo">:nth-child</span>(<span class="number">3</span>)&#123;</span><br><span class="line">    <span class="attribute">transform</span>:  <span class="built_in">rotateY</span>(<span class="number">120deg</span>) <span class="built_in">translateZ</span>(<span class="number">260px</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">section</span> <span class="selector-tag">div</span><span class="selector-pseudo">:nth-child</span>(<span class="number">4</span>)&#123;</span><br><span class="line">    <span class="attribute">transform</span>:  <span class="built_in">rotateY</span>(<span class="number">180deg</span>) <span class="built_in">translateZ</span>(<span class="number">260px</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">section</span> <span class="selector-tag">div</span><span class="selector-pseudo">:nth-child</span>(<span class="number">5</span>)&#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotateY</span>(<span class="number">240deg</span>) <span class="built_in">translateZ</span>(<span class="number">260px</span>) ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">section</span> <span class="selector-tag">div</span><span class="selector-pseudo">:nth-child</span>(<span class="number">6</span>)&#123;</span><br><span class="line">    <span class="attribute">transform</span>:  <span class="built_in">rotateY</span>(<span class="number">300deg</span>) <span class="built_in">translateZ</span>(<span class="number">260px</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">section</span>&gt;</span><br><span class="line">        &lt;<span class="selector-tag">div</span>&gt;&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">        &lt;<span class="selector-tag">div</span>&gt;&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">        &lt;<span class="selector-tag">div</span>&gt;&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">        &lt;<span class="selector-tag">div</span>&gt;&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">        &lt;<span class="selector-tag">div</span>&gt;&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">        &lt;<span class="selector-tag">div</span>&gt;&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">    &lt;/<span class="selector-tag">section</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">body</span>&gt;</span><br></pre></td></tr></table></figure><img src="/JeckFS/2020/12/29/CSS/105.png" class="" title="This is 105-th image.">]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux内核核心知识全解析</title>
      <link href="/JeckFS/2020/11/04/Linux%E5%86%85%E6%A0%B8%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E5%85%A8%E8%A7%A3%E6%9E%90/"/>
      <url>/JeckFS/2020/11/04/Linux%E5%86%85%E6%A0%B8%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E5%85%A8%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1 id="X86-Registers"><a href="#X86-Registers" class="headerlink" title="X86 Registers"></a>X86 Registers</h1><p>X86 CPU的通用寄存器：</p><img src="/JeckFS/2020/11/04/Linux%E5%86%85%E6%A0%B8%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E5%85%A8%E8%A7%A3%E6%9E%90/1.png" class="" title="This is 1-th image."><p>段寄存器：</p><img src="/JeckFS/2020/11/04/Linux%E5%86%85%E6%A0%B8%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E5%85%A8%E8%A7%A3%E6%9E%90/2.png" class="" title="This is 2-th image."><p>CPU在实际取指令时根据 cs:eip 来准确定位一个指令。</p><p>标志寄存器 EFLAGS register</p><img src="/JeckFS/2020/11/04/Linux%E5%86%85%E6%A0%B8%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E5%85%A8%E8%A7%A3%E6%9E%90/3.png" class="" title="This is 3-th image."><p>X86——64 Registers：</p><img src="/JeckFS/2020/11/04/Linux%E5%86%85%E6%A0%B8%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E5%85%A8%E8%A7%A3%E6%9E%90/4.png" class="" title="This is 4-th image."><h1 id="X86汇编指令"><a href="#X86汇编指令" class="headerlink" title="X86汇编指令"></a>X86汇编指令</h1><img src="/JeckFS/2020/11/04/Linux%E5%86%85%E6%A0%B8%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E5%85%A8%E8%A7%A3%E6%9E%90/5.png" class="" title="This is 5-th image."><p>寄存器模式：以 % 开头的寄存器标示符。操作的都是寄存器。<br>立即数：是以 $ 开头的数值。<br>直接寻址：直接访问一个指定的内存地址的数据。<br>间接寻址：将寄存器的值作为一个内存地址来访问内存。<br>变址寻址：在间接寻址之时改变寄存器的数值。 </p><p>【注意】</p><img src="/JeckFS/2020/11/04/Linux%E5%86%85%E6%A0%B8%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E5%85%A8%E8%A7%A3%E6%9E%90/6.png" class="" title="This is 6-th image."><img src="/JeckFS/2020/11/04/Linux%E5%86%85%E6%A0%B8%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E5%85%A8%E8%A7%A3%E6%9E%90/7.png" class="" title="This is 7-th image."><p>指令后面的星号表示这是伪指令，不能被CPU执行。寄存器 eip 只能通过特殊指令间接修改。</p><h1 id="反汇编一个简单的-C-程序"><a href="#反汇编一个简单的-C-程序" class="headerlink" title="反汇编一个简单的 C 程序"></a>反汇编一个简单的 C 程序</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">g</span><span class="params">(<span class="type">int</span> x)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x+<span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">f</span><span class="params">(<span class="type">int</span> x)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> g(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> f(<span class="number">8</span>)+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">g:</span></span><br><span class="line">pushl%ebp</span><br><span class="line">movl%esp, %ebp</span><br><span class="line">movl<span class="number">8</span>(%ebp), %eax</span><br><span class="line">addl<span class="number">$3</span>, %eax</span><br><span class="line">popl%ebp</span><br><span class="line"><span class="keyword">ret</span></span><br><span class="line"><span class="symbol">f:</span></span><br><span class="line">pushl%ebp</span><br><span class="line">movl%esp, %ebp</span><br><span class="line">subl<span class="number">$4</span>, %esp</span><br><span class="line">movl<span class="number">8</span>(%ebp), %eax</span><br><span class="line">movl%eax, (%esp)</span><br><span class="line"><span class="keyword">call</span>g</span><br><span class="line"><span class="keyword">leave</span></span><br><span class="line"><span class="keyword">ret</span></span><br><span class="line"><span class="symbol">main:</span></span><br><span class="line">pushl%ebp</span><br><span class="line">movl%esp, %ebp</span><br><span class="line">subl<span class="number">$4</span>, %esp</span><br><span class="line">movl<span class="number">$8</span>, (%esp)</span><br><span class="line"><span class="keyword">call</span>f</span><br><span class="line">addl<span class="number">$1</span>, %eax</span><br><span class="line"><span class="keyword">leave</span></span><br><span class="line"><span class="keyword">ret</span></span><br></pre></td></tr></table></figure><img src="/JeckFS/2020/11/04/Linux%E5%86%85%E6%A0%B8%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E5%85%A8%E8%A7%A3%E6%9E%90/8.png" class="" title="This is 8-th image."><p><code>enter、leave</code>宏指令</p><p>函数的返回值默认使用 eax 寄存器存储返回给上一级函数。</p><h1 id="堆栈"><a href="#堆栈" class="headerlink" title="堆栈"></a>堆栈</h1><img src="/JeckFS/2020/11/04/Linux%E5%86%85%E6%A0%B8%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E5%85%A8%E8%A7%A3%E6%9E%90/9.png" class="" title="This is 9-th image."><img src="/JeckFS/2020/11/04/Linux%E5%86%85%E6%A0%B8%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E5%85%A8%E8%A7%A3%E6%9E%90/10.png" class="" title="This is 10-th image."><img src="/JeckFS/2020/11/04/Linux%E5%86%85%E6%A0%B8%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E5%85%A8%E8%A7%A3%E6%9E%90/11.png" class="" title="This is 11-th image."><p>函数调用的实现：</p><img src="/JeckFS/2020/11/04/Linux%E5%86%85%E6%A0%B8%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E5%85%A8%E8%A7%A3%E6%9E%90/12.png" class="" title="This is 12-th image."><p>函数调用时堆栈的变化：</p><img src="/JeckFS/2020/11/04/Linux%E5%86%85%E6%A0%B8%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E5%85%A8%E8%A7%A3%E6%9E%90/13.png" class="" title="This is 13-th image."><h1 id="参数传递与局部变量"><a href="#参数传递与局部变量" class="headerlink" title="参数传递与局部变量"></a>参数传递与局部变量</h1>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux升级内核</title>
      <link href="/JeckFS/2020/10/23/linux%E5%8D%87%E7%BA%A7%E5%86%85%E6%A0%B8/"/>
      <url>/JeckFS/2020/10/23/linux%E5%8D%87%E7%BA%A7%E5%86%85%E6%A0%B8/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.jianshu.com/p/0c2e7a530cfe">内核升级教程</a><br><a href="https://kernel.ubuntu.com/~kernel-ppa/mainline/">内核软件包下载</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Temp</title>
      <link href="/JeckFS/2020/10/20/Temp/"/>
      <url>/JeckFS/2020/10/20/Temp/</url>
      
        <content type="html"><![CDATA[<img src="/JeckFS/2020/10/20/Temp/1.png" class="" title="This is 1-th image."><p>内存编制方式：按字节编址、按字编址。</p><h1 id="进程的运行原理："><a href="#进程的运行原理：" class="headerlink" title="进程的运行原理："></a>进程的运行原理：</h1><h2 id="1-关于指令"><a href="#1-关于指令" class="headerlink" title="1.关于指令"></a>1.关于指令</h2><p>命令结构：指令代码+逻辑地址</p><p>逻辑地址（相对地址） vs 物理地址：<br>物理地址通过逻辑地址+起始地址得到。</p><p>若逻辑地址为9，起始地址为100，表示其物理地址是109。编译时产生的指令之关心“相对地址”，但是指令执行时再计算其物理地址。</p><h2 id="2-从写程序到程序执行"><a href="#2-从写程序到程序执行" class="headerlink" title="2.从写程序到程序执行"></a>2.从写程序到程序执行</h2><img src="/JeckFS/2020/10/20/Temp/2.png" class="" title="This is 2-th image."><h3 id="2-1-装入"><a href="#2-1-装入" class="headerlink" title="2.1 装入"></a>2.1 装入</h3><p>在将目标程序装入内存中时，指令中的地址是逻辑地址，如何讲逻辑地址转换为物理地址是指令正确执行的前提。</p><p><strong>将逻辑地址转换为物理地址的三种方式</strong></p><ul><li><p>绝对装入<br>在装入时，程序中的逻辑地址替换为物理地址。前提是编译程序已经知道程序放到内存中的哪个位置。即程序知道程序放的起始位置。</p><p>绝对装入<strong>只适合单道程序环境</strong>。</p></li><li><p>静态重定位（可重定位装入）<br>源程序在经过编写、编译、连接、装入阶段后，进入内存。静态重定位指的是逻辑地址到物理地址的转换是在装入时进行，编译、连接阶段使用的仍是逻辑地址，装入阶段才变为物理地址。</p><p>静态重定位的特点：内存空间足够容纳程序，且运行期间不能再移动和申请内存空间。适用于早期多道批处理操作系统。</p></li><li><p>动态重定位（动态运行时装入）<br>在源程序编译、连接、装入过程中使用是逻辑地址，只有在程序真正要执行的时候才将逻辑地址转换为物理地址。即在内存中真正执行前的程序仍然是逻辑地址。适用于现代操作系统。</p><p>特点是：需要<strong>重定位寄存器</strong>支持。物理地址通过实时计算获得；程序在内存中可以不连续；可装入部分程序就可执行；可以动态申请内存，并在内存中移动程序。</p></li></ul><img src="/JeckFS/2020/10/20/Temp/3.png" class="" title="This is 3-th image."><h3 id="2-2-链接"><a href="#2-2-链接" class="headerlink" title="2.2 链接"></a>2.2 链接</h3><p>三种方式:</p><ul><li>静态链接：各目标模块+库函数，链接为一个完整的可执行文件。</li><li>装入时动态链接：按照目标模块为单位边装入边链接</li><li>运行时动态链接：程序运行过程中需要时再进行链接。便于修改、更新、有利于目标模块的共享。</li></ul><img src="/JeckFS/2020/10/20/Temp/4.png" class="" title="This is 4-th image."><h1 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h1><img src="/JeckFS/2020/10/20/Temp/5.png" class="" title="This is 5-th image."><img src="/JeckFS/2020/10/20/Temp/6.png" class="" title="This is 6-th image."><h1 id="覆盖与交换"><a href="#覆盖与交换" class="headerlink" title="覆盖与交换"></a>覆盖与交换</h1><img src="/JeckFS/2020/10/20/Temp/8.png" class="" title="This is 8-th image."><img src="/JeckFS/2020/10/20/Temp/7.png" class="" title="This is 7-th image."><img src="/JeckFS/2020/10/20/Temp/10.png" class="" title="This is 10-th image."><h1 id="连续分配管理方式"><a href="#连续分配管理方式" class="headerlink" title="连续分配管理方式"></a>连续分配管理方式</h1><img src="/JeckFS/2020/10/20/Temp/11.png" class="" title="This is 11-th image."><img src="/JeckFS/2020/10/20/Temp/12.png" class="" title="This is 12-th image."><p><strong>动态分区分配</strong><br><img src="/JeckFS/2020/10/20/Temp/13.png" class="" title="This is 13-th image."></p><h1 id="动态分区分配算法"><a href="#动态分区分配算法" class="headerlink" title="动态分区分配算法"></a>动态分区分配算法</h1><img src="/JeckFS/2020/10/20/Temp/14.png" class="" title="This is 14-th image."><img src="/JeckFS/2020/10/20/Temp/15.png" class="" title="This is 15-th image."><h1 id="基本分页存储管理的基本概念"><a href="#基本分页存储管理的基本概念" class="headerlink" title="基本分页存储管理的基本概念"></a>基本分页存储管理的基本概念</h1><img src="/JeckFS/2020/10/20/Temp/16.png" class="" title="This is 16-th image."><img src="/JeckFS/2020/10/20/Temp/17.png" class="" title="This is 17-th image.">]]></content>
      
      
      <categories>
          
          <category> 王道操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 王道操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>三、内存管理</title>
      <link href="/JeckFS/2020/09/30/%E4%B8%89%E3%80%81%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/"/>
      <url>/JeckFS/2020/09/30/%E4%B8%89%E3%80%81%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p><strong>整体的知识框架：</strong></p><img src="/JeckFS/2020/09/30/%E4%B8%89%E3%80%81%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/1.png" class="" title="This is 1-th image."><img src="/JeckFS/2020/09/30/%E4%B8%89%E3%80%81%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/2.png" class="" title="This is 2-th image.">]]></content>
      
      
      <categories>
          
          <category> 王道操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 王道操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二、进程管理</title>
      <link href="/JeckFS/2020/09/19/%E4%BA%8C%E3%80%81%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/"/>
      <url>/JeckFS/2020/09/19/%E4%BA%8C%E3%80%81%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<img src="/JeckFS/2020/09/19/%E4%BA%8C%E3%80%81%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/1.png" class="" title="This is 1-th image."><h1 id="进程与线程"><a href="#进程与线程" class="headerlink" title="进程与线程"></a>进程与线程</h1><h2 id="1-进程的概念与特征"><a href="#1-进程的概念与特征" class="headerlink" title="1.进程的概念与特征"></a>1.进程的概念与特征</h2><p>概念：</p><ul><li>进程是程序的一次执行过程。</li><li>进程是一个程序及其数据在处理机上顺序执行时所发生的活动。</li><li>进程是具有独立功能的程序在一个数据集合上运行的过程，它是系统进行<strong>资源分配和调度的独立单位</strong>。</li></ul><p>特征：</p><ul><li>动态性</li><li>并发性</li><li>独立性</li><li>异步性</li><li>结构性：程序段、数据段、PCB</li></ul><h2 id="2-进程的状态与转换"><a href="#2-进程的状态与转换" class="headerlink" title="2.进程的状态与转换"></a>2.进程的状态与转换</h2><p><strong>运行状态</strong><br><strong>就绪状态</strong>：获得了除处理机之外一切的所需资源，一旦得到处理机即可运行。<br><strong>阻塞状态/等待状态</strong>：等待某事件发生，或等待某资源可用，或等待输入/输出完成。<br><strong>创建状态</strong>：申请空白PCB，并向PCB填写一些控制和管理进程的信息；然后由系统为该进程分配运行时所需的资源；最后把该进程转入到就绪状态。<br><strong>结束状态</strong></p><p>由于进程得到处理机的时间很短且非常频繁，所以进程在运行过程中实际上是频繁地转换到就绪状态。相对而言，其他资源（如外设）的使用和分配，或某一事件的发生（如IO操作的完成）对应的时间相对来说很长，进程转换到等待状态的次数也相对较少。</p><img src="/JeckFS/2020/09/19/%E4%BA%8C%E3%80%81%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/2.png" class="" title="This is 2-th image."><p>运行状态到阻塞状态，用户程序会由用户态进入到内核态。</p><h2 id="3-进程的控制"><a href="#3-进程的控制" class="headerlink" title="3.进程的控制"></a>3.进程的控制</h2><p>进程控制用的程序段都是原语。</p><p>作业调度、系统提供服务、用户程序的应用请求都会创建进程。</p><p><strong>进程的创建、终止、切换都需要转入到内核态中完成。</strong></p><ul><li>进程的创建（创建原语）<ol><li>为新线程分配一个唯一的进程标识号，并申请一个空白的PCB。</li><li>为新进程的程序、数据、用户栈分配必要的内存空间。如果资源不足则进入阻塞状态。</li><li>初始化PCB，如PCB的标志信息、处理机状态信息、处理机控制信息、进程优先级等。</li><li>若就绪队列能够接纳新线程，则将新线程插入到就绪队列，等待调度。</li></ol></li><li>进程的终止（撤销原语）</li><li>进程的阻塞和唤醒（阻塞原语、唤醒原语）</li><li>进程切换</li></ul><p>引起进程终止的情况：</p><ul><li>正常结束</li><li>发生了某种异常事件：存储区越界、保护错、非法指令、特权指令错、IO故障等。</li><li>外界干预：操作员或操作系统干预、父进程请求和父进程终止。</li></ul><p>进程阻塞时要保护其现场，并将该进程PCB插入到相应事件的等待队列中。<br>进程唤醒时将线程PCB从等待队列中移出并插入到就绪队列中，等待调度。</p><p>阻塞原语是有被阻塞进程的<strong>自我调用</strong>实现的。<br>唤醒原语是由一个与被唤醒进程相合作，或被其他相关进程调用实现的。</p><p>进程的切换：</p><ul><li>保存处理机上下文，包括程序计数器和其他寄存器。</li><li>更新PCB信息。</li><li>把进程的PCB移动到相应的队列。</li><li>调度另一进程，并更新其PCB</li><li>更新内存管理的数据结构</li><li>恢复处理机上下文。</li></ul><p><strong>进程切换与处理模式切换：</strong><br>模式切换时，处理机逻辑上可能还在同一进程中运行。如果进程因中断或异常进入到内核态运行，执行完后又回到用户态刚被中断的程序中运行，则操作系统只需恢复进入内核时所保存的CPU现场，无需改变当前进程的环境信息。但若要切换进程，当前运行进程改变了，则当前进程的环境信息也需要改变。</p><h2 id="4-进程的组织"><a href="#4-进程的组织" class="headerlink" title="4.进程的组织"></a>4.进程的组织</h2><p><strong>1.PCB</strong><br>PCB常驻内存，它是进程实体的一部分，是进程存在的唯一标识。</p><img src="/JeckFS/2020/09/19/%E4%BA%8C%E3%80%81%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/3.png" class="" title="This is 3-th image."><img src="/JeckFS/2020/09/19/%E4%BA%8C%E3%80%81%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/4.png" class="" title="This is 4-th image."><p>PCB的组织方式：</p><ul><li>链接方式：同一状态的PCB链接成一个队列，不同状态对应不同的队列。也可以根据阻塞原因的不同，排成多个阻塞队列。</li><li>索引方式：同一状态的PCB组织在一个索引表中，索引表的表项指向响应的PCB，不同状态对应不同的索引表，如就绪索引表和阻塞索引表等。</li></ul><p><strong>2.程序段</strong><br>即CPU执行的程序代码段。程序可被多个进程共享。</p><p><strong>3.数据段</strong><br>程序加工处理的原始数据、程序执行时产生的中间或最终结果。</p><h2 id="5-进程的通信"><a href="#5-进程的通信" class="headerlink" title="5.进程的通信"></a>5.进程的通信</h2><blockquote><p>PV操作是低级通信方式，它是基于数据结构的共享；<br>高级通信方式是指以较高效率传输大量数据的通信方式，它是基于存储区的共享。</p></blockquote><p><strong>方式1：共享存储</strong></p><img src="/JeckFS/2020/09/19/%E4%BA%8C%E3%80%81%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/5.png" class="" title="This is 5-th image."><p>操作系统只负责为通信进程提供可共享使用的存储空间和同步互斥工具（如P操作、V操作），数据交换则由用户自己安排读写指令完成。</p><p><strong>方式2：消息传递</strong></p><p>消息传递系统中，进程间数据交换是以<strong>格式化消息</strong>为单位的。交换的操作需要借助系统提供的发送消息和接收消息两个原语。</p><p>直接通信方式：发送进程直接发送给接收进程，并将它挂在接收线程的消息缓冲队列中，没有中间实体。</p><p>间接通信方式：发送进程把消息发送到某个中间实体（信箱）中，接收进程从中间实体中获取消息。</p><p><strong>方式3：管道通信</strong></p><p>管道应提供三种协调能力：互斥、同步、确定对方存在。</p><img src="/JeckFS/2020/09/19/%E4%BA%8C%E3%80%81%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/6.png" class="" title="This is 6-th image."><p><strong>管道是什么：</strong><br>  管道是用于连接一个读进程和一个写进程，以实现他们之间通信的一个<strong>共享文件</strong>（pipe文件）。</p><p><strong>管道特性：</strong></p><ul><li>管道只能是半双工通信，即某一个时刻只能单向传输。要实现父子进程互动通信，需要定义两个管道。</li><li>管道中的数据是一次性的，一旦读取就会被丢弃。</li><li>写进程会先把缓冲区写满，然后才让读进程读，当缓冲区中还有数据时，写进程不会往缓冲区写数据。</li><li>管道的大小是固定的，为4KB。</li><li>当缓冲区变满时，调用管道的write()的进程会被阻塞；当缓冲区为空时，调用管道的read()的进程会被阻塞。</li></ul><h2 id="6-线程的概念和多线程模型"><a href="#6-线程的概念和多线程模型" class="headerlink" title="6.线程的概念和多线程模型"></a>6.线程的概念和多线程模型</h2><h2 id="习题"><a href="#习题" class="headerlink" title="习题"></a>习题</h2><p>关于线程：</p><ul><li>线程包含CPU现场，可以独立执行程序</li><li>每个线程没有自己的独立地址空间</li><li>同进程之间的线程的通信除了可以通过系统调用函数，还可以通过共享的存储空间通信。</li><li>引入线程后，进程仍然是<strong>资源分配</strong>的单位。线程是处理器<strong>调度和分配</strong>的单位，线程本身不拥有资源，它共享所属进程的<strong>全部资源</strong>。</li><li>多个用户线程映射到同一个内核线程，这多个用户线程之间的切换不需要在内核级切换进程，因此也不需要内核支持。</li><li>在多对一的线程模型中，用户级线程的”多“<strong>对操作系统透明</strong>，即操作系统并不知道用户有多少线程。故该进程的一个线程被阻塞后，该进程就被阻塞了，进程的其他线程当然也都被阻塞了。</li></ul><p>关于进程：</p><ul><li>在单处理器系统中，任何时刻都只有一个进程处于运行状态。错误。原因是：有可能系统发生死锁，所有进程都处于阻塞状态，或无进程任务，CPU空闲。</li><li>进程申请处理器而得不到满足时，其状态变为阻塞状态。错误。原因是：进程申请处理器得不到满足时就处于就绪状态，等待处理器的调度。</li><li>在单处理器系统中，如果同时存在10个进程，则处于就绪队列中的进程最多有<strong>9个</strong>，另一个处于运行状态。最少有0个，即发生死锁的情况，所有进程都是阻塞状态。</li><li>一个进程是程序在一个数据集上的一次运行过程。运行于不同的数据集，将会形成不同的进程。</li><li>系统动态DDL库中的系统线程，被不同的进程锁调用，它们相同的线程。原因是：<strong>同一个系统的进程（或线程）可以有系统调用的方法，被不同的进程（或线程）多次使用。</strong></li><li>进程从运行状态到阻塞状态是主动行为。</li><li>设备分配是通过在系统中设置相应的数据结构实现的，不需要创建进程，这是操作系统中IO核心子系统的内容。</li><li>进程间的通信主要有管道、消息传递、共享内存、文件映射、套接字等。数据库不能用于进程间的通信。</li></ul><p>C语言的内存结构：</p><ul><li>正文段（代码和赋值数据段）：存放二进制代码和常量。如全局赋值变量</li><li>数据堆段：存放动态分配的变量。</li><li>数据栈段：存放临时使用的变量。如未赋值的局部变量和实参传递</li></ul><p>进程的封闭性：</p><ul><li>并发进程的封闭性是指：进程执行的结果只取决于进程本身，不受外界影响。即不管进程是不停顿的执行还是走走停停，进程的执行速度不会改变它的执行结构。</li><li>并发进程失去封闭性是指：并发进程在不同的速度下执行结果不同。</li></ul><p>多道处理系统：</p><ul><li>在一个多道系统中，若就绪队列不空，就绪的进程数目越多，处理器的效率不变。</li></ul><p>为什么进程间的通信必须借助操作系统的内核功能？简要说明通信的几种主要方式。</p><img src="/JeckFS/2020/09/19/%E4%BA%8C%E3%80%81%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/61.png" class="" title="This is 61-th image."><img src="/JeckFS/2020/09/19/%E4%BA%8C%E3%80%81%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/62.png" class="" title="This is 62-th image."><h1 id="处理机调度"><a href="#处理机调度" class="headerlink" title="处理机调度"></a>处理机调度</h1><p>作业调度是；中级调度是将作业从内存调到外存。</p><h1 id="1-调度层次"><a href="#1-调度层次" class="headerlink" title="1.调度层次"></a>1.调度层次</h1><ul><li>作业调度：将作业调度至内存，并建立相应的进程，使它们获得竞争处理机的权利。每个作业只调入一次，调出一次。</li><li>中级调度：又成为内存调度。<strong>为了提高内存利用率和系统吞吐量</strong>。对于那些暂时不能运行的进程，调至外存等待，此时进程状态称为挂起状态。等外存上那些具备运行条件的就绪进程再重新调入内存，并放入就绪队列中。 \</li><li>进程调度：又成为低级调度。主要任务是按照某种方法和策略从就绪队列中选取一个进程，将处理机分配给它。</li></ul><h1 id="2-三级调度的关系"><a href="#2-三级调度的关系" class="headerlink" title="2.三级调度的关系"></a>2.三级调度的关系</h1><img src="/JeckFS/2020/09/19/%E4%BA%8C%E3%80%81%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/7.png" class="" title="This is 7-th image."><img src="/JeckFS/2020/09/19/%E4%BA%8C%E3%80%81%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/8.png" class="" title="This is 8-th image."><h1 id="3-调度的时机、切换与过程"><a href="#3-调度的时机、切换与过程" class="headerlink" title="3.调度的时机、切换与过程"></a>3.调度的时机、切换与过程</h1><p>现代操作系统中，不能进行进程的调度和切换的情况：</p><ul><li>在处理中断的过程中的进程不能被切换。</li><li>在操作系统内核程序临界区中的进程不能被切换。进入临界区后，需要独占式地访问共享数据(加锁)，不应切换到其他进程，一方面保证资源独占，不出错，另一方面，加快该共享数据的释放。</li></ul><p>应该进行进程调度和切换的情况：</p><ul><li>当发生引起调度条件，且当前进程无法继续运行下去时，可以马上进行调度和切换。（非剥夺调度）</li><li>当中断处理结束或自陷处理结束后，返回被中断进程的用户态程序执行现场前，若置上请求调度标志，即可马上进行进程调度与切换。（剥夺调度）</li></ul><img src="/JeckFS/2020/09/19/%E4%BA%8C%E3%80%81%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/9.png" class="" title="This is 9-th image."><h1 id="4-进程的调度方式"><a href="#4-进程的调度方式" class="headerlink" title="4.进程的调度方式"></a>4.进程的调度方式</h1><ul><li>非剥夺调度方式（非抢占方式）：获得CPU的进程会保持CPU直到终止或转换到等待状态。好处是实现简单、系统开销小，适用于大多数的批处理系统，但不能用于分时系统和大多数实时系统。</li><li>剥夺调度方式（抢占方式）：获取CPU的进程会让出CPU给更重要或紧迫的的进程。</li></ul><p>抢占式对提高系统吞吐率和响应效率有明显好处。抢占的原则：优先权、短进程有限、时间片原则。</p><h1 id="5-调度的基本原则"><a href="#5-调度的基本原则" class="headerlink" title="5.调度的基本原则"></a>5.调度的基本原则</h1><ul><li>CPU利用率</li><li>系统吞吐量：即单位时间内CPU完成作业的数量。</li><li>周转时间：</li></ul><img src="/JeckFS/2020/09/19/%E4%BA%8C%E3%80%81%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/10.png" class="" title="This is 10-th image."><ul><li>等待时间：指的是作业在就绪队列中等待所花的时间。处理机调度算法实际上并不影响作业执行或输入/输出操作的时间。</li><li>响应时间：用户提交请求到系统首次产生响应所用的时间。</li></ul><h1 id="6-典型的调度算法"><a href="#6-典型的调度算法" class="headerlink" title="6.典型的调度算法"></a>6.典型的调度算法</h1><ul><li>先来先服务（FCFS）调度算法（适用于作业调度、进程调度；不可剥夺算法）<br>通过维护一个就绪队列来实现FCFS。<br>特点：<ul><li>长作业会让后面的短作业产生饥饿，因此它不能作为分时系统和实时系统的主要调度策略；</li><li>对长作业有利、对短作业不利；</li><li>有利于CPU繁忙型作业，不利于IO繁忙型作业</li><li>算法简单，效率低</li></ul></li></ul><img src="/JeckFS/2020/09/19/%E4%BA%8C%E3%80%81%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/11.png" class="" title="This is 11-th image."><ul><li><p>短作业优先（SJF）调度算法（适用于短作业和进程的优先调度）<br>SJF指的是从后备队列中选择一个或若干个估计运行时间最短的作业或进程，将他们调入内存。</p><p>缺点：</p><ul><li>对长作业不利、长作业的周转时间会增加，导致长作业产生饥饿。</li><li>不能保证紧迫性作业会被及时处理</li><li>作业长短是根据用户所提供的估计执行时间而定，这个时间可能估计的不准确，使得该算法不一定能真正做到短作业优先调度。</li></ul><p>优点：</p><ul><li>平均等待时间、平均周转时间最少。</li></ul></li></ul><img src="/JeckFS/2020/09/19/%E4%BA%8C%E3%80%81%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/12.png" class="" title="This is 12-th image."><ul><li><p>优先级调度算法（作业调度、进程调度）<br>分类：</p><p>按照高优先级进程能否抢占正在执行的进程：</p><ul><li>非剥夺式优先级调度算法</li><li>剥夺式优先级调度算法</li></ul><p>按照进程创建后其优先级是否可以改变：</p><ul><li>静态优先级</li><li>动态优先级：根据进程占有CPU时间的长短、就绪进程等待CPU时间的长短动态确定进程的优先级。</li></ul></li></ul><ul><li>高响应比优先调度算法（作业调度）<br>对FCFS和SJF的一种综合平衡，同时考虑每个作业的等待时间和估计运行时间。</li></ul><img src="/JeckFS/2020/09/19/%E4%BA%8C%E3%80%81%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/13.png" class="" title="This is 13-th image."><ul><li>时间片轮转调度算法<br>用于分时系统。就绪进程按照先后次序排成一个队列，每个出队进程占用一个时间片，用完之后，重新进入队列排队。<br>时间片根据系统的响应时间、就绪队列中的进程数目和系统的处理能力来确定。时间片太长导致所有进程都能在一个时间片内执行完毕，该算法就退化位FCFS算法；时间片太小，进程之间的切换将会很频繁，使处理机开销增大，真正用于运行用户进程的时间减少。<br>时间片的大小可以略大于一次典型的交互所需的时间，这样可以使大多数进程在一个时间片内完成。</li></ul><ul><li><p>多级反馈队列调度算法（集合了时间片轮转、优先级调度算法的优点）</p><img src="/JeckFS/2020/09/19/%E4%BA%8C%E3%80%81%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/14.png" class="" title="This is 14-th image."><ul><li>在一个时间片中不能完成的进程会被挪到下一级队列中，直到能够在一个时间片内完成。</li><li>最后一级队列采用时间片轮转的方式运行。</li><li>仅当第1～（i-1）级队列均为空时，才会调度第i级队列中的进程运行。当有新进程进入更高级队列中时会抢占正在运行的进程。即调度程序把正在运行的进程放回到第i级队列的末尾，把处理机分配给新到的更高优先级（第1～(i-1)）的进程。</li></ul><p>优点：</p></li></ul><img src="/JeckFS/2020/09/19/%E4%BA%8C%E3%80%81%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/15.png" class="" title="This is 15-th image."><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><img src="/JeckFS/2020/09/19/%E4%BA%8C%E3%80%81%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/16.png" class="" title="This is 16-th image."><p><a href="https://blog.csdn.net/l294265421/article/details/46450125">参考1</a><br><a href="https://www.cnblogs.com/lightmare/p/10398871.html">参考2</a></p><h1 id="进程同步"><a href="#进程同步" class="headerlink" title="进程同步"></a>进程同步</h1><h2 id="1-进程同步的基本概念"><a href="#1-进程同步的基本概念" class="headerlink" title="1.进程同步的基本概念"></a>1.进程同步的基本概念</h2><p><strong>临界资源</strong><br>一次只允许一个进程使用的资源成为临界资源。</p><img src="/JeckFS/2020/09/19/%E4%BA%8C%E3%80%81%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/17.png" class="" title="This is 17-th image."><p><strong>同步机制遵循的规则</strong></p><img src="/JeckFS/2020/09/19/%E4%BA%8C%E3%80%81%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/18.png" class="" title="This is 18-th image."><h2 id="2-实现临界区互斥的基本方法"><a href="#2-实现临界区互斥的基本方法" class="headerlink" title="2.实现临界区互斥的基本方法"></a>2.实现临界区互斥的基本方法</h2><p><strong>1.软件实现方法</strong></p><ul><li>单标志法<br>公用整型变量turn表示允许进入临界区的进程编号。如turn=0表示允许P0进程进入临界区。该算法可保证每次只允许一个进程进入临界区。当某个进程不再进入临界区了，那么另一个进程也将无法进入临界区，违背了<strong>空闲让进</strong>。这种情况只能适合进程<strong>交替执行</strong>的情况。</li></ul><img src="/JeckFS/2020/09/19/%E4%BA%8C%E3%80%81%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/19.png" class="" title="This is 19-th image."><ul><li>双标志法先检查<br>先检查是否被其他线程正在访问，若正被访问，则等待。否则，才进入自己的临界区。<br><code>flag[i]=false</code>表示Pi进程未进入临界区。<br><code>flag[i]=true</code>表示Pi进程计入临界区。</li></ul><img src="/JeckFS/2020/09/19/%E4%BA%8C%E3%80%81%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/20.png" class="" title="This is 20-th image."><p>  优点：不用交替进入，可连续使用；<br>  缺点：Pi与Pj可能同事进入临界区；违背“忙则等待”。如按照①②③④的顺序进入时。</p><ul><li>双标志法后检查</li></ul><img src="/JeckFS/2020/09/19/%E4%BA%8C%E3%80%81%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/21.png" class="" title="This is 21-th image."><p>  问题是：会产生死锁。</p><ul><li>Peterson’s Algorithm<br>本算法是第一个算法和第三个算法的结合。</li></ul><img src="/JeckFS/2020/09/19/%E4%BA%8C%E3%80%81%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/22.png" class="" title="This is 22-th image."><p>对于<code>flag[i]=true; turn=j; flag[j]=true; turn=i;</code>，假设给他编号为1,2,3,4，则其可能的执行序列为：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[1, 2, 3, 4]</span><br><span class="line">[1, 3, 2, 4]</span><br><span class="line">[1, 3, 4, 2]</span><br><span class="line">[3, 1, 2, 4]</span><br><span class="line">[3, 1, 4, 2]</span><br><span class="line">[3, 4, 1, 2]</span><br></pre></td></tr></table></figure><br>思考这些排列方式是否会引发线程安全问题即可。</p><p><strong>2.硬件实现方法</strong></p><ul><li>中断屏蔽方法<br>使用关中断会防止进程切换，这样进入临界区的进程就能顺利执行完，然后开中断。</li></ul><img src="/JeckFS/2020/09/19/%E4%BA%8C%E3%80%81%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/23.png" class="" title="This is 23-th image."><p>  缺点：</p><ul><li>限制了处理机交替执行程序的能力，因此执行效率会明显降低。</li><li>内核执行更新变量或列表的几条指令期间关中断是很方便的，但将关中断的权利交给用户，当该线程关中断后，不再开中断，则系统可能会因此终止。(系统不安全)</li></ul><ul><li>硬件指令方法<br><code>TestAndSet指令</code>：该指令是原子操作，功能是读出指定标志后把该标志设置为真。其功能描述如下：</li></ul><img src="/JeckFS/2020/09/19/%E4%BA%8C%E3%80%81%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/24.png" class="" title="This is 24-th image."><p>  实现临界区互斥访问的方法是：给每个临界资源设置一个共享不二变量lock，lock=true表示正被占用，初值为false。其算法描述为：</p><img src="/JeckFS/2020/09/19/%E4%BA%8C%E3%80%81%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/25.png" class="" title="This is 25-th image."><p>  <code>Swap指令</code>：功能是交换两个字(字节)的内容。功能描述如下：</p><img src="/JeckFS/2020/09/19/%E4%BA%8C%E3%80%81%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/26.png" class="" title="This is 26-th image."><p>  每个临界资源设置一个共享布尔变量lock，初始值为false，表示临界资源没有被其他进程访问。有进程在临界区时，重复交换和煎炒过程，直到进程退出。</p><img src="/JeckFS/2020/09/19/%E4%BA%8C%E3%80%81%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/27.png" class="" title="This is 27-th image."><blockquote><p>TestAndSet与Swap指令并非软件实现，事实上他们是由硬件逻辑直接实现的，不会被中断。<br>硬件方法的优点：</p><ul><li>适用于任意数目的进程，不管是的单处理机还是多处理机；</li><li>简单、容易验证其正确性；</li><li>可支持进程内有多个临界区，只需为每个临界区设立一个布尔变量。<br>硬件方法的缺点：</li><li>进程等待进入临界区时要耗费处理机的时间，不能实现让全等待。</li><li>从等待进程中随机选择一个进入临界区，有的进程可能一直选不上，从而导致“饥饿”现象。</li></ul></blockquote><h2 id="3-信号量"><a href="#3-信号量" class="headerlink" title="3.信号量"></a>3.信号量</h2><ul><li>整型信号量<br>整型信号量被定义为一个用于表示资源数目的整型量S。</li></ul><img src="/JeckFS/2020/09/19/%E4%BA%8C%E3%80%81%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/28.png" class="" title="This is 28-th image."><p>  缺点是不能遵循“让权等待”。</p><ul><li>记录型信号量<br>不存在“忙等”现象。value表示资源数目，进程链表L表示所有等待该资源的进程。</li></ul><img src="/JeckFS/2020/09/19/%E4%BA%8C%E3%80%81%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/29.png" class="" title="This is 29-th image."><img src="/JeckFS/2020/09/19/%E4%BA%8C%E3%80%81%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/30.png" class="" title="This is 30-th image."><p><strong>1.利用信号量实现进程同步</strong></p><p>只有当语句x执行完成后，语句y才能执行：</p><img src="/JeckFS/2020/09/19/%E4%BA%8C%E3%80%81%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/31.png" class="" title="This is 31-th image."><p><strong>2.利用信号量实现进程互斥</strong></p><p>假设S为实现P1，P2互斥的信号量，由于每次只允许一个进程进入临界区，所以S的初值应为1。只需要把临界区置于P(S)与V(S)之间即可实现两进程的互斥访问。</p><img src="/JeckFS/2020/09/19/%E4%BA%8C%E3%80%81%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/32.png" class="" title="This is 32-th image."><p><strong>3.利用信号量实现前驱关系</strong></p><p>为保证S1→S2，S1→S3的前驱关系，应分别设置信号量a1，a2.为了保证S2→S4，S2→S5，S3→S6，S4→S6，S5→S6，应设置信号量b1，b2，c，d，e。</p><img src="/JeckFS/2020/09/19/%E4%BA%8C%E3%80%81%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/33.png" class="" title="This is 33-th image."><img src="/JeckFS/2020/09/19/%E4%BA%8C%E3%80%81%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/34.png" class="" title="This is 34-th image."><h2 id="4-管程"><a href="#4-管程" class="headerlink" title="4.管程"></a>4.管程</h2><p>管程是由一组数据以及定义在这组数据之上的对这组数据的操作组成的软件模块，这组操作能初始化病改变管程中的数据和同步进程。</p><p>管程的组成：</p><ul><li>局部于管程的共享结构数据说明。</li><li>对该数据结构进行操作的一组过程。</li><li>对局部于管程的共享数据设置初始值的语句。</li></ul><p>管程的基本特性：</p><ul><li>局部于管程中的数据只能被局部于管程内的过程所访问</li><li>一个进程只有通过调用管程内的过程才能进入管程访问共享数据。</li><li>每次仅允许一个进程在管程内执行某个内部过程。</li></ul><p>管程是语言的一部分，所以管程的互斥访问完全由编译程序在编译时自动添加，无需程序员关注。</p><h2 id="5-经典同步问题"><a href="#5-经典同步问题" class="headerlink" title="5.经典同步问题"></a>5.经典同步问题</h2><h3 id="5-1-生产者-消费者问题"><a href="#5-1-生产者-消费者问题" class="headerlink" title="5.1 生产者-消费者问题"></a>5.1 生产者-消费者问题</h3><p><strong>问题描述：</strong>一组生产者进程与一组消费者共享一个初始为空、大小为n的缓冲区。只有缓冲区没满时，生产者才能把消息放入到缓冲区，否则必须等待；只有缓冲区不空时，消费者才能从中取出消息，否则必须等待。由于缓冲区是临界资源，它只允许一个生产者放入消息，或者一个消费者从中取出消息。</p><ul><li>关系分析：生产者与消费者对缓冲区是互斥关系；生产者与消费者是一个协作关系，只有生产者生产后，消费者才能消费，他们也是同步关系。</li><li>信号量设置：mutex作为互斥信号量，用于控制互斥访问缓冲池，互斥限号两初值为1；信号量full表示当前缓冲池中“满”的缓冲区数，初值为0；信号量empty表示缓冲池中“空”的缓冲区数，初值为n。</li></ul><img src="/JeckFS/2020/09/19/%E4%BA%8C%E3%80%81%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/35.png" class="" title="This is 35-th image."><p><strong>注意：</strong></p><ul><li>生产者先执行P(mutex)然后执行P(empty)，消费者先执行P(mutex)然后执行P(full)，在生产者获得互斥量mutex后，发现并没有空的缓冲区(empty为0)，这时候就会产生死锁，即生产者线程等待缓冲区释放，却保持着对线程池的访问，而消费者则无法获取到缓冲池的访问权，更无法释放缓冲区，便发生了死锁。</li></ul><h3 id="5-2-复杂生产者-消费者问题"><a href="#5-2-复杂生产者-消费者问题" class="headerlink" title="5.2 复杂生产者-消费者问题"></a>5.2 复杂生产者-消费者问题</h3><img src="/JeckFS/2020/09/19/%E4%BA%8C%E3%80%81%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/36.png" class="" title="This is 36-th image."><ul><li>关系分析：爸爸和妈妈是互斥关系，爸爸和女儿、妈妈和儿子是同步关系，儿子和女儿没有互斥和同步关系。</li></ul><img src="/JeckFS/2020/09/19/%E4%BA%8C%E3%80%81%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/37.png" class="" title="This is 37-th image."><ul><li>信号量设置：<code>plate</code>为互斥信号量，表示是否允许向盘子放入水果，初值为1(允许放入)；<code>apple</code>表示盘子中是否有苹果，初值为0(表示盘子为空)；<code>orgnge</code>表示盘子中是否有橘子，初值为0(表示盘子为空)。</li></ul><img src="/JeckFS/2020/09/19/%E4%BA%8C%E3%80%81%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/38.png" class="" title="This is 38-th image."><p>女儿拿走苹果后，或儿子拿走橘子后才能释放盘子，即V(plate)。</p><h3 id="5-3-读者-写者问题"><a href="#5-3-读者-写者问题" class="headerlink" title="5.3 读者-写者问题"></a>5.3 读者-写者问题</h3><ul><li>关系分析：读者与写者是互斥的、写者与写者互斥，读者与读者不存在互斥问题。</li><li>信号量设置：count计数器用来记录当前读者数量，初值为0；互斥信号量mutex为保护更新count变量时的互斥；互斥信号量rw用于保证读者和写者的互斥访问。</li></ul><img src="/JeckFS/2020/09/19/%E4%BA%8C%E3%80%81%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/39.png" class="" title="This is 39-th image."><p>若希望写进程优先，即当有读进程正在读共享文件时，有写进程请求访问，这时应禁止后续读进程的请求，等待到已在共享文件的读进程执行完毕则立即让写进程执行，只有在无写进程执行的情况下才允许读进程再次运行。<br>实现方法是：在write()、reader()中各加入一对PV操作，即互斥信号量w表示有无写进程进行。</p><img src="/JeckFS/2020/09/19/%E4%BA%8C%E3%80%81%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/40.png" class="" title="This is 40-th image."><p>上述算法并不是真正意义上的写优先，而是读写是一样的优先级。当一个写进程访问文件时，如果<strong>先有</strong>一些读进程要求访问文件，而<strong>再有</strong>另一个写进程要求访问文件，那么当当前访问文件的进程结束对文件的写操作时，会是一个读进程占用文件而不是写进程（在信号量w的阻塞队列上，因为读进程先来，而排在阻塞队列队首，而V操作唤醒进程时唤醒的是队首进程），所以这里的写优先是相对的。</p><blockquote><p>技巧：互斥访问计数器count</p></blockquote><h3 id="5-4-哲学家进餐问题"><a href="#5-4-哲学家进餐问题" class="headerlink" title="5.4 哲学家进餐问题"></a>5.4 哲学家进餐问题</h3><img src="/JeckFS/2020/09/19/%E4%BA%8C%E3%80%81%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/41.png" class="" title="This is 41-th image."><p>关系分析：5名哲学家与左右邻居对其中间筷子的访问是互斥关系。<br>解决方式1：只有当一个哲学家左右两边的筷子都可用时，才允许抓起筷子。</p><img src="/JeckFS/2020/09/19/%E4%BA%8C%E3%80%81%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/42.png" class="" title="This is 42-th image."><img src="/JeckFS/2020/09/19/%E4%BA%8C%E3%80%81%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/43.png" class="" title="This is 43-th image."><h3 id="5-5-吸烟者问题"><a href="#5-5-吸烟者问题" class="headerlink" title="5.5 吸烟者问题"></a>5.5 吸烟者问题</h3><p>一个供应者三个抽烟者，供应者提供烟草、纸、胶水三种中的其中两种，抽烟者需要三种材料才能完成抽烟，且桌上只能同时放两种材料。完成三个抽烟者轮流抽烟的动作。</p><p>关系分析：供应者与三个抽烟者分别是同步关系；三个抽烟者对抽烟这个动作互斥（或有三个抽烟者轮流抽烟得知）<br>信号量设置：信号量offer1，offer2，offer3表示烟草和纸的资源组合、烟草和胶水的资源组合、纸和胶水的资源组合。</p><img src="/JeckFS/2020/09/19/%E4%BA%8C%E3%80%81%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/44.png" class="" title="This is 44-th image."><img src="/JeckFS/2020/09/19/%E4%BA%8C%E3%80%81%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/45.png" class="" title="This is 45-th image."><img src="/JeckFS/2020/09/19/%E4%BA%8C%E3%80%81%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/46.png" class="" title="This is 46-th image."><h1 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h1><h2 id="1-死锁处理策略"><a href="#1-死锁处理策略" class="headerlink" title="1.死锁处理策略"></a>1.死锁处理策略</h2><img src="/JeckFS/2020/09/19/%E4%BA%8C%E3%80%81%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/47.png" class="" title="This is 47-th image."><h2 id="2-死锁预防"><a href="#2-死锁预防" class="headerlink" title="2.死锁预防"></a>2.死锁预防</h2><ul><li>破坏互斥条件<br>可行性小。有的场合需要保护这种互斥性。</li><li>破坏不剥夺条件<br>当请求新的资源得不到满足时，必须释放已经保持的资源。<br>缺点是：实现复杂，释放已获得的资源可能造成前一阶段工作的失效，反复申请和释放资源会增加系统开销，降低系统吞吐量。<br>优点是：对于状态易于保存和恢复的资源，如CPU的寄存器和内存资源。一般不能用于打印机之类的资源。</li><li>破坏请求与保持条件<br>预先分配进程执行前需要的全部资源。<br>缺点是：系统资源被严重浪费，其中有些资源可能仅在运行初期或运行快结束时才使用，甚至根本不适用；还会导致饥饿现象，当由于个别资源长期被其他进程占用时，将导致等待该资源的进程吃吃不能运行。</li><li>破坏循环等待条件<br>采用顺序资源分配的方法，即给系统中的资源编号，让每个进程按照顺序获取所需要的资源。<br>缺点是：编号必须相对稳定，这就限制了新类型设备的增加；尽管在为资源编号时已考虑到大多数作业实际使用这些资源的顺序，但也经常会发生作业使用资源的顺序与系统规定顺序不同的情况，造成资源浪费；按照次序申请资源，给编程带来麻烦。</li></ul><h2 id="3-银行家算法"><a href="#3-银行家算法" class="headerlink" title="3.银行家算法"></a>3.银行家算法</h2><p><strong>可利用资源矢量Available</strong>：<code>Available[j]=K</code>表示系统中先有Rj类资源K个。<br><strong>最大需求矩阵Max</strong>：<code>Max[i][j]=K</code>表示进程i需要Rj类资源的最大数目为K。<br><strong>分配矩阵Allocation</strong>：<code>Allocaltion[i][j]=K</code>表示进程i当前已经分得Rj类思源的数目为K。<br><strong>需求矩阵Need</strong>：<code>Need[i][j]=K</code>表示进程i还需要Rj类资源的数目为K。</p><p>上述矩阵满足<code>Need=Max-Allocation</code></p><p>算法描述：</p><img src="/JeckFS/2020/09/19/%E4%BA%8C%E3%80%81%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/48.png" class="" title="This is 48-th image."><p>安全性算法（构造安全序列）：</p><img src="/JeckFS/2020/09/19/%E4%BA%8C%E3%80%81%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/49.png" class="" title="This is 49-th image."><img src="/JeckFS/2020/09/19/%E4%BA%8C%E3%80%81%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/50.png" class="" title="This is 50-th image."><img src="/JeckFS/2020/09/19/%E4%BA%8C%E3%80%81%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/51.png" class="" title="This is 51-th image."><h1 id="4-死锁的检测和解除"><a href="#4-死锁的检测和解除" class="headerlink" title="4.死锁的检测和解除"></a>4.死锁的检测和解除</h1><h2 id="4-1-资源分配图"><a href="#4-1-资源分配图" class="headerlink" title="4.1 资源分配图"></a>4.1 资源分配图</h2><img src="/JeckFS/2020/09/19/%E4%BA%8C%E3%80%81%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/52.png" class="" title="This is 52-th image."><img src="/JeckFS/2020/09/19/%E4%BA%8C%E3%80%81%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/53.png" class="" title="This is 53-th image."><p>对于进程来说，入度表示已经获取的资源，出度表示需要请求的资源。</p><h2 id="4-2-死锁定理（用于检测系统状态S是否为死锁状态）"><a href="#4-2-死锁定理（用于检测系统状态S是否为死锁状态）" class="headerlink" title="4.2 死锁定理（用于检测系统状态S是否为死锁状态）"></a>4.2 死锁定理（用于检测系统状态S是否为死锁状态）</h2><p>资源分配图状态简化：</p><img src="/JeckFS/2020/09/19/%E4%BA%8C%E3%80%81%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/54.png" class="" title="This is 54-th image."><img src="/JeckFS/2020/09/19/%E4%BA%8C%E3%80%81%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/55.png" class="" title="This is 55-th image."><h2 id="4-3-死锁解除"><a href="#4-3-死锁解除" class="headerlink" title="4.3 死锁解除"></a>4.3 死锁解除</h2><img src="/JeckFS/2020/09/19/%E4%BA%8C%E3%80%81%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/56.png" class="" title="This is 56-th image."><img src="/JeckFS/2020/09/19/%E4%BA%8C%E3%80%81%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/57.png" class="" title="This is 57-th image."><h1 id="总结：-1"><a href="#总结：-1" class="headerlink" title="总结："></a>总结：</h1><img src="/JeckFS/2020/09/19/%E4%BA%8C%E3%80%81%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/58.png" class="" title="This is 58-th image."><p><strong>作业和进程的关系：</strong></p><img src="/JeckFS/2020/09/19/%E4%BA%8C%E3%80%81%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/59.png" class="" title="This is 59-th image."><img src="/JeckFS/2020/09/19/%E4%BA%8C%E3%80%81%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/60.png" class="" title="This is 60-th image.">]]></content>
      
      
      <categories>
          
          <category> 王道操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 王道操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一、操作系统概述</title>
      <link href="/JeckFS/2020/09/19/%E7%8E%8B%E9%81%93%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
      <url>/JeckFS/2020/09/19/%E7%8E%8B%E9%81%93%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="操作系统的概念"><a href="#操作系统的概念" class="headerlink" title="操作系统的概念"></a>操作系统的概念</h1><p>操作系统是指控制和管理整个计算机系统的硬件和软件资源，并合理地组织调度计算机的工作和资源的分配，以提供给用户和其他软件方便的接口和环境的程序集合。</p><h1 id="操作系统的特征"><a href="#操作系统的特征" class="headerlink" title="操作系统的特征"></a>操作系统的特征</h1><ul><li>并发<br>两个或多个时间在<strong>同一时间间隔</strong>内发生。进入了<strong>进程</strong>。分时系统下，单处理环境下，通过多个程序分时交替执行来实现并发。</li><li>共享<br>互斥共享：一段时间内只允许同一进程访问的资源（称为临界资源）。如打印机，软件中用到的栈、变量和表格等。<br>分时共享：一段时间内由多个进程<strong>以时间片轮转的方式</strong>“同时”对它们进行访问。</li><li>虚拟<ul><li>虚拟处理机：利用多道程序设计技术，把一个物理上的CPU虚拟为多个逻辑上的CPU。</li><li>虚拟存储器：通过虚拟存储器技术，将一台机器的物理存储器变为虚拟存储器，以便从逻辑上来扩充存储器的容量。</li><li>虚拟设备：通过虚拟设备技术，将一台物理IO设备虚拟位多台逻辑上的IO设备，并允许每个用户占用一台逻辑上的IO设备。【疑问】也是分时共享的思路。<blockquote><p>虚拟技术：时分复用技术，如处理器的分时共享；空分复用技术，如虚拟存储器。</p></blockquote></li></ul></li><li>异步<br>体系在进程走走停停，以不和预知的速度向前推进。</li></ul><p><strong>并发和共享是操作系统两个最基本的特征，两者之间又是互为存在条件</strong>。</p><h1 id="操作系统的功能"><a href="#操作系统的功能" class="headerlink" title="操作系统的功能"></a>操作系统的功能</h1><h2 id="1-管理系统资源"><a href="#1-管理系统资源" class="headerlink" title="1.管理系统资源"></a>1.管理系统资源</h2><ul><li>处理机管理（进程的管理）</li><li>存储器的管理（内存分配、地址映射、内存保护与共享、内存扩充）</li><li>文件管理（文件存储空间的挂历、目录管理、文件读写管理和保护）</li><li>设备管理（主要任务是完成用户的IO请求，包括缓冲管理、设备分配、设备处理、虚拟设备等功能）</li></ul><h2 id="2-提供用户与计算机硬件系统之间的接口"><a href="#2-提供用户与计算机硬件系统之间的接口" class="headerlink" title="2.提供用户与计算机硬件系统之间的接口"></a>2.提供用户与计算机硬件系统之间的接口</h2><ul><li>命令接口<ul><li>联机命令接口/交互式命令接口，适用于分时或实时系统的接口。输入命令即时输出结果。</li><li>脱机命令接口/批处理命令接口，适用于批处理系统。OS一次执行一批命令。</li></ul></li><li>程序接口<ul><li>程序接口由一组系统调用命令（简称系统调用，也成广义指令）组成。</li></ul></li><li>GUI图形接口<ul><li>用户通过鼠标和键盘，在图形界面上单击或使用快捷键来操作OS。GUI最终通过调用程序接口实现。</li></ul></li></ul><img src="/JeckFS/2020/09/19/%E7%8E%8B%E9%81%93%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/1.png" class="" title="This is 1-th image."><img src="/JeckFS/2020/09/19/%E7%8E%8B%E9%81%93%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/2.png" class="" title="This is 2-th image."><img src="/JeckFS/2020/09/19/%E7%8E%8B%E9%81%93%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/3.png" class="" title="This is 3-th image."><h1 id="操作系统的演进"><a href="#操作系统的演进" class="headerlink" title="操作系统的演进"></a>操作系统的演进</h1><ol><li>批处理阶段<ol><li>单道批处理系统<br>内存中始终保持一道作业。该系统是解决人机矛盾和CPU与IO设备速率不匹配的矛盾中形成的。<br>问题是：内存中只有一道作业，在其运行期间，高速的CPU需要等待低速的IO完成状态。为此引入多道程序技术。</li><li>多道批处理系统<br>内存中保持多道程序，并在CPU交替运行，它们共享各种硬、软件资源。当一道程序因IO请求而暂停运行时，CPU便立即执行另一道程序。<br>需要解决的问题是：<br>1）处理器、内存、IO设备的分配问题<br>2）如何组织和存放大量程序和数据的问题。<br>特点是：<strong>多道、宏观上并行、微观上串行。</strong><br>优点是：系统吞吐量大。<br>缺点是：用户响应时间较长，不提供人机交互能力。</li></ol></li><li>实时操作系统<br><strong>主要特点是及时性和可靠性。</strong><br>实时操作系统没有时间片的概念。<br>硬实时系统：某个动作在规定时刻绝对的发生。如制导系统。<br>软实时系统：无任何损害的情况下，偶尔违反时间规定。如飞机订票系统。</li></ol><h1 id="操作系统的运行环境"><a href="#操作系统的运行环境" class="headerlink" title="操作系统的运行环境"></a>操作系统的运行环境</h1><h2 id="1-操作系统的运行机制"><a href="#1-操作系统的运行机制" class="headerlink" title="1.操作系统的运行机制"></a>1.操作系统的运行机制</h2><p>OS中的程序分为内核程序和用户程序，分别对应系统的内核态和用户态。用户程序没有访问硬件的权限，它想访问硬件必须通过内核态。</p><p>内核态的功能：</p><ul><li><strong>时钟管理</strong>：计时、提供系统时间、通过时钟中断实现进程切换、用于实现时间片轮转调度等。</li><li><strong>中断机制</strong>：负责保护和恢复中断现场的信息，转移控制权到相关的程序。这样可以减少中断的处理时间，提高系统的并行处理能力。</li><li><p><strong>原语</strong>：<br>特点是：</p><ul><li>OS的最底层，最接近硬件。</li><li>原子性</li><li>运行时间短，调用频繁。<br>定义原语的方法是：关闭中断，让它所有的动作不可分割地进行完再打开中断。</li></ul></li><li><p><strong>系统控制的数据结构及处理</strong><br>如作业控制块、进程控制块、设备控制块、各类链表、消息队列、缓冲区、空闲区登记表、内存分配表等。</p></li></ul><p>内核态指令包括<strong>系统调用类指令</strong>、<strong>一些针对时钟、中断和原语的操作</strong>。</p><h2 id="2-中断"><a href="#2-中断" class="headerlink" title="2.中断"></a>2.中断</h2><p><strong>中断是用户程序进入内核态的唯一方式，中断通过硬件实现</strong>。</p><p>中断分为外中断和内中断，外中断与自身程序无关，如IO结束中断、时钟中断；<br>内中断又成为异常、例外、陷入，由程序内部引起，如程序出现非法操作码、地址越界、算术溢出、虚拟内存系统的缺页、专门的陷入指令等引起的事件。内中断一旦出现应立即处理。</p><img src="/JeckFS/2020/09/19/%E7%8E%8B%E9%81%93%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/4.png" class="" title="This is 4-th image."><h2 id="3-系统调用"><a href="#3-系统调用" class="headerlink" title="3.系统调用"></a>3.系统调用</h2><p>系统调用指令主要是与资源有关的操作（如存储分配、进行IO传输、管理文件等），都必须通过系统调用的方式向操作系统提出服务请求，并由操作系统代为完成。防止用户随意更改或访问系统的数据或命令。</p><p>系统调用分类：</p><ul><li>设备管理</li><li>文件管理</li><li>进程控制</li><li>进程通信</li><li>内存管理</li></ul><img src="/JeckFS/2020/09/19/%E7%8E%8B%E9%81%93%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/5.png" class="" title="This is 5-th image."><blockquote><p>有用户态进入内核态，不仅仅是状态需要切换（用户态-&gt;内核态）。而且，所使用的堆栈也可能需要由用户堆栈切换成系统堆栈，但这个系统堆栈也是属于该进程的。<br>用户程序由用户态进入内核态需要<strong>访管指令</strong>，访管指令在用户态使用，它不是特权指令。</p></blockquote><h1 id="大内核与微内核"><a href="#大内核与微内核" class="headerlink" title="大内核与微内核"></a>大内核与微内核</h1><p>大内核：将操作系统的主要功能作为一个紧密联系的整体运行在内核态，各管理模块之间共享信息，从而为应用提供<strong>高性能</strong>的系统服务。</p><p>随着体系结构和应用需求的不断发展，需要操作系统提供的服务越来越多，内核设计复杂度急剧增加。为了降低设计复杂度，引入微内核。</p><p>微内核采用分层架构，并定义层间的服务接口，提高操作系统在设计上的模块化。微内核将最基本功能（如进程管理）保留在内核，不需要在内核态执行的功能转移到用户态执行。移出内核的操作系统代码根据分层的原则被划分成若干服务程序，他们的执行相互独立，交互则需要借助微内核进行通信。</p><p><strong>微内核的缺点是性能问题，需要频繁地在用户态和内核态之间切换。</strong></p><h1 id="疑难点"><a href="#疑难点" class="headerlink" title="疑难点"></a>疑难点</h1><img src="/JeckFS/2020/09/19/%E7%8E%8B%E9%81%93%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/6.png" class="" title="This is 6-th image."><img src="/JeckFS/2020/09/19/%E7%8E%8B%E9%81%93%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/7.png" class="" title="This is 7-th image.">]]></content>
      
      
      <categories>
          
          <category> 王道操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 王道操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重装linux后需要做什么</title>
      <link href="/JeckFS/2020/09/16/%E9%87%8D%E8%A3%85linux%E5%90%8E%E9%9C%80%E8%A6%81%E5%81%9A%E4%BB%80%E4%B9%88/"/>
      <url>/JeckFS/2020/09/16/%E9%87%8D%E8%A3%85linux%E5%90%8E%E9%9C%80%E8%A6%81%E5%81%9A%E4%BB%80%E4%B9%88/</url>
      
        <content type="html"><![CDATA[<h1 id="安装wps"><a href="#安装wps" class="headerlink" title="安装wps"></a>安装wps</h1><p><a href="https://www.wps.cn/product/wpslinux">官网下载</a><br><a href="https://blog.csdn.net/a3551736/article/details/79073647">Windows字体安装</a></p><h1 id="ubuntu主题美化"><a href="#ubuntu主题美化" class="headerlink" title="ubuntu主题美化"></a>ubuntu主题美化</h1><p><a href="https://blog.csdn.net/qq_42527676/article/details/91356154">主题美化</a></p><h1 id="chrome好用的插件"><a href="#chrome好用的插件" class="headerlink" title="chrome好用的插件"></a>chrome好用的插件</h1><ul><li>infinity新标签页</li><li>Octotree - GitHub code tree </li><li>Surfingkeys</li><li>沙拉查词</li><li>百度药丸</li><li>classic Cache Killer</li><li>Githunt</li></ul><h1 id="罗技-M590-Ubuntu-驱动"><a href="#罗技-M590-Ubuntu-驱动" class="headerlink" title="罗技 M590 Ubuntu 驱动"></a>罗技 M590 Ubuntu 驱动</h1><img src="/JeckFS/2020/09/16/%E9%87%8D%E8%A3%85linux%E5%90%8E%E9%9C%80%E8%A6%81%E5%81%9A%E4%BB%80%E4%B9%88/1.png" class="" title="This is 1-th image."><h1 id="ubuntu-好用的软件"><a href="#ubuntu-好用的软件" class="headerlink" title="ubuntu 好用的软件"></a>ubuntu 好用的软件</h1><img src="/JeckFS/2020/09/16/%E9%87%8D%E8%A3%85linux%E5%90%8E%E9%9C%80%E8%A6%81%E5%81%9A%E4%BB%80%E4%B9%88/2.png" class="" title="This is 2-th image."><img src="/JeckFS/2020/09/16/%E9%87%8D%E8%A3%85linux%E5%90%8E%E9%9C%80%E8%A6%81%E5%81%9A%E4%BB%80%E4%B9%88/3.png" class="" title="This is 3-th image."><img src="/JeckFS/2020/09/16/%E9%87%8D%E8%A3%85linux%E5%90%8E%E9%9C%80%E8%A6%81%E5%81%9A%E4%BB%80%E4%B9%88/4.png" class="" title="This is 4-th image."><img src="/JeckFS/2020/09/16/%E9%87%8D%E8%A3%85linux%E5%90%8E%E9%9C%80%E8%A6%81%E5%81%9A%E4%BB%80%E4%B9%88/5.png" class="" title="This is 5-th image."><ul><li>火焰截图</li><li>Calendar</li><li>GNOME System Monitor</li><li>Gpick</li><li>GSmartControl</li><li>KolourPaint</li><li>Microsoft Edge</li><li>Qv2ray</li><li>Tweaks</li><li>To Do</li><li>Variety</li><li>vscode</li><li>Videos</li><li>WPS</li><li>xmind</li><li>typora</li><li>Xournal</li><li>electron-ssr</li><li>迅雷</li><li>Clion</li><li>pycharm</li><li>Idea</li><li>mysql workbench</li><li>洛雪音乐助手</li><li>Kazam （录屏、截屏）</li><li>SMPlayer</li><li>微信</li><li>QQ</li><li>FinalShell</li><li>OI wiki</li><li>Guake</li><li>日历</li><li>VMware workstations</li><li>腾讯会议</li></ul><h1 id="Tweaks-中安装的扩展"><a href="#Tweaks-中安装的扩展" class="headerlink" title="Tweaks 中安装的扩展"></a>Tweaks 中安装的扩展</h1><img src="/JeckFS/2020/09/16/%E9%87%8D%E8%A3%85linux%E5%90%8E%E9%9C%80%E8%A6%81%E5%81%9A%E4%BB%80%E4%B9%88/6.png" class="" title="This is 6-th image."><img src="/JeckFS/2020/09/16/%E9%87%8D%E8%A3%85linux%E5%90%8E%E9%9C%80%E8%A6%81%E5%81%9A%E4%BB%80%E4%B9%88/7.png" class="" title="This is 7-th image."><img src="/JeckFS/2020/09/16/%E9%87%8D%E8%A3%85linux%E5%90%8E%E9%9C%80%E8%A6%81%E5%81%9A%E4%BB%80%E4%B9%88/8.png" class="" title="This is 8-th image."><img src="/JeckFS/2020/09/16/%E9%87%8D%E8%A3%85linux%E5%90%8E%E9%9C%80%E8%A6%81%E5%81%9A%E4%BB%80%E4%B9%88/9.png" class="" title="This is 9-th image."><p>未完待续……</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode470-用Rand7实现Rand10</title>
      <link href="/JeckFS/2020/09/09/leetcode470-%E7%94%A8Rand7%E5%AE%9E%E7%8E%B0Rand10/"/>
      <url>/JeckFS/2020/09/09/leetcode470-%E7%94%A8Rand7%E5%AE%9E%E7%8E%B0Rand10/</url>
      
        <content type="html"><![CDATA[<img src="/JeckFS/2020/09/09/leetcode470-%E7%94%A8Rand7%E5%AE%9E%E7%8E%B0Rand10/1.png" class="" title="This is 1-th image."><img src="/JeckFS/2020/09/09/leetcode470-%E7%94%A8Rand7%E5%AE%9E%E7%8E%B0Rand10/2.png" class="" title="This is 2-th image."><h1 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h1><p><strong>如何将Rand7均匀离散到超过0到10这个范围。</strong></p><p><code>Rand7()</code> 可以随机生成的数字集合是<code>&#123;1,2,3,4,5,6,7&#125;</code><br><code>Rand7()-1</code> 可以随机生成的数字集合是<code>&#123;0,1,2,3,4,5,6&#125;</code><br><code>(Rand7()-1) * 7</code> 可以随机生成的数字集合是<code>&#123;0,7,14,21,28,35,42&#125;</code><br><code>(Rand7()-1) * 7 + Rand7()</code>可以随机生成的数字集合是<code>&#123;1,2,3,...,49&#125;</code></p><p>我们只需要从中取出<code>&#123;1,2,3,4,5,6,7,8,9,10&#125;</code>即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> <span class="keyword">extends</span> <span class="title class_">SolBase</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">rand10</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> (rand7() - <span class="number">1</span>) * <span class="number">7</span> + rand7();</span><br><span class="line">        <span class="keyword">while</span> (num &gt; <span class="number">10</span>)&#123;</span><br><span class="line">            num = (rand7() - <span class="number">1</span>) * <span class="number">7</span> + rand7();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> num;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样只有10/49的概率选中，39/40的概率会再次循环。我们尽可能的提高命中率，减少循环次数。</p><p>我们可以选出<code>&#123;1,2,3,...,40&#125; -&gt; &#123;0,1,2,...,39&#125;</code>。<br>我们看<code>&#123;0,1,...,9&#125; &#123;10,11,...,19&#125; &#123;20,21,...,29&#125; &#123;30,31,...,39&#125;</code>，他们对10取余正好<strong>都是</strong><code>&#123;0,1,..,9&#125;</code>，并且他们是<strong>等概率</strong>的。对于没有命中的，我们不关心，只关心所取数字是等概率的即可。然后将<code>&#123;0,1,...,9&#125;</code>分别加一，就可以得到Rand10。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">rand10</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> num;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        num = ((rand7()-<span class="number">1</span>)*<span class="number">7</span>) + rand7()-<span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">while</span>(num &gt; <span class="number">39</span>);</span><br><span class="line">    <span class="keyword">return</span> num%<span class="number">10</span>+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再进一步优化，减少不能命中的概率：(事实上，并没有提高多少)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">rand10</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> num;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        num = (rand7()-<span class="number">1</span>)*<span class="number">7</span> + rand7()-<span class="number">1</span>;<span class="comment">//随机产生&#123;0,1,...,48&#125;</span></span><br><span class="line">        <span class="keyword">if</span>(num &lt; <span class="number">40</span>) <span class="keyword">return</span> num%<span class="number">10</span>+<span class="number">1</span>; <span class="comment">//生成&#123;0,1,...,39&#125;直接返回</span></span><br><span class="line">        <span class="comment">//命中&#123;40,41,...,48&#125;</span></span><br><span class="line">        num = (num-<span class="number">40</span>)*<span class="number">7</span> + rand7() -<span class="number">1</span>; <span class="comment">// 等概率生成&#123;0,1,...,62&#125;</span></span><br><span class="line">        <span class="keyword">if</span>(num &lt; <span class="number">60</span>) <span class="keyword">return</span> num%<span class="number">10</span>+<span class="number">1</span>;</span><br><span class="line">        <span class="comment">//命中&#123;60,61,62&#125;</span></span><br><span class="line">        num = (num-<span class="number">60</span>)*<span class="number">7</span> + rand7() -<span class="number">1</span>; <span class="comment">//等概率生成&#123;0,1,...,20&#125;</span></span><br><span class="line">        <span class="keyword">if</span>(num &lt; <span class="number">20</span>) <span class="keyword">return</span> num%<span class="number">10</span>+<span class="number">1</span>; <span class="comment">//只浪费一个20</span></span><br><span class="line">    &#125; <span class="keyword">while</span>(<span class="literal">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> leetcode其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode其他 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>链表相关操作</title>
      <link href="/JeckFS/2020/09/08/leetcode206-%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/"/>
      <url>/JeckFS/2020/09/08/leetcode206-%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="反转链表"><a href="#反转链表" class="headerlink" title="反转链表"></a>反转链表</h1><p>按顺序维护三个指针：prev,curr,next；他们始终保持这个顺序，每次调整curr指向prev。next保存调整前curr的下一个节点。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不含头结点</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ListNode <span class="title function_">reverse3</span><span class="params">(ListNode head)</span>&#123;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">prev</span> <span class="operator">=</span> <span class="literal">null</span>, curr = head, next;</span><br><span class="line">    <span class="keyword">while</span> (curr != <span class="literal">null</span>) &#123;</span><br><span class="line">        next = curr.next;</span><br><span class="line">        curr.next = prev;</span><br><span class="line">        prev = curr;</span><br><span class="line">        curr = next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> prev;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>递归代码：</p><img src="/JeckFS/2020/09/08/leetcode206-%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/1.png" class="" title="This is 1-th image."><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> ListNode <span class="title function_">reverseList</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="literal">null</span> || head.next == <span class="literal">null</span>) <span class="keyword">return</span> head;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">p</span> <span class="operator">=</span> reverseList(head.next);</span><br><span class="line">    head.next.next = head;</span><br><span class="line">    head.next = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="没k个节点反转一次"><a href="#没k个节点反转一次" class="headerlink" title="没k个节点反转一次"></a>没k个节点反转一次</h1><p><strong>末尾不够 k 个节点的也要反转</strong></p><p>思路是：递归的每隔 k 个节点反转一次，并将反转后的头结点返回。k 个节点反转的范围应是本节点的头节点到下一阶段的头结点之前。在反转前，代码中 head 表示当前段的头结点，p 表示下一段的头结点。segHead 表示下一段已经反转完成，返回的是下一段反转后的头结点。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> ListNode <span class="title function_">reverseKGroupAll</span><span class="params">(ListNode head, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">last</span> <span class="operator">=</span> head;<span class="comment">//last指向当前段的最后一个节点</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; k - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (last.next == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        last = last.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">p</span> <span class="operator">=</span> last.next;<span class="comment">//p指向下一段的第一个节点</span></span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">segHead</span> <span class="operator">=</span> reverseKGroup(p, k);<span class="comment">//返回每一段反转后的头节点</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 反转当前段</span></span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">pre</span> <span class="operator">=</span> <span class="literal">null</span>, cur = head, nextNode;</span><br><span class="line">    <span class="keyword">while</span> (cur != p &amp;&amp; cur != <span class="literal">null</span>) &#123;</span><br><span class="line">        nextNode = cur.next;</span><br><span class="line">        cur.next = pre;</span><br><span class="line">        pre = cur;</span><br><span class="line">        cur = nextNode;</span><br><span class="line">    &#125;</span><br><span class="line">    head.next = segHead;</span><br><span class="line">    <span class="keyword">return</span> pre;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>末尾不够 k 个节点的不反转</strong></p><p>在上一种情况中，判断一下，当末尾不够k个节点时，直接返回头节点就可以了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 0ms 100%(中文)</span></span><br><span class="line"><span class="keyword">public</span> ListNode <span class="title function_">reverseKGroup</span><span class="params">(ListNode head, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">last</span> <span class="operator">=</span> head;<span class="comment">//last指向当前段的最后一个节点</span></span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; k - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (last.next == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        last = last.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (i  &lt; k - <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">p</span> <span class="operator">=</span> last.next;<span class="comment">//p指向下一段的第一个节点</span></span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">segHead</span> <span class="operator">=</span> reverseKGroup(p, k);<span class="comment">//返回每一段反转后的头节点</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 反转当前段</span></span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">pre</span> <span class="operator">=</span> <span class="literal">null</span>, cur = head, nextNode;</span><br><span class="line">    <span class="keyword">while</span> (cur != p &amp;&amp; cur != <span class="literal">null</span>) &#123;</span><br><span class="line">        nextNode = cur.next;</span><br><span class="line">        cur.next = pre;</span><br><span class="line">        pre = cur;</span><br><span class="line">        cur = nextNode;</span><br><span class="line">    &#125;</span><br><span class="line">    head.next = segHead;</span><br><span class="line">    <span class="keyword">return</span> pre;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>参考题解上的一块代码：</strong></p><p>只需要确定当前段的头结点和下一段的头结点。在反转的时候，将头结点和下一阶段的头结点之间的节点反转即可。函数返回的是反转后的头结点。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// k &gt; 0</span></span><br><span class="line"><span class="keyword">public</span> ListNode <span class="title function_">reverseKGroup</span><span class="params">(ListNode head, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">tail</span> <span class="operator">=</span> head;<span class="comment">//指向下一段的头结点</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (tail == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">return</span> head; <span class="comment">// 改为break，就是末尾不够k个节点也会反转的代码</span></span><br><span class="line">        tail = tail.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">segHead</span> <span class="operator">=</span> reverseKGroup(tail, k);<span class="comment">//返回下一段反转后的头节点</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 反转当前段</span></span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">pre</span> <span class="operator">=</span> <span class="literal">null</span>, cur = head, nextNode;</span><br><span class="line">    <span class="keyword">while</span> (cur != tail) &#123;</span><br><span class="line">        nextNode = cur.next;</span><br><span class="line">        cur.next = pre;</span><br><span class="line">        pre = cur;</span><br><span class="line">        cur = nextNode;</span><br><span class="line">    &#125;</span><br><span class="line">    head.next = segHead;</span><br><span class="line">    <span class="keyword">return</span> pre;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结</strong><br>把问题想的太复杂。本题应没有考虑清楚<strong>从哪个节点开始到哪个节点结束</strong>， last 变量是多余的变量，没有必要保存当前段的最后一个节点。</p>]]></content>
      
      
      <categories>
          
          <category> 链表 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode41-缺失的第一个正数</title>
      <link href="/JeckFS/2020/09/03/leetcode41-%E7%BC%BA%E5%A4%B1%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E6%AD%A3%E6%95%B0/"/>
      <url>/JeckFS/2020/09/03/leetcode41-%E7%BC%BA%E5%A4%B1%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E6%AD%A3%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><img src="/JeckFS/2020/09/03/leetcode41-%E7%BC%BA%E5%A4%B1%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E6%AD%A3%E6%95%B0/1.png" class="" title="This is 1-th image."><img src="/JeckFS/2020/09/03/leetcode41-%E7%BC%BA%E5%A4%B1%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E6%AD%A3%E6%95%B0/2.png" class="" title="This is 2-th image."><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>本题麻烦就麻烦在使用常数级别的额外空间。</p><p>具体做法是使用利用hash确定某个元素是否存在。如果使用HashMap，空间复杂度不符合要求。巧就巧妙在，可以利用数组当做HashMap，其索引就是key表示具体的数字，value用作标记（标记该数字是否出现）。</p><img src="/JeckFS/2020/09/03/leetcode41-%E7%BC%BA%E5%A4%B1%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E6%AD%A3%E6%95%B0/3.png" class="" title="This is 3-th image."><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">firstMissingPositive</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                nums[i] = n + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> Math.abs(nums[i]);</span><br><span class="line">            <span class="keyword">if</span> (num &lt;= n) &#123; <span class="comment">// 对于范围超过n的元素不用标记了，因为最小正整数是能在[1..n]中</span></span><br><span class="line">                nums[num - <span class="number">1</span>] = -Math.abs(nums[num - <span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> i + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另一种方法是置换，将数字属于<code>[1..n]</code>的置换到对应的下标位置。</p><img src="/JeckFS/2020/09/03/leetcode41-%E7%BC%BA%E5%A4%B1%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E6%AD%A3%E6%95%B0/4.png" class="" title="This is 4-th image."><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">firstMissingPositive</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">while</span> (nums[i] &gt; <span class="number">0</span> &amp;&amp; nums[i] &lt;= n &amp;&amp; nums[nums[i] - <span class="number">1</span>] != nums[i]) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> nums[nums[i] - <span class="number">1</span>];</span><br><span class="line">                nums[nums[i] - <span class="number">1</span>] = nums[i];</span><br><span class="line">                nums[i] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] != i + <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> i + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> leetcode其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode其他 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一些遇到的问题</title>
      <link href="/JeckFS/2020/09/02/%E4%B8%80%E4%BA%9B%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/JeckFS/2020/09/02/%E4%B8%80%E4%BA%9B%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="1-长连接和短连接"><a href="#1-长连接和短连接" class="headerlink" title="1.长连接和短连接"></a>1.长连接和短连接</h1><h2 id="1-1-概念认识"><a href="#1-1-概念认识" class="headerlink" title="1.1 概念认识"></a>1.1 概念认识</h2><p><a href="https://www.cnblogs.com/blogtech/p/10981606.html">长连接与短连接</a></p><h2 id="1-2-HTTP协议与TCP-IP协议的关系"><a href="#1-2-HTTP协议与TCP-IP协议的关系" class="headerlink" title="1.2 HTTP协议与TCP/IP协议的关系"></a>1.2 HTTP协议与TCP/IP协议的关系</h2><p>HTTP的长连接和短连接本质上是TCP长连接和短连接。HTTP属于应用层协议，在传输层使用TCP协议，在网络层使用IP协议。 IP协议主要解决网络路由和寻址问题，TCP协议主要解决如何在IP层之上可靠地传递数据包，使得网络上接收端收到发送端所发出的所有包，并且顺序与发送顺序一致。TCP协议是可靠的、面向连接的。</p><h2 id="1-3-如何理解HTTP协议是无状态的"><a href="#1-3-如何理解HTTP协议是无状态的" class="headerlink" title="1.3 如何理解HTTP协议是无状态的"></a>1.3 如何理解HTTP协议是无状态的</h2><p>HTTP协议是无状态的，指的是协议对于事务处理没有记忆能力，服务器不知道客户端是什么状态。也就是说，<strong>打开一个服务器上的网页和上一次打开这个服务器上的网页之间没有任何联系。</strong>HTTP是一个无状态的面向连接的协议，无状态不代表HTTP不能保持TCP连接，更不能代表HTTP使用的是UDP协议（无连接）。</p><h2 id="1-4-什么是长连接、短连接？"><a href="#1-4-什么是长连接、短连接？" class="headerlink" title="1.4 什么是长连接、短连接？"></a>1.4 什么是长连接、短连接？</h2><p>在HTTP/1.0中默认使用短连接。也就是说，客户端和服务器每进行一次HTTP操作，就建立一次连接，任务结束就中断连接。当客户端浏览器访问的某个HTML或其他类型的Web页中包含有其他的Web资源（如JavaScript文件、图像文件、CSS文件等），每遇到这样一个Web资源，浏览器就会重新建立一个HTTP会话。</p><p>而从HTTP/1.1起，默认使用长连接，用以保持连接特性。使用长连接的HTTP协议，会在响应头加入这行代码：</p><p><code>Connection:keep-alive</code></p><p>在使用长连接的情况下，当一个网页打开完成后，客户端和服务器之间用于传输HTTP数据的TCP连接不会关闭，客户端再次访问这个服务器时，会继续使用这一条已经建立的连接。Keep-Alive不会永久保持连接，它有一个保持时间，可以在不同的服务器软件（如Apache）中设定这个时间。实现长连接需要客户端和服务端都支持长连接。</p><p>HTTP协议的长连接和短连接，实质上是TCP协议的长连接和短连接。</p><h3 id="1-4-1-TCP短连接"><a href="#1-4-1-TCP短连接" class="headerlink" title="1.4.1 TCP短连接"></a>1.4.1 TCP短连接</h3><p>模拟一下TCP短连接的情况：client向server发起连接请求，server接到请求，然后双方建立连接。client向server发送消息，server回应client，然后一次请求就完成了。这时候双方任意都可以发起close操作，不过一般都是client先发起close操作。上述可知，短连接一般只会在 client/server间传递一次请求操作。</p><p>短连接的优点是：管理起来比较简单，存在的连接都是有用的连接，不需要额外的控制手段。</p><h3 id="1-4-2-TCP长连接"><a href="#1-4-2-TCP长连接" class="headerlink" title="1.4.2 TCP长连接"></a>1.4.2 TCP长连接</h3><p>我们再模拟一下长连接的情况：client向server发起连接，server接受client连接，双方建立连接，client与server完成一次请求后，它们之间的连接并不会主动关闭，后续的读写操作会继续使用这个连接。</p><p>TCP的保活功能主要为服务器应用提供。如果客户端已经消失而连接未断开，则会使得服务器上保留一个半开放的连接，而服务器又在等待来自客户端的数据，此时服务器将永远等待客户端的数据。保活功能就是试图在服务端器端检测到这种半开放的连接。</p><p>如果一个给定的连接在<strong>两小时内</strong>没有任何动作，服务器就向客户发送一个<strong>探测报文段</strong>，根据客户端主机响应探测4个客户端状态：</p><ul><li>客户主机依然正常运行，且服务器可达。此时客户的TCP响应正常，服务器将保活定时器复位。</li><li>客户主机已经崩溃，并且关闭或者正在重新启动。上述情况下客户端都不能响应TCP。服务端将无法收到客户端对探测的响应。服务器总共发送10个这样的探测，每个间隔75秒。若服务器没有收到任何一个响应，它就认为客户端已经关闭并终止连接。</li><li>客户端崩溃并已经重新启动。服务器将收到一个对其保活探测的响应，这个响应是一个复位，使得服务器终止这个连接。</li><li>客户机正常运行，但是服务器不可达。这种情况与第二种状态类似。</li></ul><h2 id="1-5-长连接和短连接的优点和缺点"><a href="#1-5-长连接和短连接的优点和缺点" class="headerlink" title="1.5 长连接和短连接的优点和缺点"></a>1.5 长连接和短连接的优点和缺点</h2><p>由上可以看出，长连接可以省去较多的TCP建立和关闭的操作，减少浪费，节约时间。<strong>对于频繁请求资源的客户端适合使用长连接</strong>。<strong>在长连接的应用场景下，client端一般不会主动关闭连接</strong>，当client与server之间的连接一直不关闭，随着客户端连接越来越多，server会保持过多连接。这时候server端需要采取一些策略，如关闭一些长时间没有请求发生的连接，这样可以避免一些恶意连接导致server端服务受损；如果条件允许则可以限制每个客户端的最大长连接数，这样可以完全避免恶意的客户端拖垮整体后端服务。TCP存活功能的探测周期太长，容易受到攻击。</p><p>短连接对于服务器来说管理较为简单，存在的连接都是有用的连接，不需要额外的控制手段。但如果客户请求频繁，将在TCP的建立和关闭操作上浪费较多时间和带宽。</p><p>长连接和短连接的产生在于client和server采取的关闭策略。不同的应用场景适合采用不同的策略。</p><h2 id="1-6-什么时候用长连接，短连接？"><a href="#1-6-什么时候用长连接，短连接？" class="headerlink" title="1.6 什么时候用长连接，短连接？  　　"></a>1.6 什么时候用长连接，短连接？  　　</h2><p><strong>长连接多用于单个客户端操作频繁，点对点的通讯，而且连接数不能太多情况。</strong>每个TCP连接都需要三步握手，这需要时间，如果每个操作都是先连接，再操作的话那么处理速度会降低很多，所以每个操作完后都不断开，次处理时直接发送数据包就OK了，不用建立TCP连接。例如：数据库的连接用长连接， 如果用短连接频繁的通信会造成socket错误，而且频繁的socket 创建也是对资源的浪费。 </p><p>而像WEB网站的http服务一般都用短链接，因为长连接对于服务端来说会耗费一定的资源，而像WEB网站这么频繁的成千上万甚至<strong>上亿客户端</strong>的连接用短连接会更省一些资源，如果用长连接，而且同时有成千上万的用户，如果每个用户都占用一个连接的话，那可想而知吧。所以并发量大，但每个用户无需频繁操作情况下需用短连好。</p><h1 id="2-如何优化高并发TCP链接中产生的大量的TIME-WAIT的状态"><a href="#2-如何优化高并发TCP链接中产生的大量的TIME-WAIT的状态" class="headerlink" title="2.如何优化高并发TCP链接中产生的大量的TIME_WAIT的状态"></a>2.如何优化高并发TCP链接中产生的大量的TIME_WAIT的状态</h1><p><a href="https://cloud.tencent.com/developer/article/1589962">参考教程</a></p><p>查看TIME_WAIT状态的TCP连接个数：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># 性能一般</span><br><span class="line">netstat -n | awk &#x27;/^tcp/ &#123;++state[$NF]&#125; END &#123;for(key in state) print key,&quot;\t&quot;,state[key]&#125;&#x27;</span><br><span class="line"></span><br><span class="line"># 性能较高</span><br><span class="line">ss -s</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Total: 4122 (kernel 0)</span><br><span class="line">TCP:   37241 (estab 3157, closed 33193, orphaned 858, synrecv 0, timewait 33176/0), ports 0</span><br><span class="line"></span><br><span class="line">Transport Total     IP        IPv6</span><br><span class="line">*   0         -         -</span><br><span class="line">RAW   1         1         0</span><br><span class="line">UDP   4         4         0</span><br><span class="line">TCP   4048      4048      0</span><br><span class="line">INET    4053      4053      0</span><br><span class="line">FRAG    0         0         0</span><br></pre></td></tr></table></figure><br>可以看到timewait的链接有3万多个.</p><p><strong>TIME_WAIT状态是如何产生的？</strong><br>TIME_WAIT是主动断开TCP连接的一方出现的，为了确保最后一个ACK能够到达接收端，需要在此状态等待2MSL。在linux中MSL一般是30s，2MSL就是一分钟。这个数值硬编码在内核中，想更改需要重新编译内核。</p><p><strong>TIME_WAIT状态过多的危害</strong></p><ul><li>在socket的TIME_WAIT状态结束之前，该socket所占用的<strong>本地端口号将一直无法释放</strong>。这也是文章开头的提到问题的一个原因之一。</li><li>在<strong>高并发</strong>（每秒几万qps）并且采用短连接方式进行交互的系统中运行一段时间后，系统中就会存在大量的time_wait状态，如果time_wait状态把系统所有可用端口都占完了且尚未被系统回收时，就会出现无法向服务端创建新的socket连接的情况。此时系统几乎停转，任何链接都不能建立。</li><li>大量的time_wait状态也会系统一定的<strong>fd，内存和cpu资源</strong>，当然这个量一般比较小，并不是主要危害。</li></ul><p><strong>如何优化TIME_WAIT过多的问题</strong></p><p><u>方式一：调整/etc/sysctl.conf文件中的系统内核参数</u></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">net.ipv4.tcp_syncookies = 1 表示开启SYN Cookies。当出现SYN等待队列溢出时，启用cookies来处理，可防范少量SYN攻击，默认为0，表示关闭；</span><br><span class="line"></span><br><span class="line">net.ipv4.tcp_tw_reuse = 1 表示开启重用。允许将TIME-WAIT sockets重新用于新的TCP连接，默认为0，表示关闭；</span><br><span class="line"></span><br><span class="line">net.ipv4.tcp_tw_recycle = 1 表示开启TCP连接中TIME-WAIT sockets的快速回收，默认为0，表示关闭。</span><br><span class="line"></span><br><span class="line">net.ipv4.tcp_fin_timeout =  修改系统默认的 TIMEOUT 时间</span><br><span class="line"></span><br><span class="line">net.ipv4.tcp_max_tw_buckets = 5000 表示系统同时保持TIME_WAIT套接字的最大数量，(默认是18000). 当TIME_WAIT连接数量达到给定的值时，所有的TIME_WAIT连接会被立刻清除，并打印警告信息。但这种粗暴的清理掉所有的连接，意味着有些连接并没有成功等待2MSL，就会造成通讯异常。一般不建议调整</span><br><span class="line">net.ipv4.tcp_timestamps = 1(默认即为1)60s内同一源ip主机的socket connect请求中的timestamp必须是递增的。也就是说服务器打开了 tcp_tw_reccycle了，就会检查时间戳，如果对方发来的包的时间戳是乱跳的或者说时间戳是滞后的，那么服务器就会丢掉不回包，现在很多公司都用LVS做负载均衡，通常是前面一台LVS，后面多台后端服务器，这其实就是NAT，当请求到达LVS后，它修改地址数据后便转发给后端服务器，但不会修改时间戳数据，对于后端服务器来说，请求的源地址就是LVS的地址，加上端口会复用，所以从后端服务器的角度看，原本不同客户端的请求经过LVS的转发，就可能会被认为是同一个连接，加之不同客户端的时间可能不一致，所以就会出现时间戳错乱的现象，于是后面的数据包就被丢弃了，具体的表现通常是是客户端明明发送的SYN，但服务端就是不响应ACK，还可以通过下面命令来确认数据包不断被丢弃的现象，所以根据情况使用</span><br><span class="line"></span><br><span class="line">其他优化：</span><br><span class="line"></span><br><span class="line">net.ipv4.ip_local_port_range = 1024 65535 增加可用端口范围，让系统拥有的更多的端口来建立链接，这里有个问题需要注意，对于这个设置系统就会从1025~65535这个范围内随机分配端口来用于连接，如果我们服务的使用端口比如8080刚好在这个范围之内，在升级服务期间，可能会出现8080端口被其他随机分配的链接给占用掉，这个原因也是文章开头提到的端口被占用的另一个原因</span><br><span class="line">net.ipv4.ip_local_reserved_ports = 7005,8001-8100 针对上面的问题，我们可以设置这个参数来告诉系统给我们预留哪些端口，不可以用于自动分配。</span><br></pre></td></tr></table></figure><p>优化完内核参数后，可以执行<code>sysctl -p</code>命令，来激活上面的设置永久生效</p><p><u>方式二：调整短链接为长链接</u></p><p>长连接比短连接从根本上减少了关闭连接的次数，减少了TIME_WAIT状态的产生数量，在高并发的系统中，这种方式的改动非常有效果，可以明显减少系统TIME_WAIT的数量。</p><p>Nginx中如何调整为长连接参见教程。</p><h1 id="3-数据库相关问题"><a href="#3-数据库相关问题" class="headerlink" title="3.数据库相关问题"></a>3.数据库相关问题</h1><p><a href="https://github.com/whx123/JavaHome/blob/master/Java%E9%9D%A2%E8%AF%95%E9%A2%98%E9%9B%86%E7%BB%93%E5%8F%B7/%E6%95%B0%E6%8D%AE%E5%BA%93/100Mysql%E7%AD%94%E6%A1%88.md">链接</a></p><h1 id="延迟关联"><a href="#延迟关联" class="headerlink" title="延迟关联"></a>延迟关联</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 优化前：</span><br><span class="line">select a.* from employee where 条件 limit 1000000,10</span><br><span class="line"></span><br><span class="line"># 优化后</span><br><span class="line">SELECT a.* FROM employee a, (select id from employee where 条件 LIMIT 1000000,10 ) b where a.id=b.id</span><br></pre></td></tr></table></figure><p>低效的原因是：当偏移量很大时，如limit 100000,10 取第100001-100010条记录，mysql会取出100010条记录然后将前100000条记录丢弃，这无疑是一种巨大的性能浪费。</p><p>优化的原理是使用<strong>覆盖索引</strong>先查询出在limit要求范围内的id(该字段是索引字段)，然后通过该索引id去查询具体的记录。使用覆盖索引查询id时，不需要回表，所以效率会高不少。</p><hr><h1 id="多线程-amp-多进程"><a href="#多线程-amp-多进程" class="headerlink" title="多线程&amp;多进程"></a>多线程&amp;多进程</h1><p>多线程环境下，其中某个线程出现问题，会导致整个系统崩溃。而多进程则不会。大型游戏基本都是多进程的。（可以了解下Nginx原理）。</p><h1 id="NIO，epoll"><a href="#NIO，epoll" class="headerlink" title="NIO，epoll"></a>NIO，epoll</h1><p>开机后，系统最先运行的是内核程序，内核程序注册一个GDT（全局描述符表，用来给内核和用户程序划分内存空间，即内核空间和用户空间。GDT启用保护模式后，会禁止用户程序修改内核）。</p><blockquote><p>cpu指令集分为0,1,2,3级别，内核属于0级，用户程序属于3级</p></blockquote><p>抓取程序的产生对内核的系统调用：<br><code>strace -ff -o ./ooxx java TestSocket</code></p><p>-ff 表示该程序产生的子线程的系统调用也要抓取<br>-o ./ooxx 表示抓取内容输出到ooxx文件中</p><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将/dec/tmp/www.baidu.com/80这个文件读入到文件描述符6中。文件描述符0,1,2是不能使用的，0表示标准输入，1表示标准正确输出，2表示标准错误输出. </span></span><br><span class="line"><span class="comment">#【注意】需要在bash环境下运行，zsh下运行会报错/dev/tcp/www.baidu.com/80找不到</span></span><br><span class="line"><span class="built_in">exec</span> 6&lt;&gt; /dec/tcp/www.baidu.com/80</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入当前脚本执行的进程id下打开的进程描述符。/proc/pid/fd下存放着该进程中有哪些进程描述符</span></span><br><span class="line"><span class="built_in">cd</span> /proc/$$/fd  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看进程描述符</span></span><br><span class="line">ll</span><br></pre></td></tr></table></figure><img src="/JeckFS/2020/09/02/%E4%B8%80%E4%BA%9B%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/1.png" class="" title="This is 1-th image."><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 请求内容，内容的格式应符合http协议的要求。原先是标准是标准输出1，要重定向到6，因为6是一个文件描述符所以需要加&amp;</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&#x27;GET / HTTP/1.0\n&#x27;</span> 1&gt;&amp;6</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从6中读取到控制台</span></span><br><span class="line"><span class="built_in">cat</span> 0&lt;&amp;6</span><br><span class="line"></span><br><span class="line">输出：HTTP/1.1 400 Bad Request</span><br><span class="line">因为百度服务器拒绝建立连接后没有交互的连接，避免消耗资源。</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 综合到一块就会读取到百度发回的数据</span></span><br><span class="line"><span class="built_in">exec</span> 5&lt;&gt; /dev/tcp/www.baidu.com/80 &amp;&amp; <span class="built_in">cd</span> /proc/$$/fd &amp;&amp; <span class="built_in">echo</span> -e <span class="string">&#x27;GET / HTTP/1.0\n&#x27;</span> 1&gt;&amp;5 &amp;&amp; <span class="built_in">cat</span> 0&lt;&amp;5</span><br></pre></td></tr></table></figure><p>可以看到通过exec建立了新的文件描述符：<code>&#39;socket:[114390]&#39;</code></p><blockquote><p>$#：传入脚本的参数个数;<br>    $0:  脚本自身的名称；<br>    $1:  传入脚本的第一个参数；<br>    $2:  传入脚本的第二个参数；<br>    $@: 传入脚本的所有参数；<br>    $*：传入脚本的所有参数；</p><pre><code>$$:  脚本执行的进程id；$?:  上一条命令执行后的状态，结果为0表示执行正常，结果为1表示执行异常；</code></pre></blockquote><p><a href="https://www.cnblogs.com/xiaofeiIDO/p/7301327.html">exec命令详解</a></p><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># tcpdump抓包，-nn表示不显示包的协议名称，-i表示抓哪个网卡下的包，port指定对哪个端口抓包</span></span><br><span class="line">tcpdump -nn -i wlp3s0 port 80</span><br></pre></td></tr></table></figure><p>使用 nc 命令建立建立socket连接<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nc -l 8080 <span class="comment"># 模拟开启服务端</span></span><br><span class="line">nc localhost 8080 <span class="comment"># 模拟开启一个客户端</span></span><br></pre></td></tr></table></figure></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 抓取nc -l 8080所有的系统调用。其产生的所有系统调用都会存放在-o指定的位置</span></span><br><span class="line">strace -ff -o out nc -l 8080</span><br></pre></td></tr></table></figure><img src="/JeckFS/2020/09/02/%E4%B8%80%E4%BA%9B%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/2.png" class="" title="This is 2-th image."><p>查看out.810:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">socket(AF_INET, SOCK_STREAM, IPPROTO_TCP) = 3 </span><br><span class="line">setsockopt(3, SOL_SOCKET, SO_REUSEADDR, [1], 4) = 0</span><br><span class="line">setsockopt(3, SOL_SOCKET, SO_REUSEPORT, [1], 4) = 0</span><br><span class="line"><span class="built_in">bind</span>(3, &#123;sa_family=AF_INET, sin_port=htons(8080), sin_addr=inet_addr(<span class="string">&quot;0.0.0.0&quot;</span>)&#125;, 16) = 0</span><br><span class="line">listen(3, 1)                            = 0</span><br><span class="line">accept4(3, % </span><br></pre></td></tr></table></figure></p><img src="/JeckFS/2020/09/02/%E4%B8%80%E4%BA%9B%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/3.png" class="" title="This is 3-th image."><p>可以看到810进程产生的文件描述符。</p><p>当执行 nc localhost 8080 建立客户端后，产生下面两行。<br>终点关注poll，[{fd=0, events=POLLIN}, {fd=4, events=0}, {fd=4, events=POLLIN}, {fd=1, events=0}]是一个数组，其中的元素是一个对象，包含fd和events属性。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">accept4(3, &#123;sa_family=AF_INET, sin_port=htons(58602), sin_addr=inet_addr(<span class="string">&quot;127.0.0.1&quot;</span>)&#125;, [128-&gt;16], SOCK_NONBLOCK) = 4</span><br><span class="line">poll([&#123;fd=0, events=POLLIN&#125;, &#123;fd=4, events=0&#125;, &#123;fd=4, events=POLLIN&#125;, &#123;fd=1, events=0&#125;], 4, -1</span><br></pre></td></tr></table></figure><p>当客户端和服务端有交互后：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">poll([&#123;fd=0, events=POLLIN&#125;, &#123;fd=4, events=0&#125;, &#123;fd=4, events=POLLIN&#125;, &#123;fd=1, events=0&#125;], 4, -1) = 1 ([&#123;fd=4, revents=POLLIN&#125;])</span><br><span class="line"><span class="built_in">read</span>(4, <span class="string">&quot;hello\n&quot;</span>, 16384)               = 6</span><br><span class="line">poll([&#123;fd=0, events=POLLIN&#125;, &#123;fd=4, events=0&#125;, &#123;fd=4, events=POLLIN&#125;, &#123;fd=1, events=POLLOUT&#125;], 4, -1) = 1 ([&#123;fd=1, revents=POLLOUT&#125;])</span><br><span class="line">write(1, <span class="string">&quot;hello\n&quot;</span>, 6)                  = 6</span><br><span class="line">poll([&#123;fd=0, events=POLLIN&#125;, &#123;fd=4, events=0&#125;, &#123;fd=4, events=POLLIN&#125;, &#123;fd=1, events=0&#125;], 4, -1) = 1 ([&#123;fd=4, revents=POLLIN&#125;])</span><br><span class="line"><span class="built_in">read</span>(4, <span class="string">&quot;asdf\n&quot;</span>, 16384)                = 5</span><br><span class="line">poll([&#123;fd=0, events=POLLIN&#125;, &#123;fd=4, events=0&#125;, &#123;fd=4, events=POLLIN&#125;, &#123;fd=1, events=POLLOUT&#125;], 4, -1) = 1 ([&#123;fd=1, revents=POLLOUT&#125;])</span><br><span class="line">write(1, <span class="string">&quot;asdf\n&quot;</span>, 5)                   = 5</span><br><span class="line">poll([&#123;fd=0, events=POLLIN&#125;, &#123;fd=4, events=0&#125;, &#123;fd=4, events=POLLIN&#125;, &#123;fd=1, events=0&#125;], 4, -1</span><br></pre></td></tr></table></figure><p>在服务端键入数据并回车后，nc程序会从标准输入读取到数据，并发送到4号文件描述符。</p><p><a href="https://www.bilibili.com/video/BV1M7411E7xh?from=search&amp;seid=1310493146554022629">https://www.bilibili.com/video/BV1M7411E7xh?from=search&amp;seid=1310493146554022629</a></p><p>82:21</p><p>断点续传</p><hr><p><a href="https://www.cnblogs.com/Anker/p/3265058.html">select,poll,epoll的区别</a><br><a href="https://www.cnblogs.com/liu-bear/p/10782244.html">redis的优缺点</a><br><a href="https://www.cnblogs.com/rzqz/p/7440249.html">redis优缺点</a><br><a href="https://blog.csdn.net/Revivedsun/article/details/100006458">redis大value导致性能下降及处理</a></p>]]></content>
      
      
      <categories>
          
          <category> 面经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面经 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>剑指Offer36-二叉搜索树与双向链表</title>
      <link href="/JeckFS/2020/09/01/%E5%89%91%E6%8C%87Offer36-%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%8E%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/"/>
      <url>/JeckFS/2020/09/01/%E5%89%91%E6%8C%87Offer36-%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%8E%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><img src="/JeckFS/2020/09/01/%E5%89%91%E6%8C%87Offer36-%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%8E%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/1.png" class="" title="This is 1-th image."><img src="/JeckFS/2020/09/01/%E5%89%91%E6%8C%87Offer36-%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%8E%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/2.png" class="" title="This is 2-th image."><img src="/JeckFS/2020/09/01/%E5%89%91%E6%8C%87Offer36-%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%8E%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/3.png" class="" title="This is 3-th image."><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>算法实质就是二叉树的中序遍历，在中序遍历的过程中完成二叉搜索树向循环双向链表的转换。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> val;</span><br><span class="line">        <span class="keyword">public</span> Node left;</span><br><span class="line">        <span class="keyword">public</span> Node right;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(<span class="type">int</span> _val)</span> &#123;</span><br><span class="line">            val = _val;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(<span class="type">int</span> _val,Node _left,Node _right)</span> &#123;</span><br><span class="line">            val = _val;</span><br><span class="line">            left = _left;</span><br><span class="line">            right = _right;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Node</span> <span class="variable">t</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 击败100% 0ms</span></span><br><span class="line">    <span class="keyword">public</span> Node <span class="title function_">treeToDoublyList</span><span class="params">(Node root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">head</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(-<span class="number">1</span>);</span><br><span class="line">        t = head;</span><br><span class="line"></span><br><span class="line">        <span class="type">Node</span> <span class="variable">tail</span> <span class="operator">=</span> helper(root);</span><br><span class="line"></span><br><span class="line">        head = head.right;</span><br><span class="line">        head.left = tail;</span><br><span class="line">        tail.right = head;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Node <span class="title function_">helper</span><span class="params">(Node root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root != <span class="literal">null</span>) &#123;</span><br><span class="line">            helper(root.left);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 转化为双向链表</span></span><br><span class="line">            t.right = root;</span><br><span class="line">            root.left = t;</span><br><span class="line">            t = t.right;</span><br><span class="line"></span><br><span class="line">            helper(root.right);</span><br><span class="line">            <span class="keyword">return</span> t;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 剑指offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 剑指offer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode629-K个逆序对数组</title>
      <link href="/JeckFS/2020/08/30/leetcode629-K%E4%B8%AA%E9%80%86%E5%BA%8F%E5%AF%B9%E6%95%B0%E7%BB%84/"/>
      <url>/JeckFS/2020/08/30/leetcode629-K%E4%B8%AA%E9%80%86%E5%BA%8F%E5%AF%B9%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><img src="/JeckFS/2020/08/30/leetcode629-K%E4%B8%AA%E9%80%86%E5%BA%8F%E5%AF%B9%E6%95%B0%E7%BB%84/4.png" class="" title="This is 4-th image."><img src="/JeckFS/2020/08/30/leetcode629-K%E4%B8%AA%E9%80%86%E5%BA%8F%E5%AF%B9%E6%95%B0%E7%BB%84/5.png" class="" title="This is 5-th image."><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>显然这题的状态定义为：<br><code>d[i][j]：表示以数字[1..i]组成的，且恰好拥有j个逆序对的不同数组的个数。</code></p><p>如果要问为什么这么定义，这个真是做题做的多了，抬眼一看就知道出题人想拉什么屎，纯属习惯使然。</p><p>这只是第一步。这一步我并没有根据所定义状态的含义将状态转移方程写出来，实在太不好想了。反而是通过找规律的方式，将状态转移方程找出来的。</p><p>首先我们看，题目说要找由数字<code>[1..n]</code>组成的序列中，逆序对为k的个数。<br>如果让你枚举逆序对为k的序列，你会怎么做？<br>显然是将<code>[1..n]</code>进行<strong>全排列</strong>，然后分析<code>d[i][j]</code>与<code>d[i-1][j]</code>、<code>d[i-1][j-1]</code>的联系。</p><p>首先我们将这一步用临时代码将逆序对为k的序列进行输出。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">boolean</span>[] visited;</span><br><span class="line"><span class="keyword">private</span> Deque&lt;Integer&gt; list;</span><br><span class="line"><span class="keyword">private</span> List&lt;List&lt;Integer&gt;&gt; res;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">gene</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;<span class="comment">//生成全排列</span></span><br><span class="line">    <span class="keyword">if</span> (list.size() == nums.length) &#123;</span><br><span class="line">        List&lt;Integer&gt; elem = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(list);</span><br><span class="line">        res.add(elem);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!visited[i]) &#123;</span><br><span class="line">            visited[i] = <span class="literal">true</span>;</span><br><span class="line">            list.addLast(nums[i]);</span><br><span class="line">            gene(nums);</span><br><span class="line">            list.pollLast();</span><br><span class="line">            visited[i] = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这个本是力扣46题</span></span><br><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">permute</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    list = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">    visited = <span class="keyword">new</span> <span class="title class_">boolean</span>[nums.length];</span><br><span class="line">    res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    gene(nums);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] nums = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; permute = <span class="keyword">new</span> <span class="title class_">Solution</span>().permute(nums);</span><br><span class="line">    HashMap&lt;Integer, List&lt;List&lt;Integer&gt;&gt;&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (List&lt;Integer&gt; elem : permute) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; elem.size(); i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + <span class="number">1</span>; j &lt; elem.size(); j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (elem.get(i) &gt; elem.get(j)) ++sum;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; lists = map.get(sum);</span><br><span class="line">        <span class="keyword">if</span> (lists == <span class="literal">null</span>) &#123;</span><br><span class="line">            List&lt;List&lt;Integer&gt;&gt; newLists = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            newLists.add(elem);</span><br><span class="line">            map.put(sum, newLists);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            lists.add(elem);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (Integer key : map.keySet()) &#123;</span><br><span class="line">        System.out.println(key + <span class="string">&quot;--&gt;&quot;</span> + map.get(key));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们来看输出结果：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">n = 3</span><br><span class="line">有0个逆序对</span><br><span class="line">[1 2 3]</span><br><span class="line">有1个逆序对</span><br><span class="line">[1 3 2]</span><br><span class="line">[2 1 3]</span><br><span class="line">有2个逆序对</span><br><span class="line">[2, 3, 1],</span><br><span class="line">[3, 1, 2]</span><br><span class="line">有3个逆序对</span><br><span class="line">[3, 2, 1]</span><br><span class="line"></span><br><span class="line">n = 4</span><br><span class="line">有0个逆序对</span><br><span class="line">[1 2 3 4]</span><br><span class="line">有1个逆序对</span><br><span class="line">[1 2 4 3]</span><br><span class="line">[1 3 2 4]</span><br><span class="line">[2 1 3 4]</span><br><span class="line">有2个逆序对</span><br><span class="line">[1 3 4 2 ]</span><br><span class="line">[1 4 2 3 ]</span><br><span class="line">[2 1 4 3 ]</span><br><span class="line">[2 3 1 4 ]</span><br><span class="line">[3 1 2 4 ]</span><br><span class="line">有3个逆序对</span><br><span class="line">[1, 4, 3, 2]</span><br><span class="line">[2, 3, 4, 1]</span><br><span class="line">[2, 4, 1, 3]</span><br><span class="line">[3, 1, 4, 2]</span><br><span class="line">[4, 1, 2, 3]</span><br><span class="line">[3, 2, 1, 4]</span><br><span class="line">有4个逆序对</span><br><span class="line">[2, 4, 3, 1],</span><br><span class="line">[3, 2, 4, 1],</span><br><span class="line">[3, 4, 1, 2],</span><br><span class="line">[4, 1, 3, 2],</span><br><span class="line">[4, 2, 1, 3]</span><br><span class="line">有5个逆序对</span><br><span class="line">[3, 4, 2, 1],</span><br><span class="line">[4, 2, 3, 1],</span><br><span class="line">[4, 3, 1, 2]</span><br><span class="line">有6个逆序对</span><br><span class="line">[4, 3, 2, 1]</span><br></pre></td></tr></table></figure></p><p>你能发现什么规律吗？<br>我们来看n=4 k=3。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[1, 4, 3, 2]</span><br><span class="line">[2, 3, 4, 1]</span><br><span class="line">[2, 4, 1, 3]</span><br><span class="line">[3, 1, 4, 2]</span><br><span class="line">[4, 1, 2, 3]</span><br><span class="line">[3, 2, 1, 4]</span><br></pre></td></tr></table></figure><p>我们去掉4这个数字，看剩下了什么。<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[1, 3, 2]</span><br><span class="line">[2, 3, 1]</span><br><span class="line">[2, 1, 3]</span><br><span class="line">[3, 1, 2]</span><br><span class="line">[1, 2, 3]</span><br><span class="line">[3, 2, 1]</span><br></pre></td></tr></table></figure></p><p>细心的你肯定能发现一些猫腻。回头看一下n=3的情况。<br>你会发现这正是n=3时，逆序对k=0,1,2,3的序列的个数。看到这，我们仍然不能确定我们是否找到了这个规律，可以再往下多验证几个。</p><p>当n=4，k=4时，对应的序列是：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[2, 4, 3, 1],</span><br><span class="line">[3, 2, 4, 1],</span><br><span class="line">[3, 4, 1, 2],</span><br><span class="line">[4, 1, 3, 2],</span><br><span class="line">[4, 2, 1, 3]</span><br></pre></td></tr></table></figure><br>我们仍然去掉数字4，来观察。<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[2, 3, 1],</span><br><span class="line">[3, 2, 1],</span><br><span class="line">[3, 1, 2],</span><br><span class="line">[1, 3, 2],</span><br><span class="line">[2, 1, 3]</span><br></pre></td></tr></table></figure><br>我们发现这正好是n=3，k=1,2,3的序列的个数。(⊙v⊙)嗯，发现刚才的规律并不对。我们再继续验证一步。</p><p>当n=4，k=5时，对应的序列是：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[3, 4, 2, 1],</span><br><span class="line">[4, 2, 3, 1],</span><br><span class="line">[4, 3, 1, 2]</span><br></pre></td></tr></table></figure><br>去掉数字4后的序列是：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[3, 2, 1],</span><br><span class="line">[2, 3, 1],</span><br><span class="line">[3, 1, 2]</span><br></pre></td></tr></table></figure><br>这正好是n=3，k=2,3的序列的个数。这时候你会总结出另一个规律：<br><strong>对于给定的n，我们需要知道n-1时，k=0,1,2…的序列的个数。并且，给定n与k其对应的结果正好是n-1时，从min{k-(n-1), 0}到k的个数的和。</strong><br>到这里，我就没有往下继续验证。</p><p>那上面加黑文字的转化成状态转移方程就是：<br><code>d[i][j] = d[i-1][j] + d[i-1][j-1] + ... + d[i-1][max&#123;j-(i-1), 0&#125;]</code></p><p>至此，我们已经成功了80%，剩余的20%，且往下看。</p><p>我们来写代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">kInversePairs</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">    <span class="type">int</span>[][] d = <span class="keyword">new</span> <span class="title class_">int</span>[n + <span class="number">1</span>][k + <span class="number">1</span>];</span><br><span class="line">    d[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt;= k; j++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> Math.max(j - i + <span class="number">1</span>, <span class="number">0</span>); l &lt;= j; l++) &#123;</span><br><span class="line">                sum += d[i-<span class="number">1</span>][l];</span><br><span class="line">                sum %= <span class="number">1000000007</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            d[i][j] = sum;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> d[n][k];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>写出几个测试用例，在力扣控制台比对，发现结果是一致的，我们有很大的把握认为这个规律是对的。提交后，发现在第80个测试用例卡住，且总共就80个测试用例，反馈还是超时。显然，这个时间复杂度为$O(n^3)$，而问题的规模达到了1000，所以我们需要将算法优化一下，降低到$O(n^2)$这题也就OK了。显然最内层的循环是可以写到外层循环中的。这20%的难度就在于时间复杂度的优化。</p><p>优化后的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 击败11.67% 36ms(中文) 击败64.46% 29ms(英文)</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">kInversePairs</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">    <span class="type">long</span>[][] d = <span class="keyword">new</span> <span class="title class_">long</span>[n + <span class="number">1</span>][k + <span class="number">1</span>];</span><br><span class="line">    d[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="comment">// 对d[i-1][j]从0到k进行累加</span></span><br><span class="line">        <span class="type">long</span>[] d2 = <span class="keyword">new</span> <span class="title class_">long</span>[k + <span class="number">2</span>];</span><br><span class="line">        d2[<span class="number">0</span>] = d[i - <span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> <span class="number">1</span>; l &lt;= k; l++) &#123;</span><br><span class="line">            d2[l] = d2[l - <span class="number">1</span>] + d[i - <span class="number">1</span>][l];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt;= k; j++) &#123;</span><br><span class="line">            d[i][j] = d2[j] - d2[Math.max(j - i + <span class="number">1</span>, <span class="number">0</span>)] + d[i-<span class="number">1</span>][Math.max(j - i + <span class="number">1</span>, <span class="number">0</span>)];</span><br><span class="line">            d[i][j] %= <span class="number">1000000007L</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (<span class="type">int</span>)d[n][k] % <span class="number">1000000007</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>成功KO这道题。</p><hr><p>看了以下题解，还是题解给的清晰明了。但是殊途同归。哈哈哈</p><p><a href="https://leetcode-cn.com/problems/k-inverse-pairs-array/solution/kge-ni-xu-dui-shu-zu-by-leetcode/">官方题解</a></p>]]></content>
      
      
      <categories>
          
          <category> 动态规划 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode1458-两个子序列的最大点积</title>
      <link href="/JeckFS/2020/08/30/leetcode1458-%E4%B8%A4%E4%B8%AA%E5%AD%90%E5%BA%8F%E5%88%97%E7%9A%84%E6%9C%80%E5%A4%A7%E7%82%B9%E7%A7%AF/"/>
      <url>/JeckFS/2020/08/30/leetcode1458-%E4%B8%A4%E4%B8%AA%E5%AD%90%E5%BA%8F%E5%88%97%E7%9A%84%E6%9C%80%E5%A4%A7%E7%82%B9%E7%A7%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><img src="/JeckFS/2020/08/30/leetcode1458-%E4%B8%A4%E4%B8%AA%E5%AD%90%E5%BA%8F%E5%88%97%E7%9A%84%E6%9C%80%E5%A4%A7%E7%82%B9%E7%A7%AF/1.png" class="" title="This is 1-th image."><img src="/JeckFS/2020/08/30/leetcode1458-%E4%B8%A4%E4%B8%AA%E5%AD%90%E5%BA%8F%E5%88%97%E7%9A%84%E6%9C%80%E5%A4%A7%E7%82%B9%E7%A7%AF/2.png" class="" title="This is 2-th image."><img src="/JeckFS/2020/08/30/leetcode1458-%E4%B8%A4%E4%B8%AA%E5%AD%90%E5%BA%8F%E5%88%97%E7%9A%84%E6%9C%80%E5%A4%A7%E7%82%B9%E7%A7%AF/3.png" class="" title="This is 3-th image."><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p><a href="https://leetcode-cn.com/problems/max-dot-product-of-two-subsequences/solution/c-dong-tai-gui-hua-yi-dong-by-smilyt_/">参考题解</a></p><p><strong>状态定义：</strong></p><ul><li>第一种方式：<br><code>d[i][j]</code>表示以<code>nums1[i]</code>和<code>nums2[j]</code>结尾的子序列的最大点积。</li><li>第二种方式：<br><code>d[i][j]</code>表示到<code>nums1[i]</code>和<code>nums2[j]</code>为止的子序列的最大点积。</li></ul><p><strong>状态转移方程：</strong></p><ul><li><p>第一种：<br><code>d[i][j]=max&#123;nums1[i]*nums2[j]&#125;, nums1[i]*nums2[j] + maxVal</code><br>其中<code>maxVal</code>表示<code>nums1[0..i&#39;], nums2[0..j&#39;]</code>的最大点积。其中<code>i&#39;&lt;i, j&#39;&lt;j</code>。</p><p>这种做法确定<code>maxVal</code>的成本就达到了$O(n^2)$，因为需要遍历到所有位置的<code>i&#39;和j&#39;</code>。然后再加上下标<code>i，j</code>，其时间复杂度达到了$O(n^4)$。</p><p>问题规模是500，所以这种算法一定是超时的。</p></li><li><p>第二种：</p><ul><li>选择<code>nums1[i]和nums2[j]</code><ul><li>不选择前面的 <code>dp[i][j]=nums1[i]*nums2[j]</code></li><li>选择前面的   <code>dp[i][j]=max(dp[i][j],nums1[i]*nums2[j]+dp[i-1][j-1])</code></li></ul></li><li>选择<code>nums1[i]</code>，不选择<code>nums2[j]</code><br>等价于<code>dp[i][j-1]</code><br><code>dp[i][j]=max(dp[i][j],dp[i][j-1])</code></li><li>不选择<code>nums1[i]</code>，选择<code>nums2[j]</code><br>等价于<code>dp[i-1][j]</code><br><code>dp[i][j]=max(dp[i][j],dp[i-1][j])</code></li><li>不选择<code>nums1[i]和nums2[j]</code><br><code>dp[i][j]=max&#123;dp[i][j], dp[i-1][j-1]&#125;</code></li></ul></li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>首先看问题规模，为500，说明算法的时间复杂度最大为$O(n^2)$</li><li>这个题解列出了最常用的两种状态定义方式。一种是：<code>到i位置为结尾</code>。一种是<code>到i位置为止</code>。主要来分析第二种：<code>末位置不一定(或者不参与)直接影响状态值的情况</code><ul><li>第二种状态的定义需要<code>根据末位置元素是否影响状态值进行分类讨论</code>。一定是从这个角度出发，才能解题。好处是<code>时间复杂度低，不用遍历以前的状态值就可以确定当前状态值</code></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 动态规划 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BIO-NIO-AIO</title>
      <link href="/JeckFS/2020/08/30/BIO-NIO-AIO/"/>
      <url>/JeckFS/2020/08/30/BIO-NIO-AIO/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/Snailclimb/JavaGuide/blob/master/docs/java/BIO-NIO-AIO.md">Github</a></p><p><a href="https://gitee.com/SnailClimb/JavaGuide/blob/master/docs/java/BIO-NIO-AIO.md">Gitee</a></p>]]></content>
      
      
      <categories>
          
          <category> 面经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面经 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode912-快速排序</title>
      <link href="/JeckFS/2020/08/30/leetcode912-%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/"/>
      <url>/JeckFS/2020/08/30/leetcode912-%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><img src="/JeckFS/2020/08/30/leetcode912-%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/1.png" class="" title="This is 1-th image."><img src="/JeckFS/2020/08/30/leetcode912-%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/2.png" class="" title="This is 2-th image."><h1 id="单链表快排"><a href="#单链表快排" class="headerlink" title="单链表快排"></a>单链表快排</h1><p>使用栈来保证right指针向左移动。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Elem</span> &#123;</span><br><span class="line">        <span class="type">int</span> value;</span><br><span class="line">        Elem next;</span><br><span class="line">        Elem(<span class="type">int</span> value) &#123;<span class="built_in">this</span>.value = value;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> value+<span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyLinkedList</span> &#123;</span><br><span class="line">        Elem head;</span><br><span class="line">        Elem tail;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">nullElem</span> <span class="operator">=</span> -<span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line">        MyLinkedList()&#123;</span><br><span class="line">            head = tail = <span class="keyword">new</span> <span class="title class_">Elem</span>(nullElem);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        MyLinkedList <span class="title function_">create</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">            <span class="type">MyLinkedList</span> <span class="variable">myLinkedList</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyLinkedList</span>();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">                myLinkedList.tail.next = <span class="keyword">new</span> <span class="title class_">Elem</span>(nums[i]);</span><br><span class="line">                myLinkedList.tail = myLinkedList.tail.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> myLinkedList;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3 5 4 2 1 6</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">quickSort</span><span class="params">(MyLinkedList ll, Elem head, Elem tail)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (ll.head == ll.tail || ll.head.next == ll.tail || tail == <span class="literal">null</span>) <span class="keyword">return</span>; <span class="comment">//链表为空或者只有一个节点时直接返回</span></span><br><span class="line">        <span class="type">Elem</span> <span class="variable">e</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">for</span> (e = tail; e != <span class="literal">null</span> &amp;&amp; e != head; e = e.next);</span><br><span class="line">        <span class="keyword">if</span> (e == head) <span class="keyword">return</span>;</span><br><span class="line">        Deque&lt;Elem&gt; stack = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;(); <span class="comment">//top节点存储right相邻的上一个节点</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">Elem</span> <span class="variable">p</span> <span class="operator">=</span> head;  p != tail.next ; p = p.next) &#123;</span><br><span class="line">            stack.addLast(p);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Elem</span> <span class="variable">left</span> <span class="operator">=</span> head, right = tail;</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> head.value;</span><br><span class="line">        <span class="keyword">while</span> (left != right) &#123;</span><br><span class="line">            <span class="comment">// 从右往左找比temp小的节点</span></span><br><span class="line">            <span class="keyword">while</span> (!stack.isEmpty() &amp;&amp; left != right &amp;&amp; (right = stack.pollLast()).value &gt; temp);</span><br><span class="line">            <span class="keyword">if</span> (right != <span class="literal">null</span> &amp;&amp; left != right) &#123;</span><br><span class="line">                left.value = right.value;</span><br><span class="line">                left = left.next;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (left == right) &#123;</span><br><span class="line">                    left.value = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//从左往右找比temp大的节点</span></span><br><span class="line">            <span class="keyword">while</span> (left != right &amp;&amp; left.value &lt; temp)</span><br><span class="line">                left = left.next;</span><br><span class="line">            <span class="keyword">if</span> (right != <span class="literal">null</span> &amp;&amp; left != right) &#123;</span><br><span class="line">                right.value = left.value;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (left == right) &#123;</span><br><span class="line">                    left.value = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        quickSort(ll,head, stack.pollLast());</span><br><span class="line">        quickSort(ll,right.next, tail);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 击败5.02% 2508ms</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] sortArray(<span class="type">int</span>[] nums) &#123;</span><br><span class="line">        <span class="type">MyLinkedList</span> <span class="variable">myLinkedList</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyLinkedList</span>().create(nums);</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Solution</span>().quickSort(myLinkedList, myLinkedList.head.next, myLinkedList.tail);</span><br><span class="line">        <span class="type">int</span>[] res = <span class="keyword">new</span> <span class="title class_">int</span>[nums.length];</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">Elem</span> <span class="variable">p</span> <span class="operator">=</span> myLinkedList.head.next;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; res.length) &#123;</span><br><span class="line">            res[i++] = p.value;</span><br><span class="line">            p = p.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序中53到55行用于判定tail是否是head之后的节点，这个判断的时间复杂度是$O(n)$，我们来优化到$O(1)$。方法是在节点的数据结构中定义其相对位置就可以了。</p><p>同时，需要注意：head节点和tail节点是可能为null的。在第84行和85行，我们不能确定<code>stack.pollLast()</code>和<code>right.next</code>不是null。</p><p>请看代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Elem</span> &#123;</span><br><span class="line">        <span class="type">int</span> value;</span><br><span class="line">        <span class="type">int</span> index;</span><br><span class="line">        Elem next;</span><br><span class="line"></span><br><span class="line">        Elem(<span class="type">int</span> value, <span class="type">int</span> index) &#123;</span><br><span class="line">            <span class="built_in">this</span>.value = value;</span><br><span class="line">            <span class="built_in">this</span>.index = index;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> value + <span class="string">&quot;,&quot;</span> + index;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyLinkedList</span> &#123;</span><br><span class="line">        Elem head;</span><br><span class="line">        Elem tail;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">nullElem</span> <span class="operator">=</span> -<span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line">        MyLinkedList() &#123;</span><br><span class="line">            head = tail = <span class="keyword">new</span> <span class="title class_">Elem</span>(nullElem, -<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        MyLinkedList <span class="title function_">create</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">            <span class="type">MyLinkedList</span> <span class="variable">myLinkedList</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyLinkedList</span>();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">                myLinkedList.tail.next = <span class="keyword">new</span> <span class="title class_">Elem</span>(nums[i], i);</span><br><span class="line">                myLinkedList.tail = myLinkedList.tail.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> myLinkedList;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3 5 4 2 1 6</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">quickSort</span><span class="params">(MyLinkedList ll, Elem head, Elem tail)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (ll.head == ll.tail || ll.head.next == ll.tail || tail == <span class="literal">null</span> || head == <span class="literal">null</span>) <span class="keyword">return</span>; <span class="comment">//链表为空或者只有一个节点或者端点为空时直接返回</span></span><br><span class="line">        <span class="keyword">if</span> (head.index &gt;= tail.index) <span class="keyword">return</span>;</span><br><span class="line">        Deque&lt;Elem&gt; stack = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;(); <span class="comment">//用于查找right相邻的上一个节点</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">Elem</span> <span class="variable">p</span> <span class="operator">=</span> head; p != tail.next; p = p.next) &#123;</span><br><span class="line">            stack.addLast(p);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Elem</span> <span class="variable">left</span> <span class="operator">=</span> head, right = tail;</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> head.value;</span><br><span class="line">        <span class="keyword">while</span> (left != right) &#123;</span><br><span class="line">            <span class="comment">// 从右往左找比temp小的节点</span></span><br><span class="line">            <span class="keyword">while</span> (!stack.isEmpty() &amp;&amp; left != right &amp;&amp; (right = stack.pollLast()).value &gt; temp) ;</span><br><span class="line">            <span class="keyword">if</span> (right != <span class="literal">null</span> &amp;&amp; left != right) &#123;</span><br><span class="line">                left.value = right.value;</span><br><span class="line">                left = left.next;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (left == right) &#123;</span><br><span class="line">                    left.value = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//从左往右找比temp大的节点</span></span><br><span class="line">            <span class="keyword">while</span> (left != right &amp;&amp; left.value &lt; temp)</span><br><span class="line">                left = left.next;</span><br><span class="line">            <span class="keyword">if</span> (right != <span class="literal">null</span> &amp;&amp; left != right) &#123;</span><br><span class="line">                right.value = left.value;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (left == right) &#123;</span><br><span class="line">                    left.value = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        quickSort(ll, head, stack.pollLast());</span><br><span class="line">        quickSort(ll, right.next, tail);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//击败18.28% 24ms</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] sortArray(<span class="type">int</span>[] nums) &#123;</span><br><span class="line">        <span class="type">MyLinkedList</span> <span class="variable">myLinkedList</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyLinkedList</span>().create(nums);</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Solution</span>().quickSort(myLinkedList, myLinkedList.head.next, myLinkedList.tail);</span><br><span class="line">        <span class="type">int</span>[] res = <span class="keyword">new</span> <span class="title class_">int</span>[nums.length];</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">Elem</span> <span class="variable">p</span> <span class="operator">=</span> myLinkedList.head.next;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; res.length) &#123;</span><br><span class="line">            res[i++] = p.value;</span><br><span class="line">            p = p.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="数组形式的快排"><a href="#数组形式的快排" class="headerlink" title="数组形式的快排"></a>数组形式的快排</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[] arr;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">quickSort</span><span class="params">(<span class="type">int</span> low, <span class="type">int</span> high)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (low &gt; high) <span class="keyword">return</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[low], left = low, right = high;</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">            <span class="keyword">while</span> (left &lt; right &amp;&amp; arr[right] &gt;= temp) --right;</span><br><span class="line">            <span class="keyword">if</span> (left == right) arr[left] = temp;</span><br><span class="line">            <span class="keyword">else</span> arr[left] = arr[right];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (left &lt; right &amp;&amp; arr[left] &lt;= temp) ++left;</span><br><span class="line">            <span class="keyword">if</span> (left == right) arr[left] = temp;</span><br><span class="line">            <span class="keyword">else</span> arr[right] = arr[left];</span><br><span class="line">        &#125;</span><br><span class="line">        quickSort(low, left-<span class="number">1</span>);</span><br><span class="line">        quickSort(left+<span class="number">1</span>, high);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] sortArray(<span class="type">int</span>[] nums) &#123;</span><br><span class="line">        <span class="built_in">this</span>.arr = nums;</span><br><span class="line">        quickSort(<span class="number">0</span>, nums.length - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.arr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>在单链表和数组下，使用快速排序，唯一的区别就是单链表需要用<code>栈</code>来快速找到前一个节点。</p><p>两种方式的快排思路是完全一样的。所以首先需要对数组的快排非常熟悉，才有可能写出来单链表的快排。</p>]]></content>
      
      
      <categories>
          
          <category> 排序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode978-最长湍流子数组</title>
      <link href="/JeckFS/2020/08/29/leetcode978-%E6%9C%80%E9%95%BF%E6%B9%8D%E6%B5%81%E5%AD%90%E6%95%B0%E7%BB%84/"/>
      <url>/JeckFS/2020/08/29/leetcode978-%E6%9C%80%E9%95%BF%E6%B9%8D%E6%B5%81%E5%AD%90%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><img src="/JeckFS/2020/08/29/leetcode978-%E6%9C%80%E9%95%BF%E6%B9%8D%E6%B5%81%E5%AD%90%E6%95%B0%E7%BB%84/1.png" class="" title="This is 1-th image."><img src="/JeckFS/2020/08/29/leetcode978-%E6%9C%80%E9%95%BF%E6%B9%8D%E6%B5%81%E5%AD%90%E6%95%B0%E7%BB%84/2.png" class="" title="This is 2-th image."><img src="/JeckFS/2020/08/29/leetcode978-%E6%9C%80%E9%95%BF%E6%B9%8D%E6%B5%81%E5%AD%90%E6%95%B0%E7%BB%84/3.png" class="" title="This is 3-th image."><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>状态定义：<br><code>d[i]</code>表示以i位置元素结束的最大湍流子数组的长度</p><p>状态转移方程：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> d[i-<span class="number">1</span>] &lt; d[i]</span><br><span class="line">    <span class="keyword">if</span> A[i-<span class="number">2</span>] &gt; A[i-<span class="number">1</span>]</span><br><span class="line">        d[i] = d[i-<span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        d[i] = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> A[i-<span class="number">1</span>] &gt; A[i]</span><br><span class="line">    <span class="keyword">if</span> A[i-<span class="number">2</span>] &lt; A[i-<span class="number">1</span>]</span><br><span class="line">        d[i] = d[i-<span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        d[i] = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    d[i] = <span class="number">1</span>;</span><br></pre></td></tr></table></figure></p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p>用时：17:59-18:22  共23min</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="comment">// 击败83.12% 6ms</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxTurbulenceSize</span><span class="params">(<span class="type">int</span>[] A)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (A.length == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (A.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span>[] d = <span class="keyword">new</span> <span class="title class_">int</span>[A.length];</span><br><span class="line">        d[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (A[<span class="number">0</span>] == A[<span class="number">1</span>]) d[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> d[<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt; A.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (A[i-<span class="number">1</span>] &lt; A[i])&#123;</span><br><span class="line">                <span class="keyword">if</span> (A[i-<span class="number">2</span>] &gt; A[i-<span class="number">1</span>])</span><br><span class="line">                    d[i] = d[i-<span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    d[i] = <span class="number">2</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (A[i - <span class="number">1</span>] &gt; A[i]) &#123;</span><br><span class="line">                <span class="keyword">if</span> (A[i-<span class="number">2</span>] &lt; A[i-<span class="number">1</span>])</span><br><span class="line">                    d[i] = d[i-<span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    d[i] = <span class="number">2</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                d[i] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            res = Math.max(res, d[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 动态规划 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TCP的握手与挥手</title>
      <link href="/JeckFS/2020/08/29/TCP%E7%9A%84%E6%8F%A1%E6%89%8B%E4%B8%8E%E6%8C%A5%E6%89%8B/"/>
      <url>/JeckFS/2020/08/29/TCP%E7%9A%84%E6%8F%A1%E6%89%8B%E4%B8%8E%E6%8C%A5%E6%89%8B/</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/qzcsu/article/details/72861891">参考文档</a></p>]]></content>
      
      
      <categories>
          
          <category> 面经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面经 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>B树、B-树、B+树、B*树</title>
      <link href="/JeckFS/2020/08/29/B%E6%A0%91B-%E6%A0%91%E7%AD%89/"/>
      <url>/JeckFS/2020/08/29/B%E6%A0%91B-%E6%A0%91%E7%AD%89/</url>
      
        <content type="html"><![CDATA[<h1 id="B树、B-树"><a href="#B树、B-树" class="headerlink" title="B树、B-树"></a>B树、B-树</h1><font color="red" size="5">B树是一种多路搜索树（并不一定是二叉的）B-tree就是指的B树</font><p><strong>B树定义：</strong></p><ul><li>根节点的儿子数为<code>[2, M]</code>；任意非叶子节点最多有 M 个儿子，且 <code>M &gt; 2</code></li><li>除根节点以外的非叶子节点的儿子数为<code>[M/2, M]</code></li><li>每个结点存放至少<code>M/2-1</code>（取上整）和至多<code>M-1</code>个关键字；（至少2个关键字）</li><li>非叶子结点的关键字个数 = 指向儿子的指针个数 - 1；</li><li>非叶子结点的关键字：<code>K[1], K[2], …, K[M-1]</code>；且<code>K[i] &lt; K[i+1]</code>；</li><li>非叶子结点的指针：<code>P[1], P[2], …, P[M]</code>；其中<code>P[1]</code>指向关键字小于<code>K[1]</code>的子树，<code>P[M]</code>指向关键字大于<code>K[M-1]</code>的子树，其它<code>P[i]</code>指向关键字属于<code>(K[i-1], K[i])</code>的子树；</li><li>所有叶子结点位于同一层；</li></ul><img src="/JeckFS/2020/08/29/B%E6%A0%91B-%E6%A0%91%E7%AD%89/1.png" class="" title="This is 1-th image."><p><strong>B树的特性：</strong></p><ul><li>关键字集合分布在整颗树中；</li><li>任何一个关键字出现且只出现在一个结点中；</li><li>搜索有可能在非叶子结点结束；</li><li>其搜索性能等价于在关键字全集内做一次二分查找；</li><li>自动层次控制；</li><li>搜索时间复杂度位$O(log_2^N)$，其中N位关键字总数。它与非叶子节点最多子树个数无关。</li></ul><p>由于<code>M/2</code>的限制，在插入结点时，如果结点已满，需要将结点分裂为两个各占<code>M/2</code>的结点；删除结点时，需将两个不足<code>M/2</code>的兄弟结点合并；</p><h1 id="B-树"><a href="#B-树" class="headerlink" title="B+树"></a>B+树</h1><font color="red" size="5">B+树是B-树的变体，也是一种多路搜索树。</font><ul><li>B+树定义与B树相同，其不同点如下：</li><li>非叶子结点的子树指针与关键字个数相同；</li><li>非叶子结点的子树指针<code>P[i]</code>，指向关键字值属于<code>[K[i], K[i+1])</code>的子树（B-树是开区间）；</li><li>为所有叶子结点增加一个链指针；</li><li>所有关键字都在叶子结点出现；</li></ul><img src="/JeckFS/2020/08/29/B%E6%A0%91B-%E6%A0%91%E7%AD%89/2.png" class="" title="This is 2-th image."><p>B+的搜索与B-树也基本相同，区别是<strong>B+树只有达到叶子结点才命中</strong>（B-树可以在非叶子结点命中），其<strong>性能也等价于在关键字全集做一次二分查找</strong>；</p><p><strong>B+树的特性：</strong></p><ul><li>所有关键字都出现在叶子结点的链表中（稠密索引），且链表中的关键字恰好是有序的；</li><li>不可能在非叶子结点命中；</li><li>非叶子结点相当于是叶子结点的索引（稀疏索引），叶子结点相当于是存储（关键字）数据的数据层；</li><li>更适合文件索引系统；</li></ul><h1 id="B-树-1"><a href="#B-树-1" class="headerlink" title="B*树"></a>B*树</h1><p><code>B*树</code>是B+树的变体，在B+树的非根和非叶子结点再增加指向兄弟的指针；</p><img src="/JeckFS/2020/08/29/B%E6%A0%91B-%E6%A0%91%E7%AD%89/3.png" class="" title="This is 3-th image."><font color="red" size="5">`B*树`定义了非叶子结点关键字个数至少为(2/3)*M，即块的最低使用率为2/3（代替B+树的1/2）；</font><p>B+树的分裂：当一个结点满时，分配一个新的结点，并将原结点中1/2的数据复制到新结点，最后在父结点中增加新结点的指针；B+树的分裂只影响原结点和父结点，而不会影响兄弟结点，所以它不需要指向兄弟的指针；</p><p><code>B*树</code>的分裂：当一个结点满时，如果它的下一个兄弟结点未满，那么将一部分数据移到兄弟结点中，再在原结点插入关键字，最后修改父结点中兄弟结点的关键字（因为兄弟结点的关键字范围改变了）；如果兄弟也满了，则在原结点与兄弟结点之间增加新结点，并各复制1/3的数据到新结点，最后在父结点增加新结点的指针；所以，<code>B*树</code>分配新结点的概率比B+树要低，空间使用率更高；</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li><p>B（B-）树：多路搜索树，每个结点存储M/2到M个关键字，非叶子结点存储指向关键字范围的子结点；</p></li><li><p>所有关键字在整颗树中出现，且只出现一次，非叶子结点可以命中；</p></li><li><p>B+树：在B-树基础上，为叶子结点增加链表指针，所有关键字都在叶子结点中出现，非叶子结点作为叶子结点的索引；B+树总是到叶子结点才命中；</p></li><li><p>B*树：在B+树基础上，为非叶子结点也增加链表指针，将结点的最低利用率从1/2提高到2/3；</p></li></ul><p><a href="https://blog.csdn.net/u013411246/article/details/81088914">参考连接</a></p>]]></content>
      
      
      <categories>
          
          <category> 面经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面经 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OS-1-进程的描述与控制</title>
      <link href="/JeckFS/2020/08/27/OS-1-%E8%BF%9B%E7%A8%8B%E7%9A%84%E6%8F%8F%E8%BF%B0%E4%B8%8E%E6%8E%A7%E5%88%B6/"/>
      <url>/JeckFS/2020/08/27/OS-1-%E8%BF%9B%E7%A8%8B%E7%9A%84%E6%8F%8F%E8%BF%B0%E4%B8%8E%E6%8E%A7%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="1-进程的描述"><a href="#1-进程的描述" class="headerlink" title="1.进程的描述"></a>1.进程的描述</h1><h2 id="进程的定义"><a href="#进程的定义" class="headerlink" title="进程的定义"></a>进程的定义</h2><p>进程由程序段、相关的数据段、进程控制块PCB组成。PCB是实现进程最关键的数据结构。其关键的程度已经达到：创建线程就是创建进程中的PCB；撤销线程就是撤销进程的PCB。</p><p>进程内部是一次顺序执行的过程。<br>进程是具有<strong>独立功能</strong>的程序在一个<strong>数据集合</strong>上运行的过程，它是系统进行<strong>资源分配和调度</strong>的<strong>独立单位</strong>。并不是最小单位，最小单位是线程。</p><h2 id="进程的特征"><a href="#进程的特征" class="headerlink" title="进程的特征"></a>进程的特征</h2><p><strong>动态性</strong>：进程是动态的，它有创建，运行，销毁的过程。而程序是静态的，它是存放于某种介质上的代码段。<br><strong>并发性</strong>：多进程在同一时间段内执行。<br><strong>独立性</strong>：进程是一个能<strong>独立运行、独立获得资源、独立接受调度</strong>的基本单位。<br><strong>异步性</strong>：<strong>指的是进程按照独立的、不可预知的速度向前推进</strong>。这带来了在并发情境下，程序结果的不可再现性。为此进入了同步机制。</p><h2 id="进程的基本状态和转换"><a href="#进程的基本状态和转换" class="headerlink" title="进程的基本状态和转换"></a>进程的基本状态和转换</h2><img src="/JeckFS/2020/08/27/OS-1-%E8%BF%9B%E7%A8%8B%E7%9A%84%E6%8F%8F%E8%BF%B0%E4%B8%8E%E6%8E%A7%E5%88%B6/3.png" class="" title="This is 3-th image."><img src="/JeckFS/2020/08/27/OS-1-%E8%BF%9B%E7%A8%8B%E7%9A%84%E6%8F%8F%E8%BF%B0%E4%B8%8E%E6%8E%A7%E5%88%B6/4.png" class="" title="This is 4-th image."><h2 id="进程管理中的数据结构"><a href="#进程管理中的数据结构" class="headerlink" title="进程管理中的数据结构"></a>进程管理中的数据结构</h2><hr><h1 id="2-进程的控制"><a href="#2-进程的控制" class="headerlink" title="2.进程的控制"></a>2.进程的控制</h1><h2 id="操作系统内核"><a href="#操作系统内核" class="headerlink" title="操作系统内核"></a>操作系统内核</h2><h3 id="用户态、内核态"><a href="#用户态、内核态" class="headerlink" title="用户态、内核态"></a>用户态、内核态</h3><p>通常将一些与<strong>硬件紧密相关</strong>的模块（如<strong>中断处理程序</strong>等）、各种<strong>常用设备的驱动程序</strong>、以及<strong>运行频率较高的模块</strong>（如<strong>时钟管理、进程调度</strong>、和许多模块所公用的一些基本操作），都安排在紧靠硬件的软件层次中，将他们<strong>常驻内存</strong>，即通常被称为的<strong>OS内核</strong></p><p>划分用户态和内核态的原因是：防止OS本身以及关键数据（如PCB等）受到应用程序有意或无意的破坏，故而将处理机的执行状态分为了用户态和内核态。</p><p><code>内核态</code>具有较高的特权，能执行一切指令，访问所有寄存器和存储区。<br><code>用户态</code>具有较低的特权，仅能执行规定的指令，访问指定的寄存器和存储区。</p><h3 id="OS内核提供的功能"><a href="#OS内核提供的功能" class="headerlink" title="OS内核提供的功能"></a>OS内核提供的功能</h3><h4 id="1-支撑功能"><a href="#1-支撑功能" class="headerlink" title="1.支撑功能"></a>1.支撑功能</h4><ul><li>中断处理<br>如系统调用、键盘输入、进程调度、设备驱动等都会中断。</li><li>时钟管理<br>时间片轮转调度中，每当时间片用完时，便由时钟管理产生一个中断信号，促使调度程序重新进行调度。在实时处理系统中的截止时间控制、批处理系统中的最长运行时间等，都依赖于时钟管理的功能。</li><li>原语操作<blockquote><p><strong>原语由若干条指令组成，用于完成一定功能的一个过程。原语操作具有原子性，并且在内核态下执行，因此常驻内存。</strong></p></blockquote></li></ul><h4 id="2-资源管理功能"><a href="#2-资源管理功能" class="headerlink" title="2.资源管理功能"></a>2.资源管理功能</h4><ul><li>进程管理<br>用于进程的调度与分派、进程的创建与销毁、进程同步的原语及进程通信原语等。</li><li>存储器管理<br>用于逻辑地址变换为内存空间的物理地址的地址转换机构、内存分配与回收、实现内存保护和对换功能等。</li><li>设备管理<br>用于驱动程序、CPU与IO速度不匹配的缓冲管理、实现设备分配和设备独立性</li></ul><h2 id="进程的创建过程"><a href="#进程的创建过程" class="headerlink" title="进程的创建过程"></a>进程的创建过程</h2><ul><li>申请空白PCB</li><li>为新进程分配其所运行所需的资源</li><li>初始化进程控制块PCB</li><li>尝试插入就绪队列</li></ul><h2 id="进程的终止"><a href="#进程的终止" class="headerlink" title="进程的终止"></a>进程的终止</h2><h2 id="进程的阻塞与唤醒"><a href="#进程的阻塞与唤醒" class="headerlink" title="进程的阻塞与唤醒"></a>进程的阻塞与唤醒</h2><p>导致阻塞的事件：</p><ul><li>向系统请求共享资源失败</li><li>等待某种操作完成，如IO操作</li><li>新数据尚未到达。如生产者-消费者模式</li><li>等待新任务到达。如网络环境中的发送进程和接收进程</li></ul><h2 id="进程的挂起与激活"><a href="#进程的挂起与激活" class="headerlink" title="进程的挂起与激活"></a>进程的挂起与激活</h2><p>挂起原因：</p><ul><li>终端用户的需要<br>终端用户在自己的程序运行期间发现有可疑问题，希望暂定自己的程序的执行，以便研究其执行情况或对程序进行修改。</li><li>父进程请求<br>父进程挂起子进程，以便考查和修改该子进程，或者协调各个子进程间的活动。</li><li>符合调节的需要<br>当实时系统工作负荷较重，可能影响到对实时任务的控制时，可由操作系统将不重要的进程挂起。</li><li>操作系统的需要<br>挂起某些进程，以便检查运行中的资源使用情况或进行记账。</li></ul><hr><h1 id="3-进程的同步"><a href="#3-进程的同步" class="headerlink" title="3.进程的同步"></a>3.进程的同步</h1><blockquote><p>进程同步的原因，解决的问题(需求场景)</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">    进入区（用于检查是否可进入临界区）</span><br><span class="line">    临界区（访问临界资源的代码）</span><br><span class="line">    退出区（恢复访问标志的代码）</span><br><span class="line">    剩余区（剩余代码）</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="同步机制遵循的规则"><a href="#同步机制遵循的规则" class="headerlink" title="同步机制遵循的规则"></a>同步机制遵循的规则</h2><ul><li>空闲让进<br>临界区无进程访问时，允许进入临界区。</li><li>忙则等待<br>临界区有进程正在访问就等待释放后再进入。</li><li>有限等待<br>有限时间内进入自己的临界区</li><li>让权等待<br>不能进入自己的临界区时，要立即释放处理机</li></ul><h2 id="同步的实现方式"><a href="#同步的实现方式" class="headerlink" title="同步的实现方式"></a>同步的实现方式</h2><p><strong>1.硬件同步</strong></p><ul><li>关中断<br>计算机关闭中断后，不会响应中断，从而不会引发调度，也就不会发生进程或线程切换。<br>问题较多：多CPU系统中，一个处理器上的关中断，不能防止进程在其他处理器上的执行相同的临界区代码。</li><li>利用 Test-and-Set 指令实现互斥</li><li>利用 Swap 指令实现进程互斥</li></ul><p><strong>2.信号量机制</strong></p><p><strong>3.管程机制</strong><br>管程是对共享资源进行管理的一种方式。它使用某种数据结构代表共享资源，对共享资源的访问都转化为对这种数据结构的访问。</p><h2 id="经典进程同步问题"><a href="#经典进程同步问题" class="headerlink" title="经典进程同步问题"></a>经典进程同步问题</h2><ol><li>生产者-消费者问题</li><li>读者-写着问题</li></ol><hr><h1 id="4-进程的通信"><a href="#4-进程的通信" class="headerlink" title="4.进程的通信"></a>4.进程的通信</h1><ul><li><strong>管道/匿名管道(Pipes)</strong> ：用于具有亲缘关系的父子进程间或者兄弟进程之间的通信。</li><li><strong>有名管道(Names Pipes)</strong> : 匿名管道由于没有名字，只能用于亲缘关系的进程间通信。为了克服这个缺点，提出了有名管道。有名管道严格遵循先进先出(first in first out)。有名管道以磁盘文件的方式存在，可以实现本机任意两个进程通信。</li><li><strong>信号(Signal)</strong> ：信号是一种比较复杂的通信方式，用于通知接收进程某个事件已经发生；</li><li><strong>消息队列(Message Queuing)</strong> ：消息队列是消息的链表,具有特定的格式,存放在内存中并由消息队列标识符标识。管道和消息队列的通信数据都是先进先出的原则。与管道（无名管道：只存在于内存中的文件；命名管道：存在于实际的磁盘介质或者文件系统）不同的是消息队列存放在内核中，只有在内核重启(即，操作系统重启)或者显示地删除一个消息队列时，该消息队列才会被真正的删除。消息队列可以实现消息的随机查询,消息不一定要以先进先出的次序读取,也可以按消息的类型读取.比 FIFO 更有优势。消息队列克服了信号承载信息量少，管道只能承载无格式字 节流以及缓冲区大小受限等缺。</li><li><strong>信号量(Semaphores)</strong> ：信号量是一个计数器，用于多进程对共享数据的访问，信号量的意图在于进程间同步。这种通信方式主要用于解决与同步相关的问题并避免竞争条件。</li><li><strong>共享内存(Shared memory)</strong> ：使得多个进程可以访问同一块内存空间，不同进程可以及时看到对方进程中对共享内存中数据的更新。这种方式需要依靠某种同步操作，如互斥锁和信号量等。可以说这是最有用的进程间通信方式。</li><li><strong>套接字(Sockets)</strong> : 此方法主要用于在客户端和服务器之间通过网络进行通信。套接字是支持 TCP/IP 的网络通信的基本操作单元，可以看做是不同主机之间的进程进行双向通信的端点，简单的说就是通信的两方的一种约定，用套接字中的相关函数来完成通信过程。</li></ul><hr><h1 id="5-线程"><a href="#5-线程" class="headerlink" title="5.线程"></a>5.线程</h1><h2 id="————————————"><a href="#————————————" class="headerlink" title="————————————"></a>————————————</h2><h2 id="————————————-1"><a href="#————————————-1" class="headerlink" title="————————————"></a>————————————</h2><h2 id="————————————-2"><a href="#————————————-2" class="headerlink" title="————————————"></a>————————————</h2><h2 id="————————————-3"><a href="#————————————-3" class="headerlink" title="————————————"></a>————————————</h2><h2 id="————————————-4"><a href="#————————————-4" class="headerlink" title="————————————"></a>————————————</h2><h2 id="————————————-5"><a href="#————————————-5" class="headerlink" title="————————————"></a>————————————</h2><h2 id="————————————-6"><a href="#————————————-6" class="headerlink" title="————————————"></a>————————————</h2><h2 id="————————————-7"><a href="#————————————-7" class="headerlink" title="————————————"></a>————————————</h2><h2 id="————————————-8"><a href="#————————————-8" class="headerlink" title="————————————"></a>————————————</h2><h2 id="————————————-9"><a href="#————————————-9" class="headerlink" title="————————————"></a>————————————</h2><h2 id="————————————-10"><a href="#————————————-10" class="headerlink" title="————————————"></a>————————————</h2><h2 id="————————————-11"><a href="#————————————-11" class="headerlink" title="————————————"></a>————————————</h2>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面经</title>
      <link href="/JeckFS/2020/08/26/%E9%9D%A2%E7%BB%8F/"/>
      <url>/JeckFS/2020/08/26/%E9%9D%A2%E7%BB%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="腾讯-后台开发-一面-交叉面"><a href="#腾讯-后台开发-一面-交叉面" class="headerlink" title="腾讯(后台开发  一面 + 交叉面)"></a>腾讯(后台开发  一面 + 交叉面)</h1><p><a href="https://leetcode-cn.com/problems/search-in-rotated-sorted-array/">力扣 33. 搜索旋转排序数组</a><br><a href="https://leetcode-cn.com/problems/string-to-integer-atoi/">力扣 8. 字符串转换整数 (atoi)</a></p><h1 id="一面："><a href="#一面：" class="headerlink" title="一面："></a>一面：</h1><p>自我介绍<br>HashMap的底层数据结构<br>ConcurrentHashMap的原理<br>coredump（头一次听说，直接给面试官说我没听说过。我还以为说的是cool down，闹了笑话）<br>腾讯很注重操作系统，一定要复习复习操作系统<br>只在中断窗口中，如何调试并运行程序<br>编程题：你打开力扣，找到第8题。我嘀咕：这么直接，简单粗暴。<br>暂时回想起来这么多。问的不止这些。</p><h1 id="交叉面"><a href="#交叉面" class="headerlink" title="交叉面"></a>交叉面</h1><p>HashMap的底层数据结构，扩容机制。jdk1.7 1.8之间的区别。有哪些问题。<br>ConcurrentHashMap如何实现并发安全的。其底层数据结构是什么。<br>虚拟机垃圾收集有哪些算法，他们有啥区别，简单说一下。<br>HTTP与HTTPS的区别。HTTPS为啥是安全的。<br>编程题：力扣第33题<br>问我排序算法的时间复杂度，具体那个算法我忘记了。<br>面向对象的设计原则：迪米特法则，开闭原则等等。我只回答了这俩，其实还有好多，总共七八个吧。<br>设计模式是用来干啥的，解决了什么问题。说几个设计模式。<br>redis了解吗？有哪几种数据结构，每种数据结构底层用什么实现的。<br>跳表知道不？为什么查找的快<br>redis的持久化，说一说快照持久化，最好回答到底层是如何实现的。<br>最了解那种数据库？<br>数据库索引知道吗，底层怎么实现的。索引的匹配规则<br>B+，B-，B树有啥区别<br>暂时想起来这么多，以后再补。</p><p>一面+交叉面一共面试了一个半到两个小时。时间过得是真快，也没感觉到什么就过去了。<br>第一面的小哥哥很温柔，挺舒坦的。第二面面试官直接比较刚，语气完全是俯视的碾压。哈哈哈，幸好心里由准备。心里素质也还可以，没有多紧张。<br>一面和交叉面都问到了项目。然后如果你参加过ACM可能会涨一点儿分。</p><h1 id="三面"><a href="#三面" class="headerlink" title="三面"></a>三面</h1><p>算法题：反转二叉树，左右子树交换一下就可以。使用二叉树后序遍历就可以解决。<br>算法题：快速排序写一下。听到写快排心里还是咯噔一下，因为平时只了解其过程，好多年没有写过了。但是题目出来了，不能怂，仔细想了想，也没卡，因为思路是对的，然后就顺利写出来了。出了一把汗。<br>让写SQL，我说好久没写了，可能写不出来。然后面试官就问了下一个问题。<br>说一下计算机网络中的窗口滑动<br>问了好几种排序算法的时间复杂度。<br>暂时想起来这么多。</p><p>三面邮件上写的只有半个小时。邮件中通知的面试是11:30开始的。 实际面试中只有25min 就完事了，我说这就完了？他说完了，我心里终于可以不紧张了，我一直等他下线了，我才退了，算是对大佬的一种尊重吧。</p><p>交叉面和三面都问了一下LeeCode刷了多少。刷的多的肯定涨分。祝愿每一个小伙伴都能平稳上岸，也祝福自己。加油，奥利给！！！</p><p>【补充】交叉面和三面中间隔了一天。结果出来的还是很快的。</p><h1 id="腾讯其他人的面经"><a href="#腾讯其他人的面经" class="headerlink" title="腾讯其他人的面经"></a>腾讯其他人的面经</h1><h2 id="编程题"><a href="#编程题" class="headerlink" title="编程题"></a>编程题</h2><p><strong>1.合并两个有序的双向链表</strong></p><p><strong>2.有两个角色，一个是企业主管，一个是企业员工，设计程序使得企业主管可以查看倒数后三名的打卡员工的信息。</strong></p><h2 id="基础题"><a href="#基础题" class="headerlink" title="基础题"></a>基础题</h2><ol><li><strong>ArrayList和LinkedList的区别</strong></li></ol><ol><li><p><strong>Hashtable和HashMap 的区别</strong></p></li><li><p><strong>如果自己设计一个容器（hashtable）应该怎么设计？（可以使用现有的结构）</strong></p></li><li><p><strong>== 和equals的区别</strong></p></li><li><p><strong>进程和线程的区别，进程的通信方式线程的通信方式？</strong></p><ul><li>进程是程序<strong>一次执行</strong>的过程。</li><li>进程是一个<strong>程序及其数据</strong>在处理机上<strong>顺序执行</strong>时所发生的活动。</li><li>进程是具有<strong>独立功能</strong>的程序在一个<strong>数据集</strong>上运行的过程，它是操作系统进行<strong>资源分配和调度的独立单位</strong>。</li></ul><p>进程特征：</p><ul><li>动态性：进程有创建、执行、销毁的动态过程。</li><li>并发性：一段时间内多进程同时运行。</li><li>独立性：独立运行、独立获得资源、独立接收调度的基本单位。</li><li>异步性：每个进程按照各自的独立的、不可预知的速度向前推进。</li></ul></li></ol><img src="/JeckFS/2020/08/26/%E9%9D%A2%E7%BB%8F/1.png" class="" title="This is 1-th image."><ol><li><strong>协程你了解吗（不了解）</strong></li></ol><p><a href="https://www.liaoxuefeng.com/wiki/897692888725344/923057403198272">协程</a></p><ol><li><strong>Java虚拟机的GC过程</strong></li></ol><p>从回收算法的角度回答。<br>复制算法<br>标记整理<br>标记清除</p><ol><li><strong>网络的OSI七层模型，每层的协议有什么？</strong></li></ol><p><a href="https://blog.csdn.net/lisa890608/article/details/8231666/">参见</a></p><ol><li><p><strong>UDP的首部8个字节都是什么？</strong></p></li><li><p><strong>TCP的三次握手过程四次挥手过程</strong></p></li><li><p><strong>HTTP和Https的区别</strong></p></li><li><p><strong>项目中的最大的问题是什么，怎么解决的。</strong></p></li><li><p><strong>数据库没有问，他说没有时间了</strong></p></li></ol><p>（2020.3.26 微信事业群二面 50min）</p><ol><li><p><strong>浏览器和服务器进行通讯的过程是什么样的，这个过程中有哪些点可以优化</strong></p></li><li><p><strong>给一些敏感词，想在一篇文章检索出文章是否包含某个词，包含就返回true，不包含就返回false。</strong></p></li><li><p><strong>内存中buffer中的数据是怎么存储到文件中的呢，整个过程有哪些问题出现可以怎么优化呢？</strong></p></li><li><p><strong>还有一些数据库的基础题。</strong></p></li></ol><p><a href="https://blog.csdn.net/Radium_1209/article/details/108191405">连接</a></p><p><a href="">力扣470.用Rand7()实现Rand10()</a></p><p><strong>有一个均匀生成0-65535的随机数rand()，实现从30W（编号为1-300000）人抽10W人。</strong></p><p><code>65535 * 4 = 262140；</code><br><code>65535 * 5 = 327675；</code></p><p>为了能够覆盖 300000，需要将其间隔设置为5。</p><p><code>rand65535() * 5</code>产生的等概率的集合为<code>&#123;0,5,10,...,327675&#125;</code></p><p>然后补全中间的数字：<br><code>rand65535()</code>可以随机产生的集合是<code>&#123;0,1,2,...,65534,65535&#125;</code>。</p><p>我们只取<code>&#123;0,1,2,...,65534&#125;</code>，当取的是65535时在进行循环。假设产生这个集合的方法是<code>rand65534()</code>，那么<code>rand65534() % 5</code>可以等概率得到集合<code>&#123;0,1,2,3,4&#125;</code>(假设这个方法定义为<code>rand4</code>)。</p><p>这样就可以等概率生成<code>&#123;0,1,2,...,327679&#125;</code>，我们只取<code>&#123;0,1,2,...,300000&#125;</code>即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">rand65535</span><span class="params">()</span> &#123; <span class="comment">// &#123;0,1,2,...,65535&#125;</span></span><br><span class="line">        <span class="keyword">return</span> random.nextInt(<span class="number">65536</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">rand65534</span><span class="params">()</span> &#123;<span class="comment">//&#123;0,1,2,...,65534&#125;</span></span><br><span class="line">        <span class="type">int</span> res;</span><br><span class="line">        <span class="keyword">while</span> ((res = rand65535()) == <span class="number">65535</span>) ;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">rand4</span><span class="params">()</span> &#123;<span class="comment">//&#123;0,1,2,3,4&#125;</span></span><br><span class="line">        <span class="keyword">return</span> rand65534() % <span class="number">5</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">rand300000</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> rand65535() * <span class="number">5</span> + rand4();</span><br><span class="line">            <span class="keyword">if</span> (t &lt; <span class="number">300001</span>) <span class="keyword">return</span> t;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Solution</span> <span class="variable">solution</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Solution</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            System.out.println(solution.rand300000());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Random.nextInt(int n)随机返回[0,n)之间的数字</code>。</p><p><strong>链表去掉有重复的</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> ListNode <span class="title function_">unique</span><span class="params">(ListNode head)</span>&#123;</span><br><span class="line">   <span class="keyword">if</span>(head == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">p</span> <span class="operator">=</span> head,q = head;</span><br><span class="line">    <span class="keyword">while</span> (p.next != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">while</span> (q.next != <span class="literal">null</span> &amp;&amp; p.val == q.val) q = q.next;</span><br><span class="line">        <span class="keyword">if</span> (p.val == q.val) &#123;</span><br><span class="line">            p.next = <span class="literal">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            p.next = q;</span><br><span class="line">            p = p.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>求字符串能分割成的所有ipv4地址</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> List&lt;List&lt;Integer&gt;&gt; res;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">helper</span><span class="params">(String ip, <span class="type">int</span> cur, List&lt;Integer&gt; item)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (item.size() == <span class="number">3</span> &amp;&amp; cur &lt; ip.length()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> ip.substring(cur);</span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> Integer.parseInt(s);</span><br><span class="line">            <span class="keyword">if</span> (!(<span class="number">0</span> &lt;= i &amp;&amp; i &lt; <span class="number">256</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (cur &gt;= ip.length()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (item.size() == <span class="number">4</span>)</span><br><span class="line">                res.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(item));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="number">4</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> cur; i &lt; cur + <span class="number">3</span> &amp;&amp; i &lt; ip.length(); i++) &#123;</span><br><span class="line">            sb.append(ip.charAt(i));</span><br><span class="line">            <span class="type">int</span> <span class="variable">digit</span> <span class="operator">=</span> Integer.parseInt(sb.toString());</span><br><span class="line">            <span class="keyword">if</span> (<span class="number">0</span> &lt;= digit &amp;&amp; digit &lt; <span class="number">256</span>) &#123;</span><br><span class="line">                item.add(digit);</span><br><span class="line">                helper(ip, i + <span class="number">1</span>, item);</span><br><span class="line">                item.remove(item.size() - <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (ip.charAt(i) == <span class="string">&#x27;0&#x27;</span>) <span class="keyword">break</span>; <span class="comment">// 多个0是否算作一个0</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">ip</span> <span class="operator">=</span> <span class="string">&quot;000as&quot;</span>;</span><br><span class="line">        res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        helper(ip, <span class="number">0</span>, <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;());</span><br><span class="line">        <span class="keyword">if</span> (res.size() == <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;该字符串不能转化成有效的ipv4地址！！！&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (List&lt;Integer&gt; item : res) &#123;</span><br><span class="line">                System.out.println(item);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>按照出现次数排序（降序），相同按照数字大小升序</strong><br><strong>例：[ 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5 ]</strong><br><strong>[ 4, 4, 4, 4, 3, 3, 3, 2, 2, 1, 5 ]</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Elem</span>&#123;</span><br><span class="line">        <span class="type">int</span> digit;</span><br><span class="line">        <span class="type">int</span> count;</span><br><span class="line">        Elem(<span class="type">int</span> digit, <span class="type">int</span> count)&#123;</span><br><span class="line">            <span class="built_in">this</span>.digit = digit;</span><br><span class="line">            <span class="built_in">this</span>.count = count;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> sc.nextInt(); <span class="comment">//表示元素的个数</span></span><br><span class="line">        HashMap&lt;Integer, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">            map.merge(t, <span class="number">1</span>, Integer::sum);</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;Elem&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Integer key : map.keySet()) &#123;</span><br><span class="line">            res.add(<span class="keyword">new</span> <span class="title class_">Elem</span>(key, map.get(key)));</span><br><span class="line">        &#125;</span><br><span class="line">        res.sort((o1,o2)-&gt;&#123;</span><br><span class="line">            <span class="keyword">if</span> (o1.count &gt; o2.count) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (o1.count &lt; o2.count) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> Integer.compare(o1.digit, o2.digit);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">for</span> (Elem e : res) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; e.count; i++) &#123;</span><br><span class="line">                System.out.print(e.digit+<span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line"><span class="number">11</span></span><br><span class="line"><span class="number">5</span> <span class="number">2</span> <span class="number">2</span> <span class="number">3</span> <span class="number">3</span> <span class="number">3</span> <span class="number">4</span> <span class="number">4</span> <span class="number">4</span> <span class="number">4</span> <span class="number">1</span></span><br><span class="line"><span class="number">4</span> <span class="number">4</span> <span class="number">4</span> <span class="number">4</span> <span class="number">3</span> <span class="number">3</span> <span class="number">3</span> <span class="number">2</span> <span class="number">2</span> <span class="number">1</span> <span class="number">5</span> </span><br></pre></td></tr></table></figure><p><strong>由小写字母和’+’ , ‘-’ , ‘(’ , ‘)’ 组成的两个字符串是否等效</strong><br><strong>例：“a-(b-c+a)” 和 “c-b”等效</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">由小写字母和’+’ , ‘-’ , ‘(’ , ‘)’ 组成的两个字符串是否等效</span></span><br><span class="line"><span class="comment">例：“a-(b-c+a)” 和 &quot;c-b&quot;等效</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">a-(b-c+(b-c)-(c-d))</span></span><br><span class="line"><span class="comment">a-(b-a-(b-a))</span></span><br><span class="line"><span class="comment">a-((a-b)+c-d)</span></span><br><span class="line"><span class="comment">a-(a-b+c-d)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">char</span>[] express = sc.next().toCharArray();</span><br><span class="line">        <span class="type">int</span>[] d = <span class="keyword">new</span> <span class="title class_">int</span>[express.length]; <span class="comment">//d[i]记录元素express[i]前面的有效负号个数</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        d[i] = d[stack.peekLast()];</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        express[i-1] == &#x27;-&#x27;</span></span><br><span class="line"><span class="comment">            d[i] = d[stack.peekLast()] + 1;</span></span><br><span class="line"><span class="comment">          或d[i] = d[i-1] + 1;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Deque&lt;Integer&gt; stack = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;(); <span class="comment">//记录左括号&#x27;(&#x27;的下标位置</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; express.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (express[i] == <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (stack.isEmpty()) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; express[i-<span class="number">1</span>] == <span class="string">&#x27;-&#x27;</span>) &#123;</span><br><span class="line">                        d[i] = d[i - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">                        stack.addLast(i);</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    d[i] = <span class="number">0</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (express[i - <span class="number">1</span>] == <span class="string">&#x27;-&#x27;</span>) &#123;</span><br><span class="line">                    d[i] = d[i - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">                    stack.addLast(i);</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    d[i] = d[stack.peekLast()];</span><br><span class="line">                &#125;</span><br><span class="line">                stack.addLast(i);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (express[i] == <span class="string">&#x27;)&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (stack.isEmpty()) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;表达式ERROR&quot;</span>);</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                d[i] = d[stack.pollLast()];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (stack.isEmpty()) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; express[i - <span class="number">1</span>] == <span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">                        d[i] = d[i - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (express[i - <span class="number">1</span>] == <span class="string">&#x27;-&#x27;</span>) &#123;</span><br><span class="line">                    d[i] = d[i - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                d[i] = d[stack.peekLast()];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//a-(a-(c-d))</span></span><br><span class="line"><span class="comment">//a-b-c-d-(a-b-(c-d)-a-b-(a-d))</span></span><br><span class="line"><span class="comment">//a-(a-(c-d)-(a-d))</span></span><br><span class="line"><span class="comment">//a+(a+(c-d)-(a-d))</span></span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/a724888/article/details/81186950">参考链接</a></p><p>lhn<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setAdd</span><span class="params">(Set&lt;Integer&gt; set, Integer i)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!set.add(i)) &#123;</span><br><span class="line">            set.remove(i);</span><br><span class="line"></span><br><span class="line">            setAdd(set, i &lt;&lt; <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">        Integer[] array = <span class="keyword">new</span> <span class="title class_">Integer</span>[n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">            array[i] = scanner.nextInt();</span><br><span class="line">        &#125;</span><br><span class="line">        LinkedHashSet&lt;Integer&gt; res = <span class="keyword">new</span> <span class="title class_">LinkedHashSet</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">            setAdd(res, array[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        Iterator&lt;Integer&gt; iterator = res.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            System.out.print(iterator.next());</span><br><span class="line">            <span class="keyword">if</span> (iterator.hasNext()) System.out.print(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单调栈</title>
      <link href="/JeckFS/2020/08/24/%E5%8D%95%E8%B0%83%E6%A0%88/"/>
      <url>/JeckFS/2020/08/24/%E5%8D%95%E8%B0%83%E6%A0%88/</url>
      
        <content type="html"><![CDATA[<img src="/JeckFS/2020/08/24/%E5%8D%95%E8%B0%83%E6%A0%88/1.png" class="" title="This is 1-th image."><img src="/JeckFS/2020/08/24/%E5%8D%95%E8%B0%83%E6%A0%88/2.png" class="" title="This is 2-th image."><hr><h1 id="题目零-补充题目：删除k个数字后使得剩下的数字最小"><a href="#题目零-补充题目：删除k个数字后使得剩下的数字最小" class="headerlink" title="题目零 补充题目：删除k个数字后使得剩下的数字最小"></a>题目零 <a href="https://jeckfs.gitee.io/2020/08/16/%E5%88%A0%E9%99%A4k%E4%B8%AA%E6%95%B0%E5%AD%97%E5%90%8E%E4%BD%BF%E5%BE%97%E5%89%A9%E4%B8%8B%E7%9A%84%E6%95%B0%E5%AD%97%E6%9C%80%E5%B0%8F/">补充题目：删除k个数字后使得剩下的数字最小</a></h1><hr><h1 id="题目一-力扣84题：柱状图中最大的矩形"><a href="#题目一-力扣84题：柱状图中最大的矩形" class="headerlink" title="题目一 力扣84题：柱状图中最大的矩形"></a>题目一 <a href="https://leetcode-cn.com/problems/largest-rectangle-in-histogram/">力扣84题：柱状图中最大的矩形</a></h1><p>首先分析<strong>暴力解法</strong>，暴力解法是探索是否使用单调栈解题的关键步骤。首先看暴力解法中是否需要用到单调栈的特性，即</p><ul><li>单调递增（不减）栈可以找到左边第一个比当前出栈元素小（包含等于）的元素。</li><li>单调递减（不增）栈可以找到左边第一个比当前出栈元素大（包含等于）的元素。</li></ul><p>若需要用到这个特性则可以使用单调栈。</p><p>对于本地首先看暴力解法：从某个柱子开始，向左右两边遍历能够到达的最远的且高度大于等于当前柱子高度的宽度。使用该最大宽度 × 该柱子高度，就是以该柱子为基准能够找到的最大矩形。这是找以某个柱子为基准所能扩展的最大矩阵的方法。</p><p>换种想法，假设柱子$i$的高度大于柱子$j$的高度，那么在计算柱子$i$为基准能够扩展的最大矩阵中一定不包含柱子$j$。也就是说矮柱子限制了高柱子的扩展范围。</p><p>这样找基准柱子的所能扩展的最大矩阵问题可以转化为，找该基准柱子两边高度比它小的柱子。分析到此，只差一步就可以确定要使用单调栈了。</p><p>换一种思路来想，我们找基准柱子左右两边连续的大于基准柱子高度的柱子，可以转化为分别找基准柱左边和右边第一个高度小于基准柱子的柱子。假设左边基准柱子的下标位置为$a$，右边基准柱子的下标位置为$b$，基准柱子的高度为$h$，则包含该基准柱子的最大矩形就是$(b-a-1)\times h$。</p><p>来看本题是如何使用单调递增栈的。从左至右，遍历每个柱子，对于高度高于栈顶的柱子进行入栈。这里我们使用严格的单调递增栈。当遍历到柱子高度小于栈顶柱子高度的时候，我们就可以确定栈顶柱子的右边第一个高度小于基准柱子高度的柱子下标。栈顶柱子的上一个被压栈的柱子就是栈顶柱子左边第一个高度小于栈顶柱子的柱子。由此可以确定包含基准柱子的最大矩形。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="comment">// 中文83.82% 11ms</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">largestRectangleArea</span><span class="params">(<span class="type">int</span>[] heights)</span> &#123;</span><br><span class="line">        Deque&lt;Integer&gt; stack = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">maxArea</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span>[] newH = <span class="keyword">new</span> <span class="title class_">int</span>[heights.length + <span class="number">2</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; heights.length; i++) &#123;</span><br><span class="line">            newH[i + <span class="number">1</span>] = heights[i];</span><br><span class="line">        &#125;</span><br><span class="line">        stack.addLast(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; newH.length; i++) &#123;</span><br><span class="line">            <span class="keyword">while</span> (!stack.isEmpty() &amp;&amp; newH[i] &lt; newH[stack.peekLast()]) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">h</span> <span class="operator">=</span> newH[stack.pollLast()];</span><br><span class="line">                <span class="keyword">if</span> (!stack.isEmpty()) &#123;</span><br><span class="line">                    maxArea = Math.max(maxArea, (i - stack.peekLast() - <span class="number">1</span>) * h);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    maxArea = Math.max(maxArea, i * h);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (newH[i] == newH[stack.peekLast()]) &#123;</span><br><span class="line">                stack.pollLast();</span><br><span class="line">            &#125;</span><br><span class="line">            stack.addLast(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxArea;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实并没有上面描述的那么复杂。</p><p>其实，单调栈可以不要求柱子高度严格单调递增。<br>当柱子 idx 出栈后，栈顶元素高度一定不比栈顶元素高(等于或小于栈顶元素)。这时就可以计算栈顶元素与当前柱子i所围成的面积。一定可以知道的是，当前柱子高度一定比出栈柱子矮。所以栈顶柱子与当前柱子之间的柱子就是出栈柱子<strong>向右至当前柱子(不包括当前柱子)</strong>所围成的最大矩形。为什么是向右，是因为栈的的柱子高度是可以相等的。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">largestRectangleArea</span><span class="params">(<span class="type">int</span>[] heights)</span> &#123;</span><br><span class="line">    Deque&lt;Integer&gt; stack = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">    <span class="type">int</span>[] highs = <span class="keyword">new</span> <span class="title class_">int</span>[heights.length + <span class="number">2</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; heights.length; i++) &#123;</span><br><span class="line">        highs[i + <span class="number">1</span>] = heights[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">maxArea</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 0, 2, 1, 5, 0, 2, 3, 0</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; highs.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (stack.isEmpty() || highs[stack.peekLast()] &lt;= highs[i]) &#123;</span><br><span class="line">            stack.addLast(i);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 循环出栈, 并计算出栈柱子的所围的最大矩形</span></span><br><span class="line">            <span class="keyword">while</span> (!stack.isEmpty() &amp;&amp; highs[stack.peekLast()] &gt; highs[i]) &#123;</span><br><span class="line">                <span class="type">Integer</span> <span class="variable">idx</span> <span class="operator">=</span> stack.pollLast();</span><br><span class="line">                maxArea = Math.max(maxArea, highs[idx] * (i - stack.peekLast() - <span class="number">1</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            stack.addLast(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxArea;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>简化后就变成如下形式，上面的好理解。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">largestRectangleArea</span><span class="params">(<span class="type">int</span>[] heights)</span> &#123;</span><br><span class="line">    Deque&lt;Integer&gt; stack = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">    <span class="type">int</span>[] highs = <span class="keyword">new</span> <span class="title class_">int</span>[heights.length + <span class="number">2</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; heights.length; i++) &#123;</span><br><span class="line">        highs[i + <span class="number">1</span>] = heights[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">maxArea</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 0, 2, 1, 5, 0, 2, 3, 0</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; highs.length; i++) &#123;</span><br><span class="line">        <span class="comment">// 循环出栈, 并计算出栈柱子的所围的最大矩形</span></span><br><span class="line">        <span class="keyword">while</span> (!stack.isEmpty() &amp;&amp; highs[stack.peekLast()] &gt; highs[i]) &#123;</span><br><span class="line">            <span class="type">Integer</span> <span class="variable">idx</span> <span class="operator">=</span> stack.pollLast(); </span><br><span class="line">            maxArea = Math.max(maxArea, highs[idx] * (i - stack.peekLast() - <span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        stack.addLast(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxArea;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="题目二-力扣42题：接雨水"><a href="#题目二-力扣42题：接雨水" class="headerlink" title="题目二 力扣42题：接雨水"></a>题目二 <a href="https://leetcode-cn.com/problems/trapping-rain-water/">力扣42题：接雨水</a></h1><p>这道题类似力扣84题。</p><p><a href="https://leetcode-cn.com/problems/trapping-rain-water/solution/jie-yu-shui-by-leetcode/">视频解析</a></p><p>为了方便说明，定义一些变量。<br>假设基准柱子为$base(i)$；其左边最高的柱子为$leftBase(i)$，右边最高的柱子为$rightBase(i)$。</p><h2 id="解法一：暴力解法"><a href="#解法一：暴力解法" class="headerlink" title="解法一：暴力解法"></a>解法一：暴力解法</h2><p>对于每个柱子，在它上面可以盛$\min{(leftBase(i),rightBase(i))}-base(i)$单位的水。对于每个柱子都需要遍历所有的柱子来找到它$leftBase, rightBase$，所以时间复杂度为$O(n^2)$。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 暴力解法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="comment">// 击败8.65% 88ms</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">trap</span><span class="params">(<span class="type">int</span>[] height)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; height.length; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">leftBase</span> <span class="operator">=</span> height[i];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i-<span class="number">1</span>; j &gt;= <span class="number">0</span>; --j) &#123;</span><br><span class="line">                leftBase = Math.max(leftBase, height[j]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> <span class="variable">rightBase</span> <span class="operator">=</span> height[i];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i+<span class="number">1</span>; j &lt; height.length; j++) &#123;</span><br><span class="line">                rightBase = Math.max(rightBase, height[j]);</span><br><span class="line">            &#125;</span><br><span class="line">            res += Math.min(leftBase, rightBase) - height[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="解法二：使用单调递增栈"><a href="#解法二：使用单调递增栈" class="headerlink" title="解法二：使用单调递增栈"></a>解法二：使用单调递增栈</h2><p><del>假设有两个柱子：$i$和$j$，假设$height[i]&gt;=height[j]$，那么柱子$i$的左右两边的最高柱子一定是柱子$j$的左右两边最高柱子。根据这个性质，我们可以使用单调递增栈来优化。对于单调递增栈两个相邻元素之间的柱子，他们左右两边的最高柱子都是相同的。</del></p><img src="/JeckFS/2020/08/24/%E5%8D%95%E8%B0%83%E6%A0%88/3.png" class="" title="This is 3-th image."><p>比如对于第3个和第4个柱子，它们各自左右两边的最高柱子都是柱子2和柱子6。我们可以使用单调递增栈来保存$leftBase$，对于$rightBase$我们在入栈时来做判定。当即将入栈的元素大于等于栈顶元素时，将栈顶元素出栈，并计算两个元素之间的柱子的存水量。否则该元素不能入栈。</p><p>这样做有一个问题：不能最高柱子的后面的柱子的存储量，假设最高柱子下标为$highest$（当最高柱子不止一个时，但是只有最后一个最高柱子后面的柱子没有计算），解决办法是将height数组逆置，将后面没有计算的柱子计算出来。当然我们只要计算到逆置后的第$height.length-highest$即可。</p><p>对于上图所示的例子而言，其单调栈的入栈过程如下：</p><p>第0个柱子入栈，第1个柱子小于栈顶元素则选择不入栈，第2个柱子大于等于栈顶元素，则将栈顶元素出栈并将中间柱子1能够盛的水计算出来即$(2-1)\times (2-0+1)=1$。并将第2个柱子入栈。以此类推。</p><p>对比一下暴力解法：<br>暴力解法慢的原因在于对于每一个柱子都需要遍历所有柱子才能找到其左右两边的最大柱子。而是用这种单调递增栈的方式可以保存左边最高柱子。我们找的是<strong>栈顶柱子能够构成的最大储水量</strong>。比如假设栈顶柱子是柱子2，我们要找柱子2所围成的“最大水池”，是需要找柱子2右边第一个高于柱子2的柱子。虽然柱子5是可以与柱子3存储1单位的水的，但是对于柱子2而言，我们不需要关系这个。因为柱子6的高度比柱子2的高度更高，柱子3与柱子5所围成的水池是柱子2所围成水池的一部分，所以对于小于栈顶元素的柱子可以忽略。所以使用单调递增栈可以找到栈顶柱子A的右边第一个高于该柱子的柱子B。柱子A与柱子B围成了柱子A所围成的最大水池。我们只需要统计柱子AB之间的柱子的储水量就可以了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="comment">// 击败44.75% 2ms</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">trap</span><span class="params">(<span class="type">int</span>[] height)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>, len = height.length;</span><br><span class="line">        Deque&lt;Integer&gt; stack = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">time</span> <span class="operator">=</span> <span class="number">0</span>; time &lt; <span class="number">2</span>; time++) &#123;</span><br><span class="line">            stack.addLast(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; len; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!stack.isEmpty() &amp;&amp; height[i] &gt;= height[stack.peekLast()]) &#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">leftBase</span> <span class="operator">=</span> stack.pollLast();</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> leftBase+<span class="number">1</span>; j &lt; i; j++) &#123;</span><br><span class="line">                        res += Math.min(height[leftBase], height[i]) - height[j];</span><br><span class="line">                    &#125;</span><br><span class="line">                    stack.addLast(i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!stack.isEmpty())</span><br><span class="line">                len = height.length - stack.pollLast();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">low</span> <span class="operator">=</span> <span class="number">0</span>, high = height.length-<span class="number">1</span>; low &lt; high; low++, --high) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> height[low];</span><br><span class="line">                height[low] = height[high];</span><br><span class="line">                height[high] = t;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本题的解法很多，用到的算法也非常非常经典。下面是我对其他解法的理解：</p><h2 id="解法三：双指针解法"><a href="#解法三：双指针解法" class="headerlink" title="解法三：双指针解法"></a>解法三：双指针解法</h2><p>双指针解法其实就是<code>单调递增栈优化解法</code>的优化版，因为单调递增栈中始终只保存了左边最高的柱子。这个左边最大柱子可以用一个变量来保存。针对单调递增栈出现的问题，使用一个变量来保存右边最高柱子。使用双指针从最左边和最右边开始向中间走，走的过程中不断更新$leftMax$和$rightMax$。那么中间柱子$i$的存水量就是$\min{(leftMax,rightMax)}-height[i]$。直到左右指针重叠结束。整个算法时间复杂度为$O(n)$。极为经典，极为经典，极为经典。双指针运用到的刀刃上，不得不佩服。</p><p>本地的核心是，使用<code>leftMax</code>和<code>rightMax</code>来保存一个供左右指针计算结果的状态（<code>leftMax</code>保存了柱子<code>left</code>左边最高的柱子；<code>rightMax</code>保存了柱子<code>right</code>右边最高的柱子）。每个柱子的存水量是与<code>leftMax</code>和<code>rightMax</code>相关的。</p><img src="/JeckFS/2020/08/24/%E5%8D%95%E8%B0%83%E6%A0%88/4.png" class="" title="This is 4-th image."><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="comment">// 击败99.99% 1ms</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">trap</span><span class="params">(<span class="type">int</span>[] height)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (height.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>, right = height.length - <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">leftMax</span> <span class="operator">=</span> height[left], rightMax = height[right], ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">            <span class="keyword">if</span> (height[left] &lt; height[right]) &#123;</span><br><span class="line">                <span class="keyword">if</span> (height[left] &gt; leftMax) &#123;</span><br><span class="line">                    leftMax = height[left];</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    ans += leftMax - height[left];</span><br><span class="line">                &#125;</span><br><span class="line">                ++left;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (height[right] &gt; rightMax) &#123;</span><br><span class="line">                    rightMax = height[right];</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    ans += rightMax - height[right];</span><br><span class="line">                &#125;</span><br><span class="line">                --right;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个优化点：$leftMax=rightMax=0$。相当于在$height$左边界和右边界分别加了一个0高度的柱子。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="comment">// 击败99.99% 1ms</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">trap</span><span class="params">(<span class="type">int</span>[] height)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>, right = height.length - <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">leftMax</span> <span class="operator">=</span> <span class="number">0</span>, rightMax = <span class="number">0</span>, ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">            <span class="keyword">if</span> (height[left] &lt; height[right]) &#123;</span><br><span class="line">                <span class="keyword">if</span> (height[left] &gt; leftMax) &#123;</span><br><span class="line">                    leftMax = height[left];</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    ans += leftMax - height[left];</span><br><span class="line">                &#125;</span><br><span class="line">                ++left;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (height[right] &gt; rightMax) &#123;</span><br><span class="line">                    rightMax = height[right];</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    ans += rightMax - height[right];</span><br><span class="line">                &#125;</span><br><span class="line">                --right;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="解法四：使用单调递减栈"><a href="#解法四：使用单调递减栈" class="headerlink" title="解法四：使用单调递减栈"></a>解法四：使用单调递减栈</h2><p>我们来思考这种方法：同样是计算每个柱子的存水量，与单调递增栈不同，它会将小于栈顶柱子高度的柱子入栈，若碰到高于栈顶的柱子，就说明栈顶柱子会存水，我们就出栈计算该出栈柱子的村水量。</p><font color="red" size="6">思考这种解法为什么是错的。</font><p>正确解法：<br>积水只能在低洼处形成，当后面的柱子高度比前面的低时，是无法接雨水的。所以使用单调递减栈存储可能储水的柱子，当找到一根比前面高的柱子，就可以计算接到的雨水。<br>使用栈来来计算每次可以储水的<strong>条形块</strong>。</p><img src="/JeckFS/2020/08/24/%E5%8D%95%E8%B0%83%E6%A0%88/5.png" class="" title="This is 5-th image."><p>第一个柱子高度为0，不管后面的柱子多高，水都会从左边流出，所以柱子0是不可能储水的。</p><img src="/JeckFS/2020/08/24/%E5%8D%95%E8%B0%83%E6%A0%88/6.png" class="" title="This is 6-th image."><p>第二个柱子高度为1，后面可能出现高度不低于1的柱子，所以柱子2是可能存储水的。其最长条形块如蓝色条块所示。</p><img src="/JeckFS/2020/08/24/%E5%8D%95%E8%B0%83%E6%A0%88/7.png" class="" title="This is 7-th image."><p>第三个柱子高度为0，不影响蓝色储水条形块。</p><img src="/JeckFS/2020/08/24/%E5%8D%95%E8%B0%83%E6%A0%88/8.png" class="" title="This is 8-th image."><p>第四个柱子高度为2，截断了储水条形块，变成如上图所示的样子。并将该积水量统计到答案中。</p><img src="/JeckFS/2020/08/24/%E5%8D%95%E8%B0%83%E6%A0%88/9.png" class="" title="This is 9-th image."><p>同理柱子4也可能与后面的柱子形成低洼处，可能的蓝色储水条形块如上图所示。</p><img src="/JeckFS/2020/08/24/%E5%8D%95%E8%B0%83%E6%A0%88/10.png" class="" title="This is 10-th image."><p>第五个柱子高度为1第六个柱子高度为0，不影响形成低洼。</p><img src="/JeckFS/2020/08/24/%E5%8D%95%E8%B0%83%E6%A0%88/11.png" class="" title="This is 11-th image."><p>第七个柱子高度为1，它与柱子5形成低洼，把该低洼处的村水量统计到答案中。</p><img src="/JeckFS/2020/08/24/%E5%8D%95%E8%B0%83%E6%A0%88/12.png" class="" title="This is 12-th image."><p>第八个柱子高度为3，它与柱子4形成低洼，把该低洼处的存水量统计到答案中。第八个柱子与其后的柱子仍然可能形成低洼如蓝色条块所示。</p><p>以此类推。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="comment">// 击败37.61% 3ms</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">trap</span><span class="params">(<span class="type">int</span>[] height)</span> &#123;</span><br><span class="line">        Deque&lt;Integer&gt; stack = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">        stack.addLast(<span class="number">0</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; height.length; i++) &#123;</span><br><span class="line">            <span class="keyword">while</span> (!stack.isEmpty() &amp;&amp; height[i] &gt; height[stack.peekLast()]) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">idx</span> <span class="operator">=</span> stack.pollLast();</span><br><span class="line">                <span class="keyword">if</span> (stack.isEmpty()) <span class="keyword">break</span>;</span><br><span class="line">                <span class="type">int</span> <span class="variable">h</span> <span class="operator">=</span> Math.min(height[i], height[stack.peekLast()]) - height[idx];</span><br><span class="line">                <span class="type">int</span> <span class="variable">width</span> <span class="operator">=</span> i - stack.peekLast() - <span class="number">1</span>;</span><br><span class="line">                res += h * width;</span><br><span class="line">            &#125;</span><br><span class="line">            stack.addLast(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>本算法使用的单调递减栈中允许存储相等高度的柱子，在计算储水量的时候，该柱子出栈后，栈顶的柱子高度与出栈柱子高度相同，在计算所围成低洼处的积水时，其面积为0。所以可以在单调递减栈存储高度相等的柱子。</strong></p><p>好好琢磨这种按照条形块的方式来计算积水的方法。太骚，这种方法已经浪出了天际。</p><p>这种方式是当当前柱子的高度大于栈顶柱子高度的时候，将栈顶柱子出栈，该出栈柱子的存水量由当前柱子和当前栈顶柱子围成。我们通过当前柱子和当前栈顶柱子计算出栈柱子的储水量。该条形块的面积通过计算出其宽和高来求得。宽高求法参见代码。</p><p>其积水计算的过程如下：</p><img src="/JeckFS/2020/08/24/%E5%8D%95%E8%B0%83%E6%A0%88/13.png" class="" title="This is 13-th image."><img src="/JeckFS/2020/08/24/%E5%8D%95%E8%B0%83%E6%A0%88/14.png" class="" title="This is 14-th image."><img src="/JeckFS/2020/08/24/%E5%8D%95%E8%B0%83%E6%A0%88/15.png" class="" title="This is 15-th image."><img src="/JeckFS/2020/08/24/%E5%8D%95%E8%B0%83%E6%A0%88/16.png" class="" title="This is 16-th image."><h2 id="解法五：动态规划解法"><a href="#解法五：动态规划解法" class="headerlink" title="解法五：动态规划解法"></a>解法五：动态规划解法</h2><p>还是回归到<code>暴力解法</code>，之所以暴力是因为在计算每个柱子的左右两边的最高柱子时都是重写计算，其结果没有保存下来重用。使用动态规划将每个柱子左边的最高柱子和右边最高的柱子保存在数组中，在计算每个柱子的存水量的时候直接拿来用。</p><p>状态定义：<br><code>leftMax[i]</code>表示柱子<code>i</code>左边的最高柱子。<br><code>rightMax[i]</code>表示柱子<code>i</code>右边的最高柱子。</p><p>状态转移方程：<br><code>leftMax[i]=max&#123;leftMax[i-1],height[i]&#125;，i从左至右</code><br><code>rightMax[i]=max&#123;rightMax[i+1],height[i]&#125;，i从右到左</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="comment">// 击败99.99% 1ms</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">trap</span><span class="params">(<span class="type">int</span>[] height)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (height.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span>[] leftMax = <span class="keyword">new</span> <span class="title class_">int</span>[height.length];</span><br><span class="line">        <span class="type">int</span>[] rightMax = <span class="keyword">new</span> <span class="title class_">int</span>[height.length];</span><br><span class="line">        leftMax[<span class="number">0</span>] = height[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; height.length; i++) &#123;</span><br><span class="line">            leftMax[i] = Math.max(leftMax[i-<span class="number">1</span>], height[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        rightMax[height.length - <span class="number">1</span>] = height[height.length - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> height.length-<span class="number">2</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            rightMax[i] = Math.max(rightMax[i+<span class="number">1</span>], height[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; height.length; i++) &#123;</span><br><span class="line">            ans += Math.min(leftMax[i], rightMax[i]) - height[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="题目三：力扣85题-最大矩形"><a href="#题目三：力扣85题-最大矩形" class="headerlink" title="题目三：力扣85题-最大矩形"></a>题目三：<a href="https://leetcode-cn.com/problems/maximal-rectangle/">力扣85题-最大矩形</a></h1><p>思路是这样的：<br>我们将每一层看成一个由 <code>1</code> 组成的柱子，我们计算柱子的最大矩形面积即可。</p><img src="/JeckFS/2020/08/24/%E5%8D%95%E8%B0%83%E6%A0%88/17.png" class="" title="This is 17-th image."><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">helper</span><span class="params">(<span class="type">int</span>[] highs)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">maxArea</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        Deque&lt;Integer&gt; stack = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; highs.length; i++) &#123;</span><br><span class="line">            <span class="keyword">while</span> (!stack.isEmpty() &amp;&amp; highs[stack.peekLast()] &gt; highs[i]) &#123;</span><br><span class="line">                <span class="type">Integer</span> <span class="variable">idx</span> <span class="operator">=</span> stack.pollLast();</span><br><span class="line">                maxArea = Math.max(maxArea, highs[idx] * (i - stack.peekLast() - <span class="number">1</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            stack.addLast(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxArea;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 击败74.49% 7ms(中文)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maximalRectangle</span><span class="params">(<span class="type">char</span>[][] matrix)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (matrix.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span>[] highs = <span class="keyword">new</span> <span class="title class_">int</span>[matrix[<span class="number">0</span>].length + <span class="number">2</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; matrix.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; matrix[<span class="number">0</span>].length; j++) &#123;</span><br><span class="line">                highs[j+<span class="number">1</span>] = matrix[i][j] == <span class="string">&#x27;1&#x27;</span> ? highs[j+<span class="number">1</span>]+<span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 使用单调递增栈计算最大举行</span></span><br><span class="line">            res = Math.max(res, helper(highs));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 单调栈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 单调栈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java程序对拍</title>
      <link href="/JeckFS/2020/08/23/Java%E7%A8%8B%E5%BA%8F%E5%AF%B9%E6%8B%8D/"/>
      <url>/JeckFS/2020/08/23/Java%E7%A8%8B%E5%BA%8F%E5%AF%B9%E6%8B%8D/</url>
      
        <content type="html"><![CDATA[<h1 id="0-功能简介及技术点"><a href="#0-功能简介及技术点" class="headerlink" title="0.功能简介及技术点"></a>0.功能简介及技术点</h1><ol><li>设计模式的应用<ol><li>使用策略模式<br>针对不同的题目，其测试用例可能是不同的。本测试框架要求用户自己提供生成测试用例的类，该类中只有一个生成测试用力的方法。本测试框架将生成测试用例的类作为一个成员变量来使用，利用<code>多态</code>来调用具体实现类中的测试用例生成方法。<blockquote><p>不同的算法题可能有不同的测试用例，用户需要提供具体的测试用例生成的类。该类需要实现<code>ICasesGeneMethod</code>接口，并实现<code>geneCases()</code>，该方法返回一个由String元素组成的List集合。</p></blockquote></li><li>使用模板模式<br>用户只需要提供一个生成测试用例的方法即可。其他的交由框架来处理，处理的逻辑利用模板模式封装在框架中。</li><li>使用单例模式<br>Java中的<code>System.in</code>是通过单例的，所以<code>Scanner</code>类在整个应用程序有且只能有一个。若Scanner对象作为一个局部变量使用，则应用程序其他地方将不能再使用<code>Scanner</code>类进行输入。被测的两个目标程序要求是需要通过<code>Scanner</code>类来进行输入，所以本测试框架将<code>Scanner</code>类作为一个全局的单例变量来使用。</li></ol></li><li>反射的使用<br>通过反射调用运行两个被测的目标程序。</li><li><code>System.out</code>重定向、<code>System.in</code>重定向<br>使用<code>System.out</code>将目标程序的输出存入文件。在使用<code>Scanner</code>类进行读入的时候，重定向<code>System.in</code>从文件中输入。</li><li>异常处理<br>框架提供了几种生成测试用例的方法。如生成 n 个随机数字，随机生成一个大写字符串、小写字符串、大小写混合字符串、可见字符串、以及对应的包含指定字符的字符串等等。这些方法都做了参数校验，校验不通过会抛出相应的异常。</li><li>文件的读写</li></ol><h1 id="1-包目录结构"><a href="#1-包目录结构" class="headerlink" title="1.包目录结构"></a>1.包目录结构</h1><img src="/JeckFS/2020/08/23/Java%E7%A8%8B%E5%BA%8F%E5%AF%B9%E6%8B%8D/1.png" class="" title="This is 1-th image."><h1 id="2-测试框架使用步骤"><a href="#2-测试框架使用步骤" class="headerlink" title="2.测试框架使用步骤"></a>2.测试框架使用步骤</h1><ol><li>在<code>custom_gene_cases_method</code>包下，自定义custom gene cases method类<br>1.1 自定义gene cases method类，并实现<code>ICasesGeneMethod</code>接口<br>1.2 实现<code>ICasesGeneMethod</code>接口中的<code>geneCases()</code>。该方法返回产生的测试用例。</li><li>在<code>customtest</code>下，自定义customtest测试类，并继承自<code>AbstractTestUtils</code>。该类需要传入自定义gene cases method类。</li><li>将自定义gene cases method类 作为参数传递给 自定义customtest测试类。并调用自定义gene cases method类的run()方法。</li><li>将两个目标程序拷贝进<code>waitfortest</code>目录下。并对该类稍作改动。<br>4.1 使两个目标程序继承<code>BaseIO</code><br>4.2 注释掉新建Scanner对象语句。因为需要使用框架提供的Scanner类。否则报错。</li><li>运行MainTest类即可看到比对结果。</li></ol><h1 id="3-补充"><a href="#3-补充" class="headerlink" title="3.补充"></a>3.补充</h1><ol><li><p>该测试框架只能查到两个程序输出结果不一致的测试用例。</p></li><li><p>当控制台打印Error，并抛出异常后，cases.txt中存储的就是结果不一致的测试用例。</p></li><li><p>custom_gene_cases_method包中的类可以删除掉。</p></li><li><p>为了节省测试效率，最好使用customtest包下提供的MyTest类进行测试。</p></li></ol><h1 id="4-注意"><a href="#4-注意" class="headerlink" title="4.注意"></a>4.注意</h1><p>严格控制目标程序的输出。<br>差一点，哪怕多输出一个空格产生的不一致，也不能通过检测。<br>所以输出时，要严格把控输出。目标程序开发者应协商好。</p><font size="16" color="red">【注意】为了方便将测试用例输出到文件中，测试用例集合中的元素最好保存成String类型。切记切记</font><h1 id="5-代码说明"><a href="#5-代码说明" class="headerlink" title="5.代码说明"></a>5.代码说明</h1><h1 id="6-示例"><a href="#6-示例" class="headerlink" title="6.示例"></a>6.示例</h1><p>程序默认提供了一个测试示例。运行MainTest即可</p>]]></content>
      
      
      <categories>
          
          <category> 小玩意儿 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小玩意儿 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>牛客-猿辅导-发水果</title>
      <link href="/JeckFS/2020/08/22/%E7%89%9B%E5%AE%A2-%E7%8C%BF%E8%BE%85%E5%AF%BC-%E5%8F%91%E6%B0%B4%E6%9E%9C/"/>
      <url>/JeckFS/2020/08/22/%E7%89%9B%E5%AE%A2-%E7%8C%BF%E8%BE%85%E5%AF%BC-%E5%8F%91%E6%B0%B4%E6%9E%9C/</url>
      
        <content type="html"><![CDATA[<p><strong>题目描述</strong></p><p>中午是猿辅导水果时间，小猿会给每个同学发水果。猿辅导有一个矩形的办公区域，共有N 排，每排M个工位。平时小猿按照从第一排到最后一排的顺序发水果，某一天小猿突然发现似乎旋转着发水果是一种更有趣的方式，所以决定试试按照逆时针方向螺旋发水果。已知每个工位有一个数字，表示该工位员工的工号，每个员工的工号不同。已知小猿从（0, 0）位置开始，按照逆时针螺旋的顺序发水果，请输出收到水果的员工工号序列。</p><p><strong>输入描述:</strong><br>第一行 两个数， 数组行列 N，M<br>接下来 N 行，每行 M 个正整数，表示每个位置的员工工号<br>1 ≤ N ≤ 1000<br>1 ≤ M ≤ 1000</p><p><strong>输出描述:</strong><br>发放水果工号序列</p><p><strong>输入例子1:</strong><br>3 3<br>1 2 3<br>4 5 6<br>7 8 9</p><p><strong>输出例子1:</strong><br>1 4 7 8 9 6 3 2 5</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 发水果</span></span><br><span class="line"><span class="comment"> * https://www.nowcoder.com/question/next?pid=20967860&amp;qid=808558&amp;tid=36338492</span></span><br><span class="line"><span class="comment"> * 状态： AC</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">helper</span><span class="params">(<span class="type">int</span>[][] arr, <span class="type">int</span> N, <span class="type">int</span> M)</span> &#123;</span><br><span class="line">        <span class="type">boolean</span>[][] visited = <span class="keyword">new</span> <span class="title class_">boolean</span>[N][M];</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, j = <span class="number">0</span>, top = <span class="number">0</span>, flag = <span class="number">0</span>, cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// flag: 0(从上过来) 1(从左过来) 2(从下过来) 3(从右过来)</span></span><br><span class="line">        <span class="keyword">while</span> (cnt &lt; N * M) &#123;</span><br><span class="line">            <span class="keyword">if</span> (valid(i, j, N, M, visited)) &#123;</span><br><span class="line">                System.out.print(arr[i][j]+<span class="string">&quot; &quot;</span>);</span><br><span class="line">                visited[i][j] = <span class="literal">true</span>;</span><br><span class="line">                ++cnt;</span><br><span class="line">                <span class="keyword">switch</span> (flag) &#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                        ++i;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                        ++j;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                        --i;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                        --j;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 转向判断</span></span><br><span class="line">                <span class="keyword">switch</span> (flag) &#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                        --i;</span><br><span class="line">                        ++j;</span><br><span class="line">                        flag = <span class="number">1</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                        --j;</span><br><span class="line">                        --i;</span><br><span class="line">                        flag = <span class="number">2</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                        ++i;</span><br><span class="line">                        --j;</span><br><span class="line">                        flag = <span class="number">3</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                        ++j;</span><br><span class="line">                        ++i;</span><br><span class="line">                        flag = <span class="number">0</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">valid</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j, <span class="type">int</span> N, <span class="type">int</span> M, <span class="type">boolean</span>[][] visited)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> i &gt;= <span class="number">0</span> &amp;&amp; i &lt; N &amp;&amp; j &gt;= <span class="number">0</span> &amp;&amp; j &lt; M &amp;&amp; !visited[i][j];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">N</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">        <span class="type">int</span> <span class="variable">M</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">        <span class="type">int</span>[][] arr = <span class="keyword">new</span> <span class="title class_">int</span>[N][M];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; M; j++) &#123;</span><br><span class="line">                arr[i][j] = sc.nextInt();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        helper(arr, N, M);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 牛客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 牛客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis</title>
      <link href="/JeckFS/2020/08/17/Redis/"/>
      <url>/JeckFS/2020/08/17/Redis/</url>
      
        <content type="html"><![CDATA[<h1 id="1-使用缓存为系统带来了什么问题"><a href="#1-使用缓存为系统带来了什么问题" class="headerlink" title="1.使用缓存为系统带来了什么问题"></a>1.使用缓存为系统带来了什么问题</h1><p>使用本地缓存带来的不良影响很小，几乎没有。<br>对于分布式缓存有以下不良影响：</p><ul><li><strong>系统复杂性增加</strong> ：引入缓存之后，你要<strong>维护缓存和数据库的数据一致性</strong>、<strong>维护热点缓存</strong>等等。</li><li><strong>系统开发成本往往会增加</strong> ：引入缓存意味着系统需要一个单独的缓存服务，这是需要花费相应的成本的，并且这个成本还是很贵的，毕竟耗费的是宝贵的内存。但是，如果你只是简单的使用一下本地缓存存储一下简单的数据，并且数据量不大的话，那么就不需要单独去弄一个缓存服务。</li></ul><h1 id="2-本地缓存解决方案"><a href="#2-本地缓存解决方案" class="headerlink" title="2.本地缓存解决方案"></a>2.本地缓存解决方案</h1><blockquote><p>分布式缓存主要解决的是单机缓存的容量受服务器限制并且无法保存通用的信息。因为，本地缓存只在当前服务里有效，比如如果你部署了两个相同的服务，他们两者之间的缓存数据是无法共同的。</p></blockquote><h2 id="2-1-单体架构图"><a href="#2-1-单体架构图" class="headerlink" title="2.1 单体架构图"></a>2.1 单体架构图</h2><p>使用 <strong>Nginx 来做负载均衡</strong>，部署两个相同的服务到服务器，两个服务使用同一个数据库，并且使用的是本地缓存。</p><div style="width:50%;margin:auto"><img src="/JeckFS/2020/08/17/Redis/1.png" class="" title="This is 1-th image."></div><h2 id="2-2-本地缓存的方案"><a href="#2-2-本地缓存的方案" class="headerlink" title="2.2 本地缓存的方案"></a>2.2 本地缓存的方案</h2><p><strong>一：JDK 自带的 HashMap 和 ConcurrentHashMap 了。</strong></p><p>ConcurrentHashMap 可以看作是线程安全版本的 HashMap ，两者都是存放 key/value 形式的键值对。但是，大部分场景来说不会使用这两者当做缓存，因为只提供了缓存的功能，并没有提供其他诸如过期时间之类的功能。一个稍微完善一点的缓存框架至少要提供：<strong>过期时间、淘汰机制、命中率统计</strong>这三点。</p><p><strong>二： Ehcache 、 Guava Cache 、 Spring Cache 这三者是使用的比较多的本地缓存框架。</strong></p><ul><li><p>Ehcache 的话相比于其他两者更加重量。不过，相比于 Guava Cache 、 Spring Cache 来说， Ehcache 支持可以嵌入到 hibernate 和 mybatis 作为多级缓存，并且可以将缓存的数据持久化到本地磁盘中、同时也提供了集群方案（比较鸡肋，可忽略）。</p></li><li><p>Guava Cache 和 Spring Cache 两者的话比较像。</p></li><li><p>Guava 相比于 Spring Cache 的话使用的更多一点，它提供了 API 非常方便我们使用，同时也提供了设置缓存有效时间等功能。它的内部实现也比较干净，很多地方都和 ConcurrentHashMap 的思想有异曲同工之妙。</p></li><li><p>使用 Spring Cache 的注解实现缓存的话，代码会看着很干净和优雅，但是很容易出现问题比如缓存穿透、内存溢出。</p></li></ul><p><strong>三： 后起之秀 Caffeine。</strong><br>相比于 Guava 来说 Caffeine 在各个方面比如性能要更加优秀，一般建议使用其来替代 Guava 。并且， Guava 和 Caffeine 的使用方式很像！</p><p><strong>本地缓存的局限性：</strong></p><ul><li><strong>本地缓存对分布式架构支持不友好</strong>，比如同一个相同的服务部署在多台机器上的时候，各个服务之间的缓存是无法共享的，因为本地缓存只在当前机器上有。</li><li><strong>本地缓存容量受服务部署所在的机器限制明显</strong>。 如果当前系统服务所耗费的内存多，那么本地缓存可用的容量就很少。</li></ul><h1 id="3-缓存读写模式-更新策略"><a href="#3-缓存读写模式-更新策略" class="headerlink" title="3.缓存读写模式/更新策略"></a>3.缓存读写模式/更新策略</h1><h2 id="3-1-Cache-Aside-Pattern（旁路缓存模式）"><a href="#3-1-Cache-Aside-Pattern（旁路缓存模式）" class="headerlink" title="3.1. Cache Aside Pattern（旁路缓存模式）"></a>3.1. Cache Aside Pattern（旁路缓存模式）</h2><ul><li>写：更新 DB，然后直接删除 cache 。</li><li>读：从 cache 中读取数据，读取到就直接返回，读取不到的话，就从 DB 中取数据返回，然后再把数据放到 cache 中。<br>Cache Aside Pattern 中服务端需要同时维系 DB 和 cache，并且是以 DB 的结果为准。另外，Cache Aside Pattern 有首次请求数据一定不在 cache 的问题，对于热点数据可以提前放入缓存中。</li></ul><p><strong>Cache Aside Pattern 是我们平时使用比较多的一个缓存读写模式，比较适合读请求比较多的场景。</strong></p><h2 id="3-2-Read-Write-Through-Pattern（读写穿透）"><a href="#3-2-Read-Write-Through-Pattern（读写穿透）" class="headerlink" title="3.2. Read/Write Through Pattern（读写穿透）"></a>3.2. Read/Write Through Pattern（读写穿透）</h2><p>Read/Write Through 套路是：服务端把 cache 视为主要数据存储，从中读取数据并将数据写入其中。cache 服务负责将此数据读取和写入 DB，从而减轻了应用程序的职责。</p><ul><li>写（Write Through）：先查 cache，cache 中不存在，直接更新 DB。 cache 中存在，则先更新 cache，然后 cache 服务自己更新 DB（同步更新 cache 和 DB）。</li><li>读(Read Through)： 从 cache 中读取数据，读取到就直接返回 。读取不到的话，先从 DB 加载，写入到 cache 后返回响应。<br>Read-Through Pattern 实际只是在 Cache-Aside Pattern 之上进行了封装。在 Cache-Aside Pattern 下，发生读请求的时候，如果 cache 中不存在对应的数据，是由客户端自己负责把数据写入 cache，而 Read Through Pattern 则是 cache 服务自己来写入缓存的，这对客户端是透明的。</li></ul><p>和 Cache Aside Pattern 一样， Read-Through Pattern 也有首次请求数据一定不再 cache 的问题，对于热点数据可以提前放入缓存中。</p><h2 id="3-3-Write-Behind-Pattern（异步缓存写入）"><a href="#3-3-Write-Behind-Pattern（异步缓存写入）" class="headerlink" title="3.3. Write Behind Pattern（异步缓存写入）"></a>3.3. Write Behind Pattern（异步缓存写入）</h2><p>Write Behind Pattern 和 Read/Write Through Pattern 很相似，两者都是由 cache 服务来负责 cache 和 DB 的读写。</p><p>但是，两个又有很大的不同：<strong>Read/Write Through 是同步更新 cache 和 DB，而 Write Behind Caching 则是只更新缓存，不直接更新 DB，而是改为异步批量的方式来更新 DB。</strong></p><p><strong>Write Behind Pattern 下 DB 的写性能非常高，尤其适合一些数据经常变化的业务场景比如说一篇文章的点赞数量、阅读数量。</strong> 往常一篇文章被点赞 500 次的话，需要重复修改 500 次 DB，但是在 Write Behind Pattern 下可能只需要修改一次 DB 就可以了。</p><p>但是，这种模式同样也给 DB 和 Cache 一致性带来了新的考验，很多时候如果数据还没异步更新到 DB 的话，Cache 服务宕机就 gg 了。</p><h1 id="4-简单介绍一下-Redis-呗"><a href="#4-简单介绍一下-Redis-呗" class="headerlink" title="4.简单介绍一下 Redis 呗!"></a>4.简单介绍一下 Redis 呗!</h1><p>简单来说 <strong>Redis 就是一个使用 C 语言开发的数据库</strong>，不过与传统数据库不同的是 <strong>Redis 的数据是存在内存中的</strong> ，也就是它是内存数据库，所以读写速度非常快，因此 Redis 被广泛应用于缓存方向。</p><p>另外，<strong>Redis 除了做缓存之外，Redis 也经常用来做分布式锁，甚至是消息队列</strong>。</p><p><strong>Redis 提供了多种数据类型来支持不同的业务场景。Redis 还支持事务 、持久化、Lua 脚本、多种集群方案。</strong></p><h1 id="5-为什么要用-Redis-为什么要用缓存？"><a href="#5-为什么要用-Redis-为什么要用缓存？" class="headerlink" title="5.为什么要用 Redis/为什么要用缓存？"></a>5.为什么要用 Redis/为什么要用缓存？</h1><ul><li>高性能：数据直接存储在内存中，读写速度快。</li><li><p>高并发：一般像 MySQL 这类的数据库的 QPS 大概都在 1w 左右（4 核 8g） ，但是使用 Redis 缓存之后很容易达到 10w+，甚至最高能达到 30w+（就单机 redis 的情况，redis 集群的话会更高）。</p><blockquote><p>QPS（Query Per Second）：服务器每秒可以执行的查询次数；</p></blockquote></li><li><p>减少数据库压力。每个数据库的连接数量很少，并发访问数据库会导致数据库崩溃。</p></li></ul><h1 id="6-Redis-常见数据结构以及使用场景分析"><a href="#6-Redis-常见数据结构以及使用场景分析" class="headerlink" title="6.Redis 常见数据结构以及使用场景分析"></a>6.Redis 常见数据结构以及使用场景分析</h1><h2 id="6-1-string"><a href="#6-1-string" class="headerlink" title="6.1 string"></a>6.1 string</h2><ul><li>介绍 ：string 数据结构是简单的 key-value 类型。虽然 Redis 是用 C 语言写的，但是 Redis 并没有使用 C 的字符串表示，而是自己构建了一种 <strong>简单动态字符串</strong>（simple dynamic string，SDS）。相比于 C 的原生字符串，Redis 的 SDS 不光可以保存文本数据还可以保存二进制数据，并且获取字符串长度复杂度为 O(1)（C 字符串为 O(N)）,除此之外,Redis 的 SDS API 是安全的，不会造成缓冲区溢出。</li><li>常用命令: <code>set,get,strlen,exists,dect,incr,setex</code> 等等。</li><li>应用场景 ：一般常用在需要<strong>计数</strong>的场景，比如用户的访问次数、热点文章的点赞转发数量等等。</li></ul><h2 id="6-2-list"><a href="#6-2-list" class="headerlink" title="6.2 list"></a>6.2 list</h2><ul><li>介绍 ：Redis 的 list 的实现为一个 <strong>双向链表</strong>，即可以支持反向查找和遍历，更方便操作，不过带来了部分额外的内存开销。</li><li>常用命令: <code>rpush,lpop,lpush,rpop,lrange、llen</code> 等。</li><li>应用场景: <ul><li>发布与订阅或者说<strong>消息队列、慢查询</strong>。</li><li>通过 lrange 命令，你可以基于 list 实现<strong>分页查询</strong>，性能非常高！</li></ul></li></ul><img src="/JeckFS/2020/08/17/Redis/2.png" class="" title="This is 2-th image."><h2 id="6-3-hash"><a href="#6-3-hash" class="headerlink" title="6.3 hash"></a>6.3 hash</h2><ul><li>介绍 ：hash 类似于 JDK1.8 前的 HashMap，内部实现也差不多(<strong>数组 + 链表</strong>)。不过，Redis 的 hash 做了更多优化。另外，hash 是一个 string 类型的 field 和 value 的映射表，特别适合用于存储对象，后续操作的时候，你可以直接仅仅修改这个对象中的某个字段的值。 比如我们可以 hash 数据结构来存储用户信息，商品信息等等。</li><li>常用命令： <code>hset,hmset,hexists,hget,hgetall,hkeys,hvals</code> 等。</li><li>应用场景: 系统中<strong>对象数据的存储</strong>。</li></ul><h2 id="6-4-set"><a href="#6-4-set" class="headerlink" title="6.4 set"></a>6.4 set</h2><ul><li>介绍 ： set 类似于 Java 中的 HashSet 。Redis 中的 set 类型是一种<strong>无序集合</strong>，集合中的元素没有先后顺序。当你需要存储一个列表数据，又不希望出现重复数据时，set 是一个很好的选择，并且 <strong>set 提供了判断某个成员是否在一个 set 集合内的重要接口</strong>，这个也是 list 所不能提供的。可以<strong>基于 set 轻易实现交集、并集、差集的操作</strong>。比如：你可以将一个用户所有的关注人存在一个集合中，将其所有粉丝存在一个集合。Redis 可以非常方便的实现如<strong>共同关注、共同粉丝、共同喜好</strong>等功能。这个过程也就是求交集的过程。</li><li>常用命令： <code>sadd,spop,smembers,sismember,scard,sinterstore,sunion</code> 等。</li><li>应用场景: 需要存放的数据不能重复以及需要获取多个数据源交集和并集等场景</li></ul><h2 id="6-5-sorted-set"><a href="#6-5-sorted-set" class="headerlink" title="6.5 sorted set"></a>6.5 sorted set</h2><ul><li>介绍： 和 set 相比，sorted set 增加了一个权重参数 score，使得<strong>集合中的元素能够按 score 进行有序排列</strong>，还可以通过 score 的范围来获取元素的列表。有点像是 Java 中 HashMap 和 TreeSet 的结合体。</li><li>常用命令： <code>zadd,zcard,zscore,zrange,zrevrange,zrem</code> 等。</li><li>应用场景： 需要对数据根据某个权重进行排序的场景。比如在直播系统中，<strong>实时排行信息包含直播间在线用户列表，各种礼物排行榜，弹幕消息（可以理解为按消息维度的消息排行榜）等信息。</strong></li></ul><h1 id="7-Redis-单线程模型详解"><a href="#7-Redis-单线程模型详解" class="headerlink" title="7.Redis 单线程模型详解"></a>7.Redis 单线程模型详解</h1><p>Redis 基于 Reactor 模式开发了自己的网络事件处理器：这个处理器被称为文件事件处理器（file event handler）。文件事件处理器使用 I/O 多路复用程序来同时监听多个套接字，并根据套接字目前执行的任务来为套接字关联不同的事件处理器。</p><p>当被监听的套接字准备好执行连接应答（accept）、读取（read）、写入（write）、关闭（close）等操作时，与操作相对应的文件事件就会产生，这时文件事件处理器就会调用套接字之前关联好的事件处理器来处理这些事件。</p><p><strong>虽然文件事件处理器以单线程方式运行，但通过使用 I/O 多路复用程序来监听多个套接字</strong>，文件事件处理器既实现了高性能的网络通信模型，又可以很好地与 Redis 服务器中其他同样以单线程方式运行的模块进行对接，这保持了 Redis 内部单线程设计的简单性。</p><img src="/JeckFS/2020/08/17/Redis/3.png" class="" title="This is 3-th image."><h1 id="8-Redis-没有使用多线程？为什么不使用多线程？"><a href="#8-Redis-没有使用多线程？为什么不使用多线程？" class="headerlink" title="8.Redis 没有使用多线程？为什么不使用多线程？"></a>8.Redis 没有使用多线程？为什么不使用多线程？</h1><p>虽然说 Redis 是单线程模型，但是， 实际上，<strong>Redis 在 4.0 之后的版本中就已经加入了对多线程的支持。</strong><br>不过，Redis 4.0 增加的多线程主要是针对一些<strong>大键值对的删除操作</strong>的命令，使用这些命令就会使用主处理之外的其他线程来“异步处理”。</p><p>大体上来说，<strong>Redis 6.0 之前主要还是单线程处理。</strong></p><p><strong>那，Redis6.0 之前 为什么不使用多线程？</strong></p><p>我觉得主要原因有下面 3 个：</p><ul><li>单线程编程容易并且更容易维护；</li><li>Redis 的性能瓶颈不再 CPU ，主要在内存和网络；</li><li>多线程就会存在死锁、线程上下文切换等问题，甚至会影响性能。</li></ul><h1 id="9-Redis6-0-之后为何引入了多线程？"><a href="#9-Redis6-0-之后为何引入了多线程？" class="headerlink" title="9.Redis6.0 之后为何引入了多线程？"></a>9.Redis6.0 之后为何引入了多线程？</h1><p>从Redis自身角度来说，因为读写网络的read/write系统调用占用了Redis执行期间大部分CPU时间，瓶颈主要在于网络的 IO 消耗。</p><p>redis支持多线程主要就是两个原因：</p><ul><li>可以充分利用服务器 CPU 资源，目前主线程只能利用一个核</li><li>多线程任务可以分摊 Redis 同步 IO 读写负荷</li></ul><h1 id="10-开启多线程后，是否会存在线程并发安全问题？"><a href="#10-开启多线程后，是否会存在线程并发安全问题？" class="headerlink" title="10.开启多线程后，是否会存在线程并发安全问题？"></a>10.开启多线程后，是否会存在线程并发安全问题？</h1><p>Redis的多线程部分只是用来处理<strong>网络数据的读写和协议解析</strong>，<strong>执行命令仍然是单线程顺序执行</strong>。所以我们不需要去考虑控制 key、lua、事务，LPUSH/LPOP 等等的并发及线程安全问题。</p><p><a href="https://mp.weixin.qq.com/s/FZu3acwK6zrCBZQ_3HoUgw">Redis 6.0 新特性-多线程连环 13 问！</a><br><a href="https://draveness.me/whys-the-design-redis-single-thread/">为什么 Redis 选择单线程模型</a></p><h1 id="11-Redis-给缓存数据设置过期时间有啥用？"><a href="#11-Redis-给缓存数据设置过期时间有啥用？" class="headerlink" title="11.Redis 给缓存数据设置过期时间有啥用？"></a>11.Redis 给缓存数据设置过期时间有啥用？</h1><ul><li>内存是有限的，通过设置过期，来减少内存溢出的概率。</li><li>业务需要。比如我们的短信验证码可能只在1分钟内有效，用户登录的 token 可能只在 1 天内有效。</li><li>如果使用传统的数据库来处理的话，一般都是自己判断过期，这样更麻烦并且性能要差很多。</li></ul><h1 id="12-Redis是如何判断数据是否过期的呢？"><a href="#12-Redis是如何判断数据是否过期的呢？" class="headerlink" title="12.Redis是如何判断数据是否过期的呢？"></a>12.Redis是如何判断数据是否过期的呢？</h1><p>Redis 通过一个叫做<strong>过期字典</strong>（可以看作是hash表）来保存数据过期的时间。过期字典的键指向Redis数据库中的某个key(键)，过期字典的值是一个long long类型的整数，这个整数保存了key所指向的数据库键的过期时间（毫秒精度的UNIX时间戳）。</p><img src="/JeckFS/2020/08/17/Redis/4.png" class="" title="This is 4-th image."><p>过期字典是存储在redisDb这个结构里的：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">redisDb</span> &#123;</span></span><br><span class="line">    ...</span><br><span class="line">    dict *dict;     <span class="comment">//数据库键空间,保存着数据库中所有键值对</span></span><br><span class="line">    dict *expires   <span class="comment">// 过期字典,保存着键的过期时间</span></span><br><span class="line">    ...</span><br><span class="line">&#125; redisDb;</span><br></pre></td></tr></table></figure><h1 id="13-过期的数据的删除策略了解么？"><a href="#13-过期的数据的删除策略了解么？" class="headerlink" title="13.过期的数据的删除策略了解么？"></a>13.过期的数据的删除策略了解么？</h1><p>如果假设你设置了一批 key 只能存活 1 分钟，那么 1 分钟后，Redis 是怎么对这批 key 进行删除的呢？</p><p>常用的过期数据的删除策略就两个（重要！自己造缓存轮子的时候需要格外考虑的东西）：</p><ul><li>定时删除：每个设置过期时间的key都需要创建一个定时器，到过期时间就会立即清除。<br>该策略可以立即清除过期的数据，对内存很友好；但是会占用大量的CPU资源去处理过期的数据，从而影响缓存的响应时间和吞吐量。</li><li><strong>定期删除</strong>：redis默认是每隔 <strong>100ms</strong> 就<strong>随机抽取</strong>一些设置了过期时间的key，检查其是否过期，如果过期就删除。注意这里是随机抽取的。<strong>为什么要随机呢？你想一想假如 redis 存了几十万个 key ，每隔100ms就遍历所有的设置过期时间的 key 的话，就会给 CPU 带来很大的负载！</strong></li><li><strong>惰性删除</strong> ：定期删除可能会导致很多过期 key 到了时间并没有被删除掉。所以就有了惰性删除。假如你的过期 key，靠定期删除没有被删除掉，还停留在内存里，除非你的系统去查一下那个 key，才会被redis给删除掉。这就是所谓的惰性删除，也是够懒的哈！</li></ul><p>但是，仅仅通过给 key 设置过期时间还是有问题的。因为还是可能存在定期删除和惰性删除漏掉了很多过期 key 的情况。这样就导致大量过期 key 堆积在内存里，然后就Out of memory了。</p><p>怎么解决这个问题呢？答案就是： <strong>Redis 内存淘汰机制。</strong></p><h1 id="14-Redis-内存淘汰机制了解么？"><a href="#14-Redis-内存淘汰机制了解么？" class="headerlink" title="14.Redis 内存淘汰机制了解么？"></a>14.Redis 内存淘汰机制了解么？</h1><blockquote><p>相关问题：MySQL 里有 2000w 数据，Redis 中只存 20w 的数据，如何保证 Redis 中的数据都是热点数据?</p></blockquote><img src="/JeckFS/2020/08/17/Redis/5.png" class="" title="This is 5-th image."><h1 id="15-Redis持久化机制"><a href="#15-Redis持久化机制" class="headerlink" title="15. Redis持久化机制"></a>15. Redis持久化机制</h1><h2 id="15-1-什么是持久化"><a href="#15-1-什么是持久化" class="headerlink" title="15.1 什么是持久化"></a>15.1 什么是持久化</h2><p>持久化是将存储在内存中的数据持久化到磁盘的过程。主要是降低Redis服务器突然宕机带来的损失。</p><h2 id="15-2-持久化的过程-从内存到磁盘"><a href="#15-2-持久化的过程-从内存到磁盘" class="headerlink" title="15.2 持久化的过程(从内存到磁盘)"></a>15.2 持久化的过程(从内存到磁盘)</h2><img src="/JeckFS/2020/08/17/Redis/6.png" class="" title="This is 6-th image."><ol><li>客户端向数据库 发送写命令 (数据在客户端的内存中)</li><li>数据库 接收 到客户端的 写请求 (数据在服务器的内存中)</li><li>数据库 调用系统 API 将数据写入磁盘 (数据在内核缓冲区中)</li><li>操作系统将 写缓冲区 传输到 磁盘控控制器 (数据在磁盘缓存中)</li><li>操作系统的磁盘控制器将数据 写入实际的物理媒介 中 (数据在磁盘中)</li></ol><p>注意: 上面的过程其实是 <strong>极度精简</strong> 的，在实际的操作系统中，<strong>缓存</strong> 和 <strong>缓冲区</strong> 会比这 <strong>多得多</strong>…</p><h2 id="15-3-如何尽可能保证持久化的安全"><a href="#15-3-如何尽可能保证持久化的安全" class="headerlink" title="15.3 如何尽可能保证持久化的安全"></a>15.3 如何尽可能保证持久化的安全</h2><p>如果我们故障仅仅涉及到 <strong>软件层面</strong> (该进程被管理员终止或程序崩溃) 并且没有接触到内核，那么在 上述步骤 3 成功返回之后，我们就认为成功了。即使进程崩溃，操作系统仍然会帮助我们把数据正确地写入磁盘。</p><p>如果我们考虑 <strong>停电/火灾</strong> 等 <strong>更具灾难性</strong> 的事情，那么只有在完成了第 5 步之后，才是安全的。</p><p>所以我们可以总结得出数据安全最重要的阶段是：<strong>步骤三、四、五</strong>，即：</p><ul><li>数据库软件调用写操作将用户空间的缓冲区转移到内核缓冲区的频率是多少？</li><li>内核多久从缓冲区取数据刷新到磁盘控制器？</li><li>磁盘控制器多久把数据写入物理媒介一次？</li><li>注意： 如果真的发生灾难性的事件，我们可以从上图的过程中看到，任何一步都可能被意外打断丢失，所以只能 <strong>尽可能地保证</strong> 数据的安全，这对于所有数据库来说都是一样的。</li></ul><p>对于 <strong>第三步</strong> 有具体的API来实现：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">open</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *path, <span class="type">int</span> oflag, ...<span class="comment">/*,mode_t mode */</span>)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">close</span> <span class="params">(<span class="type">int</span> filedes)</span>;<span class="type">int</span> <span class="title function_">remove</span><span class="params">( <span class="type">const</span> <span class="type">char</span> *fname )</span>;</span><br><span class="line"><span class="type">ssize_t</span> <span class="title function_">write</span><span class="params">(<span class="type">int</span> fildes, <span class="type">const</span> <span class="type">void</span> *buf, <span class="type">size_t</span> nbyte)</span>;</span><br><span class="line"><span class="type">ssize_t</span> <span class="title function_">read</span><span class="params">(<span class="type">int</span> fildes, <span class="type">void</span> *buf, <span class="type">size_t</span> nbyte)</span>;</span><br></pre></td></tr></table></figure><p>对于 <strong>第四步</strong> Linux默认 <strong>30秒</strong> 写入磁盘缓冲。也可以使用 <code>fsync</code> 强制 内核将 <strong>内核缓冲区</strong> 写入 <strong>磁盘缓冲</strong>。但这是一个非常消耗性能的操作，每次调用都会 <strong>阻塞等待</strong> 直到设备报告 IO 完成，所以一般在生产环境的服务器中，Redis 通常是每隔 1s 左右执行一次 fsync 操作。</p><p>对于 <strong>第五步</strong> ，程序员 <strong>完全无法控制</strong> 。</p><h2 id="15-4-Redis-中的两种持久化方式"><a href="#15-4-Redis-中的两种持久化方式" class="headerlink" title="15.4 Redis 中的两种持久化方式"></a>15.4 Redis 中的两种持久化方式</h2><h3 id="方式一：快照"><a href="#方式一：快照" class="headerlink" title="方式一：快照"></a>方式一：快照</h3><p>Redis可以通过创建快照来获得存储在内存里面的数据在<strong>某个时间点上的副本</strong>。<br>由于Redis时一个 <strong>单线程</strong> 程序，还存在如何同时进行持久化和响应用户请求的问题。</p><p><strong>使用系统多进程 COW(Copy On Write) 机制 | fork 函数</strong></p><p>操作系统多进程 COW(Copy On Write) 机制 拯救了我们。Redis 在持久化时会调用 glibc 的函数 fork 产生一个子进程，简单理解也就是基于当前进程 <strong>复制</strong> 了一个进程，主进程和子进程会共享内存里面的代码块和数据段：</p><img src="/JeckFS/2020/08/17/Redis/7.png" class="" title="This is 7-th image."><p>这里多说一点，<strong>为什么 fork 成功调用后会有两个返回值呢</strong>？ 因为子进程在复制时复制了父进程的堆栈段，所以两个进程都停留在了 fork 函数中 (都在同一个地方往下继续”同时”执行)，等待返回，所以 <strong>一次在父进程中返回子进程的 pid，另一次在子进程中返回零，系统资源不够时返回负数。</strong> (伪代码如下)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">pid = os.fork()</span><br><span class="line"><span class="keyword">if</span> pid &gt; <span class="number">0</span>:</span><br><span class="line">  handle_client_request()  # 父进程继续处理客户端请求</span><br><span class="line"><span class="keyword">if</span> pid == <span class="number">0</span>:</span><br><span class="line">  handle_snapshot_write()  # 子进程处理快照写磁盘</span><br><span class="line"><span class="keyword">if</span> pid &lt; <span class="number">0</span>:  </span><br><span class="line">  <span class="meta"># fork <span class="keyword">error</span></span></span><br></pre></td></tr></table></figure><p>所以 <strong>快照持久化</strong> 可以完全交给 <strong>子进程</strong> 来处理，<strong>父进程</strong> 则继续 <strong>处理客户端请求</strong>。子进程 做数据持久化，它 <strong>不会修改现有的内存数据结构</strong>，它只是对数据结构进行遍历读取，然后序列化写到磁盘中。但是 <strong>父进程</strong> 不一样，它必须持续服务客户端请求，然后对 <strong>内存数据结构进行不间断的修改。</strong></p><p>这个时候就会使用操作系统的 COW 机制来进行 <strong>数据段页面</strong> 的分离。数据段是由很多操作系统的页面组合而成，当父进程对其中一个页面的数据进行修改时，会将被共享的页面复 制一份分离出来，然后 <strong>对这个复制的页面进行修改</strong>。这时 <strong>子进程</strong> 相应的页面是 <strong>没有变化的</strong>，还是进程产生时那一瞬间的数据。</p><p>子进程因为数据没有变化，它能看到的内存里的数据在进程产生的一瞬间就凝固了，再也不会改变，这也是为什么 Redis 的持久化 <strong>叫「快照」的原因</strong>。接下来子进程就可以非常安心的遍历数据了进行序列化写磁盘了。</p><p><strong>Redis创建快照之后，可以对快照进行备份，可以将快照复制到其他服务器从而创建具有相同数据的服务器副本（Redis主从结构，主要用来提高Redis性能），还可以将快照保留在原地以便重启服务器的时候使用。快照持久化是Redis默认采用的持久化方式。</strong></p><p>SAVE命令会<strong>阻塞Redis服务器进程</strong>，直到RDB文件创建完毕为止，在服务器进程阻塞期间，<strong>服务器不能处理任何命令请求</strong>；<br>BGSAVE会<strong>fork出子进程</strong>，然后由<strong>子进程负责创建RDB文件，服务器进程继续处理命令请求</strong>。<br>BGREWRITEAOF：如果BGSAVE正在执行，BGREWRITEAOF命令会被延迟到BGSAVE命令执行完毕之后执行。如果BGREWRITEAOF命令正在执行，那么客户端发送的BGSAVE命令会被服务器拒绝。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">save 900 1           </span><br><span class="line">    <span class="comment">#在900秒(15分钟)之后，如果至少有1个key发生变化，Redis就会自动触发BGSAVE命令创建快照。</span></span><br><span class="line">save 300 10          </span><br><span class="line">    <span class="comment">#在300秒(5分钟)之后，如果至少有10个key发生变化，Redis就会自动触发BGSAVE命令创建快照。</span></span><br><span class="line">save 60 10000        </span><br><span class="line">    <span class="comment">#在60秒(1分钟)之后，如果至少有10000个key发生变化，Redis就会自动触发BGSAVE命令创建快照。</span></span><br></pre></td></tr></table></figure><p><strong>方式二：AOF</strong></p><p><strong>AOF(Append Only File - 仅追加文件)</strong>它的工作方式非常简单：每次执行 <strong>修改内存</strong> 中数据集的写操作时，都会 <strong>记录</strong> 该操作。假设 AOF 日志记录了自 Redis 实例创建以来 <strong>所有的修改性指令序列</strong>，那么就可以通过对一个空的 Redis 实例 <strong>顺序执行所有的指令</strong>，也就是 <strong>「重放」</strong>，来恢复 Redis 当前实例的内存数据结构的状态。</p><p>AOF 只会对能够修改数据的命令进行存储，例如当删除一个不存在的key时，AOF并不会进行存储。在存储时，<strong>先执行指令再将日志存盘</strong>。</p><p>AOF重写</p><p>Redis 在长期运行的过程中，AOF 的日志会越变越长。如果实例宕机重启，重放整个 AOF 日志会非常耗时，导致长时间 Redis 无法对外提供服务。所以需要对 AOF 日志 “瘦身”。</p><p>Redis 提供了 bgrewriteaof 指令用于对 AOF 日志进行瘦身。其 <strong>原理</strong> 就是 <strong>开辟一个子进程</strong> 对内存进行 <strong>遍历</strong> 转换成一系列 Redis 的操作指令，<strong>序列化到一个新的 AOF 日志文件</strong> 中。序列化完毕后再将操作期间发生的 <strong>增量 AOF 日志</strong> 追加到这个新的 AOF 日志文件中，追加完毕后就立即替代旧的 AOF 日志文件了，瘦身工作就完成了。</p><p><strong>方式三：Redis 4.0 混合持久化</strong></p><p>重启 Redis 时，我们很少使用 rdb 来恢复内存状态，因为会丢失大量数据。我们通常使用 AOF 日志重放，但是重放 AOF 日志性能相对 rdb 来说要慢很多，这样在 Redis 实例很大的情况下，启动需要花费很长的时间。</p><p><strong>Redis 4.0</strong> 为了解决这个问题，带来了一个新的持久化选项——<strong>混合持久化</strong>。将 rdb 文件的内容和增量的 AOF 日志文件存在一起。这里的 AOF 日志不再是全量的日志，而是 <strong>自持久化开始到持久化结束</strong> 的这段时间发生的增量 AOF 日志，通常这部分 AOF 日志很小：</p><img src="/JeckFS/2020/08/17/Redis/8.png" class="" title="This is 8-th image."><p>于是在 Redis 重启的时候，可以先加载 rdb 的内容，然后再重放增量 AOF 日志就可以完全替代之前的 AOF 全量文件重放，重启效率因此大幅得到提升。</p><h1 id="16-Redis事务"><a href="#16-Redis事务" class="headerlink" title="16.Redis事务"></a>16.Redis事务</h1><p>Redis 可以通过 <strong>MULTI，EXEC，DISCARD 和 WATCH</strong> 等命令来实现事务(transaction)功能。<br>使用 MULTI 命令后可以输入多个命令。Redis不会立即执行这些命令，而是将它们放到队列，当调用了EXEC命令将执行所有命令。</p><p><strong>Redis 是不支持 roll back 的，因而不满足原子性的（而且不满足持久性）。</strong></p><p>你可以将Redis中的事务就理解为 ：<strong>Redis事务提供了一种将多个命令请求打包的功能。然后，再按顺序执行打包的所有命令，并且不会被中途打断。</strong></p><h1 id="17-缓存穿透"><a href="#17-缓存穿透" class="headerlink" title="17.缓存穿透"></a>17.缓存穿透</h1><p><strong>什么是缓存穿透</strong><br>缓存穿透说简单点就是大量请求的 key 根本不存在于缓存中，导致请求直接到了数据库上，根本没有经过缓存这一层。举个例子：某个黑客故意制造我们缓存中不存在的 key 发起大量请求，导致大量请求落到数据库。<br><strong>有哪些解决办法</strong></p><ul><li>好参数校验，一些不合法的参数请求直接抛出异常信息返回给客户端。比如查询的数据库 id 不能小于 0、传入的邮箱格式不对的时候直接返回错误消息给客户端等等。</li><li>缓存无效 key<br>如果缓存和数据库都查不到某个 key 的数据就写一个到 Redis 中去并设置过期时间。这种方式可以解决请求的 key 变化不频繁的情况，如果黑客恶意攻击，每次构建不同的请求 key，会导致 Redis 中缓存大量无效的 key 。很明显，这种方案并不能从根本上解决此问题。如果非要用这种方式来解决穿透问题的话，尽量将无效的 key 的过期时间设置短一点比如 1 分钟。</li><li><p>通过布隆过滤器过滤非法key。<br>具体是这样做的：把所有可能存在的请求的值都存放在布隆过滤器中，当用户请求过来，先判断用户发来的请求的值是否存在于布隆过滤器中。不存在的话，直接返回请求参数错误信息给客户端，存在的话才会走下面的流程。</p><p><strong>布隆过滤器说某个元素存在，小概率会误判。布隆过滤器说某个元素不在，那么这个元素一定不在。</strong></p><p><a href="https://github.com/Snailclimb/JavaGuide/blob/master/docs/dataStructures-algorithms/data-structure/bloom-filter.md">布隆过滤器</a></p></li></ul><h1 id="18-缓存雪崩"><a href="#18-缓存雪崩" class="headerlink" title="18.缓存雪崩"></a>18.缓存雪崩</h1><p>什么是缓存雪崩：</p><p><strong>缓存在同一时间大面积的失效，后面的请求都直接落到了数据库上，造成数据库短时间内承受大量请求。</strong><br>  举个例子 ：秒杀开始 12 个小时之前，我们统一存放了一批商品到 Redis 中，设置的缓存过期时间也是 12 个小时，那么秒杀开始的时候，这些秒杀的商品的访问直接就失效了。导致的情况就是，相应的请求直接就落到了数据库上，就像雪崩一样可怕。</p><p>解决办法：<br>  <strong>针对 Redis 服务不可用的情况：</strong></p><ul><li>采用 Redis 集群，避免单机出现问题整个缓存服务都没办法使用。</li><li><p>限流，避免同时处理大量的请求。</p><p><strong>针对热点缓存失效的情况：</strong></p></li><li>设置不同的失效时间比如随机设置缓存的失效时间。</li><li>缓存永不失效。</li></ul><h1 id="19-如何保证缓存和数据库数据的一致性？"><a href="#19-如何保证缓存和数据库数据的一致性？" class="headerlink" title="19.如何保证缓存和数据库数据的一致性？"></a>19.如何保证缓存和数据库数据的一致性？</h1><p>使用 Cache Aside Pattern 。</p><h1 id="20-哨兵模式"><a href="#20-哨兵模式" class="headerlink" title="20.哨兵模式"></a>20.哨兵模式</h1><p><a href="https://www.jianshu.com/p/06ab9daf921d">哨兵模式</a></p><h1 id="21"><a href="#21" class="headerlink" title="21."></a>21.</h1><h1 id="22"><a href="#22" class="headerlink" title="22."></a>22.</h1><h1 id="23"><a href="#23" class="headerlink" title="23."></a>23.</h1><h1 id="24"><a href="#24" class="headerlink" title="24."></a>24.</h1><h1 id="25"><a href="#25" class="headerlink" title="25."></a>25.</h1><h1 id="26"><a href="#26" class="headerlink" title="26."></a>26.</h1><h1 id="27"><a href="#27" class="headerlink" title="27."></a>27.</h1><h1 id="28"><a href="#28" class="headerlink" title="28."></a>28.</h1><h1 id="29"><a href="#29" class="headerlink" title="29."></a>29.</h1><h1 id="30"><a href="#30" class="headerlink" title="30."></a>30.</h1><h1 id="31"><a href="#31" class="headerlink" title="31."></a>31.</h1><h1 id="32"><a href="#32" class="headerlink" title="32."></a>32.</h1><h1 id="33"><a href="#33" class="headerlink" title="33."></a>33.</h1><h1 id="34"><a href="#34" class="headerlink" title="34."></a>34.</h1><h1 id="35"><a href="#35" class="headerlink" title="35."></a>35.</h1><h1 id="36"><a href="#36" class="headerlink" title="36."></a>36.</h1><h1 id="37"><a href="#37" class="headerlink" title="37."></a>37.</h1><h1 id="38"><a href="#38" class="headerlink" title="38."></a>38.</h1><h1 id="39"><a href="#39" class="headerlink" title="39."></a>39.</h1><h1 id="40"><a href="#40" class="headerlink" title="40."></a>40.</h1><h1 id="41"><a href="#41" class="headerlink" title="41."></a>41.</h1><h1 id="42"><a href="#42" class="headerlink" title="42."></a>42.</h1><h1 id="43"><a href="#43" class="headerlink" title="43."></a>43.</h1><h1 id="44"><a href="#44" class="headerlink" title="44."></a>44.</h1><h1 id="45"><a href="#45" class="headerlink" title="45."></a>45.</h1><h1 id="46"><a href="#46" class="headerlink" title="46."></a>46.</h1><h1 id="47"><a href="#47" class="headerlink" title="47."></a>47.</h1><h1 id="48"><a href="#48" class="headerlink" title="48."></a>48.</h1><h1 id="49"><a href="#49" class="headerlink" title="49."></a>49.</h1>]]></content>
      
      
      <categories>
          
          <category> 面经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面经 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>删除k个数字后使得剩下的数字最小</title>
      <link href="/JeckFS/2020/08/16/%E5%88%A0%E9%99%A4k%E4%B8%AA%E6%95%B0%E5%AD%97%E5%90%8E%E4%BD%BF%E5%BE%97%E5%89%A9%E4%B8%8B%E7%9A%84%E6%95%B0%E5%AD%97%E6%9C%80%E5%B0%8F/"/>
      <url>/JeckFS/2020/08/16/%E5%88%A0%E9%99%A4k%E4%B8%AA%E6%95%B0%E5%AD%97%E5%90%8E%E4%BD%BF%E5%BE%97%E5%89%A9%E4%B8%8B%E7%9A%84%E6%95%B0%E5%AD%97%E6%9C%80%E5%B0%8F/</url>
      
        <content type="html"><![CDATA[<p><a href="https://acm.sdut.edu.cn/onlinejudge3/problems/1753">题目</a></p><h1 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h1><p>使用单调栈</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">helper2</span><span class="params">(<span class="type">char</span>[] str, <span class="type">int</span> K)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (str.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (K &gt;= str.length) <span class="keyword">return</span> <span class="string">&quot;0&quot;</span>;</span><br><span class="line">    Stack&lt;Integer&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">    <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>, i;</span><br><span class="line">    L:</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; str.length; i++) &#123;</span><br><span class="line">        <span class="keyword">while</span> (!stack.isEmpty() &amp;&amp; stack.peek() &gt; str[i] - <span class="string">&#x27;0&#x27;</span>) &#123;</span><br><span class="line">            stack.pop();</span><br><span class="line">            ++k;</span><br><span class="line">            <span class="keyword">if</span> (k == K) <span class="keyword">break</span> L;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (stack.isEmpty() &amp;&amp; str[i] - <span class="string">&#x27;0&#x27;</span> == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">        stack.add(str[i] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">    <span class="keyword">while</span> (!stack.isEmpty()) &#123;</span><br><span class="line">        sb.append(stack.pop());</span><br><span class="line">    &#125;</span><br><span class="line">    sb.reverse();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (k &lt; K) &#123;</span><br><span class="line">        <span class="keyword">if</span> (sb.length() == <span class="number">0</span>) <span class="keyword">return</span> <span class="string">&quot;0&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">res</span> <span class="operator">=</span> sb.substring(<span class="number">0</span>, sb.length() - (K - k));</span><br><span class="line">        <span class="keyword">return</span> res.equals(<span class="string">&quot;&quot;</span>) ? <span class="string">&quot;0&quot;</span> : res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (; i &lt; str.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (sb.length() == <span class="number">0</span> &amp;&amp; str[i] == <span class="string">&#x27;0&#x27;</span>) <span class="keyword">continue</span>;</span><br><span class="line">        sb.append(str[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (sb.length() == <span class="number">0</span>) <span class="keyword">return</span> <span class="string">&quot;0&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> sb.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Elem</span> &#123;</span><br><span class="line">        <span class="type">char</span> value;</span><br><span class="line">        <span class="type">int</span> index;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Elem</span><span class="params">(<span class="type">char</span> value, <span class="type">int</span> index)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.value = value;</span><br><span class="line">            <span class="built_in">this</span>.index = index;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> value + <span class="string">&quot;,&quot;</span> + index;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">helper</span><span class="params">(<span class="type">char</span>[] str, <span class="type">int</span> K)</span>&#123;</span><br><span class="line">        <span class="type">boolean</span>[] flag = <span class="keyword">new</span> <span class="title class_">boolean</span>[str.length];</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        PriorityQueue&lt;Elem&gt; pq = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;((p1, p2) -&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (p2.value &gt; p1.value) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (p2.value &lt; p1.value) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> Integer.compare(p1.index, p2.index);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">if</span> (K &lt;= <span class="number">0</span>) System.exit(<span class="number">0</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 查找i后面(不包括i)第一个不大于位置i元素的位置，直接删除中间的部分</span></span><br><span class="line">        <span class="comment">// 45412658456974512154226   4</span></span><br><span class="line">        <span class="comment">// 1258456974512154226</span></span><br><span class="line">        <span class="comment">// 1258456974512154226</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 71245323308 4</span></span><br><span class="line">        <span class="comment">// 1223308</span></span><br><span class="line">        <span class="comment">// 1223308</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1245323308  1</span></span><br><span class="line">        <span class="comment">// 1223308  4</span></span><br><span class="line">        pq.add(<span class="keyword">new</span> <span class="title class_">Elem</span>(str[<span class="number">0</span>], <span class="number">0</span>));</span><br><span class="line">        L:</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; str.length; i++) &#123;</span><br><span class="line">            <span class="keyword">while</span> (pq.peek() != <span class="literal">null</span> &amp;&amp; pq.peek().value &gt; str[i]) &#123;</span><br><span class="line">                <span class="type">Elem</span> <span class="variable">peek</span> <span class="operator">=</span> pq.peek();</span><br><span class="line">                flag[peek.index] = <span class="literal">true</span>;</span><br><span class="line">                pq.poll();</span><br><span class="line">                ++k;</span><br><span class="line">                <span class="keyword">if</span> (k == K) <span class="keyword">break</span> L;</span><br><span class="line">            &#125;</span><br><span class="line">            pq.add(<span class="keyword">new</span> <span class="title class_">Elem</span>(str[i], i));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (k &lt; K) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> str.length - <span class="number">1</span>; i &gt;= <span class="number">0</span> &amp;&amp; k &lt; K; --i) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!flag[i]) &#123;</span><br><span class="line">                    flag[i] = <span class="literal">true</span>;</span><br><span class="line">                    ++k;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; str.length &amp;&amp; (str[i] == <span class="string">&#x27;0&#x27;</span> || flag[i])) ++i;</span><br><span class="line">        <span class="keyword">for</span> (; i &lt; str.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!flag[i]) &#123;</span><br><span class="line">                sb.append(str[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完整代码：(规模可在10000以内)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Elem</span> &#123;</span><br><span class="line">        <span class="type">char</span> value;</span><br><span class="line">        <span class="type">int</span> index;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Elem</span><span class="params">(<span class="type">char</span> value, <span class="type">int</span> index)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.value = value;</span><br><span class="line">            <span class="built_in">this</span>.index = index;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> value + <span class="string">&quot;,&quot;</span> + index;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">helper</span><span class="params">(<span class="type">char</span>[] str, <span class="type">int</span> K)</span>&#123;</span><br><span class="line">        <span class="type">boolean</span>[] flag = <span class="keyword">new</span> <span class="title class_">boolean</span>[str.length];</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        PriorityQueue&lt;Elem&gt; pq = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;((p1, p2) -&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (p2.value &gt; p1.value) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (p2.value &lt; p1.value) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> Integer.compare(p1.index, p2.index);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">if</span> (K &lt;= <span class="number">0</span>) System.exit(<span class="number">0</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 查找i后面(不包括i)第一个不大于位置i元素的位置，直接删除中间的部分</span></span><br><span class="line">        <span class="comment">// 45412658456974512154226   4</span></span><br><span class="line">        <span class="comment">// 1258456974512154226</span></span><br><span class="line">        <span class="comment">// 1258456974512154226</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 71245323308 4</span></span><br><span class="line">        <span class="comment">// 1223308</span></span><br><span class="line">        <span class="comment">// 1223308</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1245323308  1</span></span><br><span class="line">        <span class="comment">// 1223308  4</span></span><br><span class="line">        pq.add(<span class="keyword">new</span> <span class="title class_">Elem</span>(str[<span class="number">0</span>], <span class="number">0</span>));</span><br><span class="line">        L:</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; str.length; i++) &#123;</span><br><span class="line">            <span class="keyword">while</span> (pq.peek() != <span class="literal">null</span> &amp;&amp; pq.peek().value &gt; str[i]) &#123;</span><br><span class="line">                <span class="type">Elem</span> <span class="variable">peek</span> <span class="operator">=</span> pq.peek();</span><br><span class="line">                flag[peek.index] = <span class="literal">true</span>;</span><br><span class="line">                pq.poll();</span><br><span class="line">                ++k;</span><br><span class="line">                <span class="keyword">if</span> (k == K) <span class="keyword">break</span> L;</span><br><span class="line">            &#125;</span><br><span class="line">            pq.add(<span class="keyword">new</span> <span class="title class_">Elem</span>(str[i], i));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (k &lt; K) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> str.length - <span class="number">1</span>; i &gt;= <span class="number">0</span> &amp;&amp; k &lt; K; --i) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!flag[i]) &#123;</span><br><span class="line">                    flag[i] = <span class="literal">true</span>;</span><br><span class="line">                    ++k;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; str.length &amp;&amp; (str[i] == <span class="string">&#x27;0&#x27;</span> || flag[i])) ++i;</span><br><span class="line">        <span class="keyword">for</span> (; i &lt; str.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!flag[i]) &#123;</span><br><span class="line">                sb.append(str[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">create</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">i1</span> <span class="operator">=</span> random.nextInt(<span class="number">10</span>);</span><br><span class="line">            <span class="keyword">if</span> (sb.length() == <span class="number">0</span> &amp;&amp; i1 == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">            sb.append(i1);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="keyword">while</span> (sc.hasNext()) &#123;</span><br><span class="line"><span class="comment">//            String s = sc.next();</span></span><br><span class="line">            <span class="type">long</span> <span class="variable">l</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">            <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> create();</span><br><span class="line">            <span class="type">char</span>[] str = s.toCharArray();</span><br><span class="line">            <span class="type">int</span> <span class="variable">K</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">            System.out.println(helper(str,K));</span><br><span class="line">            System.out.println(<span class="string">&quot;length:&quot;</span>+s.length());</span><br><span class="line">            System.out.println(System.currentTimeMillis() - l);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC</title>
      <link href="/JeckFS/2020/08/14/SpringMVC/"/>
      <url>/JeckFS/2020/08/14/SpringMVC/</url>
      
        <content type="html"><![CDATA[<h1 id="1-说说自己对于-Spring-MVC-了解"><a href="#1-说说自己对于-Spring-MVC-了解" class="headerlink" title="1.说说自己对于 Spring MVC 了解?"></a>1.说说自己对于 Spring MVC 了解?</h1><p>MVC 是一种设计模式,Spring MVC 是一款很优秀的 MVC 框架。Spring MVC 可以帮助我们进行更简洁的Web层的开发，并且它天生与 Spring 框架集成。Spring MVC 下我们一般把后端项目分为 Service层（处理业务）、Dao层（数据库操作）、Entity层（实体类）、Controller层(控制层，返回数据给前台页面)。</p><img src="/JeckFS/2020/08/14/SpringMVC/1.png" class="" title="This is 1-th image."><h1 id="2-SpringMVC-工作原理了解吗"><a href="#2-SpringMVC-工作原理了解吗" class="headerlink" title="2.SpringMVC 工作原理了解吗?"></a>2.SpringMVC 工作原理了解吗?</h1><img src="/JeckFS/2020/08/14/SpringMVC/2.png" class="" title="This is 2-th image."><p>上图的一个笔误的小问题：Spring MVC 的入口函数也就是前端控制器 DispatcherServlet 的作用是接收请求，响应结果。</p><p><strong>流程说明（重要）：</strong></p><ul><li>客户端（浏览器）发送请求，直接请求到 DispatcherServlet。</li><li>DispatcherServlet 根据请求信息调用 HandlerMapping，解析请求对应的 Handler。</li><li>解析到对应的 Handler（也就是我们平常说的 Controller 控制器）后，开始由 HandlerAdapter 适配器处理。</li><li>HandlerAdapter 会根据 Handler 来调用真正的处理器开处理请求，并处理相应的业务逻辑。</li><li>处理器处理完业务后，会返回一个 ModelAndView 对象，Model 是返回的数据对象，View 是个逻辑上的 View。</li><li>ViewResolver 会根据逻辑 View 查找实际的 View。</li><li>DispaterServlet 把返回的 Model 传给 View（视图渲染）。</li><li>把 View 返回给请求者（浏览器）</li></ul><p><a href="https://www.yuque.com/docs/share/f68b6f04-00af-4c5b-8ffa-336e90f5e4a2">SpringMVC请求处理总结</a></p><p><a href="https://www.yuque.com/docs/share/3aabbcca-9cfb-4a8b-b333-db173724d05a">拦截器&amp;监听器&amp;过滤器</a></p>]]></content>
      
      
      <categories>
          
          <category> 面经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面经 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring</title>
      <link href="/JeckFS/2020/08/14/spring/"/>
      <url>/JeckFS/2020/08/14/spring/</url>
      
        <content type="html"><![CDATA[<h1 id="1-列举一些重要的Spring模块"><a href="#1-列举一些重要的Spring模块" class="headerlink" title="1.列举一些重要的Spring模块"></a>1.列举一些重要的Spring模块</h1><img src="/JeckFS/2020/08/14/spring/1.png" class="" title="This is 1-th image."><p>这些模块是：核心容器、数据访问/集成,、Web、AOP（面向切面编程）、工具、消息和测试模块。比如：Core Container 中的 Core 组件是Spring 所有组件的核心，Beans 组件和 Context 组件是实现IOC和依赖注入的基础，AOP组件用来实现面向切面编程。</p><ul><li>Spring Core： 基础,可以说 Spring 其他所有的功能都需要依赖于该类库。主要提供 IoC 依赖注入功能。</li><li>Spring Aspects ： 该模块为与AspectJ的集成提供支持。</li><li>Spring AOP ：提供了面向切面的编程实现。</li><li>Spring JDBC : Java数据库连接。</li><li>Spring JMS ：Java消息服务。</li><li>Spring ORM : 用于支持Hibernate等ORM工具。</li><li>Spring Web : 为创建Web应用程序提供支持。</li><li>Spring Test : 提供了对 JUnit 和 TestNG 测试的支持。</li></ul><h1 id="2-RestController-vs-Controller"><a href="#2-RestController-vs-Controller" class="headerlink" title="2.@RestController vs @Controller"></a>2.@RestController vs @Controller</h1><p><code>Controller</code> 返回一个页面</p><p>单独使用 @Controller 不加 @ResponseBody的话一般使用在要返回一个视图的情况，这种情况属于比较传统的Spring MVC 的应用，对应于<strong>前后端不分离</strong>的情况。</p><p><code>@RestController</code> 返回 JSON 或 XML 形式数据</p><p>但@RestController只返回对象，对象数据直接以 JSON 或 XML 形式写入 HTTP 响应(Response)中，这种情况属于 RESTful Web服务，这也是目前日常开发所接触的最常用的情况（<strong>前后端分离</strong>）。</p><p><code>@Controller + @ResponseBody</code> 返回JSON 或 XML 形式数据</p><blockquote><p>@ResponseBody 注解的作用是将 Controller 的方法返回的对象通过适当的转换器转换为指定的格式之后，写入到HTTP 响应(Response)对象的 body 中，通常用来返回 JSON 或者 XML 数据，返回 JSON 数据的情况比较多。</p></blockquote><h1 id="3-Spring-IOC-amp-AOP"><a href="#3-Spring-IOC-amp-AOP" class="headerlink" title="3.Spring IOC &amp; AOP"></a>3.Spring IOC &amp; AOP</h1><h2 id="IOC"><a href="#IOC" class="headerlink" title="IOC"></a>IOC</h2><p>IoC（Inverse of Control:控制反转）是一种设计思想，就是 <strong>将原本在程序中手动创建对象的控制权，交由Spring框架来管理</strong>。 IoC 在其他语言中也有应用，并非 Spring 特有。 <strong>IoC 容器是 Spring 用来实现 IoC 的载体， IoC 容器实际上就是个Map（key，value）,Map 中存放的是各种对象。</strong></p><p>将对象之间的相互依赖关系交给 IoC 容器来管理，并由 IoC 容器完成对象的注入。这样可以很大程度上简化应用的开发，把应用从复杂的依赖关系中解放出来。 <strong>IoC 容器就像是一个工厂一样，当我们需要创建一个对象的时候，只需要配置好配置文件/注解即可，完全不用考虑对象是如何被创建出来的。</strong> 在实际项目中一个 Service 类可能有几百甚至上千个类作为它的底层，假如我们需要实例化这个 Service，你可能要每次都要搞清这个 Service 所有底层类的构造函数，这可能会把人逼疯。如果利用 IoC 的话，你只需要配置好，然后在需要的地方引用就行了，这大大增加了项目的可维护性且降低了开发难度。</p><p><strong>Spring IoC的初始化过程：</strong></p><img src="/JeckFS/2020/08/14/spring/2.png" class="" title="This is 2-th image."><h2 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h2><p>AOP(Aspect-Oriented Programming:面向切面编程)能够将那些<strong>与业务无关，却为业务模块所共同调用的逻辑或责任（例如事务处理、日志管理、权限控制等）封装起来，便于减少系统的重复代码，降低模块间的耦合度，并有利于未来的可拓展性和可维护性。</strong></p><p><strong>Spring AOP就是基于动态代理的</strong>，如果要代理的对象，实现了某个接口，那么Spring AOP会使用JDK Proxy，去创建代理对象，而对于没有实现接口的对象，就无法使用 <strong>JDK Proxy</strong> 去进行代理了，这时候Spring AOP会使用Cglib ，这时候Spring AOP会使用 <strong>Cglib</strong> 生成一个被代理对象的子类来作为代理，如下图所示：</p><img src="/JeckFS/2020/08/14/spring/3.png" class="" title="This is 3-th image."><h1 id="4-Spring-AOP-和-AspectJ-AOP-有什么区别？"><a href="#4-Spring-AOP-和-AspectJ-AOP-有什么区别？" class="headerlink" title="4.Spring AOP 和 AspectJ AOP 有什么区别？"></a>4.Spring AOP 和 AspectJ AOP 有什么区别？</h1><p><strong>Spring AOP 属于运行时增强，而 AspectJ 是编译时增强</strong>。 Spring AOP <strong>基于代理</strong>(Proxying)，而 AspectJ <strong>基于字节码操作</strong>(Bytecode Manipulation)。</p><p>Spring AOP 已经集成了 AspectJ ，AspectJ 应该算的上是 Java 生态系统中最完整的 AOP 框架了。AspectJ 相比于 Spring AOP 功能更加强大，但是 Spring AOP 相对来说更简单，</p><p>如果我们的切面比较少，那么两者性能差异不大。但是，当切面太多的话，最好选择 AspectJ ，它比Spring AOP 快很多。</p><h1 id="5-Spring-Bean"><a href="#5-Spring-Bean" class="headerlink" title="5.Spring Bean"></a>5.Spring Bean</h1><h2 id="5-1-Spring-中的-bean-的作用域有哪些"><a href="#5-1-Spring-中的-bean-的作用域有哪些" class="headerlink" title="5.1 Spring 中的 bean 的作用域有哪些?"></a>5.1 Spring 中的 bean 的作用域有哪些?</h2><ul><li>singleton : 唯一 bean 实例，Spring 中的 bean 默认都是单例的。</li><li>prototype : 每次请求都会创建一个新的 bean 实例。</li><li>request : 每一次HTTP请求都会产生一个新的bean，该bean仅在当前HTTP request内有效。</li><li>session : 每一次HTTP请求都会产生一个新的 bean，该bean仅在当前 HTTP session 内有效。</li><li>global-session： 全局session作用域，仅仅在基于portlet的web应用中才有意义，Spring5已经没有了。Portlet是能够生成语义代码(例如：HTML)片段的小型Java Web插件。它们基于portlet容器，可以像servlet一样处理HTTP请求。但是，与 servlet 不同，每个 portlet 都有不同的会话</li></ul><h2 id="5-2-Spring-中的单例-bean-的线程安全问题了解吗？"><a href="#5-2-Spring-中的单例-bean-的线程安全问题了解吗？" class="headerlink" title="5.2 Spring 中的单例 bean 的线程安全问题了解吗？"></a>5.2 Spring 中的单例 bean 的线程安全问题了解吗？</h2><p>单例 bean 存在线程问题，主要是因为当多个线程操作同一个对象的时候，对这个对象的非静态成员变量的写操作会存在线程安全问题。</p><p>常见的有两种解决办法：</p><ol><li><p>在Bean对象中尽量避免定义可变的成员变量（不太现实）。</p></li><li><p>在类中定义一个ThreadLocal成员变量，将需要的可变成员变量保存在 ThreadLocal 中（推荐的一种方式）。</p></li></ol><h2 id="5-3-Component-和-Bean-的区别是什么？"><a href="#5-3-Component-和-Bean-的区别是什么？" class="headerlink" title="5.3 @Component 和 @Bean 的区别是什么？"></a>5.3 @Component 和 @Bean 的区别是什么？</h2><ul><li>作用对象不同: @Component 注解作用于类，而@Bean注解作用于方法。</li><li>@Component通常是通过类路径扫描来自动侦测以及自动装配到Spring容器中（我们可以使用 @ComponentScan 注解定义要扫描的路径从中找出标识了需要装配的类自动装配到 Spring 的 bean 容器中）。@Bean 注解通常是我们在标有该注解的方法中定义产生这个 bean, @Bean告诉了Spring这是某个类的示例，当我需要用它的时候还给我。</li><li>@Bean 注解比 Component 注解的自定义性更强，而且很多地方我们只能通过 @Bean 注解来注册bean。比如当我们引用第三方库中的类需要装配到 Spring容器时，则只能通过 @Bean来实现。</li></ul><p>下面这个例子是通过 @Component 无法实现的。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> OneService <span class="title function_">getService</span><span class="params">(status)</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> (status)  &#123;</span><br><span class="line">        when <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">serviceImpl1</span>();</span><br><span class="line">        when <span class="number">2</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">serviceImpl2</span>();</span><br><span class="line">        when <span class="number">3</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">serviceImpl3</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="5-4-将一个类声明为Spring的-bean-的注解有哪些"><a href="#5-4-将一个类声明为Spring的-bean-的注解有哪些" class="headerlink" title="5.4 将一个类声明为Spring的 bean 的注解有哪些?"></a>5.4 将一个类声明为Spring的 bean 的注解有哪些?</h2><p>我们一般使用 @Autowired 注解自动装配 bean，要想把类标识成可用于 @Autowired 注解自动装配的 bean 的类,采用以下注解可实现：</p><ul><li>@Component ：通用的注解，可标注任意类为 Spring 组件。如果一个Bean不知道属于哪个层，可以使用@Component 注解标注。</li><li>@Repository : 对应持久层即 Dao 层，主要用于数据库相关操作。</li><li>@Service : 对应服务层，主要涉及一些复杂的逻辑，需要用到 Dao层。</li><li>@Controller : 对应 Spring MVC 控制层，主要用户接受用户请求并调用 Service 层返回数据给前端页面。</li></ul><h2 id="5-5-Spring-中的-bean-生命周期"><a href="#5-5-Spring-中的-bean-生命周期" class="headerlink" title="5.5 Spring 中的 bean 生命周期?"></a>5.5 Spring 中的 bean 生命周期?</h2><img src="/JeckFS/2020/08/14/spring/4.png" class="" title="This is 4-th image."><h1 id="6-Spring事务"><a href="#6-Spring事务" class="headerlink" title="6.Spring事务"></a>6.Spring事务</h1>]]></content>
      
      
      <categories>
          
          <category> 面经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面经 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大组合数计算</title>
      <link href="/JeckFS/2020/08/13/%E5%A4%A7%E7%BB%84%E5%90%88%E6%95%B0%E8%AE%A1%E7%AE%97/"/>
      <url>/JeckFS/2020/08/13/%E5%A4%A7%E7%BB%84%E5%90%88%E6%95%B0%E8%AE%A1%E7%AE%97/</url>
      
        <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">long</span> <span class="title function_">quickpow</span><span class="params">(<span class="type">long</span> a, <span class="type">long</span> b, <span class="type">long</span> mod)</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (b != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((b &amp; <span class="number">1</span>) == <span class="number">1</span>)</span><br><span class="line">                ans = ans * a % mod;</span><br><span class="line">            a = a * a % mod;</span><br><span class="line">            b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Lucas ，快速求解组合数 C(n,m) 从 n 里面 选 m 的可能性,对 P 进行取模</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">long</span> <span class="title function_">C</span><span class="params">(<span class="type">long</span> n, <span class="type">long</span> m, <span class="type">long</span> p)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (m &gt; n) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">long</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">1</span>, y = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (m != <span class="number">0</span>) &#123;</span><br><span class="line">            x = (x * n) % p;</span><br><span class="line">            y = (y * m) % p;</span><br><span class="line">            n--;</span><br><span class="line">            m--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> x * quickpow(y, p - <span class="number">2</span>, p) % p;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 组合数 公式</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">long</span> <span class="title function_">lucas</span><span class="params">(<span class="type">long</span> n, <span class="type">long</span> m, <span class="type">long</span> p)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (m == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> C(n % p, m % p, p) * lucas(n / p, m / p, p) % p;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line"></span><br><span class="line"><span class="comment">//        System.out.println(C(n,m,1000000007));</span></span><br><span class="line">        System.out.println(lucas(n,m,<span class="number">1000000007</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 牛客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 牛客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mybatis</title>
      <link href="/JeckFS/2020/08/13/mybatis/"/>
      <url>/JeckFS/2020/08/13/mybatis/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.jianshu.com/p/e8f294f6704b">面试题1</a></p><p><a href="https://blog.csdn.net/a745233700/article/details/80977133">面试题2</a></p><ol><li>mybatis 中 #{}和 ${}的区别是什么？</li><li>什么是SQL注入 ，如何避免。</li><li>说一下 mybatis 的一级缓存和二级缓存</li><li>mybatis 是否支持延迟加载？延迟加载的原理是什么？</li><li>mybatis 动态sql中使用标签与直接写where关键字有什么区别？</li><li>mybatis 动态sql标签中循环标签中有哪些属性，各自的作用。</li><li>mybatis 和 hibernate 的区别有哪些？</li><li>RowBounds是一次性查询全部结果吗？为什么？</li><li>MyBatis 定义的接口，怎么找到实现的？</li><li>Mybatis的底层实现原理。</li><li>Mybatis是如何进行分页的？分页插件的原理是什么？</li><li>Mybatis执行批量插入，能返回数据库主键列表吗？</li><li>Mybatis都有哪些Executor执行器？它们之间的区别是什么？</li><li>Mybatis动态sql有什么用？执行原理？有哪些动态sql？</li><li>mybatis有几种分页方式？</li><li>MyBatis框架的优点和缺点</li><li>使用MyBatis框架，当实体类中的属性名和表中的字段名不一样 ，怎么办 ？</li><li>通常一个Xml映射文件，都会写一个Dao接口与之对应，请问，这个Dao接口的工作原理是什么？Dao接口里的方法，参数不同时，方法能重载吗？</li><li>Xml映射文件中，除了常见的select|insert|updae|delete标签之外，还有哪些标签？</li><li>简述Mybatis的插件运行原理，以及如何编写一个插件。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 面经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面经 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>消息队列</title>
      <link href="/JeckFS/2020/08/11/%E9%9D%A2%E8%AF%95/"/>
      <url>/JeckFS/2020/08/11/%E9%9D%A2%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h1 id="redis单个热点key如何防止在指定时间失效。"><a href="#redis单个热点key如何防止在指定时间失效。" class="headerlink" title="redis单个热点key如何防止在指定时间失效。"></a>redis单个热点key如何防止在指定时间失效。</h1><h1 id="Rabbitmq如何保证消息顺序执行"><a href="#Rabbitmq如何保证消息顺序执行" class="headerlink" title="Rabbitmq如何保证消息顺序执行"></a>Rabbitmq如何保证消息顺序执行</h1><h1 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h1><h2 id="1-为什么要用消息队列-消息队列的应用场景"><a href="#1-为什么要用消息队列-消息队列的应用场景" class="headerlink" title="1.为什么要用消息队列(消息队列的应用场景)"></a>1.为什么要用消息队列(消息队列的应用场景)</h2><p><strong>解耦</strong><br>使用MQ可以对耦合性高的子系统进行解耦，解耦后各个子系统之间独立运行。生产者和消费者不需要相互依赖。</p><img src="/JeckFS/2020/08/11/%E9%9D%A2%E8%AF%95/42.png" class="" title="This is 42-th image."><p><strong>异步</strong><br>生产端不需要等待消费端响应，直接返回，提高了响应时间和吞吐量。这时候要求用户端对请求的响应不依赖各个子系统的处理结果。若用户需要各个子系统的处理结果，那么这种情况下，就不能使用这种方式。<br>使用异步减少了子系统处理消息的时间。</p><img src="/JeckFS/2020/08/11/%E9%9D%A2%E8%AF%95/7.png" class="" title="This is 7-th image."><p><strong>流量削峰</strong><br>短时间内，请求流量瞬间暴增，使用MQ将请求保存进队列。打平高峰期的流量，消费端可以以自己的速度处理，同时也无需在高峰期增加太多资源，提高资源利用率。</p><img src="/JeckFS/2020/08/11/%E9%9D%A2%E8%AF%95/43.png" class="" title="This is 43-th image."><h2 id="2-各种消息队列产品的比较"><a href="#2-各种消息队列产品的比较" class="headerlink" title="2.各种消息队列产品的比较"></a>2.各种消息队列产品的比较</h2><p>ActiveMQ不推荐<br>RabbitMQ：不考虑二次开发，性能好，且稳定<br>RocketMQ：需要二次开发<br>Kafka：大数据实时计算、日志采集等场景。</p><h2 id="3-消息队列的优缺点"><a href="#3-消息队列的优缺点" class="headerlink" title="3.消息队列的优缺点"></a>3.消息队列的优缺点</h2><p><strong>系统可用性降低</strong><br>只有一个MQ节点的话，一旦宕机，系统就瘫痪。解决方法是使用<strong>集群</strong>。</p><p><strong>系统复杂度提高</strong><br>会出现消息丢失、消息重复、消息传递的顺序性问题。</p><p><strong>一致性问题</strong><br>各个子系统独立运行，若其中一个子系统出现问题，如何保证其他子系统恢复到消息处理前的状态。</p><p>可以使用<strong>分布式事务</strong>处理。</p><h2 id="4-如何保证消息队列的高可用"><a href="#4-如何保证消息队列的高可用" class="headerlink" title="4.如何保证消息队列的高可用"></a>4.如何保证消息队列的高可用</h2><p>RabbitMQ可以使用<strong>镜像集群</strong>的方式实现高可用。<br>具体就是：使用多台机器分别启动RabbitMQ实例。生产者将消息发送到MQ节点时，该节点向其他节点同步收到的消息。即每个MQ节点都保存完整数据，当某个MQ节点失效，不影响整个系统。</p><img src="/JeckFS/2020/08/11/%E9%9D%A2%E8%AF%95/44.png" class="" title="This is 44-th image."><p>RocketMQ高可用：双主双从</p><img src="/JeckFS/2020/08/11/%E9%9D%A2%E8%AF%95/45.png" class="" title="This is 45-th image."><blockquote><p>方案：Name Server使用集群，Broker使用双主双从。<br>当生产者发送消息的时候，首先去询问Name Server找到一个可用的Broker Master地址，然后生产者向Broker Master发送消息。消费者再从该Broker Master中消费消息。<br>Broker Master会向Broker Slave同步数据。Broker Slave在变成Master之前不接受生产者的消息。<br>Name Server：管理Broker的服务器<br>Broker：真正接收生产者发送的数据的服务器</p></blockquote><h2 id="5-如何保证消息不丢失"><a href="#5-如何保证消息不丢失" class="headerlink" title="5.如何保证消息不丢失"></a>5.如何保证消息不丢失</h2><p>消息丢失原因：</p><ul><li>原因1：生产者发送给MQ的途中出现网络问题，导致消息没能到达MQ节点</li><li>原因2：MQ自己弄丢了消息</li><li>原因3：消费者拿到消息后，处理时发生错误，任务没有完成。</li></ul><img src="/JeckFS/2020/08/11/%E9%9D%A2%E8%AF%95/46.png" class="" title="This is 46-th image."><p>解决方案：</p><ul><li>针对原因1：<br>【方法1】生产者开启RabbitMQ事务，MQ没有收到消息会异常报错。缺点是：生产者发送消息与MQ节点接收消息<strong>同步</strong>进行，导致吞吐量低。<br>【方法2】MQ节点收到消息后发送回执确认。生产者发送消息与MQ节点接收消息<strong>异步</strong>进行，性能较好。</li><li>针对原因2：<br>开启RabbitMQ数据持久化。<br>与confirm机制配合，只有消息被持久化到磁盘上，才会通知生产者ack。哪怕持久化到磁盘之前，MQ挂了，生产者收不到ack，仍会重发。</li><li>针对原因3：<br>消费者处理消息完成后，给MQ节点发送ack确认。MQ收到确认后再删除消息。</li></ul><img src="/JeckFS/2020/08/11/%E9%9D%A2%E8%AF%95/47.png" class="" title="This is 47-th image."><h2 id="6-如何保证消息不被重复消费-如何保证消息消费的幂等性"><a href="#6-如何保证消息不被重复消费-如何保证消息消费的幂等性" class="headerlink" title="6.如何保证消息不被重复消费(如何保证消息消费的幂等性)"></a>6.如何保证消息不被重复消费(如何保证消息消费的幂等性)</h2><p>重复消息产生原因：<strong>网络不可达</strong>。</p><p>发送时消息重复：回送应答丢失导致生产者发送重复消息。</p><img src="/JeckFS/2020/08/11/%E9%9D%A2%E8%AF%95/48.png" class="" title="This is 48-th image."><p>消费时消息重复：消费者收到消息并完成业务处理，但向MQ节点的反馈应答丢失，导致MQ节点再次发送重复消息。</p><img src="/JeckFS/2020/08/11/%E9%9D%A2%E8%AF%95/49.png" class="" title="This is 49-th image."><p>解决方案：消息携带全局ID，消费方接到消息时先查再处理，根据全局ID判断如果是重复消息直接丢弃或Update。</p><img src="/JeckFS/2020/08/11/%E9%9D%A2%E8%AF%95/50.png" class="" title="This is 50-th image."><h2 id="7-如何保证消息消费的顺序性"><a href="#7-如何保证消息消费的顺序性" class="headerlink" title="7.如何保证消息消费的顺序性"></a>7.如何保证消息消费的顺序性</h2><p>什么是消息顺序消费、保证消息顺序消费的方案。</p><p><a href="https://www.cnblogs.com/-wenli/p/13047059.html">参看</a></p><img src="/JeckFS/2020/08/11/%E9%9D%A2%E8%AF%95/51.png" class="" title="This is 51-th image."><p>详细内容，参见下文。这里只给出方案。</p><p>方案1：全局顺序消息，生产者：MQ：消费者=1:1:1</p><p>方案2：局部顺序消息</p><ul><li>生产者将同一组消息发送到单个队列。</li><li>多个消费者并行对消息进行消费。</li><li>Queue通过<strong>分段锁</strong>保证消息消费的顺序性。</li></ul><img src="/JeckFS/2020/08/11/%E9%9D%A2%E8%AF%95/52.png" class="" title="This is 52-th image."><img src="/JeckFS/2020/08/11/%E9%9D%A2%E8%AF%95/53.png" class="" title="This is 53-th image."><img src="/JeckFS/2020/08/11/%E9%9D%A2%E8%AF%95/54.png" class="" title="This is 54-th image."><p>单个消息队列的先进先出的特性保证了在MQ节点中的顺序性，然后使用分段锁，在其中一个消费者消费了M1后，用分段锁锁住MQ队列，当该消费者发送消息消费完成的确定后，再释放锁定，让其他消费者读取。分段锁锁住的是单个的消息队列，如上图Queue1。</p><p>同一个订单的消息ID是相同的。用订单ID对消息队列总数取模，来确定将消息发送到哪个队列中。</p><h2 id="8-大量消息堆积如何处理"><a href="#8-大量消息堆积如何处理" class="headerlink" title="8.大量消息堆积如何处理"></a>8.大量消息堆积如何处理</h2><p>消息堆积的原因：</p><ul><li>网络故障导致消息不能从MQ发送到消费者</li><li>消费方处理消息后没有给MQ正常应答</li></ul><img src="/JeckFS/2020/08/11/%E9%9D%A2%E8%AF%95/55.png" class="" title="This is 55-th image."><p>解决方案：</p><img src="/JeckFS/2020/08/11/%E9%9D%A2%E8%AF%95/56.png" class="" title="This is 56-th image."><h2 id="9-消息过期怎么处理"><a href="#9-消息过期怎么处理" class="headerlink" title="9.消息过期怎么处理"></a>9.消息过期怎么处理</h2><p>消息过期的原因：</p><ul><li>消息设置了过期时间</li><li>消费方出现故障，导致消息一直未被处理，消息就会过期</li></ul><img src="/JeckFS/2020/08/11/%E9%9D%A2%E8%AF%95/57.png" class="" title="This is 57-th image."><p>消息过期的处理方案：</p><ul><li>设置死信队列，接收过期消息</li><li>消费死信队列中的过期消息，记录日志</li><li>重新查询过期消息并发送到MQ。</li></ul><img src="/JeckFS/2020/08/11/%E9%9D%A2%E8%AF%95/58.png" class="" title="This is 58-th image."><hr><hr><hr><hr><hr><hr><img src="/JeckFS/2020/08/11/%E9%9D%A2%E8%AF%95/1.png" class="" title="This is 1-th image."><h2 id="1-为什么要用消息队列"><a href="#1-为什么要用消息队列" class="headerlink" title="1.为什么要用消息队列?"></a>1.为什么要用消息队列?</h2><p>常见应用场景：解耦、异步、削峰。</p><p><strong>解耦：</strong></p><img src="/JeckFS/2020/08/11/%E9%9D%A2%E8%AF%95/3.png" class="" title="This is 3-th image."><img src="/JeckFS/2020/08/11/%E9%9D%A2%E8%AF%95/4.png" class="" title="This is 4-th image."><p>一个子系统失败，将会影响整个业务流程。</p><p>使用MQ解耦：</p><img src="/JeckFS/2020/08/11/%E9%9D%A2%E8%AF%95/5.png" class="" title="This is 5-th image."><img src="/JeckFS/2020/08/11/%E9%9D%A2%E8%AF%95/6.png" class="" title="This is 6-th image."><p><strong>异步</strong></p><img src="/JeckFS/2020/08/11/%E9%9D%A2%E8%AF%95/8.png" class="" title="This is 8-th image."><img src="/JeckFS/2020/08/11/%E9%9D%A2%E8%AF%95/7.png" class="" title="This is 7-th image."><p>使用MQ后：</p><p>用户端对请求的响应不依赖各个子系统的处理结果时，可以使用MQ进行异步处理。</p><img src="/JeckFS/2020/08/11/%E9%9D%A2%E8%AF%95/9.png" class="" title="This is 9-th image."><p>这种架构对于用户端需要B，C，D子系统的处理结果时，是不可行的。</p><p><strong>流量削峰</strong></p><img src="/JeckFS/2020/08/11/%E9%9D%A2%E8%AF%95/10.png" class="" title="This is 10-th image."><img src="/JeckFS/2020/08/11/%E9%9D%A2%E8%AF%95/11.png" class="" title="This is 11-th image."><h2 id="2-各种消息队列产品的比较-1"><a href="#2-各种消息队列产品的比较-1" class="headerlink" title="2.各种消息队列产品的比较"></a>2.各种消息队列产品的比较</h2><img src="/JeckFS/2020/08/11/%E9%9D%A2%E8%AF%95/12.png" class="" title="This is 12-th image."><img src="/JeckFS/2020/08/11/%E9%9D%A2%E8%AF%95/13.png" class="" title="This is 13-th image."><h2 id="3-消息队列的有点和缺点"><a href="#3-消息队列的有点和缺点" class="headerlink" title="3.消息队列的有点和缺点"></a>3.消息队列的有点和缺点</h2><img src="/JeckFS/2020/08/11/%E9%9D%A2%E8%AF%95/14.png" class="" title="This is 14-th image."><p><strong>系统可用性降低</strong><br>系统引入的外部依赖越多，系统稳定性越差。一旦MQ宕机，就会对业务造成影响。</p><img src="/JeckFS/2020/08/11/%E9%9D%A2%E8%AF%95/15.png" class="" title="This is 15-th image."><p>使用<strong>集群</strong>的方式保证高可用。</p><p><strong>系统复杂度提高</strong><br>以前系统间是同步的远程调用，现在是通过MQ进行异步调用。<br>会出现：</p><ul><li>消息丢失</li><li>消息重复</li><li>消息传递的顺序性问题</li></ul><p><strong>一致性问题</strong></p><img src="/JeckFS/2020/08/11/%E9%9D%A2%E8%AF%95/16.png" class="" title="This is 16-th image."><p>通过<strong>分布式事务</strong>处理。</p><h2 id="4-如何保证消息队列的高可用-1"><a href="#4-如何保证消息队列的高可用-1" class="headerlink" title="4.如何保证消息队列的高可用"></a>4.如何保证消息队列的高可用</h2><p>RabbitMQ高可用：</p><p>方式一：</p><img src="/JeckFS/2020/08/11/%E9%9D%A2%E8%AF%95/17.png" class="" title="This is 17-th image."><p>第二个节点不仅有元数据还有实际数据。第一三节点没有实际数据，可以通过元数据找到实际数据在哪里。当消费者向第一三节点获取数据，第一三节点需要再次向第二节点获取。</p><p>元数据：队列的配置信息</p><p>这种方式对第二个节点的依赖很强，当第二个节点挂掉后，会影响整个系统。<br>另外对第二个节点来说数据拉取的开销比较大，容易造成单实例性能瓶颈。</p><p><a href="https://blog.csdn.net/weixin_42942532/article/details/89073534">参考</a></p><p>方式二：</p><img src="/JeckFS/2020/08/11/%E9%9D%A2%E8%AF%95/18.png" class="" title="This is 18-th image."><p>让所有MQ节点都存储完整数据。<br>【注意】生产者可以向所有MQ节点发送消息。不单是一个节点。</p><p>RocketMQ高可用：</p><img src="/JeckFS/2020/08/11/%E9%9D%A2%E8%AF%95/19.png" class="" title="This is 19-th image."><p>方案：Name Server使用集群，Broker使用双主双从。</p><p>当生产者发送消息的时候，首先去询问Name Server找到一个可用的Broker Master地址，然后生产者向Broker Master发送消息。消费者再从该Broker Master中消费消息。</p><p>Broker Master会向Broker Slave同步数据。Broker Slave在变成Master之前不接受生产者的消息。</p><p>Name Server：管理Broker的服务器<br>Broker：真正接收生产者发送的数据的服务器</p><h2 id="5-如何保证消息不丢失-1"><a href="#5-如何保证消息不丢失-1" class="headerlink" title="5.如何保证消息不丢失"></a>5.如何保证消息不丢失</h2><p>消息丢失的原因；如何保证消息不丢失。</p><img src="/JeckFS/2020/08/11/%E9%9D%A2%E8%AF%95/20.png" class="" title="This is 20-th image."><img src="/JeckFS/2020/08/11/%E9%9D%A2%E8%AF%95/21.png" class="" title="This is 21-th image."><img src="/JeckFS/2020/08/11/%E9%9D%A2%E8%AF%95/22.png" class="" title="This is 22-th image."><h2 id="6-如何保证消息不被重复消费、如何保证消息消费的幂等性"><a href="#6-如何保证消息不被重复消费、如何保证消息消费的幂等性" class="headerlink" title="6.如何保证消息不被重复消费、如何保证消息消费的幂等性"></a>6.如何保证消息不被重复消费、如何保证消息消费的幂等性</h2><p>重复消息产生原因、如何保证消息幂等性。</p><img src="/JeckFS/2020/08/11/%E9%9D%A2%E8%AF%95/23.png" class="" title="This is 23-th image."><img src="/JeckFS/2020/08/11/%E9%9D%A2%E8%AF%95/24.png" class="" title="This is 24-th image."><img src="/JeckFS/2020/08/11/%E9%9D%A2%E8%AF%95/25.png" class="" title="This is 25-th image."><img src="/JeckFS/2020/08/11/%E9%9D%A2%E8%AF%95/26.png" class="" title="This is 26-th image."><h2 id="7-如何保证消息消费的顺序性-1"><a href="#7-如何保证消息消费的顺序性-1" class="headerlink" title="7.如何保证消息消费的顺序性"></a>7.如何保证消息消费的顺序性</h2><p>什么是消息顺序消费、保证消息顺序消费的方案。</p><img src="/JeckFS/2020/08/11/%E9%9D%A2%E8%AF%95/27.png" class="" title="This is 27-th image."><img src="/JeckFS/2020/08/11/%E9%9D%A2%E8%AF%95/28.png" class="" title="This is 28-th image."><p>模型一并不能保证消息的顺序消费。</p><img src="/JeckFS/2020/08/11/%E9%9D%A2%E8%AF%95/29.png" class="" title="This is 29-th image."><img src="/JeckFS/2020/08/11/%E9%9D%A2%E8%AF%95/30.png" class="" title="This is 30-th image."><img src="/JeckFS/2020/08/11/%E9%9D%A2%E8%AF%95/31.png" class="" title="This is 31-th image."><p>RocketMQ的解决方案：</p><img src="/JeckFS/2020/08/11/%E9%9D%A2%E8%AF%95/32.png" class="" title="This is 32-th image."><p>单个消息队列的先进先出的特性保证了在MQ节点中的顺序性，然后使用分段锁，在其中一个消费者消费了M1后，用分段锁锁住MQ队列，当该消费者发送消息消费完成的确定后，再释放锁定，让其他消费者读取。分段锁锁住的是单个的消息队列，如上图Queue1。</p><img src="/JeckFS/2020/08/11/%E9%9D%A2%E8%AF%95/33.png" class="" title="This is 33-th image."><p>同一个订单的消息ID是相同的。用订单ID对消息队列总数取模，来确定将消息发送到哪个队列中。 </p><img src="/JeckFS/2020/08/11/%E9%9D%A2%E8%AF%95/34.png" class="" title="This is 34-th image."><p>MessageListenerOrderly内置了分段锁。</p><img src="/JeckFS/2020/08/11/%E9%9D%A2%E8%AF%95/35.png" class="" title="This is 35-th image."><h2 id="8-大量消息堆积处理怎么处理"><a href="#8-大量消息堆积处理怎么处理" class="headerlink" title="8.大量消息堆积处理怎么处理"></a>8.大量消息堆积处理怎么处理</h2><p>消息堆积的原因、如何处理堆积消息。</p><img src="/JeckFS/2020/08/11/%E9%9D%A2%E8%AF%95/36.png" class="" title="This is 36-th image."><img src="/JeckFS/2020/08/11/%E9%9D%A2%E8%AF%95/37.png" class="" title="This is 37-th image."><img src="/JeckFS/2020/08/11/%E9%9D%A2%E8%AF%95/38.png" class="" title="This is 38-th image."><h2 id="9-消息过期怎么处理-1"><a href="#9-消息过期怎么处理-1" class="headerlink" title="9.消息过期怎么处理"></a>9.消息过期怎么处理</h2><p>消息为什么会过期、如何处理</p><img src="/JeckFS/2020/08/11/%E9%9D%A2%E8%AF%95/40.png" class="" title="This is 40-th image."><img src="/JeckFS/2020/08/11/%E9%9D%A2%E8%AF%95/39.png" class="" title="This is 39-th image."><img src="/JeckFS/2020/08/11/%E9%9D%A2%E8%AF%95/41.png" class="" title="This is 41-th image.">]]></content>
      
      
      <categories>
          
          <category> 面经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面经 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WebSocket</title>
      <link href="/JeckFS/2020/08/10/WebSocket/"/>
      <url>/JeckFS/2020/08/10/WebSocket/</url>
      
        <content type="html"><![CDATA[<img src="/JeckFS/2020/08/10/WebSocket/1.png" class="" title="This is 1-th image."><img src="/JeckFS/2020/08/10/WebSocket/2.png" class="" title="This is 2-th image."><p>使用HTTP，服务端只能被动的响应客户端的请求。WebSocket允许服务端主动发送数据给客户端。</p><img src="/JeckFS/2020/08/10/WebSocket/3.png" class="" title="This is 3-th image."><img src="/JeckFS/2020/08/10/WebSocket/4.png" class="" title="This is 4-th image."><p>Ajax是短连接，交互完成就断开连接。<br>WebSocket是长连接。</p><img src="/JeckFS/2020/08/10/WebSocket/5.png" class="" title="This is 5-th image."><img src="/JeckFS/2020/08/10/WebSocket/6.png" class="" title="This is 6-th image."><img src="/JeckFS/2020/08/10/WebSocket/7.png" class="" title="This is 7-th image."><p>WebSocket建立连接和释放连接都是通过HTTP，中间交互是通过TCP长连接完成。</p>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NIO等</title>
      <link href="/JeckFS/2020/08/08/NIO%E7%AD%89/"/>
      <url>/JeckFS/2020/08/08/NIO%E7%AD%89/</url>
      
        <content type="html"><![CDATA[<h1 id="内容简介"><a href="#内容简介" class="headerlink" title="内容简介"></a>内容简介</h1><h2 id="BIO："><a href="#BIO：" class="headerlink" title="BIO："></a>BIO：</h2><img src="/JeckFS/2020/08/08/NIO%E7%AD%89/1.png" class="" title="This is 1-th image."><p>对于每一个客户端的请求，后端使用一个线程去处理。</p><p>代码示例：</p><img src="/JeckFS/2020/08/08/NIO%E7%AD%89/2.png" class="" title="This is 2-th image."><p>handle()中的read(),write()都是阻塞方法。</p><img src="/JeckFS/2020/08/08/NIO%E7%AD%89/3.png" class="" title="This is 3-th image."><p>Blocking IO由于需要很多线程之间切换，基本上实际开发不会使用。</p><h2 id="NIO：Non-Blocking"><a href="#NIO：Non-Blocking" class="headerlink" title="NIO：Non-Blocking"></a>NIO：Non-Blocking</h2><p>轮询客户端的读写请求，并返回响应的数据。</p><p>selector在每个SererSocket上放置一个key用来监听相关事件。当事件发生时，放入Set中，集中处理。</p><img src="/JeckFS/2020/08/08/NIO%E7%AD%89/4.png" class="" title="This is 4-th image."><p>single thread模式的selector负责客户端的读写请求。若其中一个发生阻塞，selector也会阻塞，其他client的请求就无法处理。</p><img src="/JeckFS/2020/08/08/NIO%E7%AD%89/5.png" class="" title="This is 5-th image."><p>这种方式selector将读写请求给线程池中的具体线程来处理。自身不会因为某个通道发生阻塞而导致其他client请求无法处理。</p><p>selector(boss)—线程池线程(worker)</p><h2 id="AIO"><a href="#AIO" class="headerlink" title="AIO"></a>AIO</h2><img src="/JeckFS/2020/08/08/NIO%E7%AD%89/6.png" class="" title="This is 6-th image."><p>使用观察者模式，需要连接时再通知执行相关代码。</p><h2 id="Netty"><a href="#Netty" class="headerlink" title="Netty"></a>Netty</h2><img src="/JeckFS/2020/08/08/NIO%E7%AD%89/7.png" class="" title="This is 7-th image.">]]></content>
      
      
      <categories>
          
          <category> 面经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面经 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>并发程序用例</title>
      <link href="/JeckFS/2020/08/07/%E5%B9%B6%E5%8F%91%E7%A8%8B%E5%BA%8F%E7%94%A8%E4%BE%8B/"/>
      <url>/JeckFS/2020/08/07/%E5%B9%B6%E5%8F%91%E7%A8%8B%E5%BA%8F%E7%94%A8%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="1-ReentrantLock"><a href="#1-ReentrantLock" class="headerlink" title="1. ReentrantLock"></a>1. ReentrantLock</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReenterLockDemo</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">ReentrantLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">1000000</span>; j++) &#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                ++i;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">ReenterLockDemo</span> <span class="variable">reenterLockDemo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReenterLockDemo</span>();</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(reenterLockDemo);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(reenterLockDemo);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t1.join();</span><br><span class="line">        t2.join();</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 运行结果</span></span><br><span class="line"><span class="number">2000000</span></span><br></pre></td></tr></table></figure><p>一共两个线程，它们共享类变量$i$，并发地对$i$进行自增。每个线程自增1000000次，结果显示自增2000000次，所以ReentrantLock进行加锁是有效的。</p><hr><p><strong>ReentrantLock等待可中断的演示：</strong></p><p>两个线程使用不同的锁，在获取一个锁的同时不进行释放，而获取另一个线程持有的锁，产生死锁。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IntLock</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">ReentrantLock</span> <span class="variable">lock1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">ReentrantLock</span> <span class="variable">lock2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> lock;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">IntLock</span><span class="params">(<span class="type">int</span> lock)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.lock = lock;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (lock == <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="comment">// 获取了锁lock1,在不释放自己的锁的同时,再获取lock2</span></span><br><span class="line">                lock1.lockInterruptibly();</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">500</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;&#125;</span><br><span class="line">                lock2.lockInterruptibly();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 获取了锁lock2,在不释放自己的锁的同时,在获取lock1</span></span><br><span class="line">                lock2.lockInterruptibly();</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">500</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e)&#123;&#125;</span><br><span class="line">                lock1.lockInterruptibly();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 释放锁</span></span><br><span class="line">            <span class="keyword">if</span> (lock1.isHeldByCurrentThread()) lock1.unlock();</span><br><span class="line">            <span class="keyword">if</span> (lock2.isHeldByCurrentThread()) lock2.unlock();</span><br><span class="line">            System.out.println(Thread.currentThread().getId()+<span class="string">&quot;:线程退出&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">IntLock</span> <span class="variable">r1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IntLock</span>(<span class="number">1</span>);</span><br><span class="line">        <span class="type">IntLock</span> <span class="variable">r2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IntLock</span>(<span class="number">2</span>);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(r1);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(r2);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        t2.interrupt();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 运行结果</span></span><br><span class="line">java.lang.InterruptedException</span><br><span class="line">at java.util.concurrent.locks.AbstractQueuedSynchronizer.doAcquireInterruptibly(AbstractQueuedSynchronizer.java:<span class="number">898</span>)</span><br><span class="line">at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireInterruptibly(AbstractQueuedSynchronizer.java:<span class="number">1222</span>)</span><br><span class="line">at java.util.concurrent.locks.ReentrantLock.lockInterruptibly(ReentrantLock.java:<span class="number">335</span>)</span><br><span class="line">at other.IntLock.run(IntLock.java:<span class="number">31</span>)</span><br><span class="line">at java.lang.Thread.run(Thread.java:<span class="number">748</span>)</span><br><span class="line"><span class="number">12</span>:线程退出</span><br><span class="line"><span class="number">11</span>:线程退出</span><br></pre></td></tr></table></figure><hr><p><strong>ReentrantLock限时等待演示</strong></p><p>两个线程竞争同一个锁，其中一个线程获取到锁后持有6秒。另一个线程用5秒钟的时间获取锁，获取不到继续执行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TimeLock</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">ReentrantLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (lock.tryLock(<span class="number">5</span>, TimeUnit.SECONDS)) &#123;</span><br><span class="line">                Thread.sleep(<span class="number">6000</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;get lock failed&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (lock.isHeldByCurrentThread()) lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">TimeLock</span> <span class="variable">timeLock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TimeLock</span>();</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(timeLock);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(timeLock);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 运行结果</span></span><br><span class="line">get lock failed</span><br></pre></td></tr></table></figure><hr><p><strong>ReentrantLock尝试获取锁(不等待)</strong></p><p>用极易发生死锁的代码，验证tryLock()。在一段时间后，两线程总会各取所需。<br>只有其中一个线程同时获取两个锁，才不会死锁。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TryLock</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">ReentrantLock</span> <span class="variable">lock1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">ReentrantLock</span> <span class="variable">lock2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> lock;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TryLock</span><span class="params">(<span class="type">int</span> lock)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.lock = lock;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (lock == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (lock1.tryLock()) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            Thread.sleep(<span class="number">500</span>);</span><br><span class="line">                        &#125;<span class="keyword">catch</span> (InterruptedException e)&#123;&#125;</span><br><span class="line">                        <span class="comment">// 获取了lock1锁之后，又尝试获取lock2锁，获取成功后释放lock2锁</span></span><br><span class="line">                        <span class="keyword">if</span> (lock2.tryLock()) &#123;</span><br><span class="line">                            <span class="keyword">try</span> &#123;</span><br><span class="line">                                System.out.println(Thread.currentThread().getId() + <span class="string">&quot;:My Job done&quot;</span>);</span><br><span class="line">                                <span class="keyword">return</span>;</span><br><span class="line">                            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                                lock2.unlock();</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                        lock1.unlock();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (lock2.tryLock()) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            Thread.sleep(<span class="number">500</span>);</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;&#125;</span><br><span class="line">                        <span class="comment">// 获取到lock2锁后，又尝试获取lock1锁，若lock1锁获取成功后，执行操作后释放lock1</span></span><br><span class="line">                        <span class="keyword">if</span> (lock1.tryLock()) &#123;</span><br><span class="line">                            <span class="keyword">try</span> &#123;</span><br><span class="line">                                System.out.println(Thread.currentThread().getId() + <span class="string">&quot;:My Job done&quot;</span>);</span><br><span class="line">                                <span class="keyword">return</span>;</span><br><span class="line">                            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                                lock1.unlock();</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                        lock2.unlock();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">TryLock</span> <span class="variable">r1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TryLock</span>(<span class="number">1</span>);</span><br><span class="line">        <span class="type">TryLock</span> <span class="variable">r2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TryLock</span>(<span class="number">2</span>);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(r1);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(r2);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 运行结果</span></span><br><span class="line"><span class="number">12</span>:My Job done</span><br><span class="line"><span class="number">11</span>:My Job done</span><br></pre></td></tr></table></figure><hr><p><strong>ReentrantLock实现公平锁</strong></p><p>使用公平锁，会维护一个有序队列，所有线程按照时间顺序执行。所有线程不会产生饥饿。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FairLock</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">ReentrantLock</span> <span class="variable">fairLock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                fairLock.lock();</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot; 获得锁&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                fairLock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">FairLock</span> <span class="variable">r1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FairLock</span>();</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(r1, <span class="string">&quot;Thread_t1&quot;</span>);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(r1, <span class="string">&quot;Thread_t2&quot;</span>);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 运行结果</span></span><br><span class="line">Thread_t1 获得锁</span><br><span class="line">Thread_t2 获得锁</span><br><span class="line">Thread_t1 获得锁</span><br><span class="line">Thread_t2 获得锁</span><br><span class="line">Thread_t1 获得锁</span><br><span class="line">Thread_t2 获得锁</span><br><span class="line">Thread_t1 获得锁</span><br><span class="line">Thread_t2 获得锁</span><br><span class="line">Thread_t1 获得锁</span><br><span class="line">Thread_t2 获得锁</span><br><span class="line">...</span><br></pre></td></tr></table></figure><hr><p><strong>Condition的应用示例1</strong></p><p><strong>Condition的await()，signal()等方法执行时需要获取对应的锁。其中await()方法调用后会释放对应的锁。</strong></p><p><strong>若调用Condition.signal()时，没有获取对应的锁，会抛出IllegalMonitorStateException异常。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReentrantLockCondition</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">ReentrantLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">Condition</span> <span class="variable">condition</span> <span class="operator">=</span> lock.newCondition();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            condition.await();</span><br><span class="line">            System.out.println(<span class="string">&quot;Thread is going on&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">ReentrantLockCondition</span> <span class="variable">r1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLockCondition</span>();</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(r1);</span><br><span class="line">        t1.start();</span><br><span class="line">        Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        <span class="comment">// 通知线程t1继续执行</span></span><br><span class="line">        lock.lock();</span><br><span class="line">        condition.signal();</span><br><span class="line">        lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><strong>Condition的应用示例2</strong></p><img src="/JeckFS/2020/08/07/%E5%B9%B6%E5%8F%91%E7%A8%8B%E5%BA%8F%E7%94%A8%E4%BE%8B/1.png" class="" title="This is 1-th image."><img src="/JeckFS/2020/08/07/%E5%B9%B6%E5%8F%91%E7%A8%8B%E5%BA%8F%E7%94%A8%E4%BE%8B/2.png" class="" title="This is 2-th image."><img src="/JeckFS/2020/08/07/%E5%B9%B6%E5%8F%91%E7%A8%8B%E5%BA%8F%E7%94%A8%E4%BE%8B/3.png" class="" title="This is 3-th image."><img src="/JeckFS/2020/08/07/%E5%B9%B6%E5%8F%91%E7%A8%8B%E5%BA%8F%E7%94%A8%E4%BE%8B/4.png" class="" title="This is 4-th image."><hr>]]></content>
      
      
      <categories>
          
          <category> 实战Java高并发程序设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实战Java高并发程序设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ThreadLocal</title>
      <link href="/JeckFS/2020/08/05/ThreadLocal/"/>
      <url>/JeckFS/2020/08/05/ThreadLocal/</url>
      
        <content type="html"><![CDATA[<h1 id="马士兵视频"><a href="#马士兵视频" class="headerlink" title="马士兵视频"></a>马士兵视频</h1><p>软引用对象的定义及获取：</p><img src="/JeckFS/2020/08/05/ThreadLocal/1.png" class="" title="This is 1-th image."><p>软引用的对象在内存不够时会被回收，内存够用不会回收。</p><p>发生GC弱引用对象就被回收。</p><img src="/JeckFS/2020/08/05/ThreadLocal/2.png" class="" title="This is 2-th image."><p>虚引用作用：管理直接内存。</p>]]></content>
      
      
      <categories>
          
          <category> 面经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面经 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring-security</title>
      <link href="/JeckFS/2020/08/05/spring-security/"/>
      <url>/JeckFS/2020/08/05/spring-security/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.jianshu.com/p/e519d3b1446a">参考文档</a></p><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Spring Security是一个能够为<strong>基于 Spring AOP 和 Servlet 过滤器</strong>提供<strong>声明式的安全访问控制</strong>解决方案的安全框架。</p><p>【就帮我们解决两个问题】：</p><ul><li>认证：<strong>验证用户名和密码是否合法</strong>（是否系统中用户），这是第一关；</li><li>授权：是系统用户不代表你能使用某些功能，因为你可能没有权限，这是第二关；<strong>授权url访问权限</strong></li></ul><p>Spring Security底层使用的是过滤器,针对url进行的拦截,对应到java中也就是类; 因此被称为粗粒度授权验证，就是验证url，你当前用户有没有这个url的权限。</p><h1 id="功能模块"><a href="#功能模块" class="headerlink" title="功能模块"></a>功能模块</h1><ul><li><p>Web/Http 安全：这是最复杂的部分。通过建立 filter 和相关的 service bean 来实现框架的认证机制。当访问受保护的 URL 时会将用户引入登录界面或者是错误提示界面。</p></li><li><p>业务对象或者方法的安全：控制方法访问权限的。</p></li><li><p>AuthenticationManager：处理来自于框架其他部分的认证请求。</p></li><li><p>AccessDecisionManager：注册自定义的AccessDecisionManager bean，为 <strong>Web 或方法</strong>的安全提供访问决策。不自定义，系统也会自动生成一个。</p></li><li><p>AuthenticationProvider：AuthenticationManager 是通过它来认证用户的。它用来指定被认证的用户的密码、权限及角色。</p></li><li><p>UserDetailsService：跟 AuthenticationProvider 关系密切，用来获取用户信息的。</p></li></ul><p>【角色】:<br>所有角色应以“ROLE_”作为前缀，“ROLE” 前缀是一个提示 Spring 使用基于角色的检查的标记。</p><h2 id="登录模块"><a href="#登录模块" class="headerlink" title="登录模块"></a>登录模块</h2><p><code>AuthenticationSuccessHandler</code>：<br>登录认证成功后会调用指定 AuthenticationSuccessHandler 的 onAuthenticationSuccess() 方法。我们需要在该方法体内对认证成功做一个处理，然后返回对应的认证成功页面。</p><p><code>AuthenticationFailureHandler</code>：<br>认证失败后会调用指定 AuthenticationFailureHandler 的 onAuthenticationFailure() 方法对认证失败进行处理。</p><h2 id="核心类"><a href="#核心类" class="headerlink" title="核心类"></a>核心类</h2><h3 id="Authentication"><a href="#Authentication" class="headerlink" title="Authentication"></a>Authentication</h3><p>Authentication 是一个接口，用来表示用户认证信息的，在用户登录认证之前相关信息会封装为一个 Authentication 具体实现类的对象，在登录认证成功之后又会生成一个信息更全面，包含用户权限等信息的 Authentication 对象，然后把它保存在 SecurityContextHolder 所持有的 SecurityContext 中，供后续的程序进行调用，如访问权限的鉴定等。</p><p>通过 Authentication.getPrincipal() 可以获取到代表当前用户的信息，这个对象通常是 UserDetails 的实例。</p><h3 id="SecurityContextHolder"><a href="#SecurityContextHolder" class="headerlink" title="SecurityContextHolder"></a>SecurityContextHolder</h3><p>SecurityContextHolder保存SecurityContext，SecurityContext中可以获得Authentication对象，Authentication对象保存了用户的信息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">getCurrentUsername</span><span class="params">()</span> &#123;</span><br><span class="line">   <span class="type">Object</span> <span class="variable">principal</span> <span class="operator">=</span> SecurityContextHolder.getContext().getAuthentication().getPrincipal();</span><br><span class="line">   <span class="keyword">if</span> (principal <span class="keyword">instanceof</span> UserDetails) &#123;</span><br><span class="line">      <span class="keyword">return</span> ((UserDetails) principal).getUsername();</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span> (principal <span class="keyword">instanceof</span> Principal) &#123;</span><br><span class="line">      <span class="keyword">return</span> ((Principal) principal).getName();</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> String.valueOf(principal);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>SecurityContextHolder 是用来保存 SecurityContext 的。SecurityContext 中含有当前正在访问系统的用户的详细信息。</p><p>SecurityContextHolder 中定义了一系列的静态方法，而这些静态方法内部逻辑基本上都是通过 SecurityContextHolder 持有的 SecurityContextHolderStrategy 来实现的，如 getContext()、setContext()、clearContext()等。</p><p>【策略】：ThreadLocalSecurityContextHolderStrategy(默认使用)、 GlobalSecurityContextHolderStrategy(全局使用同一个 SecurityContext)、InheritableThreadLocalSecurityContextHolderStrategy(子线程可以使用父线程中存放的变量)。分别用字符串表示：MODE_THREADLOCAL、MODE_INHERITABLETHREADLOCAL 和 MODE_GLOBAL。</p><p>【更改策略】：SecurityContextHolder 的静态方法 setStrategyName()</p><p>Spring Security 使用一个 Authentication 对象来描述当前用户的相关信息。SecurityContextHolder 中持有的是当前用户的 SecurityContext，而 SecurityContext 持有的是代表当前用户相关信息的 Authentication 的引用。</p><p>此外，调用 SecurityContextHolder.getContext() 获取 SecurityContext 时，如果对应的 SecurityContext 不存在，则 Spring Security 将为我们建立一个空的 SecurityContext 并进行返回。</p></blockquote><h3 id="AuthenticationManager-与-AuthenticationProvider"><a href="#AuthenticationManager-与-AuthenticationProvider" class="headerlink" title="AuthenticationManager 与 AuthenticationProvider"></a>AuthenticationManager 与 AuthenticationProvider</h3><p>AuthenticationManager 是一个用来处理认证（Authentication）请求的接口。在其中只定义了一个方法 authenticate()，该方法只接收一个代表认证请求的 Authentication 对象作为参数，如果认证成功，则会返回一个封装了当前用户权限等信息的 Authentication 对象进行返回。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Authentication <span class="title function_">authenticate</span><span class="params">(Authentication authentication)</span> <span class="keyword">throws</span> AuthenticationException;</span><br></pre></td></tr></table></figure><hr><p>【认证请求的过程】：<br>AuthenticationManager 的默认实现是 ProviderManager，它自身不处理请求，而是委托给其所配置的 AuthenticationProvider 列表，然后会依次使用每一个 AuthenticationProvider 进行认证，如果有一个 AuthenticationProvider 认证后的结果不为 null，则表示该 AuthenticationProvider 已经认证成功，之后的 AuthenticationProvider 将不再继续认证。然后直接以该 AuthenticationProvider 的认证结果作为 ProviderManager 的认证结果。如果所有的 AuthenticationProvider 的认证结果都为 null，则表示认证失败，将抛出一个 ProviderNotFoundException。</p><p>AuthenticationProvider 的默认实现： DaoAuthenticationProvider(系统提供)</p><p>校验认证请求最常用的方法是根据请求的用户名加载对应的 UserDetails，然后比对 UserDetails 的密码与认证请求的密码是否一致，一致则表示认证通过。在认证成功以后会使用加载的 UserDetails 来封装要返回的 Authentication 对象，加载的 UserDetails 对象是包含用户权限等信息的。认证成功返回的 Authentication 对象将会保存在当前的 SecurityContext 中。</p><hr><h3 id="UserDetailsService，JdbcDaoImpl"><a href="#UserDetailsService，JdbcDaoImpl" class="headerlink" title="UserDetailsService，JdbcDaoImpl"></a>UserDetailsService，JdbcDaoImpl</h3><p>UserDetailsService 是对用户信息的一层封装，Spring Security 在使用用户信息的时候，都是调用的 UserDetails 。比如在登录认证的时候。登录认证的时候 Spring Security 会通过 UserDetailsService 的 loadUserByUsername() 方法获取对应的 UserDetails 进行认证，认证通过后会将该 UserDetails 赋给认证通过的 Authentication 的 principal，然后再把该 Authentication 存入到 SecurityContext 中。之后如果需要使用用户信息的时候就是通过 SecurityContextHolder 获取存放在 SecurityContext 中的 Authentication 的 principal。</p><p><strong>UserDetailsService ，UserDetails 都只对用户类进行封装和操作。用户类继承这两个类完成自定义用户的类。</strong></p><hr><p>JdbcDaoImpl 允许我们从数据库来加载 UserDetails，其底层使用的是 Spring 的 JdbcTemplate 进行操作，所以我们需要给其指定一个数据源。</p><p>JdbcDaoImpl 可以指定一些SQL语句，用来查询 UserDetails 中相关权限的信息。</p><h3 id="InMemoryDaoImpl，GrantedAuthority"><a href="#InMemoryDaoImpl，GrantedAuthority" class="headerlink" title="InMemoryDaoImpl，GrantedAuthority"></a>InMemoryDaoImpl，GrantedAuthority</h3><p>InMemoryDaoImpl 主要是测试用的，其只是简单的将用户信息保存在内存中。</p><hr><p>Authentication 的 getAuthorities() 可以返回当前 Authentication 对象拥有的权限，即当前用户拥有的权限。其返回值是一个 GrantedAuthority 类型的数组，每一个 GrantedAuthority 对象代表赋予给当前用户的一种权限。GrantedAuthority 是一个接口，其通常是通过 UserDetailsService 进行加载，然后赋予给 UserDetails 的。</p><p>GrantedAuthority 中只定义了一个 getAuthority() 方法，该方法返回一个字符串，表示对应权限的字符串表示，如果对应权限不能用字符串表示，则应当返回 null。</p><p>Spring Security 针对 GrantedAuthority 有一个简单实现 <code>SimpleGrantedAuthority</code>。该类只是简单的接收一个表示权限的字符串。Spring Security 内部的所有 AuthenticationProvider 都是使用 SimpleGrantedAuthority 来封装 Authentication 对象。</p><h1 id="Spring-Security-认证简介"><a href="#Spring-Security-认证简介" class="headerlink" title="Spring Security 认证简介"></a>Spring Security 认证简介</h1><h2 id="认证过程"><a href="#认证过程" class="headerlink" title="认证过程"></a>认证过程</h2><ul><li><p>用户使用用户名和密码进行登录。</p></li><li><p>Spring Security 将获取到的用户名和密码封装成一个实现了 Authentication 接口的 <code>UsernamePasswordAuthenticationToken</code>。</p></li><li><p>将上述产生的 token 对象传递给 AuthenticationManager 进行登录认证。</p></li><li><p>AuthenticationManager 认证成功后将会返回一个封装了用户权限等信息的 Authentication 对象。</p></li><li><p>通过调用 SecurityContextHolder.getContext().setAuthentication(…) 将 AuthenticationManager 返回的 Authentication 对象赋予给当前的 SecurityContext。</p></li></ul><p>上述介绍的就是 Spring Security 的认证过程。在认证成功后，用户就可以继续操作去访问其它受保护的资源了，但是在访问的时候将会使用保存在 SecurityContext 中的 Authentication 对象进行相关的权限鉴定。</p><h1 id="Spring-Security-Filter顺序"><a href="#Spring-Security-Filter顺序" class="headerlink" title="Spring Security Filter顺序"></a>Spring Security Filter顺序</h1><p>Spring Security 的底层是通过一系列的 Filter 来管理的，每个 Filter 都有其自身的功能，而且各个 Filter 在功能上还有关联关系，所以它们的顺序也是非常重要的。</p><p>【Filter 顺序】</p><ul><li><p>Spring Security 已经定义了一些 Filter，不管实际应用中你用到了哪些，它们应当保持如下顺序。</p></li><li><p>ChannelProcessingFilter，如果你访问的 channel 错了，那首先就会在 channel 之间进行跳转，如 http 变为 https。</p></li><li><p>SecurityContextPersistenceFilter，这样的话在一开始进行 request 的时候就可以在 SecurityContextHolder 中建立一个 SecurityContext，然后在请求结束的时候，任何对 SecurityContext 的改变都可以被 copy 到 HttpSession。</p></li><li><p><code>ConcurrentSessionFilter</code>，因为它需要使用 SecurityContextHolder 的功能，而且更新对应 session 的最后更新时间，以及通过 SessionRegistry 获取当前的 SessionInformation 以检查当前的 session 是否已经过期，过期则会调用 LogoutHandler。</p></li><li><p>认证处理机制，如 <code>UsernamePasswordAuthenticationFilter</code>，CasAuthenticationFilter，BasicAuthenticationFilter 等，以至于 SecurityContextHolder 可以被更新为包含一个有效的 Authentication 请求。</p><p>UsernamePasswordAuthenticationFilter 用于处理来自表单提交的认证。该表单必须提供对应的用户名和密码，对应的参数名默认为 j_username 和 j_password。如果不想使用默认的参数名，可以通过 UsernamePasswordAuthenticationFilter 的 usernameParameter 和 passwordParameter 进行指定。表单的提交路径默认是 “j_spring_security_check”，也可以通过 UsernamePasswordAuthenticationFilter 的 filterProcessesUrl 进行指定。通过属性 postOnly 可以指定只允许登录表单进行 post 请求，默认是 true。其内部还有登录成功或失败后进行处理的 AuthenticationSuccessHandler 和 AuthenticationFailureHandler，这些都可以根据需求做相关改变。此外，它还需要一个 AuthenticationManager 的引用进行认证，这个是没有默认配置的。</p></li><li><p>SecurityContextHolderAwareRequestFilter，它将会把 HttpServletRequest 封装成一个继承自 HttpServletRequestWrapper 的 SecurityContextHolderAwareRequestWrapper，同时使用 SecurityContext 实现了 HttpServletRequest 中与安全相关的方法。</p></li><li><p>JaasApiIntegrationFilter，如果 SecurityContextHolder 中拥有的 Authentication 是一个 JaasAuthenticationToken，那么该 Filter 将使用包含在 JaasAuthenticationToken 中的 Subject 继续执行 FilterChain。</p></li><li><p>RememberMeAuthenticationFilter，如果之前的认证处理机制没有更新 SecurityContextHolder，并且用户请求包含了一个 Remember-Me 对应的 cookie，那么一个对应的 Authentication 将会设给 SecurityContextHolder。</p></li><li><p>AnonymousAuthenticationFilter，如果之前的认证机制都没有更新 SecurityContextHolder 拥有的 Authentication，那么一个 AnonymousAuthenticationToken 将会设给 SecurityContextHolder。</p></li><li><p>ExceptionTransactionFilter，用于处理在 FilterChain 范围内抛出的 AccessDeniedException 和 AuthenticationException，并把它们转换为对应的 Http 错误码返回或者对应的页面。</p></li><li><p><code>FilterSecurityInterceptor</code>，保护 Web URI，并且在访问被拒绝时抛出异常。</p><p>FilterSecurityInterceptor 是用于保护 Http 资源的，它需要一个 AccessDecisionManager 和一个 AuthenticationManager 的引用。它会从 SecurityContextHolder 获取 Authentication，然后通过 SecurityMetadataSource 可以得知当前请求是否在请求受保护的资源。对于请求那些受保护的资源，如果 Authentication.isAuthenticated()返回 false 或者 FilterSecurityInterceptor 的 alwaysReauthenticate 属性为 true，那么将会使用其引用的 AuthenticationManager 再认证一次，认证之后再使用认证后的 Authentication 替换 SecurityContextHolder 中拥有的那个。然后就是利用 AccessDecisionManager 进行权限的检查。</p></li></ul><h1 id="Spring-Security-匿名认证"><a href="#Spring-Security-匿名认证" class="headerlink" title="Spring Security 匿名认证"></a>Spring Security 匿名认证</h1><p>对于匿名访问的用户，Spring Security 支持为其建立一个匿名的 <code>AnonymousAuthenticationToken</code> 存放在 SecurityContextHolder 中，这就是所谓的匿名认证。这样在以后进行权限认证或者做其它操作时我们就不需要再判断 SecurityContextHolder 中持有的 Authentication 对象是否为 null 了，而直接把它当做一个正常的 Authentication 进行使用就 OK 了。</p><h1 id="与Token相关的东西"><a href="#与Token相关的东西" class="headerlink" title="与Token相关的东西"></a>与Token相关的东西</h1><p>【RememberMeServices】</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">RememberMeServices</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自动登录。在实现这个方法的时候应该判断用户提供的 Remember-Me cookie 是否有效，如果无效，应当直接忽略。</span></span><br><span class="line"><span class="comment">     * 如果认证成功应当返回一个 AuthenticationToken，推荐返回 RememberMeAuthenticationToken；</span></span><br><span class="line"><span class="comment">     * 如果认证不成功应当返回 null。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Authentication <span class="title function_">autoLogin</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在用户登录失败时调用。实现者应当做一些类似于删除 cookie 之类的处理。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">loginFail</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在用户成功登录后调用。实现者可以在这里判断用户是否选择了 “Remember-Me” 登录，然后做相应的处理。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">loginSuccess</span><span class="params">(HttpServletRequest request, HttpServletResponse response,</span></span><br><span class="line"><span class="params">        Authentication successfulAuthentication)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>UsernamePasswordAuthenticationFilter 拥有一个 RememberMeServices 的引用，默认是一个空实现的 NullRememberMeServices，而实际当我们通过 remember-me 定义启用 Remember-Me 时，它会是一个具体的实现。用户的请求会先通过 UsernamePasswordAuthenticationFilter，如认证成功会调用 RememberMeServices 的 loginSuccess() 方法，否则调用 RememberMeServices 的 loginFail() 方法。UsernamePasswordAuthenticationFilter 是不会调用 RememberMeServices 的 autoLogin() 方法进行自动登录的。之后运行到 RememberMeAuthenticationFilter 时如果检测到还没有登录，那么 RememberMeAuthenticationFilter 会尝试着调用所包含的 RememberMeServices 的 autoLogin() 方法进行自动登录。关于 RememberMeServices Spring Security 已经为我们提供了两种实现，分别对应于前文提到的基于简单加密 token 和基于持久化 token 的方法。</p><h1 id="spring-security-session"><a href="#spring-security-session" class="headerlink" title="spring security session"></a>spring security session</h1><p>【session 固定攻击保护】</p><p>session 固定是指服务器在给客户端创建 session 后，在该 session 过期之前，它们都将通过该 session 进行通信。session 固定攻击是指恶意攻击者先通过访问应用来创建一个 session，然后再让其他用户使用相同的 session 进行登录（比如通过发送一个包含该 sessionId 参数的链接），待其他用户成功登录后，攻击者利用原来的 sessionId 访问系统将和原用户获得同样的权限。Spring Security 默认是对 session 固定攻击采取了保护措施的，它会在用户登录的时候重新为其生成一个新的 session。如果你的应用不需要这种保护或者该保护措施与你的某些需求相冲突，你可以通过 session-management 的 session-fixation-protection 属性来改变其保护策略。该属性的可选值有如下三个。</p><ul><li><p>migrateSession：这是默认值。其表示在用户登录后将新建一个 session，同时将原 session 中的 attribute 都 copy 到新的 session 中。</p></li><li><p>none：表示继续使用原来的 session。</p></li><li><p>newSession：表示重新创建一个新的 session，但是不 copy 原 session 拥有的 attribute。</p></li></ul><h1 id="Spring-Security-权限鉴定基础"><a href="#Spring-Security-权限鉴定基础" class="headerlink" title="Spring Security 权限鉴定基础"></a>Spring Security 权限鉴定基础</h1><p><a href="http://www.baiyu.tech/code/491">Spring Security 权限鉴定基础</a></p><p><a href="https://www.jianshu.com/p/e519d3b1446a">参考文档</a></p><img src="/JeckFS/2020/08/05/spring-security/1.png" class="" title="This is 1-th image."><img src="/JeckFS/2020/08/05/spring-security/2.png" class="" title="This is 2-th image."><img src="/JeckFS/2020/08/05/spring-security/3.png" class="" title="This is 3-th image."><img src="/JeckFS/2020/08/05/spring-security/4.png" class="" title="This is 4-th image."><p><a href="https://www.bilibili.com/video/BV1nz4y1X7jh?p=52">https://www.bilibili.com/video/BV1nz4y1X7jh?p=52</a></p><p>ThreadLocal内存泄漏</p>]]></content>
      
      
      <categories>
          
          <category> spring-security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring-security </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微人事</title>
      <link href="/JeckFS/2020/08/04/%E5%BE%AE%E4%BA%BA%E4%BA%8B/"/>
      <url>/JeckFS/2020/08/04/%E5%BE%AE%E4%BA%BA%E4%BA%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="后端技术栈"><a href="#后端技术栈" class="headerlink" title="后端技术栈"></a>后端技术栈</h1><p>Spring Boot<br>Spring Security<br>MyBatis<br>MySQL<br>Redis<br>RabbitMQ<br>Spring Cache<br>WebSocket<br>…</p><h1 id="前端技术栈"><a href="#前端技术栈" class="headerlink" title="前端技术栈"></a>前端技术栈</h1><p>Vue<br>ElementUI<br>axios<br>vue-router<br>Vuex<br>WebSocket<br>vue-cli4<br>…</p><p><a href="https://github.com/lenve/vhr">项目地址</a></p><p>用户登录后先去查询用户信息(通过UserDetailsService.loadUserByUsername())</p><p>SecurityConfig extends WebSecurityConfigurerAdapter<br>    —&gt; 加入 LoginFilter extends UsernamePasswordAuthenticationFilter</p>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>牛客-选区间</title>
      <link href="/JeckFS/2020/08/01/%E7%89%9B%E5%AE%A2-%E9%80%89%E5%8C%BA%E9%97%B4/"/>
      <url>/JeckFS/2020/08/01/%E7%89%9B%E5%AE%A2-%E9%80%89%E5%8C%BA%E9%97%B4/</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><img src="/JeckFS/2020/08/01/%E7%89%9B%E5%AE%A2-%E9%80%89%E5%8C%BA%E9%97%B4/1.png" class="" title="This is 1-th image."><img src="/JeckFS/2020/08/01/%E7%89%9B%E5%AE%A2-%E9%80%89%E5%8C%BA%E9%97%B4/2.png" class="" title="This is 2-th image."><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>每次以位置i的元素为最小值选取一个区间[a,b]，由于num[i]是该区间最小的元素，所以其“区间中的最小数*区间中所有数的和”就十分容易计算了。</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">helper</span><span class="params">(<span class="type">int</span>[] num)</span>&#123;</span><br><span class="line">        <span class="type">int</span>[] sum = <span class="keyword">new</span> <span class="title class_">int</span>[num.length];</span><br><span class="line">        sum[<span class="number">0</span>] = num[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; num.length; ++i)&#123;</span><br><span class="line">            sum[i] = sum[i-<span class="number">1</span>] + num[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; num.length; ++i)&#123; <span class="comment">// 选定一个区间[a,b]使得i位置元素是该区间中最小</span></span><br><span class="line">            <span class="type">int</span> a,b;</span><br><span class="line">            <span class="keyword">for</span>(a = i; a &gt;= <span class="number">0</span> &amp;&amp; num[a] &gt;= num[i]; --a);<span class="comment">//左扩</span></span><br><span class="line">            <span class="keyword">for</span>(b = i; b &lt; num.length &amp;&amp; num[b] &gt;= num[i]; ++b);<span class="comment">//右扩</span></span><br><span class="line">            <span class="comment">// 1 4 2 3 1</span></span><br><span class="line">            <span class="comment">// a   i   b</span></span><br><span class="line">            <span class="comment">//   2</span></span><br><span class="line">            <span class="comment">// a   b</span></span><br><span class="line">            <span class="comment">//    1 1 1</span></span><br><span class="line">            <span class="comment">// a  i     b</span></span><br><span class="line">            <span class="keyword">if</span>(a == -<span class="number">1</span>) res = Math.max(res, sum[b-<span class="number">1</span>]*num[i]);</span><br><span class="line">            <span class="keyword">else</span> res = Math.max(res, num[i]*(sum[b-<span class="number">1</span>]-sum[a]));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">        <span class="type">int</span>[] num = <span class="keyword">new</span> <span class="title class_">int</span>[c];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; c; ++i)&#123;</span><br><span class="line">            num[i] = sc.nextInt();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(helper(num));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 牛客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 牛客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>牛客-任务调度</title>
      <link href="/JeckFS/2020/07/31/%E7%89%9B%E5%AE%A2-%E4%BB%BB%E5%8A%A1%E8%B0%83%E5%BA%A6/"/>
      <url>/JeckFS/2020/07/31/%E7%89%9B%E5%AE%A2-%E4%BB%BB%E5%8A%A1%E8%B0%83%E5%BA%A6/</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><img src="/JeckFS/2020/07/31/%E7%89%9B%E5%AE%A2-%E4%BB%BB%E5%8A%A1%E8%B0%83%E5%BA%A6/5.png" class="" title="This is 5-th image."><img src="/JeckFS/2020/07/31/%E7%89%9B%E5%AE%A2-%E4%BB%BB%E5%8A%A1%E8%B0%83%E5%BA%A6/6.png" class="" title="This is 6-th image."><img src="/JeckFS/2020/07/31/%E7%89%9B%E5%AE%A2-%E4%BB%BB%E5%8A%A1%E8%B0%83%E5%BA%A6/7.png" class="" title="This is 7-th image."><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>使用两个小顶堆解题。</p><p>将每个任务定义成一个类Elem。<br>小顶堆heapElem用来存储Elem任务。heapElem中的每个任务按照提出时间、任务优先级、完成任务所需时间、PM序号由小到大排序。这个顺序也是员工做任务的顺序。</p><p>小顶堆heapTime用来存储每个员工完成某个任务的时间。初始时为0，表示可以从0时刻开始做任务(如果有的话)。</p><p>每次从heapElem poll出一个任务，交给完成任务最早的那个员工(或者说是完成任务后，等待时间最长的那个员工)，任务完成后，将该员工的完成时间入heapTime即可。循环直到所有任务都完成。</p><p>关于结果的输出：<br>使用队列保存输入任务的顺序。在按照小顶堆中的顺序计算出的每个任务完成时间存入HashMap中，以供输出。</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">一个PM想出多个idea</span></span><br><span class="line"><span class="comment">一个idea有 优先级，所需时间，提出时间(任意两个idea的提出时间不同，</span></span><br><span class="line"><span class="comment">换言之，每个idea都是不同的)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">M个程序员</span></span><br><span class="line"><span class="comment">每个空闲程序员按照“优先级，所需时间，PM序号”实现未完成的idea</span></span><br><span class="line"><span class="comment">多个空闲程序员依次进行查看idea的操作。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">PM序号 提出时间 优先级 所需时间</span></span><br><span class="line"><span class="comment">1 1 1 2  3</span></span><br><span class="line"><span class="comment">2 1 1 2  3</span></span><br><span class="line"><span class="comment">1 2 1 1  4</span></span><br><span class="line"><span class="comment">1 3 2 2  5</span></span><br><span class="line"><span class="comment">2 3 5 5  9</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">1 1 1 2</span></span><br><span class="line"><span class="comment">2 1 1 2</span></span><br><span class="line"><span class="comment">1 2 1 1</span></span><br><span class="line"><span class="comment">1 3 2 2</span></span><br><span class="line"><span class="comment">2 3 5 5</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">1 1 1 2  3</span></span><br><span class="line"><span class="comment">2 1 1 2  3</span></span><br><span class="line"><span class="comment">1 2 1 1  4</span></span><br><span class="line"><span class="comment">1 3 2 2  5</span></span><br><span class="line"><span class="comment">2 3 5 5  9</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Elem</span>&#123;</span><br><span class="line">        <span class="type">int</span> pm,putForwordTime,priority,persistentTime;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Elem</span><span class="params">(<span class="type">int</span> a1,<span class="type">int</span> a2,<span class="type">int</span> a3,<span class="type">int</span> a4)</span>&#123;</span><br><span class="line">            pm = a1;</span><br><span class="line">            putForwordTime=a2;</span><br><span class="line">            priority=a3;</span><br><span class="line">            persistentTime=a4;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span>&#123;</span><br><span class="line">            <span class="type">Elem</span> <span class="variable">t</span> <span class="operator">=</span> (Elem) o;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.pm == t.pm </span><br><span class="line">              &amp;&amp; <span class="built_in">this</span>.putForwordTime == t.putForwordTime</span><br><span class="line">              &amp;&amp; <span class="built_in">this</span>.priority == t.priority</span><br><span class="line">              &amp;&amp; <span class="built_in">this</span>.persistentTime == t.persistentTime;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">(Object o)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> Objects.hashCode(o);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> pm+<span class="string">&quot; &quot;</span>+putForwordTime+<span class="string">&quot; &quot;</span>+priority+<span class="string">&quot; &quot;</span>+persistentTime;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> PriorityQueue&lt;Elem&gt; heapElem;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> PriorityQueue&lt;Integer&gt; heapTime;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> HashMap&lt;Elem,Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">helper</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(!heapElem.isEmpty()) &#123;</span><br><span class="line">            <span class="type">Elem</span> <span class="variable">e</span> <span class="operator">=</span> heapElem.poll();</span><br><span class="line">            <span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> heapTime.poll();</span><br><span class="line">            <span class="keyword">if</span>(t &lt; e.putForwordTime)&#123;<span class="comment">//比提出时间早，需要等待</span></span><br><span class="line">                heapTime.add(e.putForwordTime+e.persistentTime);</span><br><span class="line">                map.put(e,e.putForwordTime+e.persistentTime);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                heapTime.add(t+e.persistentTime);</span><br><span class="line">                map.put(e,t+e.persistentTime);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        Comparator&lt;Elem&gt; c = (a, b)-&gt;&#123;</span><br><span class="line">            <span class="keyword">if</span>(a.putForwordTime &gt; b.putForwordTime) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(a.putForwordTime &lt; b.putForwordTime) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(a.priority &gt; b.priority) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(a.priority &lt; b.priority) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(a.persistentTime &gt; b.persistentTime) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(a.persistentTime &lt; b.persistentTime) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(a.pm &gt; b.pm) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(a.pm &lt; b.pm) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">        heapElem = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;(c);</span><br><span class="line">        heapTime = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;(); <span class="comment">//默认是小顶堆</span></span><br><span class="line">        Queue&lt;Elem&gt; q = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">        <span class="type">int</span> <span class="variable">p</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; Math.min(m,p); ++i)&#123;</span><br><span class="line">            heapTime.add(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; p; ++i)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">pm</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">            <span class="type">int</span> <span class="variable">putForwordTime</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">            <span class="type">int</span> <span class="variable">priority</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">            <span class="type">int</span> <span class="variable">persistentTime</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">            <span class="type">Elem</span> <span class="variable">e</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Elem</span>(pm,putForwordTime,priority,persistentTime);</span><br><span class="line">            heapElem.add(e);</span><br><span class="line">            q.add(e);</span><br><span class="line">        &#125;</span><br><span class="line">        helper();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(!q.isEmpty())&#123;</span><br><span class="line">            System.out.println(map.get(q.poll()));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 牛客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 牛客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>牛客-万万没想到之孔连顺</title>
      <link href="/JeckFS/2020/07/31/%E7%89%9B%E5%AE%A2-%E4%B8%87%E4%B8%87%E6%B2%A1%E6%83%B3%E5%88%B0%E4%B9%8B%E5%AD%94%E8%BF%9E%E9%A1%BA/"/>
      <url>/JeckFS/2020/07/31/%E7%89%9B%E5%AE%A2-%E4%B8%87%E4%B8%87%E6%B2%A1%E6%83%B3%E5%88%B0%E4%B9%8B%E5%AD%94%E8%BF%9E%E9%A1%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><img src="/JeckFS/2020/07/31/%E7%89%9B%E5%AE%A2-%E4%B8%87%E4%B8%87%E6%B2%A1%E6%83%B3%E5%88%B0%E4%B9%8B%E5%AD%94%E8%BF%9E%E9%A1%BA/1.png" class="" title="This is 1-th image."><img src="/JeckFS/2020/07/31/%E7%89%9B%E5%AE%A2-%E4%B8%87%E4%B8%87%E6%B2%A1%E6%83%B3%E5%88%B0%E4%B9%8B%E5%AD%94%E8%BF%9E%E9%A1%BA/2.png" class="" title="This is 2-th image."><img src="/JeckFS/2020/07/31/%E7%89%9B%E5%AE%A2-%E4%B8%87%E4%B8%87%E6%B2%A1%E6%83%B3%E5%88%B0%E4%B9%8B%E5%AD%94%E8%BF%9E%E9%A1%BA/3.png" class="" title="This is 3-th image."><img src="/JeckFS/2020/07/31/%E7%89%9B%E5%AE%A2-%E4%B8%87%E4%B8%87%E6%B2%A1%E6%83%B3%E5%88%B0%E4%B9%8B%E5%AD%94%E8%BF%9E%E9%A1%BA/4.png" class="" title="This is 4-th image."><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>单纯二分查找的问题。<br><strong>巨坑：Java中的乘法运算默认是int类型的。如int n = 100000000; n*(n-1)将会溢出。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span>[] a;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">binarySearch</span><span class="params">(<span class="type">int</span> target)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">low</span> <span class="operator">=</span> <span class="number">0</span>, high = a.length-<span class="number">1</span>,mid;</span><br><span class="line">        <span class="keyword">while</span>(low &lt;= high)&#123;</span><br><span class="line">            mid = (low+high)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(target == a[mid]) <span class="keyword">return</span> mid;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(target &gt; a[mid]) &#123;</span><br><span class="line">                low = mid+<span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                high = mid-<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> high;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">long</span> <span class="title function_">C_n_2</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">t</span> <span class="operator">=</span> n;</span><br><span class="line">        <span class="keyword">return</span> t * (t-<span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">helper</span><span class="params">(<span class="type">int</span> d)</span>&#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; ; ++i)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">idx</span> <span class="operator">=</span> binarySearch(a[i] + d);</span><br><span class="line">            <span class="keyword">if</span>(idx - i &lt; <span class="number">2</span>) &#123;</span><br><span class="line">                System.out.print(sum);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            sum += C_n_2(idx - i);</span><br><span class="line">            sum %= <span class="number">99997867</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">        <span class="type">int</span> <span class="variable">d</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">        a = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">            a[i] = sc.nextInt();</span><br><span class="line">        &#125;</span><br><span class="line">        helper(d);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 牛客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 牛客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>G1垃圾收集器</title>
      <link href="/JeckFS/2020/07/30/G1%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8/"/>
      <url>/JeckFS/2020/07/30/G1%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="实现目标"><a href="#实现目标" class="headerlink" title="实现目标"></a>实现目标</h1><p>能够实现<strong>在一个长度为M毫秒的时间片断内，消耗在垃圾收集上的时间大概率不超过N毫秒</strong>的目标。G1追求<strong>内存回收的速度不超过内存分配的速度</strong>，否则，将导致Full GC导致STW。</p><h1 id="内存布局"><a href="#内存布局" class="headerlink" title="内存布局"></a>内存布局</h1><p>G1保留了新生代和老年代的概念。</p><p>G1讲连续的Java堆划分成多个大小相等的独立区域Region，每一个区域都可以是Eden空间、Survivor空间、老年代空间、或者Humongous区域。不同的区域采用不同的收集策略。</p><p>Humongous区域类似于老年代，用来存放大对象，G1将超过Region容量一半的对象判定为大对象。对于超过Region容量的大对象，G1分配多个连续的Region存储该对象。</p><img src="/JeckFS/2020/07/30/G1%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8/1.png" class="" title="This is 1-th image."><p>每个Region包含5个指针：bottom，previous TAMS，next TAMS，top，end。</p><img src="/JeckFS/2020/07/30/G1%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8/2.png" class="" title="This is 2-th image."><img src="/JeckFS/2020/07/30/G1%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8/3.png" class="" title="This is 3-th image."><p>top之前是已经分配对象的区域，top之后是未分配对象的区域。</p><h1 id="垃圾收集过程简介"><a href="#垃圾收集过程简介" class="headerlink" title="垃圾收集过程简介"></a>垃圾收集过程简介</h1><p>以Region为回收单位，首先回收价值较大的Region。价值以回收所获得的空间大小、回收所需时间的经验值来衡量。</p><p>不在局限于到底是老年代还是新生代，G1面向堆内存任何部分进行回收，回收的标准不是它属于哪个分代，而是哪块内存中存放的垃圾数量最多，回收的收益最大。</p><h1 id="垃圾回收的步骤"><a href="#垃圾回收的步骤" class="headerlink" title="垃圾回收的步骤"></a>垃圾回收的步骤</h1><img src="/JeckFS/2020/07/30/G1%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8/4.png" class="" title="This is 4-th image."><ol><li>初始标记<br>仅标记GC Roots能直接关联到的对象，并更新TAMS指针，确定可分配空间，为下一轮内存分配做准备。这个过程停顿线程但耗时很短。</li><li>并发标记<br>从GC Roots对象开始进行可达性分析，通过扫描整个堆中的对象图，找到要回收的对象。这个过程耗时较长，但可以与用户线程并发执行。</li><li>最终标记<br>将并发阶段产生变动的对象进行重新标记。</li><li>筛选回收<br>负责更新Region的统计数据，对各个Region的回收价值和成本进行排序。根据用户期望的停顿时间制定回收计划。采用<strong>复制-整理</strong>算法进行回收，即将存活的对象复制到空的Region中，再清理掉原来的空间。移动对象时必须暂定用户线程。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 深入理解Java虚拟机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深入理解Java虚拟机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络-谢希任-网络安全</title>
      <link href="/JeckFS/2020/07/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
      <url>/JeckFS/2020/07/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/</url>
      
        <content type="html"><![CDATA[<img src="/JeckFS/2020/07/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/1.png" class="" title="This is 1-th image."><h1 id="1-网络安全问题"><a href="#1-网络安全问题" class="headerlink" title="1.网络安全问题"></a>1.网络安全问题</h1><p>两大类：<strong>被动攻击和主动攻击</strong></p><img src="/JeckFS/2020/07/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/2.png" class="" title="This is 2-th image."><p><strong>被动攻击</strong>只从某一个协议数据单元PDU以及通信量等方面分析出通信双方的相关信息。如协议实体的地址和身份等。在战争时期可以通过分析某个地方出现大量异常的通信量，而确定敌方指挥所的位置。</p><p><strong>被动攻击</strong>见上图。</p><img src="/JeckFS/2020/07/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/3.png" class="" title="This is 3-th image."><img src="/JeckFS/2020/07/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/4.png" class="" title="This is 4-th image."><img src="/JeckFS/2020/07/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/5.png" class="" title="This is 5-th image."><img src="/JeckFS/2020/07/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/6.png" class="" title="This is 6-th image."><p><strong>数据加密模型</strong></p><img src="/JeckFS/2020/07/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/7.png" class="" title="This is 7-th image."><h1 id="2-两类密码体制"><a href="#2-两类密码体制" class="headerlink" title="2.两类密码体制"></a>2.两类密码体制</h1><h2 id="2-1-对称密钥密码体制"><a href="#2-1-对称密钥密码体制" class="headerlink" title="2.1 对称密钥密码体制"></a>2.1 对称密钥密码体制</h2><p>所谓对称密钥密码体制，就是加密密钥与解密密钥是使用相同的密码体制。如上图 7-2。</p><p><strong>DES</strong>：数据加密标准，属于对称密钥密码体制。</p><img src="/JeckFS/2020/07/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/8.png" class="" title="This is 8-th image."><p><strong>DES的保密性仅取决于对密钥的保密，而算法是公开的。DES密钥时56位的，共</strong>$2^{56}$<strong>种可能的密钥。现在一些好的计算机可以在几个小时内全部搜索一遍。即单纯的DES是不安全的。</strong><br><strong>目前主流的都是使用三重DES，即把一个64位明文用一个密钥加密，再用另一个密钥解密，然后再使用第一个密钥加密。</strong>即$Y=DES<em>{K1}(DES^{-1}</em>{K2}(DES_{K1}(X)))$。<strong>三重DES广泛用于网络、金融、信用卡系统。</strong></p><h2 id="2-2公钥密码体制"><a href="#2-2公钥密码体制" class="headerlink" title="2.2公钥密码体制"></a>2.2公钥密码体制</h2><p><strong>任何加密方法的安全性取决于密钥的长度，以及攻破密文所需的计算量。</strong>目前公钥加密算法的<strong>开销较大</strong>，但在可见的将来仍会使用。</p><p><strong>公钥密码体制使用不同的加密密钥和解密密钥。</strong></p><p>公钥密码体制的优点：<br>公钥密码体制解决了对称秘要密码体制的<strong>密钥分配问题</strong>，显然密钥在网络中传输时不合适的。另一点时公钥密码体制支持<strong>数字签名</strong>。</p><img src="/JeckFS/2020/07/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/9.png" class="" title="This is 9-th image."><p>其中B的公钥$PK_B$、加密算法、解密算法都是公开的。只有B的私钥$SK_B$是保密的。</p><p>公钥密码体制可以实现<strong>多对一的单向保密通信</strong>。即多个人持有B的公钥$PK_B$，向B发送数据，B通过私钥解密。</p><p>对称密钥可以实现<strong>一对一的双向保密通信</strong>。</p><h1 id="3-数字签名"><a href="#3-数字签名" class="headerlink" title="3.数字签名"></a>3.数字签名</h1><img src="/JeckFS/2020/07/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/10.png" class="" title="This is 10-th image."><p>加密算法是通过接收方的公钥进行加密，接收方接收到后使用自己的私钥进行解密。<br>而数字签名为了使得其他接受者确定这个报文就是自己发送的，而使用<strong>发送者的私钥</strong>进行加密，接受者通过<strong>发送者的公钥</strong>进行解密。<strong>由于发送者的私钥是只有自己知道的</strong>，其他人若篡改报文后，经过解密后是一串乱码。</p><p>数字签名实现的功能：</p><ul><li>核实报文确实时某个具体的发送者发送的。<strong>报文鉴别</strong></li><li>能够检查出报文是否被篡改过。<strong>报文的完整性</strong></li><li>发送者事后不能抵赖对报文的签名。<strong>不可否认</strong></li></ul><img src="/JeckFS/2020/07/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/11.png" class="" title="This is 11-th image."><p><strong>当被加密的数据很大时，加密和解密非常耗费时间。</strong>所以数字签名仅能用于加密较小的数据。</p><h1 id="4-鉴别"><a href="#4-鉴别" class="headerlink" title="4.鉴别"></a>4.鉴别</h1><p><strong>鉴别和加密是两码事儿。鉴别是验证通信的对方的确时自己所要通信的对象，而不是其他的冒充者，并且所发送的报文是完整的，没有被他人篡改过。</strong></p><h2 id="4-1-报文鉴别"><a href="#4-1-报文鉴别" class="headerlink" title="4.1 报文鉴别"></a>4.1 报文鉴别</h2><p><strong>报文鉴别主要用来鉴别报文的发送者。</strong></p><img src="/JeckFS/2020/07/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/12.png" class="" title="This is 12-th image."><p>报文鉴别码的作用：<br>报文鉴别码是散列值使用密钥K加密后的值。若直接将散列值进行明文传输，并不能确定这个报文就是A所发送的。因为其他人也可以伪造报文，然后计算出伪造报文的散列值，拼接后，发给B。B收到后对报文散列计算，与传输过来的散列肯定是相等的。这样无法鉴别该报文就是A发送的。所以要对散列值进行加密，由于密钥K只有通信双方知道，所以其他人并不能伪造报文，因为只知道密码散列函数，不可能造出一模一样的报文来。</p><p>上述还有一个问题：通信双方如何共享密钥K？<br>可以使用公钥系统。即发送方A使用自己的私钥对散列加密，得出报文鉴别码。接收方B使用A的公钥进行解密。由于入侵者没有A的私钥，所以他不可能伪造出A发出的报文。由于报文鉴别码很短，所以使用公钥加密体制并不会耗费太多时间。</p><blockquote><p><strong>密码散列函数</strong><br>将报文通过密码散列函数，计算出散列值。散列值的长度是固定的，且比较短。重点是不同的散列值对应不同的输入报文，不同的输入报文却可能得出相同的散列值。最重要的一点是：要找到两个不同的报文，它们具有相同的散列值，在计算上是不可行的。换言之，别人是无法伪造报文，且其散列值与真实报文的散列值相同。如图7-6</p></blockquote><img src="/JeckFS/2020/07/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/13.png" class="" title="This is 13-th image."><blockquote><p><strong>常用的密码散列函数</strong><br>MD5，SHA，SHA-1，SHA-2等<br>但不幸的是这种加密算法并不是绝对保密的。山东大学的王小云已经可以在1小时内找出某个具体散列值的报文。<strong>密码散列函数的逆向变换是不可能的，是可以打破的。</strong></p></blockquote><h2 id="4-2-实体鉴别"><a href="#4-2-实体鉴别" class="headerlink" title="4.2 实体鉴别"></a>4.2 实体鉴别</h2><p><strong>实体鉴别是在系统介入的全部持续时间内对和自己通信的对方实体只需验证一次。</strong></p><img src="/JeckFS/2020/07/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/14.png" class="" title="This is 14-th image."><p><strong>重放攻击</strong>：入侵者C截获A发给B的报文，C无需破解这个报文，直接伪装成A向C发送数据，让B误认为C就是A。</p><p>使用不重复的大随机数(<strong>不重数</strong>)避免重放攻击。</p><img src="/JeckFS/2020/07/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/15.png" class="" title="This is 15-th image."><p>即使对不重数进行数字签名仍然不能预防中间人攻击。如图7-10</p><p><strong>中间人攻击</strong></p><img src="/JeckFS/2020/07/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/16.png" class="" title="This is 16-th image."><h1 id="5-密钥分配"><a href="#5-密钥分配" class="headerlink" title="5.密钥分配"></a>5.密钥分配</h1><h2 id="5-1-对称密钥的分配"><a href="#5-1-对称密钥的分配" class="headerlink" title="5.1 对称密钥的分配"></a>5.1 对称密钥的分配</h2><p><strong>密钥分配中心KDC</strong>时通信双方都信任的机构，他给进行秘密通信的用户临时分配一个会话密钥(仅使用一次)。<br>通信的两个主机A,B将自己的用户名和与KDC通信的<strong>主密钥</strong>登记注册在KDC中。</p><img src="/JeckFS/2020/07/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/17.png" class="" title="This is 17-th image."><p>KDC在报文中可以加入时间戳，防止截取者利用以前的报文进行重放攻击。会话密钥$K_{AB}$时一次性的。KDC分配给用户的密钥$K_A,K_B$都定期更换。</p><p>密钥分配协议Kerberos V5：</p><p>Kerberos只用于客户与服务器之间的鉴别，而不用于人对人的鉴别。</p><img src="/JeckFS/2020/07/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/18.png" class="" title="This is 18-th image."><h2 id="5-2-公钥的分配"><a href="#5-2-公钥的分配" class="headerlink" title="5.2 公钥的分配"></a>5.2 公钥的分配</h2><p>每一个实体都有<strong>认证中心CA(Certification Authority)</strong>颁发的<strong>证书(certificate)</strong>，证书中包含了公钥、证书拥有者的标识信息(人名或IP地址)。</p><p>用户可通过认证中心CA的公钥来验证某个公钥是否是某个实体所拥有的。</p><h1 id="6-互联网使用的安全协议"><a href="#6-互联网使用的安全协议" class="headerlink" title="6.互联网使用的安全协议"></a>6.互联网使用的安全协议</h1><h2 id="6-1-网络层安全协议"><a href="#6-1-网络层安全协议" class="headerlink" title="6.1 网络层安全协议"></a>6.1 网络层安全协议</h2><h2 id="6-2-运输层安全协议"><a href="#6-2-运输层安全协议" class="headerlink" title="6.2 运输层安全协议"></a>6.2 运输层安全协议</h2><h2 id="6-3-引用层安全协议"><a href="#6-3-引用层安全协议" class="headerlink" title="6.3 引用层安全协议"></a>6.3 引用层安全协议</h2>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络-谢希任-运输层</title>
      <link href="/JeckFS/2020/07/28/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E8%BF%90%E8%BE%93%E5%B1%82/"/>
      <url>/JeckFS/2020/07/28/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E8%BF%90%E8%BE%93%E5%B1%82/</url>
      
        <content type="html"><![CDATA[<h1 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h1><p>网络层为主机到主机提供通信，运输层为进程到进程提供通信。</p><p>使用UDP和TCP协议的各种应用和应用层协议：<br><img src="/JeckFS/2020/07/28/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E8%BF%90%E8%BE%93%E5%B1%82/1.png" class="" title="This is 1-th image."></p><p>当IP数据包到达目的主机后，通过软件端口号找到对应的应用进程。<strong>端口号只具有本地意义，它只为了标志本计算机应用层中的各个进程在和运输层交互时的曾将接口。</strong>16位端口号最多可允许65535个不同的端口号。</p><h2 id="1-1端口号的分类"><a href="#1-1端口号的分类" class="headerlink" title="1.1端口号的分类"></a>1.1端口号的分类</h2><h3 id="1-1-1服务器端使用的端口号"><a href="#1-1-1服务器端使用的端口号" class="headerlink" title="1.1.1服务器端使用的端口号"></a>1.1.1服务器端使用的端口号</h3><p><strong>熟知端口号(系统端口号)</strong><br>数值范围：0~1023<br>这些端口号主要指派给了TCP/IP最重要的一些应用程序。</p><img src="/JeckFS/2020/07/28/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E8%BF%90%E8%BE%93%E5%B1%82/2.png" class="" title="This is 2-th image."><p><strong>登记端口号</strong><br>数值范围：1024~49151<br>指派给服务器端不使用熟知端口号的应用程序。</p><h3 id="1-1-2客户端使用的端口号"><a href="#1-1-2客户端使用的端口号" class="headerlink" title="1.1.2客户端使用的端口号"></a>1.1.2客户端使用的端口号</h3><p>数值范围：49152~65535<br>这类端口号在客户进程运行时动态选择，下一次再运行可能是另一个端口号。不</p><h1 id="2-UDP"><a href="#2-UDP" class="headerlink" title="2.UDP"></a>2.UDP</h1><p><strong>UDP特点：</strong></p><ul><li>UDP无连接，发送数据前不需要建立连接，减少了开销和发送数据之前的时延。</li><li>尽最大努力交付，不保证可靠交付。</li><li>面向报文。UDP对应用层交下来的报文，不拆分也不合并，一次全部发送。即一次发送(或向上交付)一整个报文。</li></ul><img src="/JeckFS/2020/07/28/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E8%BF%90%E8%BE%93%E5%B1%82/3.png" class="" title="This is 3-th image."><ul><li>没有拥塞控制。即网络出现拥塞不会使源主机的发送速率降低。如IP电话、实时视频会议要求源主机按照固定速率发送数据，且允许丢失数据。</li><li>UDP支持一对一、一对多、多对一、多对多的交互通信。</li><li>首部开销小，只有8字节。</li></ul><p><strong>UDP首部格式</strong></p><img src="/JeckFS/2020/07/28/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E8%BF%90%E8%BE%93%E5%B1%82/4.png" class="" title="This is 4-th image."><p>伪首部：用于计算检验和(伪首部+UDP用户数据报)。伪首部不参与传输，只用来计算检验和。</p><p>校验算法：<br>发送方计算出校验码并写入数据包中。</p><img src="/JeckFS/2020/07/28/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E8%BF%90%E8%BE%93%E5%B1%82/5.png" class="" title="This is 5-th image."><p>接收方将全部报文按照上述算法重新计算，若结果全为1，证明无差错，否则有差错。</p><h1 id="3-TCP"><a href="#3-TCP" class="headerlink" title="3.TCP"></a>3.TCP</h1><h2 id="3-1特点："><a href="#3-1特点：" class="headerlink" title="3.1特点："></a>3.1特点：</h2><ul><li>面向连接</li><li>一条TCP连接只能支持两个用户通信</li><li>提供可靠交付，数据无差错、不丢失、不重复、且按序到达</li><li>支持全双工通信。通过TCP的发送缓存和接受缓存，发送方和接收方可以在任意时刻发送数据到缓存中，或者从缓存中读取。</li><li>面向字节流。“流”指的是流入到进程或从进程流出的字节序列。TCP将数据看成一连串<strong>无结构的字节流</strong>。接收方从缓存中按需读取，不是以发送方发送的数据量的单位进行的。</li></ul><img src="/JeckFS/2020/07/28/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E8%BF%90%E8%BE%93%E5%B1%82/6.png" class="" title="This is 6-th image."><h2 id="3-2-TCP连接"><a href="#3-2-TCP连接" class="headerlink" title="3.2 TCP连接"></a>3.2 TCP连接</h2><p>TCP连接的两个端点不是主机，不是主机的IP地址，不是应用进程，也不是运输层的协议端口，而是套接字socket。每一条TCP连接唯一地被通信两端的两个套接字所确定。</p><img src="/JeckFS/2020/07/28/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E8%BF%90%E8%BE%93%E5%B1%82/7.png" class="" title="This is 7-th image."><h2 id="3-3-可靠传输的工作原理"><a href="#3-3-可靠传输的工作原理" class="headerlink" title="3.3 可靠传输的工作原理"></a>3.3 可靠传输的工作原理</h2><p>主要解决两个问题：</p><ul><li>出现差错时让发送方重传出现差错的数据。</li><li>接收方来不及处理数据时，及时告知发送方降低发送数据的速度。</li></ul><h3 id="3-3-1-停止等待协议"><a href="#3-3-1-停止等待协议" class="headerlink" title="3.3.1 停止等待协议"></a>3.3.1 停止等待协议</h3><p>“停止等待”：每发送完一个分组就停止发送，等待对方确认，在收到确认后再发送下一个分组。<br>停止等待协议使用<strong>自动重传请求ARQ(Automatic Repeat reQuest)</strong>完成可靠传输。</p><p>4种可能出现的情况：</p><p><strong>1.无差错情况</strong></p><img src="/JeckFS/2020/07/28/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E8%BF%90%E8%BE%93%E5%B1%82/8.png" class="" title="This is 8-th image."><p><strong>2.报文出现差错</strong><br>丢弃出差错的报文，其他什么也不做。A在一定时间段内收不到确认报文，就重传。</p><img src="/JeckFS/2020/07/28/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E8%BF%90%E8%BE%93%E5%B1%82/9.png" class="" title="This is 9-th image."><blockquote><p>A在发送完一个分组后，必须<strong>暂存已发送的分组的副本</strong>，以供超时重传时使用。在收到确认后才消除暂存分组副本。<br>分组和确认分组必须进行<strong>编号</strong>。以明确哪一个发送出去的分组收到了确认，哪一个分组没有收到确认。<br>实现超时重传，需要为每一个发送的分组设置超时计时器。若在超时计时器到期之前收到了对方的确认，就撤销已设置的超时计时器。<strong>超时计时器的重传时间应当比数据在分组传输的平均往返时间更长一些</strong>。太小导致不必要的重传，太大又会浪费网络资源。</p></blockquote><p><strong>3.确认丢失</strong></p><img src="/JeckFS/2020/07/28/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E8%BF%90%E8%BE%93%E5%B1%82/10.png" class="" title="This is 10-th image."><p>A收不到B发送的确认分组，但B已经收到A发送的分组。此时B丢弃重复的分组，并向A发送确认。</p><p><strong>4.确认迟到</strong></p><img src="/JeckFS/2020/07/28/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E8%BF%90%E8%BE%93%E5%B1%82/11.png" class="" title="This is 11-th image."><p><strong>停止等待协议的信道利用率</strong></p><p>问题：停止等待协议优点是简单，但缺点是<strong>信道利用率太低</strong>。</p><img src="/JeckFS/2020/07/28/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E8%BF%90%E8%BE%93%E5%B1%82/12.png" class="" title="This is 12-th image."><p>$T_D$表示A发送分组需要的时间。$T_D=\frac{分组长度}{数据率}$<br>$T_A$表示B发送确认分组需要的时间。<br>信道利用率的计算公式为：</p><script type="math/tex; mode=display">U=\frac{T_D}{T_D+RTT+T_A}</script><p>当RTT远大于分组发送时间$T_D$时，信道利用率会十分低。</p><p>针对此问题，放弃使用停止等待协议，转而使用<strong>流水线传输</strong>。</p><img src="/JeckFS/2020/07/28/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E8%BF%90%E8%BE%93%E5%B1%82/13.png" class="" title="This is 13-th image."><p>流水线传输需要使用<strong>连续ARQ协议</strong>和<strong>滑动窗口协议</strong>。</p><h3 id="3-3-2-连续ARQ协议"><a href="#3-3-2-连续ARQ协议" class="headerlink" title="3.3.2 连续ARQ协议"></a>3.3.2 连续ARQ协议</h3><img src="/JeckFS/2020/07/28/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E8%BF%90%E8%BE%93%E5%B1%82/14.png" class="" title="This is 14-th image."><p>发送方连续发送窗口内的分组，接收方只对<strong>按序到达的最后一个分组发送确认</strong>，表示到这个分组为止的所有分组都已经正确收到了(<strong>累计确认</strong>)。发送窗口移动到确认分组的下一个分组。当窗口内中间分组丢失了，窗口内该分组以后的分组都要重传(<strong>回退N帧</strong>)。</p><h2 id="3-4-TCP报文首部格式"><a href="#3-4-TCP报文首部格式" class="headerlink" title="3.4 TCP报文首部格式"></a>3.4 TCP报文首部格式</h2><img src="/JeckFS/2020/07/28/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E8%BF%90%E8%BE%93%E5%B1%82/15.png" class="" title="This is 15-th image."><ul><li>源端口、目的端口</li><li>序号<br>占32位<br>TCP是面向字节流的，所有的字节都按照顺序编号。首部中的序号值表示<strong>本报文段</strong>所发送数据的第一个字节的序号。</li><li>确认号<br>占4个字节，32位，可给4GB的数据进行编号。<br>指的是期望收到对方下一个报文段的第一个数据字节的序号。<br><strong>确认号=N，则表明：到序号N-1为止的所有数据都已正确收到。</strong></li><li>数据偏移<br>占4位，每位表示4个字节，最大为15(60字节)，最小为5(20字节)。表示TCP报文段的首部长度。</li><li>保留<br>占6位<br>留在以后用，目前应全部置0</li><li><p>紧急URG<br>URG=1，表示<strong>紧急指针字段</strong>有效。即报文段中有紧急数据，紧急数据不进入TCP缓存直接交付应用进程。可以用来传输键盘发出的命令，如Control+C。</p></li><li><p>确认ACK<br>ACK=1时，<strong>确认号字段</strong>才有效；ACK=0，<strong>确认号字段</strong>无效。TCP规定，在连接建立后，所有传送的报文段都必须把ACK置1。</p></li><li><p>推送PSH<br>PSH=1也是实现及时响应的标志位，当TCP收到PSH=1的报文段，等同于刷新TCP缓存，将缓存中的数据<strong>尽快</strong>交付给应用程序。</p><p><a href="https://blog.csdn.net/knight3396/article/details/46894803/">参考链接</a></p></li><li>复位RST<br>RST=1表示必须释放连接，再重新建立运输连接。还可以用来拒绝一个非法报文段，或者拒绝打开一个连接。</li><li>同步SYN<br>SYN=1表示这是一个连接请求或连接接受报文。<br>SYN=1,ACK=0表示连接请求报文。<br>SYN=1,ACK=1表示连接接受报文。</li><li>终止FIN<br>FIN=1表示释放连接。</li><li><p>窗口<br>占2字节，16位，最多65535个字节。<br>指的是发送本报文段的一方的<strong>接收窗口</strong>(不是自己的发送窗口)。用于通知发送方：从本报文段首部中的确认号算起，接收方目前允许对方发送的数据量(以字节位单位)。<strong>窗口值明确指出了现在允许对方发送的数据量。窗口值经常在动态变化着。</strong></p><p>例如：<br>发送了一个报文段，其确认号时701，窗口字段是1000。这就是告诉对方：“从701号算起，我(发送此报文段的一方)的接收缓存空间还可接收1000个字节数据(字节序号时701~1700)，你在给我发送数据时，必须考虑这一点。”</p></li><li>检验和<br>占2字节。<br>检验范围包括首部和数据。计算检验和时，需要加上12字节的伪首部(协议字段为6，长度就是TCP报文的长度)。</li><li>紧急指针<br>占2字节。<br>在URG=1时，紧急指针字段有效。表示TCP的数据部分有紧急数据，紧急数据在前，普通数据在后。紧急指针指向的是紧急数据的末尾。窗口为0，也可以发送紧急数据。</li><li>选项<br>长度可变。最长可达40字节。</li></ul><h2 id="3-5-TCP可靠传输的实现"><a href="#3-5-TCP可靠传输的实现" class="headerlink" title="3.5 TCP可靠传输的实现"></a>3.5 TCP可靠传输的实现</h2><p>假定A发送数据，B接收数据并给出确认。即只考虑A的发送窗口和B的接收窗口。</p><h3 id="3-5-1-以字节位单位的滑动窗口"><a href="#3-5-1-以字节位单位的滑动窗口" class="headerlink" title="3.5.1 以字节位单位的滑动窗口"></a>3.5.1 以字节位单位的滑动窗口</h3><p>假定A收到了B发来的<strong>确认报文段</strong>，其中窗口是20字节，确认号是31(表明B期望收到的下一个序号时31，而序号30为止的数据已经收到了)。</p><img src="/JeckFS/2020/07/28/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E8%BF%90%E8%BE%93%E5%B1%82/16.png" class="" title="This is 16-th image."><p>假定A发送了31~41的数据。</p><img src="/JeckFS/2020/07/28/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E8%BF%90%E8%BE%93%E5%B1%82/17.png" class="" title="This is 17-th image."><p><strong>接收方B只对按序收到的数据中的最高序号给出确认。</strong>由于31号未收到，所以B的确认号仍然是31。<strong>对于收到的32,33号数据并不丢弃，而是暂存在接收窗口中</strong>，当B收到了31号数据，接收窗口整体向前移动3个序号，同时给A发送确认，确认号为34，表明序号33之前的数据已经接收到。</p><p>当A将窗口内的数据全部发送完毕时，就停止发送，并等待B的确认报文。若一段时间内收不到确认报文，A就将整个窗口内的数据重新发送。</p><img src="/JeckFS/2020/07/28/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E8%BF%90%E8%BE%93%E5%B1%82/18.png" class="" title="This is 18-th image."><p>TCP的缓存和窗口的关系：</p><img src="/JeckFS/2020/07/28/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E8%BF%90%E8%BE%93%E5%B1%82/19.png" class="" title="This is 19-th image."><p>注意：缓存空间和序号空间都是有限的，并且都是<strong>循环使用</strong>的。</p><h3 id="3-5-2-超时重传时间的选择"><a href="#3-5-2-超时重传时间的选择" class="headerlink" title="3.5.2 超时重传时间的选择"></a>3.5.2 超时重传时间的选择</h3><p>  超时重传主要是根据报文段的往返时间RTT来确定，在可能存在网络拥塞的情况下，RTT是比较大的，发送端根据RTT了解到网络拥塞的程度，进而将重传时间增大，避免网络拥塞更严重。<br>  但如果考虑RTT，在面对重传报文时，发送端搞不清确认报文到底是原来报文的确认报文还是重传报文的确认报文。这样其RTT的时间就是不准确的。对于这种情况，我们将RTT的计算按照重传报文和非重传报文区分开来，以使得RTT更加准确。</p><p><strong>对于非重传报文的RTO更新方法：</strong></p><p>超时重传时间是根据报文的<strong>报文段往返时间RTT</strong>决定的。由RTT计算出$RTT_s$和$RTT_D$，进而计算出<strong>超时重传时间RTO(RetransmissionTime-Out)</strong>。超时重传时间RTO必须比加权平均往返时间$RTT_s$要稍微大一些，于是就使用RTT的偏差($RTT_D$)来确定比$RTT_s$大多少。</p><p>$RTT_s$是RTT的加权平均往返时间。<br>$RTT_D$是RTT的<strong>偏差</strong>的加权平均值，它与$RTT_s$和新的RTT样本之差有关。</p><p>具体的计算公式：</p><script type="math/tex; mode=display">新的RTT_s=(1-\alpha)\times(旧的RTT_s)+\alpha \times (新的RTT样本) \\新的RTT_D=(1- \beta) \times (旧的RTT_D)+\beta \times |RTT_s-新的RTT样本| \\超时重传时间RTO=RTT_s+4 \times RTT_D \\其中\alpha = 0.125, \beta = 0.25</script><p><strong>重传报文的RTO更新方法：</strong><br>收到超时重传报文，RTO更新为原来的2倍。</p><h3 id="3-5-3-选择确认SACK-Selective-ACK"><a href="#3-5-3-选择确认SACK-Selective-ACK" class="headerlink" title="3.5.3 选择确认SACK(Selective ACK)"></a>3.5.3 选择确认SACK(Selective ACK)</h3><p>当接收到的报文无差错，只是未按序号达到，中间缺少一些序号的数据。如何重传这部分缺少的数据，SACK就是来解决这个问题的。</p><p>SACK的信息主要设置在TCP报文受不得选项字段中。主要包括3部分：</p><ul><li>指明使用SACK选项，占用1个字节。</li><li>指明SACK选项占用多少字节，占用1个字节。</li><li>其余用来存储不连续块的边界信息。</li></ul><p>SACK并不影响首部固定长度中的“确认号字段”。</p><p>对于发送方如何响应SACK，大多数实现还是重传所有未被确认的数据块。换言之，设置不设置SACK意义并不大。</p><img src="/JeckFS/2020/07/28/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E8%BF%90%E8%BE%93%E5%B1%82/20.png" class="" title="This is 20-th image."><blockquote><p>序号在TCP报文中占32位，即4个字节，而选项最长只有40字节。另外一个不连续块的边界包括两个部分左边界序号和右边界序号，这是两个32位，即一个不连续块需要8个字节。那么选项字段40个字节只能存储4个不连续块（(40-2)/8=4）。<br>左边界是不连续块的第一个字节，右边界时不连续块的最后一个字节的下一个字节。如上图。</p></blockquote><h2 id="3-6-TCP的流量控制"><a href="#3-6-TCP的流量控制" class="headerlink" title="3.6 TCP的流量控制"></a>3.6 TCP的流量控制</h2><p><strong>所谓流量控制就是让发送方的发送速率不要调快，要让接收方来得及接收。</strong><br>使用滑动窗口机制实现在TCP连接上对<strong>发送方</strong>的流量控制。</p><p>示例：<br>假定A向B发送数据。在建立连接时，B告诉A：“我的接收窗口rwnd=400 (receiver window)”</p><img src="/JeckFS/2020/07/28/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E8%BF%90%E8%BE%93%E5%B1%82/21.png" class="" title="This is 21-th image."><p>接收方B共进行了3次流量控制，第一次把窗口减小到 rwnd=30，第二次又减到 rwnd=100，最后减到 rwnd=0，及不允许发送方再发送数据了。这种暂停发送状态将持续到主机B重新发送一个新的窗口值为止。</p><h3 id="问题1：非零窗口报文丢失引发的死锁问题："><a href="#问题1：非零窗口报文丢失引发的死锁问题：" class="headerlink" title="问题1：非零窗口报文丢失引发的死锁问题："></a>问题1：非零窗口报文丢失引发的死锁问题：</h3><p>B向A发送零窗口报文段不久，B的接收缓存又有了一些存储空间。于是B向A发送了 rwnd=400的报文段。然而这个报文段却丢失了，导致A一直等待B发送非零窗口的报文。此时B也一直等待A发送的数据。</p><p>解决方案：<br>发送方收到零窗口报文，就启动<strong>持续计时器</strong>。时间到期就发送一个<strong>零窗口探测报文</strong>(仅携带1字节数据)，对方在确认这个探测报文段时给出当前窗口值。若窗口为0，发送方继续等待，若不为0，这种死锁就可被打破。</p><h3 id="问题2：传输效率问题"><a href="#问题2：传输效率问题" class="headerlink" title="问题2：传输效率问题"></a>问题2：传输效率问题</h3><p>若每次发送1个字节的数据，会导致TCP首部20字节+IP首部20字节，共40字节浪费。如何解决这种问题？</p><p><strong>Nagle算法</strong>：<br>发送方先把缓存中的第一个数据字节发送出去，将后面到达的字节缓存起来。当发送方收到对第一个数据字符的确认报文后，再把发送缓存中的<strong>所有数据</strong>组装成一个报文段发送出去。同时，继续对随后的数据进行缓存。<strong>只有收到对前一个报文的确认后，才继续发送下一个报文段。</strong>除此之外，当发送方缓存中的数据达到发送窗口大小的一半或者已达到报文段的最大长度时，就立即发送一个报文段。<br>这种方法在网络速率较慢时，可明显减少所用的网络带宽。</p><h2 id="3-7-TCP的拥塞控制"><a href="#3-7-TCP的拥塞控制" class="headerlink" title="3.7 TCP的拥塞控制"></a>3.7 TCP的拥塞控制</h2><img src="/JeckFS/2020/07/28/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E8%BF%90%E8%BE%93%E5%B1%82/22.png" class="" title="This is 22-th image."><p>横坐标也可称为<strong>网络负载</strong>，代表单位时间内输入给网络的分组数目。<br>纵坐标代表单位时间内从网络输出的分组数目。</p><h3 id="3-7-1-拥塞控制与流量控制的区别："><a href="#3-7-1-拥塞控制与流量控制的区别：" class="headerlink" title="3.7.1 拥塞控制与流量控制的区别："></a>3.7.1 拥塞控制与流量控制的区别：</h3><p>拥塞控制是防止过多的数据注入到网络中，这样可以使网络中的路由器或链路不致于过载。拥塞控制是一个全局性的过程，涉及到所有主机，所有路由器等。<br>流量控制是点对点通信量的控制，所要做的是抑制发送方发送数据的频率，以便使接收方来得及接收。</p><h3 id="3-7-2-拥塞控制的方法"><a href="#3-7-2-拥塞控制的方法" class="headerlink" title="3.7.2 拥塞控制的方法"></a>3.7.2 拥塞控制的方法</h3><ul><li>假定数据是当方向传输，对方之传送确认报文。</li><li>接收方总是有足够大的缓存空间，因而发送窗口的大小由网络的拥塞程度来确定。</li></ul><p>判断网络拥塞的<strong>依据</strong>是出现了超时重传。<br>发送方发送数据的单位是<strong>最大报文段SMSS(Sender Maximum Segment Size)</strong><br>拥塞窗口的初始大小：</p><img src="/JeckFS/2020/07/28/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E8%BF%90%E8%BE%93%E5%B1%82/23.png" class="" title="This is 23-th image."><p><strong>慢开始</strong>规定，在每收到一个对新的报文段的确认后，将拥塞窗口<strong>最多增加</strong>一个SMSS的数值。具体说就是：<br>拥塞窗口cwnd每次的增加量=min(N, SMSS)<br>其中N是原先未被确认、但现在被刚收到的确认报文段所确认的字节数。</p><p><strong>轮次</strong>没经过一个传输轮次，拥塞窗口cwnd就加倍。</p><img src="/JeckFS/2020/07/28/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E8%BF%90%E8%BE%93%E5%B1%82/24.png" class="" title="This is 24-th image."><p>为防止拥塞窗口cwnd增长过大，引起网络拥塞，还需要设置一个<strong>慢开始门限ssthresh</strong>。<br>其作用是慢开始算法和拥塞避免算法的分界点。</p><img src="/JeckFS/2020/07/28/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E8%BF%90%E8%BE%93%E5%B1%82/25.png" class="" title="This is 25-th image."><p><strong>拥塞避免算法</strong>每经过一个往返时间RTT就把发送方的拥塞窗口cwnd加1，这称为<strong>加法增大</strong>。</p><img src="/JeckFS/2020/07/28/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E8%BF%90%E8%BE%93%E5%B1%82/26.png" class="" title="This is 26-th image."><p>0时刻开始慢开始，每次拥塞窗口cwnd指数级增长，达到ssthresh后，使用拥塞避免，拥塞窗口加法增大。当出现超时时，ssthresh变为拥塞窗口的二分之一(即ssthresh=cwnd / 2)，拥塞窗口cwnd从初始值再次指数增长，直到ssthresh后，开始加法增大。当累计出现3次没有收到确认报文时，立即<strong>快重传</strong>丢失的报文，同时拥塞窗口变为原来的一半，且ssthresh=减半后的cwnd，之后继续拥塞避免。</p><p><strong>快重传</strong></p><img src="/JeckFS/2020/07/28/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E8%BF%90%E8%BE%93%E5%B1%82/27.png" class="" title="This is 27-th image."><p>由④到⑤并不是从慢开始，而是执行的<strong>快恢复</strong>算法。</p><p>当考虑到接收方的接收窗口值rwnd时，发送方窗口的最大值=Min(rwnd, cwnd)。</p>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络-谢希任-网络层</title>
      <link href="/JeckFS/2020/07/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E7%BD%91%E7%BB%9C%E5%B1%82/"/>
      <url>/JeckFS/2020/07/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E7%BD%91%E7%BB%9C%E5%B1%82/</url>
      
        <content type="html"><![CDATA[<h1 id="1-网际协议IP"><a href="#1-网际协议IP" class="headerlink" title="1. 网际协议IP"></a>1. 网际协议IP</h1><blockquote><p>与IP协议配套的三个协议：</p><ul><li>地址解析协议ARP</li><li>网际控制报文协议ICMP（Internet Control Message Protocol）</li><li>网际组管理协议IGMP（Internet Group Management Protocol）</li></ul></blockquote><img src="/JeckFS/2020/07/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E7%BD%91%E7%BB%9C%E5%B1%82/image-20200328140201435.png" class="" title="This is image-20200328140201435.png image."><h2 id="1-1-分类的IP地址"><a href="#1-1-分类的IP地址" class="headerlink" title="1.1 分类的IP地址"></a>1.1 分类的IP地址</h2><img src="/JeckFS/2020/07/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E7%BD%91%E7%BB%9C%E5%B1%82/image-20200328140915851.png" class="" title="This is image-20200328140915851.png image."><p>特殊的地址：</p><ul><li>网络号为127，表示环回地址，用于本主机进程间的通信。</li><li>主机号全0，表示本网络的网络地址。</li><li>主机号全1，表示本网络的所有主机。</li><li>B类网络地址128.0.0.0是不指派的，B类最小的网络地址是128.1.0.0。</li><li>C类网络地址192.0.0.0也不指派，C类最小的网络地址是192.0.1.0</li></ul><img src="/JeckFS/2020/07/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E7%BD%91%E7%BB%9C%E5%B1%82/image-20200328142056246.png" class="" title="This is image-20200328142056246.png image."><img src="/JeckFS/2020/07/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E7%BD%91%E7%BB%9C%E5%B1%82/image-20200328142251806.png" class="" title="This is image-20200328142251806.png image."><img src="/JeckFS/2020/07/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E7%BD%91%E7%BB%9C%E5%B1%82/image-20200328142842893.png" class="" title="This is image-20200328142842893.png image."><p>​    两个路由器直接相连的接口，可以分配ip地址，也可以不分配ip地址。不分配的话$N_1,N_2,N_3$称为<strong>无编号网络</strong>或<strong>无名网络</strong>。</p><h2 id="1-2-IP地址和硬件地址"><a href="#1-2-IP地址和硬件地址" class="headerlink" title="1.2 IP地址和硬件地址"></a>1.2 IP地址和硬件地址</h2><img src="/JeckFS/2020/07/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E7%BD%91%E7%BB%9C%E5%B1%82/image-20200329100336482.png" class="" title="This is image-20200329100336482.png image."><img src="/JeckFS/2020/07/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E7%BD%91%E7%BB%9C%E5%B1%82/image-20200329100445763.png" class="" title="This is image-20200329100445763.png image."><img src="/JeckFS/2020/07/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E7%BD%91%E7%BB%9C%E5%B1%82/image-20200329100512508.png" class="" title="This is image-20200329100512508.png image."><h2 id="1-3-地址解析协议ARP"><a href="#1-3-地址解析协议ARP" class="headerlink" title="1.3. 地址解析协议ARP"></a>1.3. 地址解析协议ARP</h2><p>​    作用是根据IP地址解析出MAC地址。</p><p>​    DHCP协议已经包含RARP的功能，即根据MAC地址找出IP地址。RARP已经被淘汰。</p><p>​    只能解析<strong>本局域网</strong>中的MAC地址。</p><p><strong>ARP协议要点：</strong></p><ul><li>每台主机都设有一个ARP高速缓存，里面保存本局域网上的各主机和路由器的IP地址到硬件地址的映射表。</li><li>当主机A向本局域网的主机B发送IP数据包时，先查看ARP高速缓存中是否有主机B的IP地址。若有，根据IP找到对应的MAC地址。</li><li>若查找不到主机B的ip，则主机A运行ARP协议<ul><li>ARP进程在本局域网中广播一个包含本机IP的ARP请求分组，如图4-11（a）。</li><li>本局域网所有主机上运行的ARP进程都收到此ARP请求分组。</li><li>主机B的IP与查询的IP一致，就收下这个ARP分组，并写入A主机IP与其MAC地址的映射，并向主机A发送写入本机IP地址的ARP响应分组。其他主机因为查询IP与自己不一致而忽略此ARP分组。</li><li>主机A收到B的ARP响应分组后，就在ARP高速缓存中写入主机B的IP与其MAC地址的映射。</li></ul></li><li>ARP映射表项都有一个生存时间，过期自动删除。</li><li>如果主机A与主机B不在一个局域网中， A主机解析出的是路由的MAC地址。</li></ul><h2 id="4-IP数据包的格式"><a href="#4-IP数据包的格式" class="headerlink" title="4. IP数据包的格式"></a>4. IP数据包的格式</h2><img src="/JeckFS/2020/07/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E7%BD%91%E7%BB%9C%E5%B1%82/image-20200329102953193.png" class="" title="This is image-20200329102953193.png image."><ul><li><p>版本</p><p>指IP协议版本，IPv4或IPv6</p></li><li><p>首部长度</p><p>最大为15，单位是4字节，即数据包首部最大15*4=60字节。由于固定部分20字节，所以首部长度最小为5。IP数据包的首部必须是4的整数倍，不足的使用填充字段填充。</p></li><li><p>区分服务</p><p>一般情况不用。</p></li><li><p>总长度</p><p>首部+数据，单位为字节。最大2^16^-1=65535字节，实际中极少遇到。在数据链路层由于MTU的限制，会将大的IP数据包分片。分片后的数据包的总长度是该分片的首部+数据的长度。</p></li><li><p>标识</p><p>用于标识哪些分片同属一个IP数据包，同属一个IP数据包的分片拥有相同的标识。</p></li><li><p>标志</p><p>占3位，只有前两位有意义。</p><p>中间位DF(Don’t Fragment)。DF=1表示不能分片，DF=0表示可以分片。</p></li><li><p>片偏移</p><p>占13位，表示某片在分片前的原分组中数据字段的相对位置。片偏移以8字节为偏移单位，即每个分片的长度一定是8字节的整数倍。</p></li></ul><img src="/JeckFS/2020/07/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E7%BD%91%E7%BB%9C%E5%B1%82/image-20200329104925231.png" class="" title="This is image-20200329104925231.png image."><img src="/JeckFS/2020/07/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E7%BD%91%E7%BB%9C%E5%B1%82/image-20200329104948669.png" class="" title="This is image-20200329104948669.png image."><ul><li><p>生存时间(TTL)</p><p>最多可经过多少的路由器。TTL=1,表示这个数据包只能在本局域网中传送。</p></li><li><p>协议</p><p>指明数据包携带的数据是使用的何种协议。</p></li></ul><img src="/JeckFS/2020/07/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E7%BD%91%E7%BB%9C%E5%B1%82/image-20200329105537070.png" class="" title="This is image-20200329105537070.png image."><ul><li><p>首部检验和</p><p>只检验数据报的首部，不包括数据部分。</p></li></ul><img src="/JeckFS/2020/07/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E7%BD%91%E7%BB%9C%E5%B1%82/image-20200329105803578.png" class="" title="This is image-20200329105803578.png image."><ul><li>源地址</li><li>目的地址</li></ul><h2 id="1-5-IP层转发分组的流程"><a href="#1-5-IP层转发分组的流程" class="headerlink" title="1.5 IP层转发分组的流程"></a>1.5 IP层转发分组的流程</h2><img src="/JeckFS/2020/07/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E7%BD%91%E7%BB%9C%E5%B1%82/image-20200329112013621.png" class="" title="This is image-20200329112013621.png image."><img src="/JeckFS/2020/07/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E7%BD%91%E7%BB%9C%E5%B1%82/image-20200329112038321.png" class="" title="This is image-20200329112038321.png image."><p>图4-17的路由表所使用的“直接”“其他”，在实际的路由表中是0.0.0.0</p><p><strong>特定主机路由：</strong>指明主机的路由。</p><p><strong>默认路由：</strong>适用主机连接的路由器较少的情况。若只连接一个路由器，则可以将其设为默认路由。</p><p><strong>分组转发算法：</strong></p><ol><li><p>根据数据包的目的IP地址，得出目的网络地址N。</p></li><li><p>若路由器与目的网络相连，则<strong>直接交付</strong>。否则执行3</p></li><li>若路由表中有目的地址为D的<strong>特定主机路由</strong>，则传递给指定的路由。否则执行4</li><li>若<strong>本机路由表</strong>中有到达网络N的路由，则将数据包传递给所指明的吓一跳路由器。否则执行5</li><li>若路由表中有<strong>默认路由</strong>，则将数据包传递给默认路由。否则，报告转发分组出错。</li></ol><h1 id="2-划分子网"><a href="#2-划分子网" class="headerlink" title="2.划分子网"></a>2.划分子网</h1><p>​    将一个物理网络划分成多个子网，这些子网对外仍然表现为一个网络。</p><p>​    划分方法是：从主机号借用若干位作为子网号。</p><img src="/JeckFS/2020/07/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E7%BD%91%E7%BB%9C%E5%B1%82/image-20200329134901908.png" class="" title="This is image-20200329134901908.png image."><p>​    当一个物理网络受到数据包后，再转发到具体的子网。具体的子网地址是通过IP地址与子网掩码相与取得的。路由器不光记录目的网络地址，还有目的网络地址的子网掩码。路由器将收到的数据包中的目的ip地址与子网掩码相与，然后与对应的网络地址相比较，相同则转发给该目的网络地址对应的接口。</p><p>​    五分类域间路由选择CIDR可以使用全0或全1的子网号，但有的路由器所用的路由选择软件不支持，所以慎用。</p><p><strong>使用子网时分组的转发：</strong><br>    路由表项包括：目的网络地址、子网掩码、下一跳地址。</p><img src="/JeckFS/2020/07/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E7%BD%91%E7%BB%9C%E5%B1%82/image-20200329141745301.png" class="" title="This is image-20200329141745301.png image."><p>主机H1向目的主机H2发送数据包：</p><ol><li>取出目的ip地址128.30.33.138</li><li>判断是否和直接交付。将目的ip与本网络子网掩码255.255.255.128相与，得128.30.33.128，不是本网主机。则转发给路由R1。</li><li>R1查询目的地址与每个表项子网掩码相与，然后与其对应的目的网络地址比对，一致就转发给对应的接口。</li></ol><p>当发现目的地址不是本网的主机ip时，先找特定主机路由，没有特定主机路由的话找默认路由。</p><h1 id="3-无分类编址CIDR（构造超网）"><a href="#3-无分类编址CIDR（构造超网）" class="headerlink" title="3. 无分类编址CIDR（构造超网）"></a>3. 无分类编址CIDR（构造超网）</h1><p>​    CIDR消除了传统的A类、B类、C类地址以及划分子网的概念。    </p><p>地址表示：</p><img src="/JeckFS/2020/07/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E7%BD%91%E7%BB%9C%E5%B1%82/image-20200329151848450.png" class="" title="This is image-20200329151848450.png image."><img src="/JeckFS/2020/07/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E7%BD%91%E7%BB%9C%E5%B1%82/image-20200329152023454.png" class="" title="This is image-20200329152023454.png image."><img src="/JeckFS/2020/07/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E7%BD%91%E7%BB%9C%E5%B1%82/image-20200329152040363.png" class="" title="This is image-20200329152040363.png image."><p>​    全0，全1的地址一般不使用。他包含2^12^个地址。        </p><p>​    路由表项由“网络前缀”和“下一跳地址”组成。当匹配结果不止一个时，应从匹配结果中选择具有最长网络前缀的路由，这叫最长网络匹配。</p><h1 id="4-网际控制报文协议ICMP"><a href="#4-网际控制报文协议ICMP" class="headerlink" title="4. 网际控制报文协议ICMP"></a>4. 网际控制报文协议ICMP</h1><img src="/JeckFS/2020/07/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E7%BD%91%E7%BB%9C%E5%B1%82/image-20200329155037499.png" class="" title="This is image-20200329155037499.png image."><p><strong>时间超过</strong>：当路由器接收到生存时间为0的数据包时，或者终点在预先的时间内未能收到一个数据包的全部报片时，发送时间超过报文。</p><p><strong>参数问题</strong>：数据包首部字段值不正确时，发送参数问题报文。</p><p><strong>改变路由</strong>（重定向）：当主机发送数据包时，首先查找自己的路由表。主机不和路由器交换路由信息。主机开始工作时，一般都会在路由表中设置一个默认路由器的IP地址。主机发送到其他网络的数据包都发送给默认路由。由于默认路由会和其他路由定期交换路由表信息，所以它知道到目的地址最佳的路由。如果默认路由发现主机发往某个目的地址的数据包的最佳路由应当经过网络上的另一个路由R时，就用改变路由报文把这情况告诉主机。主机就在路由表中添加一个项目：到某某目的地址的应该经过路由器R，而不是默认路由。</p><img src="/JeckFS/2020/07/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E7%BD%91%E7%BB%9C%E5%B1%82/image-20200329161204654.png" class="" title="This is image-20200329161204654.png image."><p><strong>ICMP的前8个字节：</strong>依次包括前4字节(类型、代码、检验和)、ICMP类型有关的后4个字节。</p><p><strong>IP数据包数据字段的前8个字节</strong>：包含了运输层的端口号（对于TCP，UDP），以及运输层报文的发送序号。</p><p><strong>不发送ICMP差错报告报文的情况</strong>：</p><img src="/JeckFS/2020/07/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E7%BD%91%E7%BB%9C%E5%B1%82/image-20200329161716149.png" class="" title="This is image-20200329161716149.png image."><hr><p>ICMP询问报文：</p><ul><li>回送请求和回答。某个路由器或主机发送回送请求报文，接收到的主机回送回答报文。主要用来测试目的站是否可达。</li><li>时间戳请求和回答。</li></ul><h1 id="5-路由器选择协议"><a href="#5-路由器选择协议" class="headerlink" title="5. 路由器选择协议"></a>5. 路由器选择协议</h1><p>​    互联网中一个大的ISP就是一个自治系统AS。自治系统内使用同一个路由选择协议。对外表现出一个单一的和一致的路由选择策略。</p><p>分为两类：</p><ul><li><p>内部网关协议IGP(Interior Gateway Protocol)</p><p>一个自治系统内部使用的路由选择协议，与其他自治系统选择什么路由协议无关。如RIP和OSPF。</p></li><li><p>外部网关协议EGP(External Gateway Protocol)</p><p>他是自治系统之间如何路由的协议。如BGP-4。</p></li></ul><p>​    自治系统之间的路由选择也叫域间路由选择，自治系统内部的路由选择叫与域内路由选择。</p><img src="/JeckFS/2020/07/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E7%BD%91%E7%BB%9C%E5%B1%82/image-20200329211122765.png" class="" title="This is image-20200329211122765.png image."><h2 id="5-1-内部网关协议RIP"><a href="#5-1-内部网关协议RIP" class="headerlink" title="5.1 内部网关协议RIP"></a>5.1 内部网关协议RIP</h2><p>​    RIP中一跳路径最多只能包含15个路由器，距离等于16则为不可达。可见RIP只适用于小型互联网。</p><p>​    <strong>RIP只选择一条最少路由器的路径</strong>，尽管该路径时延较高。<strong>即每一个路由到每一个网络的路由都是最短的。</strong></p><p>RIP协议特点：</p><ul><li>仅和相邻路由器交换信息。</li><li>相邻路由器之间交换当前本路由器所知道的全部信息，即自己现在的路由表。</li><li>按固定的时间间隔交换陆游信息，如每个30秒。</li></ul><p><strong>距离向量算法：</strong></p><ol><li><p>将地址为X的相邻路由器发来的RIP报文，先修改报文中所有项目：下一跳地址改为X；所有距离字段值加1。</p></li><li><p>对修改后的每一个表项，</p><p>若原来路由表中没有目的网络N，则把该项目添加到路由表中。</p><p>否则（本路由表中有目的网络N），若下一跳路由器地址为X，则替换原路由表中的项目。</p><p>否则（到目的网络N，但下一跳路由器不是X），若收到的项目中距离d更小，则进行更新。</p><p>否则什么也不做。</p></li><li><p>对于3分钟没有收到相邻路由器的更新路由表，则把距离置为16表示不可达。</p></li></ol><p><strong>例：</strong>路由器R6收到R4发来的更新信息：</p><img src="/JeckFS/2020/07/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E7%BD%91%E7%BB%9C%E5%B1%82/image-20200329224245531.png" class="" title="This is image-20200329224245531.png image."><p>解：</p><p>更新接收到的路由信息：</p><img src="/JeckFS/2020/07/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E7%BD%91%E7%BB%9C%E5%B1%82/image-20200329224441858.png" class="" title="This is image-20200329224441858.png image."><p>第一行R6没有，则直接添加。</p><p>第二行从R4出发，到达Net2的距离增大了，要更新。</p><p>第三行从R4出发，到达Net3的距离减小了，要更新。</p><img src="/JeckFS/2020/07/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E7%BD%91%E7%BB%9C%E5%B1%82/image-20200329224700915.png" class="" title="This is image-20200329224700915.png image."><p><strong>RIP协议报文格式：</strong></p><img src="/JeckFS/2020/07/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E7%BD%91%E7%BB%9C%E5%B1%82/image-20200330024027164.png" class="" title="This is image-20200330024027164.png image."><p>​    RIP使用UDP进行传送，使用UDP的520端口。最大长度为4+20$\times$25=504字节。    </p><p><strong>命令</strong>：1表示请求路由信息；2表示对请求路由信息的响应，或未被请求而发出的路由更新报文。</p><p><strong>必为0</strong>：为了4字节对齐，而做的填充。</p><p><strong>地址族标识符(地址类别)</strong>：IP地址该字段为2，RIP考虑了其他非TCP/IP协议的情况。</p><p><strong>路由标记</strong>：为当前自治系统号ASN(Autonomous System Number)，以区别其他自治系统的路由信息。</p><p><strong>RIP2的鉴别功能：</strong><br>    第一个路由信息(20字节)用作鉴别。地址族标识符置为全1，路由标记写入鉴别类型，剩下16字节为鉴别数据。鉴别数据之后死路由信息，最多还能放24个路由信息。</p><p><strong>RIP的缺点：</strong><br>    当网1出现故障，R1可能在30秒后猜想R2发送更新消息。在这个时间段内，R1收到R2的更新消息，误认为到达网1可以经过R2。R2收到R1的更新消息，将自己到达网1的距离加1.循环往复至R1，R2到达网1的距离都是16，才能最终确定网1不可达。</p><img src="/JeckFS/2020/07/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E7%BD%91%E7%BB%9C%E5%B1%82/image-20200330025905717.png" class="" title="This is image-20200330025905717.png image."><p>​    对于发现了一个更短的路由，这种更新消息就传播的快。</p><h2 id="5-2-内部网关协议OSPF"><a href="#5-2-内部网关协议OSPF" class="headerlink" title="5.2 内部网关协议OSPF"></a>5.2 内部网关协议OSPF</h2><ol><li>向本自治系统的<strong>所有路由器</strong>发送消息(洪泛法)，接收到消息的路由器不再向发送消息的路由器发送消息。</li><li>发送的消息就是本路由器与哪些路由器相邻，以及该链路的度量(如费用、距离、时延、带宽等)</li><li>当链路状态发生变化时，路由器才向所有路由器洪泛消息。</li></ol><p>​    最终所有路由器都能建立一个链路状态数据库(全网的拓扑结构图)，每个路由器根据该数据库，使用Dijkstra的最短路径路由算法构造自己的路由表。</p><p>​    优点是：更新过程收敛的快。</p><p><strong>基本原理：</strong></p><img src="/JeckFS/2020/07/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E7%BD%91%E7%BB%9C%E5%B1%82/image-20200330033157293.png" class="" title="This is image-20200330033157293.png image."><p>​    每个区域的路由器只洪泛到本区域的路由器。</p><p><strong>OSPF报文格式：</strong></p><img src="/JeckFS/2020/07/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E7%BD%91%E7%BB%9C%E5%B1%82/image-20200330033442224.png" class="" title="This is image-20200330033442224.png image."><p><strong>版本</strong>：当前版本号为2</p><p><strong>类型</strong>：五种类型分组的一种</p><p><strong>分组长度</strong>：OSPF分组的长度(包括OSPF首部)</p><p><strong>路由器标识符</strong>：标志发送该分组的路由器的接口的IP地址</p><p><strong>区域标识符</strong>：分组属于的区域标识符</p><p><strong>检验和</strong>：检验分组差错</p><p><strong>鉴别类型</strong>：0表示不用鉴别，1表示需要口令</p><p><strong>鉴别</strong>：鉴别类型为0时就填入0，鉴别类型为1就填入8个字符的口令。</p><p><strong>OSPF的特点：</strong></p><ul><li>可指派链路代价</li><li>对于代价相同的多条路径，可将通信量分配给这几条路径(<strong>多路径间的负载平衡</strong>)</li><li>可<strong>鉴别</strong>可信赖的路由器，交换只与可信赖路由器交换信息。</li><li>支持可变长度的子网划分和无分类编址CIDR</li><li>每个链路状态都有一个32位序号，序号越大状态越新。序号增长不超过5s/次。全部序号空间在600年内不会产生重复号。</li></ul><p><strong>OSPF的五种分组类型：</strong></p><ul><li>问候分组，用来发现和维持邻站的可达性。没10s交换一次，40s收不到则标记不可达。</li><li>数据库描述分组，向邻站发送自己的链路状态数据库中所有的链路状态项目的摘要信息</li><li>链路状态请求分组，向对方请求发送某些链路状态项目的详细信息</li><li>链路状态更新分组，洪泛法将本路由的链路状态通知给邻站</li><li>链路状态确认分组，对链路更新分组的确认</li></ul><img src="/JeckFS/2020/07/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E7%BD%91%E7%BB%9C%E5%B1%82/image-20200330035650478.png" class="" title="This is image-20200330035650478.png image."><h1 id="5-3-外部网关协议-BGP"><a href="#5-3-外部网关协议-BGP" class="headerlink" title="5.3 外部网关协议 BGP"></a>5.3 外部网关协议 BGP</h1><p>特点：</p><ul><li><p>互联网规模太大，使得自治系统AS之间路由选择非常困难</p></li><li><p>自治系统AS之间的路由选择必须考虑有关策略</p><p>经过某些AS需要收费，或者保证国内的数据包不经过国外等</p><p>BGP并非要找到一条最佳路由。</p></li><li><p><strong>支持五分类域间路由选择CIDR。BGP的路由表包括：目的网络前缀、下一跳路由器、到达该目的网络所要经过的自治系统序列。</strong></p></li><li><p>BGP刚运行时，BGP路由交换整个BGP路由表。以后只更新有变化的部分。</p></li></ul><img src="/JeckFS/2020/07/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E7%BD%91%E7%BB%9C%E5%B1%82/image-20200330082531492.png" class="" title="This is image-20200330082531492.png image."><p>​    BGP发言人建立TCP连接，来交换BGP报文(到达某个网络(使用网络前缀表示)，需要经过的一系列的自治系统)。<strong>BGP发言人除了运行内部网关协议，还要运行BGP协议</strong>。</p><img src="/JeckFS/2020/07/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E7%BD%91%E7%BB%9C%E5%B1%82/image-20200330083145161.png" class="" title="This is image-20200330083145161.png image."><p>​    <strong>自治系统连通图是一种树形结构，不存在回路</strong>。</p><img src="/JeckFS/2020/07/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E7%BD%91%E7%BB%9C%E5%B1%82/image-20200330084825270.png" class="" title="This is image-20200330084825270.png image."><p><strong>BGP-4报文：</strong></p><ul><li>OPEN报文，用来与相邻BGP发言人建立关系，使通信初始化</li><li>UPDATE报文，用来通告某一路由的信息，以及列出要撤销的多条路由</li><li>KEEPALIVE报文，用来周期性地证实邻站的连通性</li><li>NOTIFICATION报文，用来发送检测到的差错</li></ul><p><strong>两个不同AS的路由BGP的工作过程：</strong></p><ol><li>A站发送OPEN报文，B站用KEEPALIVE报文响应，建立邻站关系。</li><li>双方周期性(一般30秒)地交换KEEPALIVE报文(只有BGP报文的通用首部)。</li><li>使用IPDATE报文撤销(可以多条)它以前通知过的路由，或宣布增加(只有一条)新路由。</li></ol><img src="/JeckFS/2020/07/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E7%BD%91%E7%BB%9C%E5%B1%82/image-20200330085832266.png" class="" title="This is image-20200330085832266.png image."><p><strong>通用首部：</strong></p><p>标记：用来鉴别收到的BGP报文。不使用鉴别时标记字段为全1.</p><p>长度：包括首部在内的整个 BGP报文的长度，单位为字节，最小值为19，最大值为4096.</p><p>类型：1到4，标记四种BGP报文的一种。</p><p><strong>OPEN报文：</strong></p><p>版本：1字节，值为4,</p><p>本自治系统号：2字节</p><p>保持时间：2字节，以秒计算的保持为邻站关系的时间</p><p>BGP标识符：4字节，通常为该路由器的IP地址</p><p>可选参数长度：1字节</p><p>可选参数：</p><p><strong>UPDATE报文：</strong></p><p>不可行路由长度：2字节，撤销的路由的长度</p><p>撤销的路由：</p><p>路径属性总长度：2字节，路径属性的长度</p><p>路径属性：增加的路径的属性</p><p>网络层可达性信息：网络前缀的位数，IP地址前缀</p><p><strong>KEEPALIVE报文：</strong></p><p>BGP 19字节的通用首部。</p><p><strong>NOTIFICATION报文：</strong></p><p>差错代码：1字节</p><p>差错自带吗：1字节</p><p>差错数据：有关差错的诊断信息</p><h2 id="5-4-路由器的构成"><a href="#5-4-路由器的构成" class="headerlink" title="5.4 路由器的构成"></a>5.4 路由器的构成</h2><img src="/JeckFS/2020/07/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E7%BD%91%E7%BB%9C%E5%B1%82/image-20200330092213972.png" class="" title="This is image-20200330092213972.png image."><p>​    输入端口和输出端口的123，分别代表物理层、数据链路层、网络层的处理模块。</p><p>​    转发表通常会在每一个输入端口中，路由选择处理机负责对各转发表的副本(影子副本)进行更新。</p><img src="/JeckFS/2020/07/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E7%BD%91%E7%BB%9C%E5%B1%82/image-20200330093329036.png" class="" title="This is image-20200330093329036.png image."><img src="/JeckFS/2020/07/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E7%BD%91%E7%BB%9C%E5%B1%82/image-20200330093337437.png" class="" title="This is image-20200330093337437.png image."><p>交换结构：把一个分组从一个输入端口移到某个合适的输出端口。实现方法如下图。</p><img src="/JeckFS/2020/07/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E7%BD%91%E7%BB%9C%E5%B1%82/image-20200330094708182.png" class="" title="This is image-20200330094708182.png image."><h1 id="6-IPv6"><a href="#6-IPv6" class="headerlink" title="6. IPv6"></a>6. IPv6</h1><ul><li>首部长度固定。</li><li>支持即插即用（即自动配置）。因此不需要DHCP</li><li>支持单播、多播、任播(anycast IPv6中的新类型，任播的终点是一组计算机，但数据包只交付其中一个，通常是距离最近的一个)</li></ul><img src="/JeckFS/2020/07/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E7%BD%91%E7%BB%9C%E5%B1%82/image-20200330095343196.png" class="" title="This is image-20200330095343196.png image."><img src="/JeckFS/2020/07/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E7%BD%91%E7%BB%9C%E5%B1%82/image-20200330095451044.png" class="" title="This is image-20200330095451044.png image."><p><strong>版本</strong>：占4位，指明协议的版本，IPv6该字段为6</p><p><strong>通信量类</strong>：占8位，用于区分IPv6数据报的类别或优先级</p><p><strong>流标号</strong>：占20位，将数据报与给定的资源分配相联系。<strong>流就是互联网络上从特定源点到特定终点(单播或多播)的一系列数据报(如实时音频或视频传输)，而在这个“流”所经过的路径上的路由器都保证指明的服务质量。</strong>所有属于同一个流的数据报具有相同的流标号。然而对电子邮件或非实时数据，流标号无用，置为0.</p><p><strong>有效载荷长度</strong>：占16位，最大为64KB</p><p><strong>下一个首部</strong>：占8位，当IPv6数据报没有扩展首部时，下一个首部字段指出有效载荷部分应交付IP层上面的哪个高层协议。如6表示TCP，17表示UDP；当出现扩展首部时，下一个首部字段值标识后面第一个扩展首部的类型。</p><p><strong>调数限制</strong>：占8位，同IPv4的TTl。</p><p><strong>六种扩展首部：</strong></p><ul><li>逐跳选项(途径的路由器只理睬这种扩展首部，其他不会处理)</li><li>路由选择</li><li>分片</li><li>鉴别</li><li>封装安全有效载荷</li><li>目的站选项</li></ul><p><strong>冒号十六进制记法：</strong></p><ul><li><p>允许省略前面的0</p><p>如68E6:8C64:FFFF:FFFF:<strong>0</strong>:1180:960A:FFFF</p></li><li><p>零压缩（一个地址中只能使用一次零压缩）。</p><p>FF05:0:0:0:0:0:0:B3 可压缩为 FF05:B3</p><p>0:0:0:0:0:0:128.10.2.1 可压缩为 ::128.10.2.1</p></li><li><p>允许CIDR的斜线表示法。</p><p>12AB00000000CD3可记为12AB:0000:0000:CD30:0000:0000:0000:0000/60</p><p>或12AB::CD30:0:0:0:0/60</p><p>或12AB:0:0:CD30::/60</p></li></ul><img src="/JeckFS/2020/07/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E7%BD%91%E7%BB%9C%E5%B1%82/image-20200330131305735.png" class="" title="This is image-20200330131305735.png image."><p>未指明地址和环回地址只有一个。</p><p>本地链路单播地址：有些单位的网络使用TCP/IP但并没有连接到互联网上。只能用于本网络内的通信。</p><p>全球单播地址：</p><img src="/JeckFS/2020/07/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E7%BD%91%E7%BB%9C%E5%B1%82/image-20200330132141029.png" class="" title="This is image-20200330132141029.png image."><p><strong>从IPv4向IPv6过渡：</strong></p><ol><li><p>双协议栈</p><p>一个主机同时运行IPv4协议和IPv6协议。具体使用哪种协议取决于DNS解析出来的是IPv4还是IPv6。</p></li></ol><img src="/JeckFS/2020/07/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E7%BD%91%E7%BB%9C%E5%B1%82/image-20200330132900804.png" class="" title="This is image-20200330132900804.png image."><ol><li>隧道技术</li></ol><img src="/JeckFS/2020/07/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E7%BD%91%E7%BB%9C%E5%B1%82/image-20200330133533151.png" class="" title="This is image-20200330133533151.png image."><h1 id="7-IP多播"><a href="#7-IP多播" class="headerlink" title="7. IP多播"></a>7. IP多播</h1><p>​    发送站只需要发送一次多播数据报，路由器在转发时要复制成多个副本转发，局域网具有硬件多播功能，不需要复制分组。</p><p>​    能够运行多播协议的路由器称为多播路由器。</p><img src="/JeckFS/2020/07/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E7%BD%91%E7%BB%9C%E5%B1%82/image-20200330140559116.png" class="" title="This is image-20200330140559116.png image."><p>​    多播数据报中写入的是多播地址，每个多播地址标志一个多播组。</p><p>​    多播数据报是尽最大努力的交付，不保证一定能够交付多播组内的所有成员。</p><p>​    多播数据报与单播数据报的区别是：多播地址使用D类地址作为目的地址，首部的协议字段值为2，表明使用网际组管理协议IGMP。</p><p>​    多播地址只能用于目的地址，不能用于源地址。</p><p>​    多播数据报不产生ICMP差错报文。</p><h2 id="7-1-局域网中的硬件多播"><a href="#7-1-局域网中的硬件多播" class="headerlink" title="7.1 局域网中的硬件多播"></a>7.1 局域网中的硬件多播</h2><ul><li>硬件地址第一个字节的最低位为1，表示多播地址</li><li>硬件多播地址的范围是01-00-5E-00-00-00到01-00-5E-7E-FF-FF</li><li>取多播IP地址的后23位添加到MAC地址中，如下图</li></ul><img src="/JeckFS/2020/07/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E7%BD%91%E7%BB%9C%E5%B1%82/image-20200331095216937.png" class="" title="This is image-20200331095216937.png image."><p>​    但IP多播地址224.128.64.32（E0-80-40-20）与224.0.64.32（E0-00-40-20）转换后的硬件多播地址都为01-00-5E-00-40-20，所以多播IP地址与硬件地址的映射是不唯一的，因此主机利用软件判别多播数据报是否是本机需要的。</p><h3 id="7-1-1-网际组管理协议IGMP"><a href="#7-1-1-网际组管理协议IGMP" class="headerlink" title="7.1.1 网际组管理协议IGMP"></a>7.1.1 网际组管理协议IGMP</h3><p><strong>IGMP协议是让连接在本地局域网上的多播路由器知道本局域网上是否有主机参加或退出了某个多播组。</strong></p><p>第一阶段：当某台主机加入新的多播组时，该主机向多播组的多播地址发送一个IGMP报文，声明自己要称为该组成员。本地多播路由器收到IGMP报文后，利用多播路由选择协议把这种组成员关系转发给互联网上的其他多播路由器。</p><p>第二阶段：<strong>本地多播路由器</strong>周期性探询本地局域网上的主机，<strong>只要有一个主机</strong>对<strong>某个组</strong>响应，多播路由器就将这个组的成员关系转发给其他多播路由器，否则不发送。</p><ul><li>IGMP使用IP数据报传递。</li><li>主机和本地多播路由器之间的所有通信都是使用IP多播。没有参加IP多播的主机不会受到IGMP报文。</li><li>本地多播路由器对<strong>所有组</strong>发送一个请求信息的询问报文，而不是对每一个组。</li><li>当存在多个本地多播路由器时，<strong>只有一个</strong>本地多播路由器探询主机的成员关系。</li><li><strong>同一个组</strong>只要有一个主机发送了响应，<strong>本组其他主机</strong>就不用再发送响应。</li><li>某台主机的多个进程属于同一个多播组，每个多播数据报只接收一个副本，然后给多个进程发送本地复制的副本。</li></ul><h3 id="7-1-2-多播路由选择协议"><a href="#7-1-2-多播路由选择协议" class="headerlink" title="7.1.2 多播路由选择协议"></a>7.1.2 多播路由选择协议</h3><h4 id="7-1-2-1-洪泛与剪除："><a href="#7-1-2-1-洪泛与剪除：" class="headerlink" title="7.1.2.1 洪泛与剪除："></a>7.1.2.1 洪泛与剪除：</h4><p>​    适用于较小的多播组，所有组成员接入的局域网也是相邻接的。</p><p><strong>反向路径传播策略：</strong></p><ul><li>对每个多播数据包，检查是否是从源点经最短路径传送来的。</li><li>若存在多条最短路径，选择IP地址最小的那条路径。</li></ul><img src="/JeckFS/2020/07/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E7%BD%91%E7%BB%9C%E5%B1%82/image-20200331110742055.png" class="" title="This is image-20200331110742055.png image."><p><strong>剪除：</strong>下游没有多播组的成员就剪枝；添加新的组成员时，再接入到多播转发树上。</p><h4 id="7-1-2-2-隧道技术"><a href="#7-1-2-2-隧道技术" class="headerlink" title="7.1.2.2 隧道技术"></a>7.1.2.2 隧道技术</h4><p>​    适用于多播组的位置在地理上很分散的情况。</p><img src="/JeckFS/2020/07/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E7%BD%91%E7%BB%9C%E5%B1%82/image-20200331111134939.png" class="" title="This is image-20200331111134939.png image."><h4 id="7-1-2-3-基于核心的发现技术"><a href="#7-1-2-3-基于核心的发现技术" class="headerlink" title="7.1.2.3 基于核心的发现技术"></a>7.1.2.3 基于核心的发现技术</h4><p>​    对每一个多播组G制定一个<strong>核心路由器</strong>，并给出他的IP单播地址。</p><p>​    按照洪泛与剪枝的方法构造多播组G的转发树。</p><p>若：路由器R1向核心路由器发送数据报，途径的每个路由器都会检查其内容。当数据报到达参加了多播组G的路由器R2时，R2处理这个数据包。</p><p>若：R1发送一个目的地址是G的组地址的多播数据包，R2就向多播组的成员转发这个多播数据报。</p><p>若：R1发出的是请求加入多播组G的数据包，R2将这个信息加入本路由中，并用隧道技术向R1转发每一个多播数据包的一个副本。</p><h1 id="8-虚拟专用网VPN"><a href="#8-虚拟专用网VPN" class="headerlink" title="8. 虚拟专用网VPN"></a>8. 虚拟专用网VPN</h1><p><strong>专用地址：</strong>用作仅在本内部通信的地址。</p><ul><li><p>10.0.0.0 到 10.255.255.255 （即10.0.0.0/8）</p></li><li><p>172.16.0.0 到 172.31.255.255 （即172.16.0.0/12）</p></li><li><p>192.168.0.0 到 192.168.255.255 （即192.168.0.0/16）</p><p><strong>互联网中所有的路由器对目的地址是专用地址的数据包一律不转发。</strong></p><p>多个专用网之间的通信，若要经过公网，则所有通过互联网传送的数据都必须加密。</p></li></ul><p><strong>基本原理：</strong></p><img src="/JeckFS/2020/07/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E7%BD%91%E7%BB%9C%E5%B1%82/image-20200331155332987.png" class="" title="This is image-20200331155332987.png image."><p><strong>内联网VPN</strong>：所有的内部网络都同属一个机构。</p><p><strong>外联网VPN</strong>：内部网络中有其他机构。</p><p><strong>远程接入VPN</strong>：个人在外地连接内部网络。</p><h2 id="8-1-网络地址转换NAT（内部主机访问外网）"><a href="#8-1-网络地址转换NAT（内部主机访问外网）" class="headerlink" title="8.1 网络地址转换NAT（内部主机访问外网）"></a>8.1 网络地址转换NAT（内部主机访问外网）</h2><h3 id="8-1-1-NAT"><a href="#8-1-1-NAT" class="headerlink" title="8.1.1 NAT"></a>8.1.1 NAT</h3><p>​    NAT是不能节约公网IP地址的。使用NAT需要在路由器上安装NAT软件，称为<strong>NAT路由器</strong>。NAT路由器根据内网IP与公网IP的映射表来进行地址转换。NAT路由器有多少个公网IP，内网就可以<strong>同时</strong>允许多少台电脑上网。当然，内网主机可以轮流使用NAT路由器中的公网IP，先到先得。</p><img src="/JeckFS/2020/07/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E7%BD%91%E7%BB%9C%E5%B1%82/image-20200331160608238.png" class="" title="This is image-20200331160608238.png image."><img src="/JeckFS/2020/07/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E7%BD%91%E7%BB%9C%E5%B1%82/image-20200331160626301.png" class="" title="This is image-20200331160626301.png image."><h3 id="8-1-2-NAPT"><a href="#8-1-2-NAPT" class="headerlink" title="8.1.2 NAPT"></a>8.1.2 NAPT</h3><p>​    节约公网IP地址。<strong>一般</strong>将内网IP地址映射为一个公网IP地址，通过运输层的端口号来区别是哪个主机。</p><img src="/JeckFS/2020/07/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E7%BD%91%E7%BB%9C%E5%B1%82/image-20200331161352699.png" class="" title="This is image-20200331161352699.png image."><h1 id="9-多协议标记交换MPLS"><a href="#9-多协议标记交换MPLS" class="headerlink" title="9. 多协议标记交换MPLS"></a>9. 多协议标记交换MPLS</h1><p>特点：</p><ul><li>支持面向连接的服务质量</li><li>支持流量工程，平衡网络负载</li><li>有效地支持虚拟专用网VPN</li><li>基于<strong>显示路由选择</strong>确定转发路径</li><li>MPLS根据标记在数据链路层用硬件进行<strong>转发</strong>(在标记交换路由器中进行标记对换)，转发速率大大加快。</li></ul><img src="/JeckFS/2020/07/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E7%BD%91%E7%BB%9C%E5%B1%82/image-20200331162815969.png" class="" title="This is image-20200331162815969.png image."><p><strong>MPLS域</strong>：域中有许多彼此相邻的路由器，并且所有的路由器都是支持MPLS技术的<strong>标记交换路由器LSR</strong>(用于转发和标记对换)。</p><p><strong>标记交换路径LSP</strong>：个LSR使用专门的<strong>标记分配协议LDP</strong>交换报文，并找出和特定标记相对应路径。各LSR根据这些路径构造转发表。</p><p><strong>根据标记查找出口</strong>：</p><img src="/JeckFS/2020/07/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E7%BD%91%E7%BB%9C%E5%B1%82/image-20200331163344513.png" class="" title="This is image-20200331163344513.png image."><p><strong>标记对换</strong>：将数据报的入标记转化为出标记。</p><p><strong>显示路由选择</strong>：由入口LSR确定进入MPLS域后的转发路径。</p><font size=5, color="#ff0000">转发等价类FEC：</font><p>作用是对于满足某种条件的IP数据包采用特定的转发策略。条件的选取有网络管理员来控制，非常灵活。</p><p>例如：H1，H2分别向H3，H4发送数据。传统路由选择协议只能选择最短路径A$\rightarrow$B$\rightarrow$C。采用MPLS可设置FEC来实现负载平衡。</p><img src="/JeckFS/2020/07/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E7%BD%91%E7%BB%9C%E5%B1%82/image-20200331170049248.png" class="" title="This is image-20200331170049248.png image."><p>可设置两种FEC：源地址为H1而目的地址为H3、源地址为H2而目的地址为H4。把前一种路径设置为H1$\rightarrow$A$\rightarrow$BC$\rightarrow$H3，后一种路径设置为H2$\rightarrow$A$\rightarrow$D$\rightarrow$E$\rightarrow$C$\rightarrow$H4。这种均衡网络负载的做法也称为<strong>流量工程TE</strong>或<strong>通信量工程</strong>。</p><img src="/JeckFS/2020/07/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E7%BD%91%E7%BB%9C%E5%B1%82/image-20200331170826780.png" class="" title="This is image-20200331170826780.png image."><p>生存时间TTL：防止MPLS分组在MPLS域中兜圈子。</p>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络-谢希任-数据链路层</title>
      <link href="/JeckFS/2020/07/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/"/>
      <url>/JeckFS/2020/07/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/</url>
      
        <content type="html"><![CDATA[<p>数据链路层的信道类型：</p><ul><li><p>点对点信道</p><p>一对一的点对点通信方式。</p><p>常用协议：PPP</p></li><li><p>广播信道</p><p>一对多的广播通信方式。</p><p>常用协议：CSMA/CD</p></li></ul><p>路由器连接多个网络(局域网)，属于网络层，则局域网属于数据链路层的范围。</p><h1 id="使用点对点的数据链路层"><a href="#使用点对点的数据链路层" class="headerlink" title="使用点对点的数据链路层"></a>使用点对点的数据链路层</h1><img src="/JeckFS/2020/07/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/image-20200326210411979.png" class="" title="This is image-20200326210411979.png image."><h2 id="三个基本问题："><a href="#三个基本问题：" class="headerlink" title="三个基本问题："></a>三个基本问题：</h2><h3 id="1-封装成帧"><a href="#1-封装成帧" class="headerlink" title="1.封装成帧"></a>1.封装成帧</h3><p>​    帧：在数据(IP数据包)前后添加首部和尾部所构成的数据。</p><p>​    首部和尾部的作用：帧定界。</p><p>​    最大传送单元：MTU（Maximum Transfer Unit）数据部分长度上限。</p><p>​    定界符：SOH，EOT。用于判定帧是否完整，以丢弃不完整帧。</p><img src="/JeckFS/2020/07/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/image-20200326211208700.png" class="" title="This is image-20200326211208700.png image."><img src="/JeckFS/2020/07/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/image-20200326211410766.png" class="" title="This is image-20200326211410766.png image."><h3 id="2-透明传输"><a href="#2-透明传输" class="headerlink" title="2.透明传输"></a>2.透明传输</h3><p>字节填充或字符填充：使用转义字符ESC转义SOH与EOT。</p><img src="/JeckFS/2020/07/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/image-20200326211721524.png" class="" title="This is image-20200326211721524.png image."><h3 id="3-差错检测-比特差错"><a href="#3-差错检测-比特差错" class="headerlink" title="3.差错检测(比特差错)"></a>3.差错检测(比特差错)</h3><p>​    误码率BER：传输错误的比特占所传输比特总数的比率。误码率为10^-10^表示每传送10^10^个比特就会出现一个比特的差错。</p><p>​    检测方法：循环冗余检验CRC</p><p>​    在发送端，将数据划分为组，每组k个比特，假定M=101001(k=6)，经过CRC运算后将n为冗余码(FCS)添加在M后构成一个帧发送出去，一共发送k+n位，此处n=3。</p><img src="/JeckFS/2020/07/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/image-20200326213942254.png" class="" title="This is image-20200326213942254.png image."><p>​    在接收端进行CRC检验：把收到的每一个帧都除以同样的除数P，检查得到的余数R，若R=0表示没有比特差错，否则有错。</p><blockquote><p>除了比特差错，还有帧丢失，帧重复，帧失序。</p></blockquote><h2 id="点对点协议PPP"><a href="#点对点协议PPP" class="headerlink" title="点对点协议PPP"></a>点对点协议PPP</h2><blockquote><p>用户计算机和ISP进行通信时所使用的数据链路层协议。</p><p>通过协商配置两个网络层的IP地址。</p><p>身份验证。</p></blockquote><img src="/JeckFS/2020/07/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/image-20200326214834360.png" class="" title="This is image-20200326214834360.png image."><h3 id="1-PPP协议的组成"><a href="#1-PPP协议的组成" class="headerlink" title="1.PPP协议的组成"></a>1.PPP协议的组成</h3><ul><li>将IP数据包封装到穿行链路的方法。支持异步链路（五奇偶较验的8比特数据）和面向比特的同步链路。</li><li>用来建立链路、认证用户、检测链路质量的<strong>链路控制协议LCP</strong>(Link Control Protocol)</li><li>一套<strong>网络控制协议NCP</strong>(Network Control Protocol)，其中的每个协议支持不同的网络层协议，如IP、OSI的网络层、DECnet、AppleTalk等</li></ul><h3 id="2-PPP协议帧格式"><a href="#2-PPP协议帧格式" class="headerlink" title="2.PPP协议帧格式"></a>2.PPP协议帧格式</h3><img src="/JeckFS/2020/07/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/image-20200327121508625.png" class="" title="This is image-20200327121508625.png image."><ul><li><p>F：0x7E帧定界符</p></li><li><p>A：地址字段</p></li><li><p>C：控制字段，留待以后使用</p></li><li><p>协议：</p><p>0x0021：信息部分为IP数据包</p><p>0xC021：信息部分是PPP链路控制协议LCP的数据</p><p>0x8021：信息部分是网络层的控制数据</p></li><li><p>信息部分不超过1500字节</p></li><li><p>FCS：使用CRC的帧检测序列FCS</p></li></ul><h4 id="PPP的透明传输："><a href="#PPP的透明传输：" class="headerlink" title="PPP的透明传输："></a>PPP的透明传输：</h4><p><strong>1.PPP使用异步传输(逐个字符传送)时使用字节填充：</strong></p><p>​    将0x7D作为转义字符。</p><ul><li><p>0x7E—&gt;0x7D，ox5E</p></li><li><p>0x7D—&gt;0x7D，0x5D</p></li><li><p>数值小于0x20的字符(控制字符)，其前加入0x7D，同时更改该字符编码。</p><p>如0x03—&gt;0x7D，0x23</p></li></ul><p><strong>2.PPP使用同步传输(一连串的比特连续传送)时使用零比特填充</strong></p><p>​    方法是只要发现有连续的5个1，就立即插入一个0.</p><p>​    注意：<br>​        <strong>0x7E —&gt; 01111110</strong><br>​        0xFF —&gt; 11111111<br>​        0x03 —&gt; 00000011</p><img src="/JeckFS/2020/07/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/image-20200327123234502.png" class="" title="This is image-20200327123234502.png image."><h4 id="PPP的工作状态："><a href="#PPP的工作状态：" class="headerlink" title="PPP的工作状态："></a>PPP的工作状态：</h4><img src="/JeckFS/2020/07/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/image-20200327125120038.png" class="" title="This is image-20200327125120038.png image."><p><strong>LCP配置协商</strong>：<br>    PC发送LCP的配置请求帧(Configure-Request)，该PPP帧的协议字段是LCP对应的代码，信息部分是特定的额配置请求。<br>    LCP配置选项有：链路上的最大帧常、所使用的鉴别协议、使用PPP帧中的地址和控制字段与否。<br>    接收端可发送：<br>    配置确认帧(Configure-Ack)：所有选项都接受<br>    配置否认帧(Configure-Nak)：所有选项都理解但不能接受<br>    配置拒绝帧(Configure-Reject)：选项有的无法识别或不能接受，需要进一步协商。</p><p><strong>鉴别状态：</strong><br>    只允许发送LCP协议的分组，鉴别协议的分组以及检测链路质量的分组。若LCP配置协商没有指定鉴别方式，则鉴别阶段就跳过，直接进入网络协议阶段。<br>    使用的协议：<br>        口令鉴别协议PAP(Password Authentication Protocol)，发送方需发送身份标识符和口令。<br>        口令握手鉴别协议CHAP(Challenge-Handshake Authentication Protocol)，这种安全性更高。</p><p><strong>网络层协议：</strong><br>    PPP链路两端的网络层可运行不同的网络层协议，但仍然使用同一个PPP协议进行通信。NCP就是用来协商将两端的网络层报文封装成同一种报文来在PPP链路上传递的。<br>【有疑问】</p><p><a href="https://blog.csdn.net/bytxl/article/details/50111971">参考资料</a></p><h1 id="使用广播信道的数据链路层"><a href="#使用广播信道的数据链路层" class="headerlink" title="使用广播信道的数据链路层"></a>使用广播信道的数据链路层</h1><p>共享通信资源的方式：<br>    静态划分信道：频分复用、时分复用、波分复用、码分复用等。缺点是代价高。<br>    多点接入：<br>        随机接入：所有用户随机发送信息，需要解决碰撞问题。【重点】<br>        受控接入：用户发送信息需要复用一定控制，如令牌环网，集中控制的多点线路轮询。</p><p><strong>适配器(网卡)</strong>：</p><p>​    工作在数据链路层和物理层。</p><img src="/JeckFS/2020/07/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/image-20200327140737988.png" class="" title="This is image-20200327140737988.png image."><p>作用是：</p><ul><li>数据串行传输和并行传输的转换。</li><li>网卡驱动程序会告诉适配器，从存储器的什么位置上把多长的数据块发送到局域网，或者应当在存储器的什么位置上把局域网传送来的数据块存储下来。</li><li>自动丢弃出错的帧，以中断方式通知计算机。</li></ul><h2 id="1-CSMA-CD协议"><a href="#1-CSMA-CD协议" class="headerlink" title="1.CSMA/CD协议"></a>1.CSMA/CD协议</h2><p>​    广播中的一对一通信：适配器将数据帧中的MAC地址进行比对，是自己的就收下，其他与的丢弃。</p><p>​    采用无连接的发送方式，不进行数据帧的编号与请求对方发回确认，尽最大努力的交付，对于差错帧交由高层协议(TCP)控制是否重传。</p><p><strong>CSMA/CD特点：</strong></p><ul><li>多点接入：使用总线型网络(传统以太网)</li><li>载波监听：不管发送前，还是发送中，每个站不停地检测信道。</li><li>碰撞检测：边发送边监听，即适配器边发送数据，边检测信道上的信号电压变化情况。发生碰撞时，总线上的信号电压会叠加变大。当电压变化幅度超过一定门限，就认为至少有两个站同时发送数据，即发生碰撞。一旦适配器检测出碰撞，就立即停止发送数据。</li></ul><p><strong>发生碰撞的机理：</strong></p><p>​    由于电磁波在1km电缆的传播时延约为5$\mu s$，所以A站发送的数据B站在$5\mu s$后才能收到，在这个时间段内，B站若发送数据就会发生碰撞。</p><p>​    记总线上单程端到端的传播时间为$\tau$，A站最多是$2\tau$的时间检测出碰撞。$2\tau$称为征用期或者碰撞窗口。经过征用期这段时间还没有检测到碰撞，才能肯定这次发送不会发送碰撞。</p><img src="/JeckFS/2020/07/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/image-20200328030734998.png" class="" title="This is image-20200328030734998.png image."><img src="/JeckFS/2020/07/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/image-20200328031129284.png" class="" title="This is image-20200328031129284.png image."><img src="/JeckFS/2020/07/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/image-20200328031155184.png" class="" title="This is image-20200328031155184.png image."><p>站点边发送边监听信道，并不等同与同时进行发送和接收(做不到)，所以CSMA/CD协议只支持半双工通信。</p><p><strong>发生碰撞后重传时机的确定：截断二进制指数退避</strong></p><ul><li>协议规定基本退避时间为争用期$2\tau$，具体的争用期时间是$51.2\mu s$。对于$10Mbit/s$的以太网，在争用期可发送$512bit$，即64字节。也可说争用期是512bit，即发送512bit所需时间。</li><li>重传时间的确定：<br>从$[0,1,…,(2^k-1)]$随机选择一个数，记为r，重传时间为$r\times 2\tau$。<br>其中$k=\min[重传次数, 10]$。</li><li>重传16次仍不成功，则丢弃该帧并向高层报告。</li></ul><p>​    适配器对于过去的碰撞并无记忆功能，当发送一个很小的帧时，适配器可在该帧还在传输线路上时就发送另一个帧，若这个小帧发生碰撞，发送站将不会重传这个帧。为解决这种情况，以太网规定最短帧长为64字节，即512bit（一个争用期的时间），若发送的帧太小则填充字符。也就是说若发生碰撞，一定是在发送的前64字节内，发送站会在前64字节内检测到碰撞，检测到碰撞立即停止发送，已经发送的帧由于小于64字节都被视为冲突而异常中止的无效帧。在争用期的时间内不发生碰撞，后续的数据也不会发生碰撞，因为其他站会检测到信道上有站点在发送数据。</p><p><strong>强化碰撞：</strong><br>    发送站一旦检测到碰撞，除了立即停止发送数据外，在继续发送32bit或48bit的人为干扰信号，让所有用户都知道已经发生了碰撞。</p><img src="/JeckFS/2020/07/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/image-20200328040332104.png" class="" title="This is image-20200328040332104.png image."><p>上图省略了B站发送的干扰信号。</p><p>以太网规定帧间最小间隔为9.6$\mu s$，相当于96比特时间。目的是使刚收到数据帧的站来得及清理缓存，为接收下一帧做准备。</p><img src="/JeckFS/2020/07/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/image-20200328040935282.png" class="" title="This is image-20200328040935282.png image."><h2 id="2-使用集线器的拓扑网络-进阶版的以太网"><a href="#2-使用集线器的拓扑网络-进阶版的以太网" class="headerlink" title="2.使用集线器的拓扑网络(进阶版的以太网)"></a>2.使用集线器的拓扑网络(进阶版的以太网)</h2><img src="/JeckFS/2020/07/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/image-20200328062048642.png" class="" title="This is image-20200328062048642.png image."><p>概念：<br>    IEEE制定出星型以太网<strong>10BASE-T</strong>（<strong>站点到集线器距离不超过100m</strong>）的标准802.3i，10表示10 Mbit/s的数据率，BASE表示连接线上的信号是基带信号，T表示双绞线。</p><p><strong>集线器：</strong><br>    集线器使用电子器件模拟实际电缆线的工作，因此使用集线器的以太网在逻辑上仍是一个总线网，各站共享逻辑上的总线，适配器使用的还是CSMA/CD协议。网络中的各站在同一时刻至多允许一个站发送数据。</p><p>​    集线器上的接口通过RJ-45插头用两对双绞线与一台计算机上的适配器相连。这种插头可连接4对双绞线，实际上只用2对，即发送和接受各使用一对双绞线。</p><p>​    集线器工作在物理层，每个接口仅简单的转发比特，不会进行碰撞检测。</p><img src="/JeckFS/2020/07/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/image-20200328065808075.png" class="" title="This is image-20200328065808075.png image."><h2 id="3-以太网的信道利用率"><a href="#3-以太网的信道利用率" class="headerlink" title="3.以太网的信道利用率"></a>3.以太网的信道利用率</h2><img src="/JeckFS/2020/07/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/image-20200328070716714.png" class="" title="This is image-20200328070716714.png image."><p>$T_0$是发送帧所需要的时间，$T_0=\frac{帧长}{发送速率}$，即适配器从发送帧的第一个比特到最后一个比特发送完毕所需时间。再加上最后一个比特传递到接收站花费的时间$\tau$，成功发送一个帧需要花费$T_0+\tau$。</p><p>定义：</p><script type="math/tex; mode=display">a=\frac{\tau}{T_0}</script><p>当$a\rightarrow 0$时，表示只要一碰撞，就立即检测出来，并立即停止发送，因此信道资源浪费较少。反之a越大，表明争用期所占比例越大，每发生一次碰撞就浪费不少信道资源。当发送数据率一定时，以太网的连线的长度收到限制(否则$\tau$会变大)，同时以太网的帧长不能太短(否则$T_0$会太小，使a变大)。</p><p><strong>极限信道利用率：</strong><br>    即不发生碰撞的情况。总线一旦空闲就有某一个站立即发送数据。发送一个帧的时间为$T<em>0+\tau$，而帧本身的发送时间是$T_0$，则极限信道利用率$S</em>{max}$为：</p><script type="math/tex; mode=display">S_{max}=\frac{T_0}{T_0+\tau}=\frac{1}{1+a}</script><p>​    只有当参数a远小于1才能得到尽可能高的极限信道利用率。实际上，当以太网的信道利用率达到30%时就已经处于重载了。很多网络容量被网上的碰撞消耗掉了。</p><h2 id="4-以太网的MAC层"><a href="#4-以太网的MAC层" class="headerlink" title="4.以太网的MAC层"></a>4.以太网的MAC层</h2><p>DIX Ethernet V2的MAC帧格式：</p><img src="/JeckFS/2020/07/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/image-20200328074031892.png" class="" title="This is image-20200328074031892.png image."><p>​    类型字段表示上一层使用的是什么协议。<br>​    数据字段长度在46(最小帧长度64字节减去18字节的首部和尾部)到1500字节之间。<br>​    插入的8字节数据用来调整接收端的时钟频率，实现发送端和接收到的比特同步，最后的11表示MAC帧的信息马上开始。</p><p><strong>如何识别MAC帧结束的位置：</strong><br>    曼彻斯特编码的每一个码元(不管码元是1还是0)的正中间有一次电压的转换，当发送方不再发送数据后，其网络适配器的电压将不再变化。接收方借此识别以太网帧的结束位置</p><p><strong>字节填充部分：</strong><br>    上层协议若是IP协议的话，其首部有一个总长度字段。总长度+填充字段的长度=MAC帧数据字段的长度，IP层自动把后面的填充字节丢弃。</p><hr><p>​    以太网以帧为单位传送，每个帧之间有一定空隙。接收端找到帧定界符，其后的连续比特流就同属一个MAC帧。因此以太网不需要帧结束定界符，也不需要插入字节保证透明传输。</p><hr><p><strong>无效MAC帧：</strong></p><ul><li><p>帧长度不是整数个字节</p></li><li><p>帧检测序列FCS出错</p></li><li><p>MAC数据字段长度不再46-1500字节之间。或者有效MAC帧长度在64-1518字节之间。</p><p>以太网不重传丢弃的帧。</p></li></ul><h1 id="扩展以太网的覆盖范围"><a href="#扩展以太网的覆盖范围" class="headerlink" title="扩展以太网的覆盖范围"></a>扩展以太网的覆盖范围</h1><blockquote><p>扩展后的以太网仍然是一个网络。</p></blockquote><h2 id="1-在物理层扩展以太网"><a href="#1-在物理层扩展以太网" class="headerlink" title="1.在物理层扩展以太网"></a>1.在物理层扩展以太网</h2><p>​    1. 使用光纤：</p><img src="/JeckFS/2020/07/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/image-20200328085903755.png" class="" title="This is image-20200328085903755.png image."><ol><li>使用主干集线器</li></ol><img src="/JeckFS/2020/07/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/image-20200328090128580.png" class="" title="This is image-20200328090128580.png image."><p>【注意】</p><ol><li><p>使用主干集线器会导致以太网吞入量降低。假设每个系的最大吞吐量为10 Mbit/s，则(a)的吞吐量为30 Mbit/s，(b)的仍然是10 Mbit/s，因为他们同在一个碰撞域。</p></li><li><p>若一个系使用10 Mbit/s的适配器，另外两个使用100 Mbit/s的适配器，在(b)中整个网络的速率仍然是10 Mbit/s.</p></li></ol><h2 id="2-在数据链路层扩展以太网"><a href="#2-在数据链路层扩展以太网" class="headerlink" title="2. 在数据链路层扩展以太网"></a>2. 在数据链路层扩展以太网</h2><p><strong>以太网交换机</strong>：</p><ul><li>实质上是一个多接口的网桥</li><li>以太网交换机的每个接口与一个主机或者另一个以太网交换机相连</li><li>全双工通信</li><li>能够同时连通多对接口，是多对主机能够同时通信，相互通信的主机独占传输媒体，无碰撞地传输数据。<br>传统10 Mbit/s的共享式以太网，若有10个用户，每个用户的平均带宽只有1 Mbit/s。若使用以太网交换机，虽然每个接口到主机的带宽还是10 Mbit/s，但拥有10个接口的交换机的总容量则达到100  Mbit/s。</li><li>存储转发帧</li><li>即插即用</li><li>直通(cut-through)交换方式：不进行存储转发，直接转发收到的数据帧。这种方式不会差错检验，速率匹配，协议转换。而基于软件的存储转发方式可以做到。</li></ul><p><strong>以太网交换机的自学习功能：</strong></p><img src="/JeckFS/2020/07/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/image-20200328092834943.png" class="" title="This is image-20200328092834943.png image."><p>​    交换机收到某个帧，若交换表中没有改MAC地址与接口的对应关系，就添加进去。转发时，交换表中没有对应信息就广播到其余接口。<br>​    交换表每个表项有一定的超时时间，超时后自动删除。</p><img src="/JeckFS/2020/07/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/image-20200328093308971.png" class="" title="This is image-20200328093308971.png image."><p>​    使用<strong>生成树协议STP(Spanning Tree Protocol)</strong>，不改变网络实际拓扑，从逻辑上切断某些链路，使得每台主机到其他主机的路径是五环路的树状结构。</p><hr><p>​    目前主流是星型以太网，总线以太网过时了。以太网交换机不使用共享总线，没有碰撞问题，因此不使用CSMA/CD协议，争用期也没有了。星型以太网是全双工通信。但是其帧结构仍然采用以太网的帧结构，所以仍然叫做以太网。<br>​    CSMA/CD工作在半双工方式。</p><hr><h2 id="3-虚拟局域网VLAN"><a href="#3-虚拟局域网VLAN" class="headerlink" title="3. 虚拟局域网VLAN"></a>3. 虚拟局域网VLAN</h2><p>​    根据需求划分主机属于哪个局域网，主机可接收到同一个虚拟局域网的主机发送的广播信息。限制了接收广播信息的计算机数，可解决因传播过多而产生的<strong>广播风暴</strong>问题。</p><img src="/JeckFS/2020/07/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/image-20200328094957473.png" class="" title="This is image-20200328094957473.png image."><img src="/JeckFS/2020/07/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/image-20200328095154792.png" class="" title="This is image-20200328095154792.png image."><p>​    由于添加了4个字节的VLAN标记，所以以太网的最大帧长从1518变为1522字节。</p><h1 id="高速以太网"><a href="#高速以太网" class="headerlink" title="高速以太网"></a>高速以太网</h1><h2 id="1-100BASE-T以太网"><a href="#1-100BASE-T以太网" class="headerlink" title="1. 100BASE-T以太网"></a>1. 100BASE-T以太网</h2><ul><li>100BASE-T是在双绞线上传送100 Mbit/s基带信号的星型拓扑以太网。</li><li>仍使用CSMA/CD协议</li><li>10BASE-T升级到100BASE-T只需要有100 Mbit/s的适配器和100 Mbit/s的交换机或集线器即可，线路不用改。</li></ul><script type="math/tex; mode=display">a=\frac{\tau}{T_0}</script><p>$T_0$提升了10倍，相应的网段最大长度调整为100m，但最短帧长仍为64字节，因此100 Mbit/s的以太网争用期是5.12$\mu s$，帧间最小间隔为0.96$\mu s$，都为10 Mbit/s以太网的1/10。</p><img src="/JeckFS/2020/07/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/image-20200328125020197.png" class="" title="This is image-20200328125020197.png image."><h2 id="2-吉比特以太网"><a href="#2-吉比特以太网" class="headerlink" title="2.吉比特以太网"></a>2.吉比特以太网</h2><ul><li>允许在1 Gbit/s下以全双工和半双工两种方式工作</li><li>帧格式为IEEE802.3</li><li>半双工下使用CSMA/CD，全双工不使用CSMA/CD</li><li>与10BASE-T，100BASE-T兼容</li></ul><img src="/JeckFS/2020/07/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/image-20200328125100485.png" class="" title="This is image-20200328125100485.png image."><p>​    半双工模式下，使用<strong>载波延伸</strong>，将短帧进行填充至512字节，但最短帧仍然64字节；或者使用<strong>分组突发</strong>，即第一个短帧使用载波延伸进行填充，随后的短帧保持帧间最小间隔，紧随第一个填充的帧一一发送，直到达到1500字节或稍多一些为止。<br>​    全双工不使用载波延伸和分组突发。</p><h1 id="使用以太网进行宽带接入"><a href="#使用以太网进行宽带接入" class="headerlink" title="使用以太网进行宽带接入"></a>使用以太网进行宽带接入</h1><blockquote><p>当城域网和广域网都采用吉比特以太网或10吉比特以太网时，采用以太网接入中间就不需要帧格式转换，提高了传输效率。</p></blockquote><p>​    将PPP数据包封装进以太网的帧中，实现用户身份鉴别。</p><p>两种方式：</p><ul><li>光纤到大楼FTTB方式，每个大楼一个ONU(以太网交换机)，使用铜线接到用户家，若用户多，可以再安装一个100Mbit/s的以太网交换机。各大楼的ONU通过光缆接到光节点汇接点。<br>这种方式不需要调制解调器，用户只有一个RJ-45插头。ONU到光汇接点是多用户共用的，人数越多每个人分到的带宽就越少。</li><li>ADSL（非对称数字用户线）宽带上网。个人电脑到ADSL调制解调器之间使用RJ-45和5类线。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络-谢希仁-物理层</title>
      <link href="/JeckFS/2020/07/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%81-%E7%89%A9%E7%90%86%E5%B1%82/"/>
      <url>/JeckFS/2020/07/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%81-%E7%89%A9%E7%90%86%E5%B1%82/</url>
      
        <content type="html"><![CDATA[<p>通信类型：</p><ul><li>单工通信：单向通信</li><li>半双工通信：双向交替通信</li><li>全双工通信：双向同时通信</li></ul><h1 id="信道复用技术"><a href="#信道复用技术" class="headerlink" title="信道复用技术"></a>信道复用技术</h1><img src="/JeckFS/2020/07/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%81-%E7%89%A9%E7%90%86%E5%B1%82/image-20200326181415482.png" class="" title="This is image-20200326181415482.png image."><h2 id="1-频分复用FDM-Frequency-Division-Multiplexing"><a href="#1-频分复用FDM-Frequency-Division-Multiplexing" class="headerlink" title="1.频分复用FDM(Frequency Division Multiplexing)"></a>1.频分复用FDM(Frequency Division Multiplexing)</h2><img src="/JeckFS/2020/07/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%81-%E7%89%A9%E7%90%86%E5%B1%82/image-20200326181545319.png" class="" title="This is image-20200326181545319.png image."><p>​    用户在分配到一定的频带后，在通信过程中自始至终都占用这个频带。</p><p>​    <strong>频分复用的所有用户在同样的时间占用不同的带宽资源</strong>（这里的带宽是频率带宽，而不是数据的发送速率）。</p><p>​    </p><h2 id="2-时分复用TDM-Time-Division-Multiplexing"><a href="#2-时分复用TDM-Time-Division-Multiplexing" class="headerlink" title="2.时分复用TDM(Time Division Multiplexing)"></a>2.时分复用TDM(Time Division Multiplexing)</h2><p>​    将时间划分为一段段等长的时分复用帧（TDM帧），每一个时分复用的用户在每一个TDM帧中占用固定序号的时隙。<strong>时分复用的所有用户是在不同的时间占用同样的频带宽度。</strong></p><img src="/JeckFS/2020/07/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%81-%E7%89%A9%E7%90%86%E5%B1%82/image-20200326182052304.png" class="" title="This is image-20200326182052304.png image."><p>缺点：用户无数据发送时，时分复用帧中该用户对应的时隙处于空闲状态。导致复用后信道利用率不高。</p><img src="/JeckFS/2020/07/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%81-%E7%89%A9%E7%90%86%E5%B1%82/image-20200326182506579.png" class="" title="This is image-20200326182506579.png image."><h2 id="3-统计时分复用STDM"><a href="#3-统计时分复用STDM" class="headerlink" title="3. 统计时分复用STDM"></a>3. 统计时分复用STDM</h2><p>​    每一个STDM帧的时隙数小于连接的用户数。集中器按顺序依次扫描输入缓存，当一个帧的数据满了才发送。这种复用方式是假定各用户都间歇地工作。</p><p>​    每个用户的时隙都有用户的地址信息。</p><img src="/JeckFS/2020/07/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%81-%E7%89%A9%E7%90%86%E5%B1%82/image-20200326183154434.png" class="" title="This is image-20200326183154434.png image."><p>TDM帧和STDM帧是在比特流中所划分的帧，与数据链路层的帧是不同的概念。</p><h2 id="4-波分复用WDM-Wavelength-Division-Multiplexing"><a href="#4-波分复用WDM-Wavelength-Division-Multiplexing" class="headerlink" title="4.波分复用WDM(Wavelength Division Multiplexing)"></a>4.波分复用WDM(Wavelength Division Multiplexing)</h2><img src="/JeckFS/2020/07/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%81-%E7%89%A9%E7%90%86%E5%B1%82/image-20200326191556539.png" class="" title="This is image-20200326191556539.png image."><p>密集波分复用DWDM（Dense Wavelength Division Multiplexing）一根光纤复用几十路或更多路。一路带宽是2.5Gbit/s，8路就是8*2.5Gbit/s。</p><p>EDFA：掺铒光纤放大器，用于放大衰减的光信号。</p><h2 id="5-码分复用CDM（Code-Division-Multiplexing）"><a href="#5-码分复用CDM（Code-Division-Multiplexing）" class="headerlink" title="5.码分复用CDM（Code Division Multiplexing）"></a>5.码分复用CDM（Code Division Multiplexing）</h2><p>​    又叫码分多址CDMA（Code Division Multiple Access）。</p><p>​    在CDMA中，每一个比特时间再划分为m个短的间隔，称为码片。通常m取64,128。使用CDMA的每一个站被指派一个唯一的m bit码片序列。一个站若发送1，就发送自己的码片序列，发送0就发送自己码片序列的二进制反码。如S站发送1时就发送自己的8 bit码片序列00011011，发送0就发送11100100. 通常0写为-1,1写为+1。因此S站的码片序列就是(-1 -1 -1 +1 +1 -1 +1 +1)。</p><ul><li>站与站之间的码片序列不同且正交。也就是不同站的码片序列正交结果为0.</li></ul><img src="/JeckFS/2020/07/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%81-%E7%89%A9%E7%90%86%E5%B1%82/image-20200326193100067.png" class="" title="This is image-20200326193100067.png image."><ul><li>任何一个码片向量与自己的正交结果是1</li><li>任何一个码片向量与该码片的反码向量正交结果为-1</li></ul><p>​    若X站想接收S站发送的数据，X站需要知道S站特有的码片序列，所有经过内积计算后的结果为0的信号过滤掉。当S站发送比特1时，X站计算的内积结果是+1；当S站发送比特0时，内积结果是-1。</p><img src="/JeckFS/2020/07/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%81-%E7%89%A9%E7%90%86%E5%B1%82/image-20200326203447245.png" class="" title="This is image-20200326203447245.png image."><p>​    收到的码片序列是经过叠加（相加）后的。利用乘法分配律，同样可使用收到的码片序列与每个站正交为0表示该站没发送，为-1表示发送0，为1表示发送1.</p><h1 id="宽带接入技术"><a href="#宽带接入技术" class="headerlink" title="宽带接入技术"></a>宽带接入技术</h1><p>分为有线宽带接入和无线宽带接入。</p><h2 id="1-有限宽带接入"><a href="#1-有限宽带接入" class="headerlink" title="1.有限宽带接入"></a>1.有限宽带接入</h2><h3 id="1-1-ADSL技术"><a href="#1-1-ADSL技术" class="headerlink" title="1.1 ADSL技术"></a>1.1 ADSL技术</h3><p>​    非对称数字用户线ADSL（Asymmetric Digital Subscriber Line）含义是ADSL的下行带宽远大于上行带宽（下载速率远大于上传速率），所以称为非对称。</p><p>​    当ADSL启动时，用户线两端的ADSL调制解调器会测试可用的频率、个子信道受干扰的情况，以及每一个频率上测试信号的传输质量。这样ADSL选择合适的调制方案以尽可能高的获取高数据率。因此ADSL不能保证固定的数据率。质量差的线路无法开通ADSL。</p><p>​    ADSL可以服用电话网的用户线，而不需重新布线。原来的用户线加上两端的调制解调器就可以上网。</p><img src="/JeckFS/2020/07/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%81-%E7%89%A9%E7%90%86%E5%B1%82/image-20200326195727778.png" class="" title="This is image-20200326195727778.png image."><p>DSLAM：数字用户线接入复用器。</p><p>ATU：接入端接单元，即ADSL调制解调器。由于它成对存在，所以分为ATU-C和ATU-R。</p><img src="/JeckFS/2020/07/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%81-%E7%89%A9%E7%90%86%E5%B1%82/image-20200326200312687.png" class="" title="This is image-20200326200312687.png image."><h3 id="1-2-光纤同轴混合网（HFC网）"><a href="#1-2-光纤同轴混合网（HFC网）" class="headerlink" title="1.2.光纤同轴混合网（HFC网）"></a>1.2.光纤同轴混合网（HFC网）</h3><img src="/JeckFS/2020/07/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%81-%E7%89%A9%E7%90%86%E5%B1%82/image-20200326201116089.png" class="" title="This is image-20200326201116089.png image."><p>​    光纤节点与头端的典型距离是25km，光纤节点到用户的距离不超过2~3km。</p><p>​    ADSL的最高数据率是确定的；HFC使用的用户越多速率越低，反之则越高。</p><p>​    在有线电视网的基础上开发的。</p><h3 id="1-3-FTTx技术"><a href="#1-3-FTTx技术" class="headerlink" title="1.3 FTTx技术"></a>1.3 FTTx技术</h3><p>光纤到户FTTH(Fiber To The Home)，光电转换的地方在Home</p><p>FTTx（Fiber To The x）x可代表不同的光纤接入地点，光电转换的地方在离家一定距离的地方。</p><img src="/JeckFS/2020/07/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%81-%E7%89%A9%E7%90%86%E5%B1%82/image-20200326202718279.png" class="" title="This is image-20200326202718279.png image."><p>OLT：光线路终端，连接到光纤干线的终端设备。</p><p>无源：表示不使用电源</p><p>PON：无源光网络。</p><p>EPON：Ethernet PON以太网无源光网络。</p><p>GPON：吉比特无源光网络。</p>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络-谢希任-概述</title>
      <link href="/JeckFS/2020/07/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E6%A6%82%E8%BF%B0/"/>
      <url>/JeckFS/2020/07/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E6%A6%82%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="第一章-概述"><a href="#第一章-概述" class="headerlink" title="第一章 概述"></a>第一章 概述</h1><h2 id="1-ISP与IXP"><a href="#1-ISP与IXP" class="headerlink" title="1. ISP与IXP"></a>1. ISP与IXP</h2><p>​    现代网络的特点是：多层次的ISP结果的因特网。</p><p>​    ISP(Internet Service Provider)因特网服务提供者。</p><p>​    ISP可以从因特网管理机构申请很多IP地址，并拥有通信线路以及路由器等联网设备。机构和个人向ISP付费获取ip地址的使用权和接入因特网。</p><img src="/JeckFS/2020/07/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E6%A6%82%E8%BF%B0/image-20200326162702637.png" class="" title="This is image-20200326162702637.png image."><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><ul><li><p>主干ISP</p></li><li><p>地区ISP</p></li><li><p>本地ISP（比如一个公司，一个大学等）</p><p>不同的ISP通过路由器相连。</p></li></ul><img src="/JeckFS/2020/07/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E6%A6%82%E8%BF%B0/image-20200326163129603.png" class="" title="This is image-20200326163129603.png image."><h3 id="IXP（互联网交换点Internet-eXchange-Point）"><a href="#IXP（互联网交换点Internet-eXchange-Point）" class="headerlink" title="IXP（互联网交换点Internet eXchange Point）"></a>IXP（互联网交换点Internet eXchange Point）</h3><p>​    主要作用是允许两个网络直接相连并交换分组，而不需要再经过第三个网络。如上图，AB交互时不会再经过主干ISP。</p><h2 id="2-互联网的组成"><a href="#2-互联网的组成" class="headerlink" title="2.互联网的组成"></a>2.互联网的组成</h2><ul><li>边缘部分 这部分用户直接使用。</li><li>核心部分。有大量网络和连接这些网络的路由器组成。主要是为边缘部分提供服务。</li></ul><img src="/JeckFS/2020/07/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E6%A6%82%E8%BF%B0/image-20200326163318716.png" class="" title="This is image-20200326163318716.png image."><h3 id="端系统"><a href="#端系统" class="headerlink" title="端系统"></a>端系统</h3><p>端系统可以是一部手机或者一部电脑，或者一个联网的摄像头。</p><h3 id="网络边缘的端系统之间的通信方式"><a href="#网络边缘的端系统之间的通信方式" class="headerlink" title="网络边缘的端系统之间的通信方式"></a>网络边缘的端系统之间的通信方式</h3><ul><li>客户-服务器方式</li></ul><img src="/JeckFS/2020/07/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E6%A6%82%E8%BF%B0/image-20200326163534373.png" class="" title="This is image-20200326163534373.png image."><ul><li>对等连接P2P方式</li></ul><img src="/JeckFS/2020/07/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E6%A6%82%E8%BF%B0/image-20200326163636750.png" class="" title="This is image-20200326163636750.png image."><p>​    P2P方式仍然可以看成客户服务器方式。对等连接中的每一台主机既是客户，同时又是服务器。</p><h2 id="3-电路交换"><a href="#3-电路交换" class="headerlink" title="3.电路交换"></a>3.电路交换</h2><pre><code> 电路交换的三个步骤：建立连接（占用通信资源）--&gt;通话(一直占用通信资源)--&gt;释放连接(归还通信资源)。</code></pre><p>​    因为计算机的数据是突发式的出现在传输线路上，所以使用电路交换，他的传输效率往往很低。</p><img src="/JeckFS/2020/07/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E6%A6%82%E8%BF%B0/image-20200326164439042.png" class="" title="This is image-20200326164439042.png image."><h2 id="4-分组交换"><a href="#4-分组交换" class="headerlink" title="4.分组交换"></a>4.分组交换</h2><p>​    采用存储转发技术。</p><p>​    一个报文可以分成不同的分组，每个分组加上必要的控制信息组成的首部之后。在互联网中由路由器转发分组。路由器主要是进行分组交换的。分组暂存在路由器的内存中。路由器可以实现负载均衡。</p><img src="/JeckFS/2020/07/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E6%A6%82%E8%BF%B0/image-20200326164819019.png" class="" title="This is image-20200326164819019.png image."><img src="/JeckFS/2020/07/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E6%A6%82%E8%BF%B0/image-20200326165237467.png" class="" title="This is image-20200326165237467.png image."><p>电路交换，整个报文的比特流连续的从原点直达终点，好像在一个管道中传送。</p><p>报文交换，整个报文先传送到相邻节点，全部存储下来后，查找转发表转发到下一个节点。</p><p>分组交换，单个分组(这只是整个报文的一部分)，传送到相邻节点，存储下来后，查找转发表转发到下一个节点。</p><img src="/JeckFS/2020/07/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E6%A6%82%E8%BF%B0/image-20200326165757276.png" class="" title="This is image-20200326165757276.png image."><p>在连续传送大量的数据，且其传送时间远大于建立连接的时间的情况下，电路交换传输速率较快。</p><p>报文交换和分组交换不需要预先分配传输带宽，在传送突发数据时可以提高整个网络的信道利用率。</p><h2 id="计算机网络的性能指标"><a href="#计算机网络的性能指标" class="headerlink" title="计算机网络的性能指标"></a>计算机网络的性能指标</h2><h4 id="1-速率"><a href="#1-速率" class="headerlink" title="1.速率"></a>1.速率</h4><p>单位：bit/s或b/s或bps（bit per second）Kbit/s Mbit/s Gbit/s这里的B/b指的是比特。KMG是千进制。</p><h4 id="2-带宽"><a href="#2-带宽" class="headerlink" title="2.带宽"></a>2.带宽</h4><p>含义：</p><ul><li><p>表示某信道允许通过的信号频带范围。单位是赫兹。如电话信号的标准带宽是3.1kHz。</p></li><li><p>表示在单位时间内，网络中的某信道所能通过的最高数据传输速率。单位：bit/s</p></li></ul><h4 id="3-吞吐量"><a href="#3-吞吐量" class="headerlink" title="3.吞吐量"></a>3.吞吐量</h4><p>表示在单位时间内，通过某个网络或信道、接口的实际的数据量。以便知道实际上到底有多少数据量能够通过网络。</p><h4 id="4-时延"><a href="#4-时延" class="headerlink" title="4.时延"></a>4.时延</h4><ul><li>发送时延：从发送数据帧的第1个比特算起，到该帧的最后一个比特发送完毕所需要的时间。</li></ul><img src="/JeckFS/2020/07/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E6%A6%82%E8%BF%B0/image-20200326171731144.png" class="" title="This is image-20200326171731144.png image."><ul><li>传播时延：指电磁波在信道中传播一定的距离，需要花费的时间。信号传送的距离越远，传播时间就越大。</li></ul><img src="/JeckFS/2020/07/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E6%A6%82%E8%BF%B0/image-20200326171814098.png" class="" title="This is image-20200326171814098.png image."><ul><li>处理时延：分析分组的首部、从分组中提取数据部分、进行差错检验或查找适当的路由等耗费的时间。</li><li>排队时延：分组进入路由器的输入队列中排队等待的时间。</li></ul><img src="/JeckFS/2020/07/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E6%A6%82%E8%BF%B0/image-20200326172134627.png" class="" title="This is image-20200326172134627.png image."><img src="/JeckFS/2020/07/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E6%A6%82%E8%BF%B0/image-20200326172144537.png" class="" title="This is image-20200326172144537.png image."><p>例子：忽略处理时延和排队时延，在带宽为1Mbit/s的信道上传送大小为100MB(此处的M为1024进制)的数据块的发送时延为：100×1024×1024×8/10^6=838.8608 s.</p><h4 id="5-时延带宽积"><a href="#5-时延带宽积" class="headerlink" title="5.时延带宽积"></a>5.时延带宽积</h4><p>时延带宽积=传播时延×带宽</p><img src="/JeckFS/2020/07/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E6%A6%82%E8%BF%B0/image-20200326173137402.png" class="" title="This is image-20200326173137402.png image."><p>其含义是：链路中可容纳的bit数目。若发送端连续发送数据，则在发送的第1个比特即将到达终点时，发送端就已经发送了20万个比特，而这20万个比特都正在链路上向前移动。</p><h4 id="6-往返时间RTT"><a href="#6-往返时间RTT" class="headerlink" title="6.往返时间RTT"></a>6.往返时间RTT</h4><h4 id="7-利用率"><a href="#7-利用率" class="headerlink" title="7.利用率"></a>7.利用率</h4><ul><li>信道利用率：信道有百分之几的时间是有数据通过的。</li><li>网络利用率：是全网络的信道利用率的加权平均值。</li></ul><img src="/JeckFS/2020/07/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E6%A6%82%E8%BF%B0/image-20200326174451679.png" class="" title="This is image-20200326174451679.png image."><p>D0：网络空闲的时延</p><p>D：网络当前的时延</p><p>U：网络的利用率，取值范围：(0,1)</p><p>当网络的利用率达到其容量的1/2时，时延就要加倍。也就是说信道或网络的利用率过高，会产生非常大的时延。</p><img src="/JeckFS/2020/07/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E6%A6%82%E8%BF%B0/image-20200326174700331.png" class="" title="This is image-20200326174700331.png image."><h2 id="计算机体系结构"><a href="#计算机体系结构" class="headerlink" title="计算机体系结构"></a>计算机体系结构</h2><img src="/JeckFS/2020/07/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E6%A6%82%E8%BF%B0/image-20200326174957850.png" class="" title="This is image-20200326174957850.png image."><p>名词解释：</p><img src="/JeckFS/2020/07/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%B0%A2%E5%B8%8C%E4%BB%BB-%E6%A6%82%E8%BF%B0/image-20200326175522068.png" class="" title="This is image-20200326175522068.png image."><ul><li><p>协议数据单元PDU：对等层之间传送的数据单位称为该层的协议数据单元。</p></li><li><p>协议栈：对等层组成的类似栈的结构</p></li><li>实体：任何可发送或接收信息的硬件或软件进程。</li><li><p>协议：是控制两个<strong>对等实体</strong>或多个实体进行通信的规则的集合。在协议的控制下，两个对等实体间的通信使得本层能够向上一层提供服务，要实现本层协议，还需要使用下面一层所提供的服务。</p></li><li><p>服务访问点SAP（Service Access Point）：同一系统中相邻两层的实体进行交互的地方。</p></li><li><p>服务数据单元SDU（Service Data Unit）：层与层之间交换的数据的单位。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字典树</title>
      <link href="/JeckFS/2020/07/24/%E5%AD%97%E5%85%B8%E6%A0%91/"/>
      <url>/JeckFS/2020/07/24/%E5%AD%97%E5%85%B8%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/weixin_39778570/article/details/81990417">入门教程</a></p>]]></content>
      
      
      <categories>
          
          <category> 字典树 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字典树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring注解</title>
      <link href="/JeckFS/2020/07/24/spring%E6%B3%A8%E8%A7%A3/"/>
      <url>/JeckFS/2020/07/24/spring%E6%B3%A8%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.bilibili.com/video/BV1AJ411X7da?p=2">教程</a></p><h1 id="1-容器"><a href="#1-容器" class="headerlink" title="1.容器"></a>1.容器</h1><h2 id="1-1-组件添加"><a href="#1-1-组件添加" class="headerlink" title="1.1 组件添加"></a>1.1 组件添加</h2><h3 id="1-1-1-ComponentScan"><a href="#1-1-1-ComponentScan" class="headerlink" title="1.1.1 @ComponentScan"></a>1.1.1 @ComponentScan</h3><p>@ComponentScan的常用属性:</p><ul><li>value属性指定要扫描的包.</li><li>excludeFilters:指定排除扫描哪些注解</li><li>includeFilters:指定只包含哪些注解.</li><li>userDefaultFilters=false属性与includeFilters属性一起使用.</li></ul><p>@ComponentScan其他特性:</p><ul><li>重复使用</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ComponentScans(</span></span><br><span class="line"><span class="meta">value = &#123;</span></span><br><span class="line"><span class="meta">@ComponentScan(value=&quot;com.atguigu&quot;,includeFilters = &#123;</span></span><br><span class="line"><span class="meta">//@Filter(type=FilterType.ANNOTATION,classes=&#123;Controller.class&#125;),</span></span><br><span class="line"><span class="meta">//@Filter(type=FilterType.ASSIGNABLE_TYPE,classes=&#123;BookService.class&#125;),</span></span><br><span class="line"><span class="meta">@Filter(type=FilterType.CUSTOM,classes=&#123;MyTypeFilter.class&#125;)</span></span><br><span class="line"><span class="meta">&#125;,useDefaultFilters = false)</span></span><br><span class="line"><span class="meta">&#125;</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="comment">//FilterType.ANNOTATION：按照注解</span></span><br><span class="line"><span class="comment">//FilterType.ASSIGNABLE_TYPE：按照给定的类型；</span></span><br><span class="line"><span class="comment">//FilterType.ASPECTJ：使用ASPECTJ表达式</span></span><br><span class="line"><span class="comment">//FilterType.REGEX：使用正则指定</span></span><br><span class="line"><span class="comment">//FilterType.CUSTOM：使用自定义规则</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainConfig</span> &#123;</span><br><span class="line"><span class="comment">//给容器中注册一个Bean;类型为返回值的类型，id默认是用方法名作为id</span></span><br><span class="line"><span class="meta">@Bean(&quot;person&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Person <span class="title function_">person01</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;lisi&quot;</span>, <span class="number">20</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-1-1-1-Filter注解"><a href="#1-1-1-1-Filter注解" class="headerlink" title="1.1.1.1 @Filter注解"></a>1.1.1.1 @Filter注解</h3><p>常用属性:</p><ul><li><p>type：指定过滤的类型<br><strong>FilterType.ANNOTATION</strong>：按照注解形式过滤</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Filter(type=FilterType.ANNOTATION,classes=&#123;Controller.class&#125;)</span></span><br></pre></td></tr></table></figure><p><strong>FilterType.ASSIGNABLE_TYPE</strong>：按照给定的类型进行扫描</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Filter(type=FilterType.ASSIGNABLE_TYPE,classes=&#123;BookService.class&#125;)</span></span><br></pre></td></tr></table></figure><p>FilterType.ASPECTJ：使用ASPECTJ表达式<br>FilterType.REGEX：使用正则指定<br><strong>FilterType.CUSTOM</strong>：使用自定义规则</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Filter(type=FilterType.CUSTOM,classes=&#123;MyTypeFilter.class&#125;)</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyTypeFilter</span> <span class="keyword">implements</span> <span class="title class_">TypeFilter</span> &#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * metadataReader：读取到的当前正在扫描的类的信息</span></span><br><span class="line"><span class="comment"> * metadataReaderFactory:可以获取到其他任何类信息的</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">match</span><span class="params">(MetadataReader metadataReader, MetadataReaderFactory metadataReaderFactory)</span></span><br><span class="line"><span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="comment">//获取当前类注解的信息</span></span><br><span class="line"><span class="type">AnnotationMetadata</span> <span class="variable">annotationMetadata</span> <span class="operator">=</span> metadataReader.getAnnotationMetadata();</span><br><span class="line"><span class="comment">//获取当前正在扫描的类的类信息</span></span><br><span class="line"><span class="type">ClassMetadata</span> <span class="variable">classMetadata</span> <span class="operator">=</span> metadataReader.getClassMetadata();</span><br><span class="line"><span class="comment">//获取当前类资源（类的路径）</span></span><br><span class="line"><span class="type">Resource</span> <span class="variable">resource</span> <span class="operator">=</span> metadataReader.getResource();</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> classMetadata.getClassName();</span><br><span class="line">System.out.println(<span class="string">&quot;---&gt;&quot;</span>+className);</span><br><span class="line"><span class="keyword">if</span>(className.contains(<span class="string">&quot;er&quot;</span>))&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>classes：过滤的对象</li></ul><h3 id="1-1-2-Scope"><a href="#1-1-2-Scope" class="headerlink" title="1.1.2 @Scope"></a>1.1.2 @Scope</h3><p>@Scope取值：</p><ul><li>prototype：多实例，当使用该对象时，才会创建对象，且不会放入ioc容器中。每次获取该对象都创建新的对象。</li><li>singleton：单实例(默认值)，ioc容器启动后创建对象，并将该对象放入ioc容器中。</li><li>request：同一次请求创建一个实例</li><li>session：同一个session创建一个实例</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Scope(&quot;prototype&quot;)</span></span><br><span class="line"><span class="meta">@Bean(&quot;person&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Person <span class="title function_">person</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;给容器中添加Person....&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;张三&quot;</span>, <span class="number">25</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-1-3-Lazy"><a href="#1-1-3-Lazy" class="headerlink" title="1.1.3 @Lazy"></a>1.1.3 @Lazy</h3><p>懒加载只能用来单实例bean中。设置该bean在第一次使用时再创建该对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Lazy</span></span><br><span class="line"><span class="meta">@Bean(&quot;person&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Person <span class="title function_">person</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;给容器中添加Person....&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;张三&quot;</span>, <span class="number">25</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-1-4-Conditional-☆☆☆"><a href="#1-1-4-Conditional-☆☆☆" class="headerlink" title="1.1.4 @Conditional  ☆☆☆"></a>1.1.4 @Conditional  ☆☆☆</h3><p>按照一定的条件进行判断，满足条件给容器中注册bean。</p><p><strong>注册在方法上：只有满足条件才会注册该bean</strong><br><strong>注册在配置类上：只有满足条件，该配置类才会生效，其下的bean才会被注册</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Condition.class</span></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE, ElementType.METHOD&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Conditional &#123;</span><br><span class="line">    Class&lt;? <span class="keyword">extends</span> <span class="title class_">Condition</span>&gt;[] value();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 其value属性为Condition对象，再次进行查看Condition源码，发现是一个接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Condition</span> &#123;</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">matches</span><span class="params">(ConditionContext var1, AnnotatedTypeMetadata var2)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过实现Condition接口，自定义自己的Condition</span></span><br></pre></td></tr></table></figure><p>需求：有两个bean，一个是“bill”，一个是“linus”。在windows环境下加载bill bean，在Linux环境下，加载linus bean。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Conditional(WindowsCondition.class)</span></span><br><span class="line"><span class="meta">@Bean(&quot;bill&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Person <span class="title function_">person01</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Bill Gates&quot;</span>, <span class="number">62</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Conditional(LinuxCondition.class)</span></span><br><span class="line"><span class="meta">@Bean(&quot;linus&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Person <span class="title function_">person02</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;linus&quot;</span>, <span class="number">48</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//判断是否linux系统</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LinuxCondition</span> <span class="keyword">implements</span> <span class="title class_">Condition</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ConditionContext：判断条件能使用的上下文（环境）</span></span><br><span class="line"><span class="comment">     * AnnotatedTypeMetadata：注释信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">matches</span><span class="params">(ConditionContext context, AnnotatedTypeMetadata metadata)</span> &#123;</span><br><span class="line">        <span class="comment">//1、能获取到ioc使用的beanfactory</span></span><br><span class="line">        <span class="type">ConfigurableListableBeanFactory</span> <span class="variable">beanFactory</span> <span class="operator">=</span> context.getBeanFactory();</span><br><span class="line">        <span class="comment">//2、获取类加载器</span></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> context.getClassLoader();</span><br><span class="line">        <span class="comment">//3、获取当前环境信息</span></span><br><span class="line">        <span class="type">Environment</span> <span class="variable">environment</span> <span class="operator">=</span> context.getEnvironment();</span><br><span class="line">        <span class="comment">//4、获取到bean定义的注册类</span></span><br><span class="line">        <span class="type">BeanDefinitionRegistry</span> <span class="variable">registry</span> <span class="operator">=</span> context.getRegistry();</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">property</span> <span class="operator">=</span> environment.getProperty(<span class="string">&quot;os.name&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//可以判断某个bean在容器中是否注册过，也可以给容器中注册bean</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">definition</span> <span class="operator">=</span> registry.containsBeanDefinition(<span class="string">&quot;person&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (property.contains(<span class="string">&quot;linux&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//判断是否windows系统</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WindowsCondition</span> <span class="keyword">implements</span> <span class="title class_">Condition</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">matches</span><span class="params">(ConditionContext context, AnnotatedTypeMetadata metadata)</span> &#123;</span><br><span class="line">        <span class="type">Environment</span> <span class="variable">environment</span> <span class="operator">=</span> context.getEnvironment();</span><br><span class="line">        <span class="type">String</span> <span class="variable">property</span> <span class="operator">=</span> environment.getProperty(<span class="string">&quot;os.name&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (property.contains(<span class="string">&quot;Windows&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="1-1-5-Import-☆☆☆"><a href="#1-1-5-Import-☆☆☆" class="headerlink" title="1.1.5 @Import   ☆☆☆"></a>1.1.5 @Import   ☆☆☆</h3><p><strong>第一种导入方式</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Color</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Red</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用@Import导入Color、Red</span></span><br><span class="line"><span class="meta">@Import(&#123;Color.class, Red.class&#125;)</span></span><br><span class="line"><span class="comment">//@Import导入组件，id默认是组件的全类名,如com.atguigu.bean.Color, com.atguigu.bean.Red</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainConfig2</span> &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>第二种导入方式：使用ImportSelector导入。</strong><br>实现ImportSelector接口，并重写selectImports(AnnotationMetadata)，该方法返回的String数组包含了需要导入的bean的全类名。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//自定义逻辑返回需要导入的组件</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyImportSelector</span> <span class="keyword">implements</span> <span class="title class_">ImportSelector</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回值，就是到导入到容器中的组件全类名</span></span><br><span class="line"><span class="comment">//AnnotationMetadata:当前标注@Import注解的类的所有注解信息</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String[] selectImports(AnnotationMetadata importingClassMetadata) &#123;</span><br><span class="line"><span class="comment">//方法不要返回null值, 可以通过空数组代替</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;com.atguigu.bean.Color&quot;</span>,<span class="string">&quot;com.atguigu.bean.Red&quot;</span>&#125;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Import(&#123;MyImportSelector.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainConfig2</span> &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><strong>第三种导入方式：使用ImportBeanDefinitionRegistrar</strong></p><p>业务逻辑：当ioc中已经注册了com.atguigu.bean.Red和com.atguigu.bean.Blue，才注册RainBow这个bean。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyImportBeanDefinitionRegistrar</span> <span class="keyword">implements</span> <span class="title class_">ImportBeanDefinitionRegistrar</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * AnnotationMetadata：当前类的注解信息</span></span><br><span class="line"><span class="comment">     * BeanDefinitionRegistry: BeanDefinition注册类</span></span><br><span class="line"><span class="comment">     *  把所有需要添加到容器中的bean, 通过调用BeanDefinitionRegistry.registerBeanDefinition手工注册进来</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">registerBeanDefinitions</span><span class="params">(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry)</span> &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">definition</span> <span class="operator">=</span> registry.containsBeanDefinition(<span class="string">&quot;com.atguigu.bean.Red&quot;</span>);</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">definition2</span> <span class="operator">=</span> registry.containsBeanDefinition(<span class="string">&quot;com.atguigu.bean.Blue&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (definition &amp;&amp; definition2) &#123;</span><br><span class="line">            <span class="comment">//指定Bean定义信息；(通过类的class类型获取BeanDefinition，通过它可以设置bean的各种信息，如bean的作用域等等)</span></span><br><span class="line">            <span class="type">RootBeanDefinition</span> <span class="variable">beanDefinition</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RootBeanDefinition</span>(RainBow.class);</span><br><span class="line">            <span class="comment">//注册一个Bean，指定bean名</span></span><br><span class="line">            registry.registerBeanDefinition(<span class="string">&quot;rainBow&quot;</span>, beanDefinition);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Import(&#123;MyImportBeanDefinitionRegistrar.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainConfig2</span> &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-1-6-FactoryBean"><a href="#1-1-6-FactoryBean" class="headerlink" title="1.1.6 FactoryBean"></a>1.1.6 FactoryBean</h3><p>使用FactoryBean默认只能获取到FactoryBean中getObject()中返回的类型。若想获取FactoryBean需要加入”&amp;”前缀来获取。<br><code>Object bean4 = applicationContext.getBean(&quot;&amp;colorFactoryBean&quot;);</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> ColorFactoryBean <span class="title function_">colorFactoryBean</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ColorFactoryBean</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建一个Spring定义的FactoryBean</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ColorFactoryBean</span> <span class="keyword">implements</span> <span class="title class_">FactoryBean</span>&lt;Color&gt; &#123;</span><br><span class="line"><span class="comment">//返回一个Color对象，这个对象会添加到容器中</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Color <span class="title function_">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;ColorFactoryBean...getObject...&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Color</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Class&lt;?&gt; getObjectType() &#123;</span><br><span class="line"><span class="keyword">return</span> Color.class;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//是单例？</span></span><br><span class="line"><span class="comment">//true：这个bean是单实例，在容器中保存一份</span></span><br><span class="line"><span class="comment">//false：多实例，每次获取都会创建一个新的bean；</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSingleton</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>小结：在IOC中注册bean的几种方法：</p><ul><li>使用@Bean</li><li>使用@Import<ul><li>根据bean的类型直接导入</li><li>使用ImportSelector接口导入</li><li>使用ImportBeanDefinitionRegistrar接口导入</li></ul></li><li>使用FactoryBean导入</li></ul></blockquote><h2 id="1-2-Bean的生命周期"><a href="#1-2-Bean的生命周期" class="headerlink" title="1.2 Bean的生命周期"></a>1.2 Bean的生命周期</h2><p><strong>方式一：使用@Bean的initMethod,destroyMethod属性指定Bean创建前后的操作</strong></p><p>单实例Bean在容器关闭时销毁；<br>多实例Bean容器不会管理这个Bean，更不会调用这个对象的销毁方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainConfigOfLifeCycle</span> &#123;</span><br><span class="line"><span class="meta">@Bean(initMethod=&quot;init&quot;,destroyMethod=&quot;detory&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Car <span class="title function_">car</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Car</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Car</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Car</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;car constructor...&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;car ... init...&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">detory</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;car ... detory...&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>方式二：使用InitializingBean接口初始化，DisposableBean接口销毁</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">implements</span> <span class="title class_">InitializingBean</span>,DisposableBean &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Cat</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;cat constructor...&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;cat...destroy...&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在所有属性都赋值完成后，调用afterPropertiesSet()</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;cat...afterPropertiesSet...&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>方式三：使用JSR250的@PostConstruct，@PreDestroy注解</strong></p><p>使用@PostConstruct注解修饰的方法在调用该方法所在类的构造函数调用完成之后，才会被调用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">implements</span> <span class="title class_">ApplicationContextAware</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Dog</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;dog constructor...&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//对象创建并赋值之后调用</span></span><br><span class="line"><span class="meta">@PostConstruct</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Dog....@PostConstruct...&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//容器移除对象之前</span></span><br><span class="line"><span class="meta">@PreDestroy</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">detory</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Dog....@PreDestroy...&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 运行结果</span></span><br><span class="line">dog constructor...</span><br><span class="line">Dog....<span class="meta">@PostConstruct</span>...</span><br><span class="line">Dog....<span class="meta">@PreDestroy</span>...   <span class="comment">// 当容器关闭之前会调用@PreDestroy修饰的方法</span></span><br></pre></td></tr></table></figure><p><strong>方式四：使用BeanPostProcessor</strong></p><p>postProcessBeforeInitialization()与postProcessAfterInitialization()的调用时机：</p><ol><li>先执行该bean对象的<strong>构造方法</strong></li><li>执行<strong>postProcessBeforeInitialization()</strong></li><li>执行<strong>init-method, InitializingBean的afterPropertiesSet()，@PostConstruct修饰的方法</strong></li><li>执行<strong>postProcessAfterInitialization()</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 后置处理器：初始化前后进行处理工作</span></span><br><span class="line"><span class="comment"> * 将后置处理器加入到容器中</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBeanPostProcessor</span> <span class="keyword">implements</span> <span class="title class_">BeanPostProcessor</span> &#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> bean 交给IOC管理的对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> beanName 该对象的名字</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 返回该Bean对象，它可以是经过包装后的bean对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> BeansException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;postProcessBeforeInitialization...&quot;</span>+beanName+<span class="string">&quot;=&gt;&quot;</span>+bean);</span><br><span class="line"><span class="keyword">return</span> bean;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;postProcessAfterInitialization...&quot;</span>+beanName+<span class="string">&quot;=&gt;&quot;</span>+bean);</span><br><span class="line"><span class="keyword">return</span> bean;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>BeanPostProcessor的原理：</p><p>由于会定义多个BeanPostProcessor，他们在执行的时候是顺序执行的，当某个BeanPostProcessor的postProcessBeforeInitialization()或postProcessAfterInitialization()返回为null后，后续的BeanPostProcessor也不会执行。源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">applyBeanPostProcessorsBeforeInitialization</span><span class="params">(Object existingBean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line"><span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> existingBean;</span><br><span class="line"><span class="keyword">for</span> (BeanPostProcessor beanProcessor : getBeanPostProcessors()) &#123;</span><br><span class="line">result = beanProcessor.postProcessBeforeInitialization(result, beanName);</span><br><span class="line"><span class="keyword">if</span> (result == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">applyBeanPostProcessorsAfterInitialization</span><span class="params">(Object existingBean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line"><span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> existingBean;</span><br><span class="line"><span class="keyword">for</span> (BeanPostProcessor beanProcessor : getBeanPostProcessors()) &#123;</span><br><span class="line">result = beanProcessor.postProcessAfterInitialization(result, beanName);</span><br><span class="line"><span class="keyword">if</span> (result == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>通过populateBean()方法对<strong>bean对象，不是BeanDefinition</strong>进行属性赋值</li><li>调用initializeBean()对bean进行初始化，初始化前后调用BeanPostProcessor中的方法<br>在initializeBean()中进行后置处理器的调用<ol><li>通过applyBeanPostProcessorBeforeInitialization()执行所有BeanPostProcessor的postProcessBeforeInitialization()</li><li>再通过invokeInitMethods()执行init-method, InitializingBean的afterPropertiesSet()，@PostConstruct修饰的方法</li><li>通过applyBeanPostProcessorAfterInitialization()执行所有BeanPostProcessor的postProcessAfterInitialization()</li></ol></li></ol><hr><p>BeanPostProcessor在spring底层的应用：</p><p><strong>1. ApplicationContextAware</strong></p><p>通过ApplicationContextAware获取ApplicationContext</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">implements</span> <span class="title class_">ApplicationContextAware</span> &#123;</span><br><span class="line"><span class="comment">//@Autowired</span></span><br><span class="line"><span class="keyword">private</span> ApplicationContext applicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Dog</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;dog constructor...&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line"><span class="built_in">this</span>.applicationContext = applicationContext;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ApplicationContextAware是通过BeanPostProcessor的方式获取到ApplicationContext的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 源码</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ApplicationContextAwareProcessor</span> <span class="keyword">implements</span> <span class="title class_">BeanPostProcessor</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ConfigurableApplicationContext applicationContext;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> StringValueResolver embeddedValueResolver;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ApplicationContextAwareProcessor</span><span class="params">(ConfigurableApplicationContext applicationContext)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.applicationContext = applicationContext;</span><br><span class="line">        <span class="built_in">this</span>.embeddedValueResolver = <span class="keyword">new</span> <span class="title class_">EmbeddedValueResolver</span>(applicationContext.getBeanFactory());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">postProcessBeforeInitialization</span><span class="params">(<span class="keyword">final</span> Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="type">AccessControlContext</span> <span class="variable">acc</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (System.getSecurityManager() != <span class="literal">null</span> &amp;&amp; (</span><br><span class="line">            bean <span class="keyword">instanceof</span> EnvironmentAware </span><br><span class="line">            || bean <span class="keyword">instanceof</span> EmbeddedValueResolverAware </span><br><span class="line">            || bean <span class="keyword">instanceof</span> ResourceLoaderAware </span><br><span class="line">            || bean <span class="keyword">instanceof</span> ApplicationEventPublisherAware </span><br><span class="line">            || bean <span class="keyword">instanceof</span> MessageSourceAware </span><br><span class="line">            || bean <span class="keyword">instanceof</span> ApplicationContextAware)) &#123; <span class="comment">// *******************</span></span><br><span class="line">            acc = <span class="built_in">this</span>.applicationContext.getBeanFactory().getAccessControlContext();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (acc != <span class="literal">null</span>) &#123;</span><br><span class="line">            AccessController.doPrivileged(<span class="keyword">new</span> <span class="title class_">PrivilegedAction</span>&lt;Object&gt;() &#123;</span><br><span class="line">                <span class="keyword">public</span> Object <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                    ApplicationContextAwareProcessor.<span class="built_in">this</span>.invokeAwareInterfaces(bean);</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, acc);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.invokeAwareInterfaces(bean);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">invokeAwareInterfaces</span><span class="params">(Object bean)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (bean <span class="keyword">instanceof</span> Aware) &#123;</span><br><span class="line">            <span class="keyword">if</span> (bean <span class="keyword">instanceof</span> EnvironmentAware) &#123;</span><br><span class="line">                ((EnvironmentAware)bean).setEnvironment(<span class="built_in">this</span>.applicationContext.getEnvironment());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (bean <span class="keyword">instanceof</span> EmbeddedValueResolverAware) &#123;</span><br><span class="line">                ((EmbeddedValueResolverAware)bean).setEmbeddedValueResolver(<span class="built_in">this</span>.embeddedValueResolver);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (bean <span class="keyword">instanceof</span> ResourceLoaderAware) &#123;</span><br><span class="line">                ((ResourceLoaderAware)bean).setResourceLoader(<span class="built_in">this</span>.applicationContext);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (bean <span class="keyword">instanceof</span> ApplicationEventPublisherAware) &#123;</span><br><span class="line">                ((ApplicationEventPublisherAware)bean).setApplicationEventPublisher(<span class="built_in">this</span>.applicationContext);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (bean <span class="keyword">instanceof</span> MessageSourceAware) &#123;</span><br><span class="line">                ((MessageSourceAware)bean).setMessageSource(<span class="built_in">this</span>.applicationContext);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 调用ApplicationContextAware.setApplicationContext()将ApplicationContext对象传入</span></span><br><span class="line">            <span class="keyword">if</span> (bean <span class="keyword">instanceof</span> ApplicationContextAware) &#123;</span><br><span class="line">                ((ApplicationContextAware)bean).setApplicationContext(<span class="built_in">this</span>.applicationContext);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2.BeanValidationPostProcessor用于bean的校验</strong><br><strong>3.InitDestroyAnnotationBeanPostProcessor用于实现JSR250中的@PostConstruct，@PreDestroy</strong><br><strong>4.AutowiredAnnotationBeanPostProcessor实现@Autowired注解</strong><br><strong>5.AsyncAnnotationBeanPostProcessor实现@Async注解的实现</strong></p><hr><h2 id="1-3-组件赋值-自动装配"><a href="#1-3-组件赋值-自动装配" class="headerlink" title="1.3 组件赋值/自动装配"></a>1.3 组件赋值/自动装配</h2><h3 id="1-3-1-Value、-PropertySource与-PropertySources"><a href="#1-3-1-Value、-PropertySource与-PropertySources" class="headerlink" title="1.3.1 @Value、@PropertySource与@PropertySources"></a>1.3.1 @Value、@PropertySource与@PropertySources</h3><p>@Value给bean中的基本类型注入值。支持SpEL与${}<br>@PropertySource指定properties文件的位置。<br>@PropertySources指定多个@PropertySource。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="comment">//使用@Value赋值；</span></span><br><span class="line">    <span class="comment">//1、基本数值</span></span><br><span class="line">    <span class="comment">//2、可以写SpEL； #&#123;&#125;</span></span><br><span class="line">    <span class="comment">//3、可以写$&#123;&#125;；取出配置文件【properties】中的值（在运行环境变量里面的值）</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;张三&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@Value(&quot;#&#123;20-2&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;person.nickName&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String nickName;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用@PropertySource读取外部配置文件中的k/v保存到运行的环境变量中;加载完外部的配置文件以后使用$&#123;&#125;取出配置文件的值</span></span><br><span class="line"><span class="meta">@PropertySource(value=&#123;&quot;classpath:/person.properties&quot;&#125;)</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainConfigOfPropertyValues</span> &#123;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> Person <span class="title function_">person</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// person.properties</span></span><br><span class="line">person.nickName=小李四</span><br></pre></td></tr></table></figure><hr><p>通过环境变量获取properties配置文件中的值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ConfigurableEnvironment</span> <span class="variable">environment</span> <span class="operator">=</span> applicationContext.getEnvironment();</span><br><span class="line"><span class="type">String</span> <span class="variable">property</span> <span class="operator">=</span> environment.getProperty(<span class="string">&quot;person.nickName&quot;</span>);</span><br></pre></td></tr></table></figure><hr><h3 id="1-3-2-Autowired、-Qualifier与-Primary"><a href="#1-3-2-Autowired、-Qualifier与-Primary" class="headerlink" title="1.3.2 @Autowired、@Qualifier与@Primary"></a>1.3.2 @Autowired、@Qualifier与@Primary</h3><p>@Autowired：<br>默认按照<strong>类型(byType)</strong>去容器中找对应的组件找到就赋值；<br>如果找到多个相同类型的组件，再将属性的名称作为组件的id去容器中查找。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired(required=false)</span>  <span class="comment">//允许IOC容器中没有对应的Bean</span></span><br><span class="line"><span class="meta">@Autowired(required=true)</span> <span class="comment">// IOC容器中必须存在对应的Bean，否则报错</span></span><br></pre></td></tr></table></figure><p>@Qualifier：<br>存在同一个类型被注册进多个对象，@Qualifier注入具体id的对象。</p><p>@Primary：当IOC容器中，同一个类型存在多个Bean，优先加载@Primary修饰的Bean。若@Qualifier指定了具体的Bean则@Primary失效。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Primary</span></span><br><span class="line"><span class="meta">@Bean(&quot;bookDao2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> BookDao <span class="title function_">bookDao</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">BookDao</span> <span class="variable">bookDao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BookDao</span>();</span><br><span class="line">bookDao.setLable(<span class="string">&quot;2&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> bookDao;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>@Autowired修饰方法、修饰构造方法、修饰方法参数。需要的组件都是从容器中获得。<br>若只有一个有参构造器，@Autowired可以省略；<br>配置类中的方法参数可以省略@Autowired，可以自动完成注入。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">Boss</span><span class="params">(<span class="meta">@Autowired</span> Car car)</span>&#123;</span><br><span class="line"><span class="built_in">this</span>.car = car;</span><br><span class="line">System.out.println(<span class="string">&quot;Boss...有参构造器&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span> <span class="comment">// 若只有一个有参构造方法，@Autowired可省略</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Boss</span><span class="params">(Car car)</span>&#123;</span><br><span class="line"><span class="built_in">this</span>.car = car;</span><br><span class="line">System.out.println(<span class="string">&quot;Boss...有参构造器&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCar</span><span class="params">(Car car)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.car = car;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> Color <span class="title function_">color</span><span class="params">(Car car)</span>&#123; <span class="comment">// 自动完成注入</span></span><br><span class="line"><span class="type">Color</span> <span class="variable">color</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Color</span>();</span><br><span class="line">color.setCar(car);</span><br><span class="line"><span class="keyword">return</span> color;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="1-3-3-Resource-JSR250-与-Inject-JSR330"><a href="#1-3-3-Resource-JSR250-与-Inject-JSR330" class="headerlink" title="1.3.3 @Resource(JSR250)与@Inject(JSR330)"></a>1.3.3 @Resource(JSR250)与@Inject(JSR330)</h3><p>@Resource默认按照组件的<strong>属性名称</strong>进行装配。也可通过其name属性指定具体装配的bean的id。相比与@Autowired，它不能与@Qualifier、@Primary配合使用，也没有@Autowired(require=false)的功能。</p><p>@Inject的使用需要导入javax.inject的依赖。Inject没有@Autowired(required=false)的功能。</p><h3 id="1-3-4-使用xxxAware接口获取spring运行过程中的组件"><a href="#1-3-4-使用xxxAware接口获取spring运行过程中的组件" class="headerlink" title="1.3.4 使用xxxAware接口获取spring运行过程中的组件"></a>1.3.4 使用xxxAware接口获取spring运行过程中的组件</h3><p><strong>xxxAware的功能大都是(不完全是)依靠对应的xxxAwareProcessor来实现的。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ApplicationContextAware用于获取ApplicationContext</span></span><br><span class="line"><span class="comment"> * BeanNameAware用于获取Bean的名字</span></span><br><span class="line"><span class="comment"> * EmbeddedValueResolverAware用于获取string类型的解析器。可以解析#&#123;&#125;,#&#123;&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Red</span> <span class="keyword">implements</span> <span class="title class_">ApplicationContextAware</span>,BeanNameAware,EmbeddedValueResolverAware &#123;</span><br><span class="line"><span class="keyword">private</span> ApplicationContext applicationContext;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;传入的ioc：&quot;</span>+applicationContext);</span><br><span class="line"><span class="built_in">this</span>.applicationContext = applicationContext;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBeanName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;当前bean的名字：&quot;</span>+name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setEmbeddedValueResolver</span><span class="params">(StringValueResolver resolver)</span> &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">resolveStringValue</span> <span class="operator">=</span> resolver.resolveStringValue(<span class="string">&quot;你好 $&#123;os.name&#125; 我是 #&#123;20*18&#125;&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;解析的字符串：&quot;</span>+resolveStringValue);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-3-5-Profile"><a href="#1-3-5-Profile" class="headerlink" title="1.3.5 @Profile"></a>1.3.5 @Profile</h3><p>@Profile：指定组件在哪个环境中才能被注册到容器中。加了环境标识的bean只有在这个环境被激活时才能被加入到IOC容器中。默认是default环境。<br>@Profile可以修饰配置类中的方法，也可以修饰整个配置类。<br>没有标注@Profile的组件，在任何环境下都是可以被加载的。</p><p>示例：在测试环境、开发环境、默认环境中使用不同的数据源。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 从properties文件中获取配置项。</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 三种方式:</span></span><br><span class="line"><span class="comment"> * 方式一：参看db.user的获取</span></span><br><span class="line"><span class="comment"> * 方式二：参看db.password的获取</span></span><br><span class="line"><span class="comment"> * 方式三：参看db.driverClass的获取</span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"><span class="meta">@PropertySource(&quot;classpath:/dbconfig.properties&quot;)</span> </span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainConfigOfProfile</span> <span class="keyword">implements</span> <span class="title class_">EmbeddedValueResolverAware</span>&#123;</span><br><span class="line"><span class="meta">@Value(&quot;$&#123;db.user&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String user;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> StringValueResolver valueResolver;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String  driverClass;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> Yellow <span class="title function_">yellow</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Yellow</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Profile(&quot;test&quot;)</span></span><br><span class="line"><span class="meta">@Bean(&quot;testDataSource&quot;)</span></span><br><span class="line"><span class="keyword">public</span> DataSource <span class="title function_">dataSourceTest</span><span class="params">(<span class="meta">@Value(&quot;$&#123;db.password&#125;&quot;)</span>String pwd)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"><span class="type">ComboPooledDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ComboPooledDataSource</span>();</span><br><span class="line">dataSource.setUser(user);</span><br><span class="line">dataSource.setPassword(pwd);</span><br><span class="line">dataSource.setJdbcUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/test&quot;</span>);</span><br><span class="line">dataSource.setDriverClass(driverClass);</span><br><span class="line"><span class="keyword">return</span> dataSource;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Profile(&quot;dev&quot;)</span></span><br><span class="line"><span class="meta">@Bean(&quot;devDataSource&quot;)</span></span><br><span class="line"><span class="keyword">public</span> DataSource <span class="title function_">dataSourceDev</span><span class="params">(<span class="meta">@Value(&quot;$&#123;db.password&#125;&quot;)</span>String pwd)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"><span class="type">ComboPooledDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ComboPooledDataSource</span>();</span><br><span class="line">dataSource.setUser(user);</span><br><span class="line">dataSource.setPassword(pwd);</span><br><span class="line">dataSource.setJdbcUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/ssm_crud&quot;</span>);</span><br><span class="line">dataSource.setDriverClass(driverClass);</span><br><span class="line"><span class="keyword">return</span> dataSource;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Profile(&quot;prod&quot;)</span></span><br><span class="line"><span class="meta">@Bean(&quot;prodDataSource&quot;)</span></span><br><span class="line"><span class="keyword">public</span> DataSource <span class="title function_">dataSourceProd</span><span class="params">(<span class="meta">@Value(&quot;$&#123;db.password&#125;&quot;)</span>String pwd)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"><span class="type">ComboPooledDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ComboPooledDataSource</span>();</span><br><span class="line">dataSource.setUser(user);</span><br><span class="line">dataSource.setPassword(pwd);</span><br><span class="line">dataSource.setJdbcUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/scw_0515&quot;</span>);</span><br><span class="line">dataSource.setDriverClass(driverClass);</span><br><span class="line"><span class="keyword">return</span> dataSource;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setEmbeddedValueResolver</span><span class="params">(StringValueResolver resolver)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.valueResolver = resolver;</span><br><span class="line">driverClass = valueResolver.resolveStringValue(<span class="string">&quot;$&#123;db.driverClass&#125;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>环境激活：<br>方式一：使用命令行参数：<code>-Dspring.profiles.active=test</code><br>  在Run Configurations中配置VM arguments： -Dspring.profiles.active=test，指定当前的环境是test环境。当不指定时，使用的是default环境。<br>方式二：程序中激活</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1、创建一个applicationContext</span></span><br><span class="line"><span class="type">AnnotationConfigApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>();</span><br><span class="line"><span class="comment">//2、设置需要激活的环境</span></span><br><span class="line">applicationContext.getEnvironment().setActiveProfiles(<span class="string">&quot;dev&quot;</span>,<span class="string">&quot;test&quot;</span>); <span class="comment">//可设置多个环境</span></span><br><span class="line"><span class="comment">//3、注册主配置类</span></span><br><span class="line">applicationContext.register(MainConfigOfProfile.class);</span><br><span class="line"><span class="comment">//4、启动刷新容器</span></span><br><span class="line">applicationContext.refresh();</span><br></pre></td></tr></table></figure><h2 id="1-4-AOP"><a href="#1-4-AOP" class="headerlink" title="1.4 AOP"></a>1.4 AOP</h2><h3 id="1-4-1-AOP的使用"><a href="#1-4-1-AOP的使用" class="headerlink" title="1.4.1 AOP的使用"></a>1.4.1 AOP的使用</h3><ol><li>将业务逻辑类和切面类加入到容器中</li><li>在切面类中使用注解修饰各种通知方法</li><li>使用@Aspect标识切面类，并在配置类中使用@EnableAspectJAutoProxy开启基于注解的aop模式</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 业务逻辑类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MathCalculator</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">div</span><span class="params">(<span class="type">int</span> i,<span class="type">int</span> j)</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;MathCalculator...div...&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> i/j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 切面类</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LogAspects</span> &#123;</span><br><span class="line"><span class="comment">//抽取公共的切入点表达式</span></span><br><span class="line"><span class="comment">//1、本类引用</span></span><br><span class="line"><span class="comment">//2、其他的切面引用</span></span><br><span class="line"><span class="meta">@Pointcut(&quot;execution(public int com.atguigu.aop.MathCalculator.*(..))&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pointCut</span><span class="params">()</span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//@Before在目标方法之前切入；切入点表达式（指定在哪个方法切入）</span></span><br><span class="line"><span class="meta">@Before(&quot;pointCut()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">logStart</span><span class="params">(JoinPoint joinPoint)</span>&#123;</span><br><span class="line">Object[] args = joinPoint.getArgs();</span><br><span class="line">System.out.println(<span class="string">&quot;&quot;</span>+joinPoint.getSignature().getName()+<span class="string">&quot;运行。。。@Before:参数列表是：&#123;&quot;</span>+Arrays.asList(args)+<span class="string">&quot;&#125;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 其他类中使用公共切入点需要使用全类名进行引用</span></span><br><span class="line"><span class="meta">@After(&quot;com.atguigu.aop.LogAspects.pointCut()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">logEnd</span><span class="params">(JoinPoint joinPoint)</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;&quot;</span>+joinPoint.getSignature().getName()+<span class="string">&quot;结束。。。@After&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//JoinPoint一定要出现在参数表的第一位</span></span><br><span class="line"><span class="meta">@AfterReturning(value=&quot;pointCut()&quot;,returning=&quot;result&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">logReturn</span><span class="params">(JoinPoint joinPoint,Object result)</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;&quot;</span>+joinPoint.getSignature().getName()+<span class="string">&quot;正常返回。。。@AfterReturning:运行结果：&#123;&quot;</span>+result+<span class="string">&quot;&#125;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@AfterThrowing(value=&quot;pointCut()&quot;,throwing=&quot;exception&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">logException</span><span class="params">(JoinPoint joinPoint,Exception exception)</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;&quot;</span>+joinPoint.getSignature().getName()+<span class="string">&quot;异常。。。异常信息：&#123;&quot;</span>+exception+<span class="string">&quot;&#125;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 配置类</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainConfigOfAOP</span> &#123;</span><br><span class="line"><span class="comment">//业务逻辑类加入容器中</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> MathCalculator <span class="title function_">calculator</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MathCalculator</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//切面类加入到容器中</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> LogAspects <span class="title function_">logAspects</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LogAspects</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>【其他知识点】：</p><ul><li>公共切入点表达式抽取，与其他类对公共切入点的引用</li></ul><h3 id="1-4-2-AOP的原理"><a href="#1-4-2-AOP的原理" class="headerlink" title="1.4.2 AOP的原理"></a>1.4.2 AOP的原理</h3><p>@EnableXXX注解的研究思路：<br>从@EnableXXX入手，研究它注入的组件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Import(AspectJAutoProxyRegistrar.class)</span>  <span class="comment">// 导入了AspectJAutoProxyRegistrar</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableAspectJAutoProxy &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">---&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AspectJAutoProxyRegistrar</span> <span class="keyword">implements</span> <span class="title class_">ImportBeanDefinitionRegistrar</span> &#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Register, escalate, and configure the AspectJ auto proxy creator based on the value</span></span><br><span class="line"><span class="comment"> * of the @&#123;<span class="doctag">@link</span> EnableAspectJAutoProxy#proxyTargetClass()&#125; attribute on the importing</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> <span class="doctag">@Configuration</span>&#125; class.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">registerBeanDefinitions</span><span class="params">(</span></span><br><span class="line"><span class="params">AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 注册了一个AspectJAnnotationAutoProxyCreator</span></span><br><span class="line">AopConfigUtils.registerAspectJAnnotationAutoProxyCreatorIfNecessary(registry);</span><br><span class="line"></span><br><span class="line"><span class="type">AnnotationAttributes</span> <span class="variable">enableAspectJAutoProxy</span> <span class="operator">=</span></span><br><span class="line">AnnotationConfigUtils.attributesFor(importingClassMetadata, EnableAspectJAutoProxy.class);</span><br><span class="line"><span class="keyword">if</span> (enableAspectJAutoProxy.getBoolean(<span class="string">&quot;proxyTargetClass&quot;</span>)) &#123;</span><br><span class="line">AopConfigUtils.forceAutoProxyCreatorToUseClassProxying(registry);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (enableAspectJAutoProxy.getBoolean(<span class="string">&quot;exposeProxy&quot;</span>)) &#123;</span><br><span class="line">AopConfigUtils.forceAutoProxyCreatorToExposeProxy(registry);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">---&gt;</span><br><span class="line">AopConfigUtils.registerAspectJAnnotationAutoProxyCreatorIfNecessary(registry);中注册了</span><br><span class="line">AnnotationAwareAspectJAutoProxyCreator</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">---&gt;</span><br><span class="line">查看AnnotationAwareAspectJAutoProxyCreator的继承关系</span><br><span class="line">AnnotationAwareAspectJAutoProxyCreator</span><br><span class="line">    AnnotationAwareAspectJAutoProxyCreator</span><br><span class="line">        AspectJAwareAdvisorAutoProxyCreator</span><br><span class="line">            AbstractAdvisorAutoProxyCreator</span><br><span class="line">                AbstractAutoProxyCreator <span class="keyword">implements</span> <span class="title class_">SmartInstantiationAwareBeanPostProcessor</span>, BeanFactoryAware</span><br><span class="line"></span><br><span class="line">---&gt;</span><br><span class="line">BeanFactoryAware主要是用于获取BeanFactory</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BeanFactoryAware</span> <span class="keyword">extends</span> <span class="title class_">Aware</span> &#123;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">setBeanFactory</span><span class="params">(BeanFactory beanFactory)</span> <span class="keyword">throws</span> BeansException;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">---&gt;</span><br><span class="line">既然是SmartInstantiationAwareBeanPostProcessor，重点关注后置处理器（在bean初始化完成前后做事情）</span><br></pre></td></tr></table></figure><p>后置处理器的注册流程：</p><p>【阵亡……】</p><h1 id="2-扩展原理"><a href="#2-扩展原理" class="headerlink" title="2. 扩展原理"></a>2. 扩展原理</h1><h2 id="2-1-BeanFactoryPostProcessor"><a href="#2-1-BeanFactoryPostProcessor" class="headerlink" title="2.1 BeanFactoryPostProcessor"></a>2.1 BeanFactoryPostProcessor</h2><p>All bean definitions <strong>will have been loaded</strong>, but no beans will have been instantiated yet. This allows for overriding or adding properties even to <strong>eager-initializing</strong> beans.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ComponentScan(&quot;com.atguigu.ext&quot;)</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExtConfig</span> &#123;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> Blue <span class="title function_">blue</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Blue</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBeanFactoryPostProcessor</span> <span class="keyword">implements</span> <span class="title class_">BeanFactoryPostProcessor</span> &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postProcessBeanFactory</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;MyBeanFactoryPostProcessor...postProcessBeanFactory...&quot;</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> beanFactory.getBeanDefinitionCount();</span><br><span class="line">String[] names = beanFactory.getBeanDefinitionNames();</span><br><span class="line">System.out.println(<span class="string">&quot;当前BeanFactory中有&quot;</span>+count+<span class="string">&quot; 个Bean&quot;</span>);</span><br><span class="line">System.out.println(Arrays.asList(names));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-2-BeanDefinitionRegistryPostProcessor"><a href="#2-2-BeanDefinitionRegistryPostProcessor" class="headerlink" title="2.2 BeanDefinitionRegistryPostProcessor"></a>2.2 BeanDefinitionRegistryPostProcessor</h2><p>BeanDefinitionRegistryPostProcessor继承自BeanFactoryPostProcessor</p><p>【执行时机】：<br>All regular bean definitions <strong>will have been loaded</strong>, but no beans will have been instantiated yet.</p><p><strong>BeanDefinitionRegistryPostProcessor先于BeanFactoryPostProcessor执行。</strong><br>先执行BeanDefinitionRegistryPostProcessor.postProcessBeanDefinitionRegistry()<br>—&gt; BeanDefinitionRegistryPostProcessor.postProcessBeanFactory()<br>—&gt; BeanFactoryPostProcessor.postProcessBeanFactory()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBeanDefinitionRegistryPostProcessor</span> <span class="keyword">implements</span> <span class="title class_">BeanDefinitionRegistryPostProcessor</span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postProcessBeanFactory</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;MyBeanDefinitionRegistryPostProcessor...bean的数量：&quot;</span>+beanFactory.getBeanDefinitionCount());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//BeanDefinitionRegistry Bean定义信息的保存中心，以后BeanFactory就是按照BeanDefinitionRegistry里面保存的每一个bean定义信息创建bean实例；</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postProcessBeanDefinitionRegistry</span><span class="params">(BeanDefinitionRegistry registry)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;postProcessBeanDefinitionRegistry...bean的数量：&quot;</span>+registry.getBeanDefinitionCount());</span><br><span class="line"><span class="comment">//RootBeanDefinition beanDefinition = new RootBeanDefinition(Blue.class);</span></span><br><span class="line"><span class="type">AbstractBeanDefinition</span> <span class="variable">beanDefinition</span> <span class="operator">=</span> BeanDefinitionBuilder.rootBeanDefinition(Blue.class).getBeanDefinition();</span><br><span class="line">registry.registerBeanDefinition(<span class="string">&quot;hello&quot;</span>, beanDefinition);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-3-ApplicationListener"><a href="#2-3-ApplicationListener" class="headerlink" title="2.3 ApplicationListener"></a>2.3 ApplicationListener</h2><p>监听容器中发布的事件。事件驱动模型开发；<br><code>public interface ApplicationListener&lt;E extends ApplicationEvent&gt;</code><br>监听 ApplicationEvent 及其下面的子事件；</p><img src="/JeckFS/2020/07/24/spring%E6%B3%A8%E8%A7%A3/9.png" class="" title="This is 9-th image."><p>ContextRefreshedEvent：容器刷新完成（所有bean都完全创建）会发布这个事件；<br>ContextClosedEvent：关闭容器会发布这个事件；</p><p>【步骤】：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyApplicationListener</span> <span class="keyword">implements</span> <span class="title class_">ApplicationListener</span>&lt;ApplicationEvent&gt; &#123;</span><br><span class="line"><span class="comment">//当容器中发布此事件以后，方法触发</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onApplicationEvent</span><span class="params">(ApplicationEvent event)</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;收到事件：&quot;</span>+event);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//发布事件；</span></span><br><span class="line">applicationContext.publishEvent(<span class="keyword">new</span> <span class="title class_">ApplicationEvent</span>(<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;我发布的时间&quot;</span>)) &#123;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>【使用@EventListener监听事件】：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"><span class="meta">@EventListener(classes=&#123;ApplicationEvent.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listen</span><span class="params">(ApplicationEvent event)</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;UserService。。监听到的事件：&quot;</span>+event);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>博客：<br>数据库：<br>MySQL 数据库索引 1h 高性能MySQL—平板思维导图<br>Java面试突击V3.0 数据库部分   面试—MySQL+InnoDB中的事务隔离级别和锁的关系 2h<br>redis 2h 面试—redis<br>Java基础 3h<br>实战Java高并发程序设计  平板思维导图  1.5h<br>深入理解Java虚拟机  4h</p><p>Java并发编程的艺术<br>linux<br>maven<br>网络<br>设计模式<br>项目<br>Java面试突击V3.0</p><p>待学：<br>spring注解教程<br>剑指offer<br>谢希仁计算机网络<br>设计模式<br>git</p><div class="table-container"><table><thead><tr><th style="text-align:center">日期</th><th style="text-align:center">代办事项</th><th style="text-align:center">是否完成</th></tr></thead><tbody><tr><td style="text-align:center">07-28</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">07-29</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">07-30</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">07-31</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">08-01</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">08-02</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">08-03</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">08-04</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">08-05</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">08-06</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">08-07</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">08-08</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">08-09</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">08-10</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">08-11</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">08-12</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">08-13</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">08-14</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">08-15</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">08-16</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">08-17</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">08-18</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">08-19</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">08-20</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">08-21</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">08-22</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">08-23</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">08-24</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">08-25</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">08-26</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">08-27</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">08-28</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">08-29</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">08-30</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">08-31</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">09-01</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">09-02</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">09-03</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">09-04</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">09-05</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">09-06</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">09-07</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">09-08</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">09-09</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">09-10</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">09-11</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">09-12</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">09-13</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">09-14</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">09-15</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">09-16</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">09-17</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">09-18</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">09-19</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">09-20</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">09-21</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">09-22</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">09-23</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">09-24</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">09-25</td><td style="text-align:center"></td><td style="text-align:center"></td></tr></tbody></table></div>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git</title>
      <link href="/JeckFS/2020/07/23/git/"/>
      <url>/JeckFS/2020/07/23/git/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.bilibili.com/video/BV1fK4y1b7XL?p=2">https://www.bilibili.com/video/BV1fK4y1b7XL?p=2</a></p><p>Git是分布式版本控制工具，没有中央服务器，每个人存有完整的版本库。对于在不同机器上的修改，只推送各自的修改部分到远程仓库，然后从远程仓库pull。</p><img src="/JeckFS/2020/07/23/git/1.png" class="" title="This is 1-th image."><img src="/JeckFS/2020/07/23/git/2.png" class="" title="This is 2-th image."><h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><ol><li><p>git status<br>显示文件的更改状态。</p></li><li><p>git diff</p></li></ol><img src="/JeckFS/2020/07/23/git/3.png" class="" title="This is 3-th image."><p>- 红色部分是修改前的文本。<br>+ 上方紧挨着的一行修改后的部分。</p><ol><li>git add</li><li>git commit -m “description”<br>命令3,4用于提交到本地仓库</li><li>git log 显示提交日志</li><li>git log —pretty=oneline 显示简略的提交日志</li></ol><img src="/JeckFS/2020/07/23/git/4.png" class="" title="This is 4-th image."><p><code>HEAD</code>表示当前版本，即最新提交的版本<br><code>HEAD^</code>：上一个提交版本<br><code>HEAD^^</code>：上上个提交版本<br><code>HEAD~100</code>：上100个提交版本</p><ol><li>git reset —hard HEAD^ 版本回退到上一个版本</li><li>git reset —hard 7b258 回退到版本id以<code>7b258</code>开头的版本</li><li>git reflog 查看命令历史，可以找到以前所有的版本</li></ol><p><a href="https://www.liaoxuefeng.com/wiki/896043488029600/897013573512192">https://www.liaoxuefeng.com/wiki/896043488029600/897013573512192</a></p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式</title>
      <link href="/JeckFS/2020/07/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
      <url>/JeckFS/2020/07/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="1-策略模式"><a href="#1-策略模式" class="headerlink" title="1.策略模式"></a>1.策略模式</h1><h2 id="1-1定义"><a href="#1-1定义" class="headerlink" title="1.1定义"></a>1.1定义</h2><p>分别封装行为接口，实现算法族，超类里放行为接口对象，在子类里具体设定行为对象。原则就是：<strong>分离变化部分，将变化部分封装成接口，基于接口编程各种功能</strong>。此模式让行为算法的变化独立于算法的使用者。</p><h2 id="1-2应用场景"><a href="#1-2应用场景" class="headerlink" title="1.2应用场景"></a>1.2应用场景</h2><ol><li>如果在一个系统里面有许多类，它们之间的区别仅在于它们的行为，那么使用策略模式可以动态地让一个对象在许多行为中选择一种行为。 </li><li>一个系统需要动态地在几种算法中选择一种。 </li><li>如果一个对象有很多的行为，如果不用恰当的模式，这些行为就只好使用多重的条件选择语句来实现。</li></ol><h2 id="1-3应用示例"><a href="#1-3应用示例" class="headerlink" title="1.3应用示例"></a>1.3应用示例</h2><p>模拟鸭子，不同的鸭子可能会飞，可能不会飞；叫声不同；但都会游泳。</p><p>若仅使用继承的方式，带来的问题是：<br>对类的局部改动，尤其超类的局部改动，会影响其他部分。影响会有溢出效应</p><p>为了获得较好的扩展性，应使用策略模式：<br>把变化的行为抽象成接口和实现，子类将行为接口作为属性来用。行为在运行过程中也可以动态替换。<br>每种鸭子的飞与叫是变化的部分，对于飞和叫抽象成接口，并实现不同的飞行方式和叫的方式。可以组合实现的飞行方式和叫的方式，来满足不同鸭子的需求。</p><p><strong>将变化的行为封装成接口和实现：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 变化行为1：飞行</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">FlyBehavior</span> &#123;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">fly</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 飞行的实现方式1</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BadFlyBehavior</span> <span class="keyword">implements</span> <span class="title class_">FlyBehavior</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fly</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;--BadFly--&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 飞行的实现方式2</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GoodFlyBehavior</span> <span class="keyword">implements</span> <span class="title class_">FlyBehavior</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fly</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;--GoodFly--&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 飞行的实现方式3</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NoFlyBehavior</span> <span class="keyword">implements</span> <span class="title class_">FlyBehavior</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fly</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;--NoFly--&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 变化方式2：叫声</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">QuackBehavior</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">quack</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 叫声的实现方式1</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GaGaQuackBehavior</span> <span class="keyword">implements</span> <span class="title class_">QuackBehavior</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">quack</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;__GaGa__&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 叫声的实现方式2</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GeGeQuackBehavior</span> <span class="keyword">implements</span> <span class="title class_">QuackBehavior</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">quack</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;__GeGe__&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 叫声的实现方式3</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NoQuackBehavior</span> <span class="keyword">implements</span> <span class="title class_">QuackBehavior</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">quack</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;__NoQuack__&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>定义模拟鸭子的类：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Duck</span> &#123;</span><br><span class="line">FlyBehavior mFlyBehavior;</span><br><span class="line">QuackBehavior mQuackBehavior;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Duck</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Fly</span><span class="params">()</span> &#123;</span><br><span class="line">mFlyBehavior.fly();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Quack</span><span class="params">()</span> &#123;</span><br><span class="line">mQuackBehavior.quack();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">SetQuackBehavoir</span><span class="params">(QuackBehavior qb)</span> &#123;</span><br><span class="line">mQuackBehavior = qb;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">SetFlyBehavoir</span><span class="params">(FlyBehavior fb)</span> &#123;</span><br><span class="line">mFlyBehavior = fb;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">swim</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;~~im swim~~&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>鸭子的具体实现类：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// GreenHeadDuck</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GreenHeadDuck</span> <span class="keyword">extends</span> <span class="title class_">Duck</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">GreenHeadDuck</span><span class="params">()</span> &#123;</span><br><span class="line">mFlyBehavior = <span class="keyword">new</span> <span class="title class_">GoodFlyBehavior</span>();</span><br><span class="line">mQuackBehavior = <span class="keyword">new</span> <span class="title class_">GaGaQuackBehavior</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;**GreenHead**&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// RedHeadDuck</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedHeadDuck</span> <span class="keyword">extends</span> <span class="title class_">Duck</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">RedHeadDuck</span><span class="params">()</span> &#123;</span><br><span class="line">mFlyBehavior = <span class="keyword">new</span> <span class="title class_">BadFlyBehavior</span>();</span><br><span class="line">mQuackBehavior = <span class="keyword">new</span> <span class="title class_">GeGeQuackBehavior</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;**RedHead**&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>测试类：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StimulateDuck</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">Duck</span> <span class="variable">mGreenHeadDuck</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GreenHeadDuck</span>();</span><br><span class="line"><span class="type">Duck</span> <span class="variable">mRedHeadDuck</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RedHeadDuck</span>();</span><br><span class="line"></span><br><span class="line">mGreenHeadDuck.display();</span><br><span class="line">mGreenHeadDuck.Fly();</span><br><span class="line">mGreenHeadDuck.Quack();</span><br><span class="line">mGreenHeadDuck.swim();</span><br><span class="line">System.out.println(<span class="string">&quot;=======================&quot;</span>);</span><br><span class="line"></span><br><span class="line">mRedHeadDuck.display();</span><br><span class="line">mRedHeadDuck.Fly();</span><br><span class="line">mRedHeadDuck.Quack();</span><br><span class="line">mRedHeadDuck.swim();</span><br><span class="line">System.out.println(<span class="string">&quot;=======================&quot;</span>);</span><br><span class="line"></span><br><span class="line">mRedHeadDuck.display();</span><br><span class="line">mRedHeadDuck.SetFlyBehavoir(<span class="keyword">new</span> <span class="title class_">NoFlyBehavior</span>());</span><br><span class="line">mRedHeadDuck.Fly();</span><br><span class="line">mRedHeadDuck.SetQuackBehavoir(<span class="keyword">new</span> <span class="title class_">NoQuackBehavior</span>());</span><br><span class="line">mRedHeadDuck.Quack();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 运行结果</span></span><br><span class="line">**GreenHead**</span><br><span class="line">--GoodFly--</span><br><span class="line">__GaGa__</span><br><span class="line">~~im swim~~</span><br><span class="line">=======================</span><br><span class="line">**RedHead**</span><br><span class="line">--BadFly--</span><br><span class="line">__GeGe__</span><br><span class="line">~~im swim~~</span><br><span class="line">=======================</span><br><span class="line">**RedHead**</span><br><span class="line">--NoFly--</span><br><span class="line">__NoQuack__</span><br></pre></td></tr></table></figure></p><h1 id="2-观察者模式"><a href="#2-观察者模式" class="headerlink" title="2.观察者模式"></a>2.观察者模式</h1><h2 id="2-1定义"><a href="#2-1定义" class="headerlink" title="2.1定义"></a>2.1定义</h2><p>对象之间<strong>多对一依赖</strong>的一种设计方案，被依赖的对象为Subject，依赖的对象为Observer，Subject通知Observer变化以及变化的数据。</p><p>Subject：等级注册，移除和通知<br>Observer：接受输入</p><img src="/JeckFS/2020/07/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/1.png" class="" title="This is 1-th image."><p>例如：定制牛奶业务<br>奶站，Subject<br>用户，Observer</p><p>奶站对于需要的用户进行注册，下次送牛奶给他。当用户取消订阅后，移除该用户。牛奶到了，通知用户取牛奶。</p><h2 id="2-2示例"><a href="#2-2示例" class="headerlink" title="2.2示例"></a>2.2示例</h2><p>气象站可以获取检测数据(WeatherData)，第三方可以使用公告板(XXXConditions)对信息进行公布。但第三方公司可能接入，也可能退出。多个第三方公司依赖气象站提供的数据，当气象站检测导数据发生变化，应将变化的数据通知给第三方。</p><p>设计方案：</p><img src="/JeckFS/2020/07/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/2.png" class="" title="This is 2-th image."><p>我们使用JDK提供的Observable类和Observer接口来实现。</p><p>通知传递任意的数据：</p><ul><li>自定义要传递数据的对象(Data)。</li><li>注册监听类，定义使用Object定义数据对象，保存数据。并使用notifyObservers();进行通知。</li><li>公告板中使用Observable类强制转换为注册监听类后，获取数据。</li></ul><p>注意：</p><ul><li>Observable是一个类，通知变化前需要调用setChange()，使得这种变化是可控的。比如当温度的变化幅度超过10度，才会通知，这样第三方公司有更多的自主性。</li><li>数据的接收有pull和get两种方式</li></ul><p><strong>自定义通知的数据对象：</strong></p><img src="/JeckFS/2020/07/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/3.png" class="" title="This is 3-th image."><p><strong>第三方公司A定义公告板</strong></p><img src="/JeckFS/2020/07/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/4.png" class="" title="This is 4-th image."><p><strong>第三方公司B定义公告板</strong></p><img src="/JeckFS/2020/07/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/5.png" class="" title="This is 5-th image."><p><strong>气象站通知数据</strong></p><img src="/JeckFS/2020/07/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/6.png" class="" title="This is 6-th image."><p><strong>测试</strong></p><img src="/JeckFS/2020/07/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/7.png" class="" title="This is 7-th image."><h1 id="3-装饰者模式"><a href="#3-装饰者模式" class="headerlink" title="3.装饰者模式"></a>3.装饰者模式</h1><h2 id="3-1原理及简介"><a href="#3-1原理及简介" class="headerlink" title="3.1原理及简介"></a>3.1原理及简介</h2><p>在不改变原有对象功能的前提下，进行功能的扩充，是继承关系的一种替代方案。<br>动态的将新功能附加到对象上。在对象功能扩展方面，它比继承更有弹性。</p><p>如一幅画，可以加个塑料外套，然后再加个相框。<br>画就是被装饰的主题，塑料外套和相框是装饰品。</p><img src="/JeckFS/2020/07/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/8.png" class="" title="This is 8-th image."><p>ConcreteComponent是具体的要被装饰的对象。<br>Decorator是装饰器的父类，因为可能会存在多个装饰器。它保存着要被装饰的具体对象。<br>ConcreteDecorator是具体的装饰器。</p><h2 id="3-2示例1："><a href="#3-2示例1：" class="headerlink" title="3.2示例1："></a>3.2示例1：</h2><p>ShortBlack, Decaf, Espresso, LongBlack是咖啡原料，可以向其添加Chocolate，Milk，Soy可以制作成不同的咖啡。换言之，用Chocolate，Milk，Soy来“装饰”咖啡原料，使其具有不同的“功能”(味道)。</p><img src="/JeckFS/2020/07/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/9.png" class="" title="This is 9-th image."><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 抽象类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Drink</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">String</span> <span class="variable">description</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">float</span> <span class="variable">price</span> <span class="operator">=</span> <span class="number">0f</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDescription</span><span class="params">(String description)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.description = description;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDescription</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> description + <span class="string">&quot;-&quot;</span> + <span class="built_in">this</span>.getPrice();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">float</span> <span class="title function_">getPrice</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPrice</span><span class="params">(<span class="type">float</span> price)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="type">float</span> <span class="title function_">cost</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>咖啡原料</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 咖啡原料的父类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Coffee</span> <span class="keyword">extends</span> <span class="title class_">Drink</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">float</span> <span class="title function_">cost</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.getPrice();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 咖啡原料1</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Decaf</span> <span class="keyword">extends</span> <span class="title class_">Coffee</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Decaf</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.setDescription(<span class="string">&quot;Decaf&quot;</span>);</span><br><span class="line">        <span class="built_in">super</span>.setPrice(<span class="number">3.0f</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 咖啡原料2</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Espresso</span> <span class="keyword">extends</span> <span class="title class_">Coffee</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Espresso</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.setDescription(<span class="string">&quot;Espresso&quot;</span>);</span><br><span class="line">        <span class="built_in">super</span>.setPrice(<span class="number">4.0f</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 咖啡原料3</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LongBlack</span> <span class="keyword">extends</span> <span class="title class_">Coffee</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LongBlack</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.setDescription(<span class="string">&quot;LongBlack&quot;</span>);</span><br><span class="line">        <span class="built_in">super</span>.setPrice(<span class="number">6.0f</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 咖啡原料4</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShortBlack</span> <span class="keyword">extends</span> <span class="title class_">Coffee</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ShortBlack</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.setDescription(<span class="string">&quot;ShortBlack&quot;</span>);</span><br><span class="line">        <span class="built_in">super</span>.setPrice(<span class="number">5.0f</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>装饰器</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 装饰器类能够获取继承自它的类的信息以及被装饰者的信息，如Decorator可以同时获取Chocolate与Obj中的信息</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Decorator</span> <span class="keyword">extends</span> <span class="title class_">Drink</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Drink Obj; <span class="comment">// 注意这里</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Decorator</span><span class="params">(Drink Obj)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.Obj = Obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">float</span> <span class="title function_">cost</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.getPrice() + Obj.cost();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDescription</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.description + <span class="string">&quot;-&quot;</span> + <span class="built_in">super</span>.getPrice() + <span class="string">&quot;&amp;&amp;&quot;</span> + Obj.getDescription();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 装饰器1</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Chocolate</span> <span class="keyword">extends</span> <span class="title class_">Decorator</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Chocolate</span><span class="params">(Drink Obj)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(Obj);</span><br><span class="line">        <span class="built_in">super</span>.setDescription(<span class="string">&quot;Chocolate&quot;</span>);</span><br><span class="line">        <span class="built_in">super</span>.setPrice(<span class="number">3.0f</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 装饰器2</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Milk</span> <span class="keyword">extends</span> <span class="title class_">Decorator</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Milk</span><span class="params">(Drink Obj)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(Obj);</span><br><span class="line">        <span class="built_in">super</span>.setDescription(<span class="string">&quot;Milk&quot;</span>);</span><br><span class="line">        <span class="built_in">super</span>.setPrice(<span class="number">2.0f</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 装饰器3</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Soy</span> <span class="keyword">extends</span> <span class="title class_">Decorator</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Soy</span><span class="params">(Drink Obj)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>(Obj);</span><br><span class="line"><span class="built_in">super</span>.setDescription(<span class="string">&quot;Soy&quot;</span>);</span><br><span class="line"><span class="built_in">super</span>.setPrice(<span class="number">1.5f</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CoffeeBar</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Drink order;</span><br><span class="line">        order = <span class="keyword">new</span> <span class="title class_">Decaf</span>();</span><br><span class="line">        System.out.println(<span class="string">&quot;order1 price:&quot;</span> + order.cost());</span><br><span class="line">        System.out.println(<span class="string">&quot;order1 desc:&quot;</span> + order.getDescription());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;****************&quot;</span>);</span><br><span class="line">        order = <span class="keyword">new</span> <span class="title class_">LongBlack</span>();</span><br><span class="line">        order = <span class="keyword">new</span> <span class="title class_">Milk</span>(order);</span><br><span class="line">        order = <span class="keyword">new</span> <span class="title class_">Chocolate</span>(order);</span><br><span class="line">        order = <span class="keyword">new</span> <span class="title class_">Chocolate</span>(order);</span><br><span class="line">        System.out.println(<span class="string">&quot;order2 price:&quot;</span> + order.cost());</span><br><span class="line">        System.out.println(<span class="string">&quot;order2 desc:&quot;</span> + order.getDescription());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 运行结果</span></span><br><span class="line">order1 price:<span class="number">3.0</span></span><br><span class="line">order1 desc:Decaf-<span class="number">3.0</span></span><br><span class="line">****************</span><br><span class="line">order2 price:<span class="number">14.0</span></span><br><span class="line">order2 desc:Chocolate-<span class="number">3.0</span>&amp;&amp;Chocolate-<span class="number">3.0</span>&amp;&amp;Milk-<span class="number">2.0</span>&amp;&amp;LongBlack-<span class="number">6.0</span></span><br></pre></td></tr></table></figure><h2 id="3-3示例2："><a href="#3-3示例2：" class="headerlink" title="3.3示例2："></a>3.3示例2：</h2><p>自定义文件输入流的装饰器，使得将输入的字符串转化成大些的字符。</p><img src="/JeckFS/2020/07/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/10.png" class="" title="This is 10-th image."><p><strong>编写子集的Java I/O装饰者：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UpperCaseInputStream</span> <span class="keyword">extends</span> <span class="title class_">FilterInputStream</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="title function_">UpperCaseInputStream</span><span class="params">(InputStream in)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(in);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">read</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> <span class="built_in">super</span>.read(); <span class="comment">// 直接使用in.read()也是可以的，super.read()本身也是调用的in.read()</span></span><br><span class="line">        <span class="type">return</span> <span class="variable">c</span> <span class="operator">=</span>= -<span class="number">1</span> ? c : Character.toUpperCase((<span class="type">char</span>) (c)); <span class="comment">// 相当于装饰的功能</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">read</span><span class="params">(<span class="type">byte</span>[] b, <span class="type">int</span> offset, <span class="type">int</span> len)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="built_in">super</span>.read(b, offset, len);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; result; i++) &#123;</span><br><span class="line">            b[i] = (<span class="type">byte</span>) Character.toUpperCase((<span class="type">char</span>) (b[i]));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试类：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InputTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> c;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UpperCaseInputStream</span>(<span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;/home/yfs/Desktop/test.txt&quot;</span>)));</span><br><span class="line">            <span class="keyword">while</span> ((c = in.read()) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.print((<span class="type">char</span>) c);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="4-单例模式"><a href="#4-单例模式" class="headerlink" title="4.单例模式"></a>4.单例模式</h1><p><strong>饿汉式</strong><br>类加载到内存后，就实例化一个单例，JVM保证线程安全。<br>缺点：不管用到与否，类装载时就完成实例化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Mgr01</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Mgr01</span> <span class="variable">INSTANCE</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Mgr01</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Mgr01</span><span class="params">()</span>&#123;&#125;;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Mgr01 <span class="title function_">getInstance</span><span class="params">()</span>&#123;<span class="keyword">return</span> INSTANCE;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Mgr02</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Mgr02 INSTANCE;    </span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        INSTANCE = <span class="keyword">new</span> <span class="title class_">Mgr02</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Mgr02 <span class="title function_">getInstance</span><span class="params">()</span>&#123; <span class="keyword">return</span> INSTANCE; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>懒汉式</strong></p><p>什么时候用，什么时候初始化。<br>但是线程不安全。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Mgr03</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Mgr03 instance;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Mgr03</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Mgr03 <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(instance == <span class="literal">null</span>) </span><br><span class="line">            instance = <span class="keyword">new</span> <span class="title class_">Mgr03</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://www.bilibili.com/video/BV1tK411W7xx?p=2">https://www.bilibili.com/video/BV1tK411W7xx?p=2</a></p><h1 id="5-工厂模式"><a href="#5-工厂模式" class="headerlink" title="5.工厂模式"></a>5.工厂模式</h1><h2 id="5-1简单工厂模式"><a href="#5-1简单工厂模式" class="headerlink" title="5.1简单工厂模式"></a>5.1简单工厂模式</h2><p>将实例化对象的逻辑封装到一个对象工厂中，统一生产。当扩展新的对象时，只需要修改对象工厂新建对象的逻辑即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderPizza</span> &#123;</span><br><span class="line">    SimplePizzaFactory mSimplePizzaFactory;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">OrderPizza</span><span class="params">(SimplePizzaFactory mSimplePizzaFactory)</span> &#123;</span><br><span class="line">        setFactory(mSimplePizzaFactory);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setFactory</span><span class="params">(SimplePizzaFactory mSimplePizzaFactory)</span> &#123;</span><br><span class="line">        <span class="type">Pizza</span> <span class="variable">pizza</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        String ordertype;</span><br><span class="line">        <span class="built_in">this</span>.mSimplePizzaFactory = mSimplePizzaFactory;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            ordertype = gettype();</span><br><span class="line">            pizza = mSimplePizzaFactory.CreatePizza(ordertype);</span><br><span class="line">            <span class="keyword">if</span> (pizza != <span class="literal">null</span>) &#123;</span><br><span class="line">                pizza.prepare(); <span class="comment">// 准备原料</span></span><br><span class="line">                pizza.bake(); <span class="comment">// 烘烤</span></span><br><span class="line">                pizza.cut(); <span class="comment">// 刀切</span></span><br><span class="line">                pizza.box(); <span class="comment">// 打包</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">while</span> (<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">gettype</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">BufferedReader</span> <span class="variable">strin</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(System.in));</span><br><span class="line">            System.out.println(<span class="string">&quot;input pizza type:&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> strin.readLine();</span><br><span class="line">            <span class="keyword">return</span> str;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimplePizzaFactory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Pizza <span class="title function_">CreatePizza</span><span class="params">(String ordertype)</span> &#123;</span><br><span class="line">        <span class="type">Pizza</span> <span class="variable">pizza</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (ordertype.equals(<span class="string">&quot;cheese&quot;</span>)) &#123;</span><br><span class="line">            pizza = <span class="keyword">new</span> <span class="title class_">CheesePizza</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ordertype.equals(<span class="string">&quot;greek&quot;</span>)) &#123;</span><br><span class="line">            pizza = <span class="keyword">new</span> <span class="title class_">GreekPizza</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ordertype.equals(<span class="string">&quot;pepper&quot;</span>)) &#123;</span><br><span class="line">            pizza = <span class="keyword">new</span> <span class="title class_">PepperPizza</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pizza;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PizzaStroe</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        OrderPizza mOrderPizza;</span><br><span class="line">        mOrderPizza = <span class="keyword">new</span> <span class="title class_">OrderPizza</span>(<span class="keyword">new</span> <span class="title class_">SimplePizzaFactory</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-2工厂方法模式"><a href="#5-2工厂方法模式" class="headerlink" title="5.2工厂方法模式"></a>5.2工厂方法模式</h2><p>工厂方法模式设计方案：将披萨项目里的披萨对象实例化功能抽象成抽象方法，在不同加盟店具体实现功能。</p><p>工厂方法模式：定义了一个创建对象的抽象方法，由子类决定要实例化的类。工厂方法模式将对象的实例化推迟到子类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">OrderPizza</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">OrderPizza</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Pizza</span> <span class="variable">pizza</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        String ordertype;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            ordertype = gettype();</span><br><span class="line">            pizza = createPizza(ordertype);</span><br><span class="line"></span><br><span class="line">            pizza.prepare();</span><br><span class="line">            pizza.bake();</span><br><span class="line">            pizza.cut();</span><br><span class="line">            pizza.box();</span><br><span class="line">        &#125; <span class="keyword">while</span> (<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">abstract</span> Pizza <span class="title function_">createPizza</span><span class="params">(String ordertype)</span>; <span class="comment">// 抽象方法</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">gettype</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">BufferedReader</span> <span class="variable">strin</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(System.in));</span><br><span class="line">            System.out.println(<span class="string">&quot;input pizza type:&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> strin.readLine();</span><br><span class="line">            <span class="keyword">return</span> str;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// London加盟店</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LDOrderPizza</span> <span class="keyword">extends</span> <span class="title class_">OrderPizza</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">Pizza <span class="title function_">createPizza</span><span class="params">(String ordertype)</span> &#123;</span><br><span class="line"><span class="type">Pizza</span> <span class="variable">pizza</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (ordertype.equals(<span class="string">&quot;cheese&quot;</span>)) &#123;</span><br><span class="line">pizza = <span class="keyword">new</span> <span class="title class_">LDCheesePizza</span>();</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (ordertype.equals(<span class="string">&quot;pepper&quot;</span>)) &#123;</span><br><span class="line">pizza = <span class="keyword">new</span> <span class="title class_">LDPepperPizza</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> pizza;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// NewYork加盟店</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NYOrderPizza</span> <span class="keyword">extends</span> <span class="title class_">OrderPizza</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">Pizza <span class="title function_">createPizza</span><span class="params">(String ordertype)</span> &#123;</span><br><span class="line"><span class="type">Pizza</span> <span class="variable">pizza</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (ordertype.equals(<span class="string">&quot;cheese&quot;</span>)) &#123;</span><br><span class="line">pizza = <span class="keyword">new</span> <span class="title class_">NYCheesePizza</span>();</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (ordertype.equals(<span class="string">&quot;pepper&quot;</span>)) &#123;</span><br><span class="line">pizza = <span class="keyword">new</span> <span class="title class_">NYPepperPizza</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> pizza;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PizzaStroe</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        OrderPizza mOrderPizza;</span><br><span class="line">        mOrderPizza = <span class="keyword">new</span> <span class="title class_">NYOrderPizza</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-3抽象工厂模式"><a href="#5-3抽象工厂模式" class="headerlink" title="5.3抽象工厂模式"></a>5.3抽象工厂模式</h2><p>定义了一个接口用于创建相关或有依赖关系的对象族，而无需明确指定具体类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderPizza</span> &#123;</span><br><span class="line">    AbsFactory mFactory;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">OrderPizza</span><span class="params">(AbsFactory mFactory)</span> &#123;</span><br><span class="line">        setFactory(mFactory);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setFactory</span><span class="params">(AbsFactory mFactory)</span> &#123;</span><br><span class="line">        <span class="type">Pizza</span> <span class="variable">pizza</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        String ordertype;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.mFactory = mFactory;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            ordertype = gettype();</span><br><span class="line">            pizza = mFactory.CreatePizza(ordertype);</span><br><span class="line">            <span class="keyword">if</span> (pizza != <span class="literal">null</span>) &#123;</span><br><span class="line">                pizza.prepare();</span><br><span class="line">                pizza.bake();</span><br><span class="line">                pizza.cut();</span><br><span class="line">                pizza.box();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">while</span> (<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">gettype</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">BufferedReader</span> <span class="variable">strin</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(</span><br><span class="line">                    System.in));</span><br><span class="line">            System.out.println(<span class="string">&quot;input pizza type:&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> strin.readLine();</span><br><span class="line">            <span class="keyword">return</span> str;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AbsFactory</span> &#123;</span><br><span class="line">Pizza <span class="title function_">CreatePizza</span><span class="params">(String ordertype)</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LDFactory</span> <span class="keyword">implements</span> <span class="title class_">AbsFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Pizza <span class="title function_">CreatePizza</span><span class="params">(String ordertype)</span> &#123;</span><br><span class="line">        <span class="type">Pizza</span> <span class="variable">pizza</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (ordertype.equals(<span class="string">&quot;cheese&quot;</span>)) &#123;</span><br><span class="line">            pizza = <span class="keyword">new</span> <span class="title class_">LDCheesePizza</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ordertype.equals(<span class="string">&quot;pepper&quot;</span>)) &#123;</span><br><span class="line">            pizza = <span class="keyword">new</span> <span class="title class_">LDPepperPizza</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pizza;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NYFactory</span> <span class="keyword">implements</span> <span class="title class_">AbsFactory</span> &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Pizza <span class="title function_">CreatePizza</span><span class="params">(String ordertype)</span> &#123;</span><br><span class="line"><span class="type">Pizza</span> <span class="variable">pizza</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (ordertype.equals(<span class="string">&quot;cheese&quot;</span>)) &#123;</span><br><span class="line">pizza = <span class="keyword">new</span> <span class="title class_">NYCheesePizza</span>();</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (ordertype.equals(<span class="string">&quot;pepper&quot;</span>)) &#123;</span><br><span class="line">pizza = <span class="keyword">new</span> <span class="title class_">NYPepperPizza</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> pizza;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PizzaStroe</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        OrderPizza mOrderPizza;</span><br><span class="line">        mOrderPizza = <span class="keyword">new</span> <span class="title class_">OrderPizza</span>(<span class="keyword">new</span> <span class="title class_">LDFactory</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="6-命令模式"><a href="#6-命令模式" class="headerlink" title="6.命令模式"></a>6.命令模式</h1><h1 id="7-适配器模式"><a href="#7-适配器模式" class="headerlink" title="7.适配器模式"></a>7.适配器模式</h1><img src="/JeckFS/2020/07/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/11.png" class="" title="This is 11-th image."><p>对外作为一个Duck对象，经过适配后，其实调用的是WildTurkey中的方法。</p><h2 id="7-1定义"><a href="#7-1定义" class="headerlink" title="7.1定义"></a>7.1定义</h2><p>适配器模式：将一个类的接口转换成另一种接口，让原本接口不兼容的类可以兼容。</p><img src="/JeckFS/2020/07/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/12.png" class="" title="This is 12-th image."><p>从用户的角度看不到被适配者，是解耦的。<br>用户调用适配器转化出来的目标接口方法。<br>适配器再调用被适配者的相关接口和方法。<br>用户收到反馈接口，感觉只是和目标接口交互。</p><img src="/JeckFS/2020/07/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/13.png" class="" title="This is 13-th image."><img src="/JeckFS/2020/07/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/14.png" class="" title="This is 14-th image."><img src="/JeckFS/2020/07/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/15.png" class="" title="This is 15-th image."><img src="/JeckFS/2020/07/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/16.png" class="" title="This is 16-th image."><img src="/JeckFS/2020/07/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/17.png" class="" title="This is 17-th image."><img src="/JeckFS/2020/07/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/18.png" class="" title="This is 18-th image."><h2 id="7-2对象适配器与类适配器"><a href="#7-2对象适配器与类适配器" class="headerlink" title="7.2对象适配器与类适配器"></a>7.2对象适配器与类适配器</h2><p>对象适配器参见上述鸭子火鸡模型。<br>其适配器中传入的是被适配者的对象WildTurkey。</p><img src="/JeckFS/2020/07/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/19.png" class="" title="This is 19-th image."><img src="/JeckFS/2020/07/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/20.png" class="" title="This is 20-th image."><p>使用对象适配器更加灵活。<br>假设又需要适配狗：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Dog</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">wangWang</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ChinaDog</span> <span class="keyword">implements</span> <span class="title class_">Dog</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">wangWang</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;wang wang...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;I can run...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MethodDTO</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String methodName;</span><br><span class="line">    <span class="keyword">private</span> Class[] methodArgs;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MethodDTO</span><span class="params">(String methodName, Class[] methodArgs)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.methodName = methodName;</span><br><span class="line">        <span class="built_in">this</span>.methodArgs = methodArgs;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMethodName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> methodName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMethodName</span><span class="params">(String methodName)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.methodName = methodName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Class[] getMethodArgs() &#123;</span><br><span class="line">        <span class="keyword">return</span> methodArgs;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMethodArgs</span><span class="params">(Class[] methodArgs)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.methodArgs = methodArgs;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GeneralAdapter</span> <span class="keyword">implements</span> <span class="title class_">Duck</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Object o;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, MethodDTO&gt; map;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">GeneralAdapter</span><span class="params">(Object o, Map&lt;String, MethodDTO&gt; map)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.o = o;</span><br><span class="line">        <span class="built_in">this</span>.map = map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">quack</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> o.getClass().getMethod(map.get(<span class="string">&quot;quack&quot;</span>).getMethodName(), map.get(<span class="string">&quot;quack&quot;</span>).getMethodArgs());</span><br><span class="line">            method.invoke(o);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException | IllegalAccessException | InvocationTargetException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fly</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> o.getClass().getMethod(map.get(<span class="string">&quot;fly&quot;</span>).getMethodName(), map.get(<span class="string">&quot;fly&quot;</span>).getMethodArgs());</span><br><span class="line">            method.invoke(o);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException | InvocationTargetException | NoSuchMethodException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainTest2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Map&lt;String, MethodDTO&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;quack&quot;</span>, <span class="keyword">new</span> <span class="title class_">MethodDTO</span>(<span class="string">&quot;gobble&quot;</span>,<span class="literal">null</span>));</span><br><span class="line">        map.put(<span class="string">&quot;fly&quot;</span>, <span class="keyword">new</span> <span class="title class_">MethodDTO</span>(<span class="string">&quot;fly&quot;</span>,<span class="literal">null</span>));</span><br><span class="line">        <span class="type">GeneralAdapter</span> <span class="variable">turkeyAdapter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GeneralAdapter</span>(<span class="keyword">new</span> <span class="title class_">WildTurkey</span>(), map);</span><br><span class="line">        turkeyAdapter.quack();</span><br><span class="line">        turkeyAdapter.fly();</span><br><span class="line">        System.out.println(<span class="string">&quot;---------------------&quot;</span>);</span><br><span class="line">        Map&lt;String, MethodDTO&gt; map2 = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map2.put(<span class="string">&quot;quack&quot;</span>, <span class="keyword">new</span> <span class="title class_">MethodDTO</span>(<span class="string">&quot;wangWang&quot;</span>, <span class="literal">null</span>));</span><br><span class="line">        map2.put(<span class="string">&quot;fly&quot;</span>, <span class="keyword">new</span> <span class="title class_">MethodDTO</span>(<span class="string">&quot;run&quot;</span>, <span class="literal">null</span>));</span><br><span class="line">        <span class="type">GeneralAdapter</span> <span class="variable">dogAdapter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GeneralAdapter</span>(<span class="keyword">new</span> <span class="title class_">ChinaDog</span>(), map2);</span><br><span class="line">        dogAdapter.quack();</span><br><span class="line">        dogAdapter.fly();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 运行结果</span></span><br><span class="line"> Go Go</span><br><span class="line">I am flying a <span class="type">short</span> distance</span><br><span class="line">---------------------</span><br><span class="line">wang wang...</span><br><span class="line">I can run...</span><br></pre></td></tr></table></figure><p>从上述代码可以看到，只需要写一个通用适配器<code>GeneralAdapter</code>就可以适配任何类似叫、跑的动物。这也是对象适配器的灵活性所在。</p><p>类适配器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TurkeyAdapter2</span> <span class="keyword">extends</span> <span class="title class_">WildTurkey</span> <span class="keyword">implements</span> <span class="title class_">Duck</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">quack</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="built_in">super</span>.gobble();</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fly</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="built_in">super</span>.fly();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">GreenHeadDuck</span> <span class="variable">duck</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GreenHeadDuck</span>();</span><br><span class="line">        <span class="type">WildTurkey</span> <span class="variable">turkey</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WildTurkey</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">Duck</span> <span class="variable">duck2turkeyAdapter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TurkeyAdapter2</span>();</span><br><span class="line">        turkey.gobble();</span><br><span class="line">        turkey.fly();</span><br><span class="line">        duck.quack();</span><br><span class="line">        duck.fly();</span><br><span class="line">        duck2turkeyAdapter.quack();</span><br><span class="line">        duck2turkeyAdapter.fly();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-3从枚举器到迭代器的适配"><a href="#7-3从枚举器到迭代器的适配" class="headerlink" title="7.3从枚举器到迭代器的适配"></a>7.3从枚举器到迭代器的适配</h2><img src="/JeckFS/2020/07/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/21.png" class="" title="This is 21-th image."><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EnumerationIterator</span> <span class="keyword">implements</span> <span class="title class_">Iterator</span>&lt;Object&gt; &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Enumeration enumeration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">EnumerationIterator</span><span class="params">(Enumeration enumeration)</span></span><br><span class="line">&#123;</span><br><span class="line"> <span class="built_in">this</span>.enumeration= enumeration;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> enumeration.hasMoreElements();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">next</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> enumeration.nextElement();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnsupportedOperationException</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>适配器模式与装饰者模式的区别</strong><br>类图结构不同<br>功能不同</p><h1 id="8-外观模式"><a href="#8-外观模式" class="headerlink" title="8.外观模式"></a>8.外观模式</h1><h1 id="9-模板模式"><a href="#9-模板模式" class="headerlink" title="9.模板模式"></a>9.模板模式</h1><h2 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h2><p>泡咖啡与泡茶的算法：</p><p>泡咖啡步骤：<br>水烧开<br>冲泡咖啡粉<br>把咖啡倒入杯子<br>加糖和牛奶</p><p>泡茶步骤：<br>水烧开<br>冲泡茶叶<br>把茶水倒入杯子<br>加柠檬</p><p>模板模式的类图：</p><img src="/JeckFS/2020/07/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/22.png" class="" title="This is 22-th image."><p>定义：封装了一个算法步骤，并允许子类为一个或多个步骤方法提供实现。</p><p>模板模式可以使子类在不改变算法结构的情况下，重新定义算法中某些步骤。</p><p>通用模板模式的类结构：</p><img src="/JeckFS/2020/07/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/23.png" class="" title="This is 23-th image."><p>templateMethod()：final方法，封装着实现的步骤，每个步骤对应类中的一个方法，如上述prepareRecipe()。<br>AbsOperation()：子类个性化实现的方法。<br>concreteOp()：子类通用的方法<br>hook()：超类提供了默认的实现方法，子类可以重写该方法，也可以不重写。</p><h1 id="10-迭代器模式"><a href="#10-迭代器模式" class="headerlink" title="10.迭代器模式"></a>10.迭代器模式</h1><h1 id="11-组合模式"><a href="#11-组合模式" class="headerlink" title="11.组合模式"></a>11.组合模式</h1><h1 id="12-状态模式"><a href="#12-状态模式" class="headerlink" title="12.状态模式"></a>12.状态模式</h1><p><strong>糖果机项目：</strong></p><p>糖果机状态:<br>待机<br>投入一元硬币<br>转动把手<br>滑落一颗糖<br>待机(根据机器内糖果库存情况，是否提示售罄)</p><p>提供的功能：<br>塞硬币<br>退钱<br>转动把手</p><p>传统做法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CandyMachine</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">SoldOutState</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">//售罄</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">OnReadyState</span> <span class="operator">=</span> <span class="number">1</span>; <span class="comment">//待机</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">HasCoin</span> <span class="operator">=</span> <span class="number">2</span>;      <span class="comment">//用户投入硬币</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">SoldState</span> <span class="operator">=</span> <span class="number">3</span>;    <span class="comment">//用户转动把手，进入售出状态</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="variable">state</span> <span class="operator">=</span> SoldOutState; <span class="comment">//当前机器处于什么状态</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">CandyMachine</span><span class="params">(<span class="type">int</span> count)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.count = count;</span><br><span class="line"><span class="keyword">if</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">state = OnReadyState;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertCoin</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">switch</span> (state) &#123;</span><br><span class="line"><span class="keyword">case</span> SoldOutState:</span><br><span class="line">System.out.println(<span class="string">&quot;you can&#x27;t insert coin,the machine sold out!&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> OnReadyState:</span><br><span class="line">state = HasCoin;</span><br><span class="line">System.out.println(<span class="string">&quot;you have inserted a coin,next,please turn crank!&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> HasCoin:</span><br><span class="line">System.out.println(<span class="string">&quot;you can&#x27;t insert another coin!&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> SoldState:</span><br><span class="line">System.out.println(<span class="string">&quot;please wait!we are giving you a candy!&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">returnCoin</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">switch</span> (state) &#123;</span><br><span class="line"><span class="keyword">case</span> SoldOutState:</span><br><span class="line">System.out.println(<span class="string">&quot;you can&#x27;t return,you haven&#x27;t inserted a coin yet!&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> OnReadyState:</span><br><span class="line">System.out.println(<span class="string">&quot;you haven&#x27;t inserted a coin yet!&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> HasCoin:</span><br><span class="line">System.out.println(<span class="string">&quot;coin return!&quot;</span>);</span><br><span class="line">state = OnReadyState;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> SoldState:</span><br><span class="line">System.out.println(<span class="string">&quot;sorry,you already have turned the crank!&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">turnCrank</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">switch</span> (state) &#123;</span><br><span class="line"><span class="keyword">case</span> SoldOutState:</span><br><span class="line">System.out.println(<span class="string">&quot;you turned,but there are no candies!&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> OnReadyState:</span><br><span class="line">System.out.println(<span class="string">&quot;you turned,but you haven&#x27;t inserted a coin!&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> HasCoin:</span><br><span class="line">System.out.println(<span class="string">&quot;crank turn...!&quot;</span>);</span><br><span class="line">state = SoldState;</span><br><span class="line">dispense();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> SoldState:</span><br><span class="line">System.out.println(<span class="string">&quot;we are giving you a candy,turning another get nothing,!&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//机器内部分配糖果</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">dispense</span><span class="params">()</span> &#123;</span><br><span class="line">count = count - <span class="number">1</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;a candy rolling out!&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">state = OnReadyState;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Oo,out of candies&quot;</span>);</span><br><span class="line">state = SoldOutState;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printstate</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">switch</span> (state) &#123;</span><br><span class="line"><span class="keyword">case</span> SoldOutState:</span><br><span class="line">System.out.println(<span class="string">&quot;***SoldOutState***&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> OnReadyState:</span><br><span class="line">System.out.println(<span class="string">&quot;***OnReadyState***&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> HasCoin:</span><br><span class="line">System.out.println(<span class="string">&quot;***HasCoin***&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> SoldState:</span><br><span class="line">System.out.println(<span class="string">&quot;***SoldState***&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainTest</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">CandyMachine mCandyMachine=<span class="keyword">new</span> <span class="title class_">CandyMachine</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">mCandyMachine.printstate();</span><br><span class="line"></span><br><span class="line">mCandyMachine.insertCoin();</span><br><span class="line">mCandyMachine.printstate();</span><br><span class="line">mCandyMachine.turnCrank();</span><br><span class="line">mCandyMachine.printstate();</span><br><span class="line"></span><br><span class="line">mCandyMachine.insertCoin();</span><br><span class="line">mCandyMachine.printstate();</span><br><span class="line">mCandyMachine.turnCrank();</span><br><span class="line">mCandyMachine.printstate();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 运行结果</span></span><br><span class="line">***OnReadyState***</span><br><span class="line">you have inserted a coin,next,please turn crank!</span><br><span class="line">***HasCoin***</span><br><span class="line">crank turn...!</span><br><span class="line">a candy rolling out!</span><br><span class="line">Oo,out of candies</span><br><span class="line">***SoldOutState***</span><br><span class="line">you can<span class="string">&#x27;t insert coin,the machine sold out!</span></span><br><span class="line"><span class="string">***SoldOutState***</span></span><br><span class="line"><span class="string">you turned,but there are no candies!</span></span><br><span class="line"><span class="string">***SoldOutState***</span></span><br></pre></td></tr></table></figure></p><p><strong>项目新需求的困惑：</strong><br>【新需求】加入游戏元素：有10%的概率可以拿到2粒糖果</p><ul><li>加入获奖状态，会变更糖果机的代码，违反了开闭原则。</li></ul><p>在不改变糖果机源代码的前提下，如何实现新功能？</p><p><strong>状态模式原理和解决方案：</strong></p><img src="/JeckFS/2020/07/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/26.png" class="" title="This is 26-th image."><p>针对不同的状态，会提供相应的行为。或者说不同的动作在不同的状态下表现出不同的行为。将不同状态下的不同行为内聚化(将状态局部化成一个对象，每个对象定义具体的表现行为)。</p><img src="/JeckFS/2020/07/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/27.png" class="" title="This is 27-th image."><p>状态模式定义：能根据内部状态的变化，改变对象的行为，看起来好像修改了类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 状态接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">State</span> &#123;</span><br><span class="line"> <span class="keyword">void</span> <span class="title function_">insertCoin</span><span class="params">()</span>;</span><br><span class="line"> <span class="keyword">void</span> <span class="title function_">returnCoin</span><span class="params">()</span>;</span><br><span class="line"> <span class="keyword">void</span> <span class="title function_">turnCrank</span><span class="params">()</span>;</span><br><span class="line"> <span class="keyword">void</span> <span class="title function_">dispense</span><span class="params">()</span>;</span><br><span class="line"> <span class="keyword">void</span> <span class="title function_">printstate</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// HasCoinState</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HasCoinState</span> <span class="keyword">implements</span> <span class="title class_">State</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> CandyMachine mCandyMachine;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HasCoinState</span><span class="params">(CandyMachine mCandyMachine)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.mCandyMachine = mCandyMachine;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertCoin</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;you can&#x27;t insert another coin!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">returnCoin</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;coin return!&quot;</span>);</span><br><span class="line">        mCandyMachine.setState(mCandyMachine.mOnReadyState);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">turnCrank</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;crank turn...!&quot;</span>);</span><br><span class="line">        <span class="type">Random</span> <span class="variable">ranwinner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">winner</span> <span class="operator">=</span> ranwinner.nextInt(<span class="number">10</span>);</span><br><span class="line">        <span class="keyword">if</span> (winner == <span class="number">0</span>) &#123;</span><br><span class="line">            mCandyMachine.setState(mCandyMachine.mWinnerState);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            mCandyMachine.setState(mCandyMachine.mSoldState);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dispense</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printstate</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;***HasCoin***&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// OnReadyState</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OnReadyState</span> <span class="keyword">implements</span> <span class="title class_">State</span> &#123;</span><br><span class="line"><span class="keyword">private</span> CandyMachine mCandyMachine;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">OnReadyState</span><span class="params">(CandyMachine mCandyMachine)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">this</span>.mCandyMachine=mCandyMachine;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertCoin</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;you have inserted a coin,next,please turn crank!&quot;</span>);</span><br><span class="line">mCandyMachine.setState(mCandyMachine.mHasCoin);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">returnCoin</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;you haven&#x27;t inserted a coin yet!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">turnCrank</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;you turned,but you haven&#x27;t inserted a coin!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dispense</span><span class="params">()</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printstate</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;***OnReadyState***&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// SoldOutState</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SoldOutState</span> <span class="keyword">implements</span> <span class="title class_">State</span> &#123;</span><br><span class="line"><span class="keyword">private</span> CandyMachine mCandyMachine;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">SoldOutState</span><span class="params">(CandyMachine mCandyMachine)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.mCandyMachine=mCandyMachine;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertCoin</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;you can&#x27;t insert coin,the machine sold out!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">returnCoin</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;you can&#x27;t return,you haven&#x27;t inserted a coin yet!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">turnCrank</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;you turned,but there are no candies!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dispense</span><span class="params">()</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printstate</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;***SoldOutState***&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// SoldState</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SoldState</span> <span class="keyword">implements</span> <span class="title class_">State</span> &#123;</span><br><span class="line"><span class="keyword">private</span> CandyMachine mCandyMachine;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">SoldState</span><span class="params">(CandyMachine mCandyMachine)</span>&#123;</span><br><span class="line"><span class="built_in">this</span>.mCandyMachine=mCandyMachine;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertCoin</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;please wait!we are giving you a candy!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">returnCoin</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;you haven&#x27;t inserted a coin yet!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">turnCrank</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;we are giving you a candy,turning another get nothing,!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dispense</span><span class="params">()</span> &#123;</span><br><span class="line">mCandyMachine.releaseCandy();</span><br><span class="line"><span class="keyword">if</span> (mCandyMachine.getCount() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">mCandyMachine.setState(mCandyMachine.mOnReadyState);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Oo,out of candies&quot;</span>);</span><br><span class="line">mCandyMachine.setState(mCandyMachine.mSoldOutState);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printstate</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;***SoldState***&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// WinnerState </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WinnerState</span> <span class="keyword">implements</span> <span class="title class_">State</span> &#123;</span><br><span class="line"><span class="keyword">private</span> CandyMachine mCandyMachine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">WinnerState</span><span class="params">(CandyMachine mCandyMachine)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.mCandyMachine = mCandyMachine;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertCoin</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;please wait!we are giving you a candy!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">returnCoin</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;you haven&#x27;t inserted a coin yet!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">turnCrank</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;we are giving you a candy,turning another get nothing,!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dispense</span><span class="params">()</span> &#123;</span><br><span class="line">mCandyMachine.releaseCandy();</span><br><span class="line"><span class="keyword">if</span> (mCandyMachine.getCount() == <span class="number">0</span>) &#123;</span><br><span class="line">mCandyMachine.setState(mCandyMachine.mSoldOutState);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;you are a winner!you get another candy!&quot;</span>);</span><br><span class="line">mCandyMachine.releaseCandy();</span><br><span class="line"><span class="keyword">if</span> (mCandyMachine.getCount() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">mCandyMachine.setState(mCandyMachine.mOnReadyState);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Oo,out of candies&quot;</span>);</span><br><span class="line">mCandyMachine.setState(mCandyMachine.mSoldOutState);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printstate</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;***WinnerState***&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 糖果机</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CandyMachine</span> &#123;</span><br><span class="line">State mSoldOutState;</span><br><span class="line">State mOnReadyState;</span><br><span class="line">State mHasCoin;</span><br><span class="line">State mSoldState;</span><br><span class="line">State mWinnerState;</span><br><span class="line"><span class="keyword">private</span> State state;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">CandyMachine</span><span class="params">(<span class="type">int</span> count)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.count = count;</span><br><span class="line">mSoldOutState = <span class="keyword">new</span> <span class="title class_">SoldOutState</span>(<span class="built_in">this</span>);</span><br><span class="line">mOnReadyState = <span class="keyword">new</span> <span class="title class_">OnReadyState</span>(<span class="built_in">this</span>);</span><br><span class="line">mHasCoin = <span class="keyword">new</span> <span class="title class_">HasCoinState</span>(<span class="built_in">this</span>);</span><br><span class="line">mSoldState = <span class="keyword">new</span> <span class="title class_">SoldState</span>(<span class="built_in">this</span>);</span><br><span class="line">mWinnerState = <span class="keyword">new</span> <span class="title class_">WinnerState</span>(<span class="built_in">this</span>);</span><br><span class="line"><span class="keyword">if</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">state = mOnReadyState;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">state = mSoldOutState;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setState</span><span class="params">(State state)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.state = state;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertCoin</span><span class="params">()</span> &#123;</span><br><span class="line">state.insertCoin();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">returnCoin</span><span class="params">()</span> &#123;</span><br><span class="line">state.returnCoin();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">turnCrank</span><span class="params">()</span> &#123;</span><br><span class="line">state.turnCrank();</span><br><span class="line">state.dispense();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">releaseCandy</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">count = count - <span class="number">1</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;a candy rolling out!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCount</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printstate</span><span class="params">()</span> &#123;</span><br><span class="line">state.printstate();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainTest</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">CandyMachine</span> <span class="variable">mCandyMachine</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CandyMachine</span>(<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">mCandyMachine.printstate();</span><br><span class="line"></span><br><span class="line">mCandyMachine.insertCoin();</span><br><span class="line">mCandyMachine.printstate();</span><br><span class="line">mCandyMachine.turnCrank();</span><br><span class="line">mCandyMachine.printstate();</span><br><span class="line"></span><br><span class="line">mCandyMachine.insertCoin();</span><br><span class="line">mCandyMachine.printstate();</span><br><span class="line">mCandyMachine.turnCrank();</span><br><span class="line">mCandyMachine.printstate();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>思考题：</strong></p><ul><li>策略模式、状态模式和模板模式各自的含义</li><li>策略模式一般情况下可以作为状态模式的基础</li><li>模板模式与状态模式的差异</li></ul><h1 id="13-代理模式"><a href="#13-代理模式" class="headerlink" title="13.代理模式"></a>13.代理模式</h1><h2 id="13-1-远程代理"><a href="#13-1-远程代理" class="headerlink" title="13.1 远程代理"></a>13.1 远程代理</h2><p>定义：远程对象的本地代表，通过它可以让远程对象当本地对象来调用。</p><p>远程代理通过网络和真正的远程对象沟通信息。</p><img src="/JeckFS/2020/07/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/24.png" class="" title="This is 24-th image."><img src="/JeckFS/2020/07/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/25.png" class="" title="This is 25-th image."><p>代理模式：为一个对象提供一个替身，以控制对这个对象的访问。<br>被代理的对象可以是远程对象、创建开销大的对象或需要安全控制的对象。<br>代理模式有很多变体，都是为了控制与管理对象访问。</p><h2 id="13-2-Java-RMI介绍"><a href="#13-2-Java-RMI介绍" class="headerlink" title="13.2 Java RMI介绍"></a>13.2 Java RMI介绍</h2><p>RMI远程方法调用时计算机之间通过网络实现对象调用的一种通讯机制。本地调用远程方法像调用自己本地的方法一样方便。使用这种机制，一台计算机上的对象可以调用另外一台计算机上的对象来获取远程数据。RMI被设计成一种<strong>面向对象</strong>开发方式，允许程序员<strong>使用远程对象来实现通信</strong>。</p><ol><li><p>制作远程接口：接口文件<br>接口文件用来给近端使用，里面包含了调用远程的具体方法的方法名称、参数等。</p><p>接口中返回的参数必须是<strong>可序列</strong>化的。</p></li><li>远程接口的实现：Service文件<br>用于远端(服务端)。</li><li>RMI服务端注册，开启服务</li><li>RMI代理端通过RMI查询到服务端，建立联系，通过接口调用远程方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 接口文件，里面封装了需要调用的远程方法</span></span><br><span class="line"><span class="keyword">import</span> java.rmi.Remote;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MyRemote</span> <span class="keyword">extends</span> <span class="title class_">Remote</span>&#123;</span><br><span class="line">    <span class="comment">// 由于是网络传输，可能会网络拥塞超时等情况，需要抛出异常</span></span><br><span class="line">String <span class="title function_">sayHello</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 远程服务端(Service文件)，实现接口中的方法，并在RMI中注册服务</span></span><br><span class="line"><span class="keyword">import</span> java.rmi.Naming;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.UnicastRemoteObject;</span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;serial&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyRemoteImpl</span> <span class="keyword">extends</span> <span class="title class_">UnicastRemoteObject</span> <span class="keyword">implements</span> <span class="title class_">MyRemote</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="title function_">MyRemoteImpl</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sayHello</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">MyRemote</span> <span class="variable">service</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyRemoteImpl</span>();</span><br><span class="line">            LocateRegistry.createRegistry(<span class="number">6600</span>);</span><br><span class="line">            Naming.rebind(<span class="string">&quot;rmi://127.0.0.1:6600/RemoteHello&quot;</span>, service);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(e.toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户端</span></span><br><span class="line"><span class="keyword">import</span> java.rmi.Naming;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyRemoteClient</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">MyRemoteClient</span>().go();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">go</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">MyRemote</span> <span class="variable">service</span> <span class="operator">=</span> (MyRemote) Naming.lookup(<span class="string">&quot;rmi://127.0.0.1:6600/RemoteHello&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> service.sayHello();</span><br><span class="line">            System.out.println(s);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="13-3-糖果机项目示例"><a href="#13-3-糖果机项目示例" class="headerlink" title="13.3 糖果机项目示例"></a>13.3 糖果机项目示例</h2><p>糖果机仍然使用状态模式实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 所有的状态对象需要在网络中传输，需要实现Serializable接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">State</span> <span class="keyword">extends</span> <span class="title class_">Serializable</span>&#123;</span><br><span class="line"> <span class="keyword">void</span> <span class="title function_">insertCoin</span><span class="params">()</span>;</span><br><span class="line"> <span class="keyword">void</span> <span class="title function_">returnCoin</span><span class="params">()</span>;</span><br><span class="line"> <span class="keyword">void</span> <span class="title function_">turnCrank</span><span class="params">()</span>;</span><br><span class="line"> <span class="keyword">void</span> <span class="title function_">dispense</span><span class="params">()</span>;</span><br><span class="line"> <span class="keyword">void</span> <span class="title function_">printstate</span><span class="params">()</span>;</span><br><span class="line"> String <span class="title function_">getstatename</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// HasCoinState</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HasCoinState</span> <span class="keyword">implements</span> <span class="title class_">State</span> &#123;</span><br><span class="line">    <span class="comment">// 加入transient关键字,糖果机对象不参与序列化传输</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> CandyMachine mCandyMachine;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HasCoinState</span><span class="params">(CandyMachine mCandyMachine)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.mCandyMachine = mCandyMachine;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertCoin</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;you can&#x27;t insert another coin!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">returnCoin</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;coin return!&quot;</span>);</span><br><span class="line">        mCandyMachine.setState(mCandyMachine.mOnReadyState);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">turnCrank</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;crank turn...!&quot;</span>);</span><br><span class="line">        <span class="type">Random</span> <span class="variable">ranwinner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">winner</span> <span class="operator">=</span> ranwinner.nextInt(<span class="number">10</span>);</span><br><span class="line">        <span class="keyword">if</span> (winner == <span class="number">0</span>) &#123;</span><br><span class="line">            mCandyMachine.setState(mCandyMachine.mWinnerState);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            mCandyMachine.setState(mCandyMachine.mSoldState);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dispense</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printstate</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;***HasCoin***&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getstatename</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;HasCoin State&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// OnReadyState</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OnReadyState</span> <span class="keyword">implements</span> <span class="title class_">State</span> &#123;</span><br><span class="line">    <span class="comment">// 加入transient关键字,糖果机对象不参与序列化传输</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> CandyMachine mCandyMachine;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">OnReadyState</span><span class="params">(CandyMachine mCandyMachine)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.mCandyMachine = mCandyMachine;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertCoin</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;you have inserted a coin,next,please turn crank!&quot;</span>);</span><br><span class="line">        mCandyMachine.setState(mCandyMachine.mHasCoin);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">returnCoin</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;you haven&#x27;t inserted a coin yet!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">turnCrank</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;you turned,but you haven&#x27;t inserted a coin!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dispense</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printstate</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;***OnReadyState***&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getstatename</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;OnReadyState&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// SoldOutState</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SoldOutState</span> <span class="keyword">implements</span> <span class="title class_">State</span> &#123;</span><br><span class="line"><span class="comment">// 加入transient关键字,糖果机对象不参与序列化传输</span></span><br><span class="line"><span class="keyword">private</span>  <span class="keyword">transient</span> CandyMachine mCandyMachine;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">SoldOutState</span><span class="params">(CandyMachine mCandyMachine)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">this</span>.mCandyMachine=mCandyMachine;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertCoin</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;you can&#x27;t insert coin,the machine sold out!&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">returnCoin</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;you can&#x27;t return,you haven&#x27;t inserted a coin yet!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">turnCrank</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;you turned,but there are no candies!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dispense</span><span class="params">()</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printstate</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;***SoldOutState***&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getstatename</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;SoldOutState&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// SoldState</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SoldState</span> <span class="keyword">implements</span> <span class="title class_">State</span> &#123;</span><br><span class="line"><span class="comment">// 加入transient关键字,糖果机对象不参与序列化传输</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> CandyMachine mCandyMachine;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">SoldState</span><span class="params">(CandyMachine mCandyMachine)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">this</span>.mCandyMachine=mCandyMachine;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertCoin</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;please wait!we are giving you a candy!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">returnCoin</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;you haven&#x27;t inserted a coin yet!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">turnCrank</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;we are giving you a candy,turning another get nothing,!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dispense</span><span class="params">()</span> &#123;</span><br><span class="line">mCandyMachine.releaseCandy();</span><br><span class="line"><span class="keyword">if</span> (mCandyMachine.getCount() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">mCandyMachine.setState(mCandyMachine.mOnReadyState);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Oo,out of candies&quot;</span>);</span><br><span class="line">mCandyMachine.setState(mCandyMachine.mSoldOutState);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printstate</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;***SoldState***&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getstatename</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;SoldState&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// WinnerState</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WinnerState</span> <span class="keyword">implements</span> <span class="title class_">State</span> &#123;</span><br><span class="line">    <span class="comment">// 加入transient关键字,糖果机对象不参与序列化传输</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> CandyMachine mCandyMachine;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">WinnerState</span><span class="params">(CandyMachine mCandyMachine)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.mCandyMachine = mCandyMachine;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertCoin</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;please wait!we are giving you a candy!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">returnCoin</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;you haven&#x27;t inserted a coin yet!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">turnCrank</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;we are giving you a candy,turning another get nothing,!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dispense</span><span class="params">()</span> &#123;</span><br><span class="line">        mCandyMachine.releaseCandy();</span><br><span class="line">        <span class="keyword">if</span> (mCandyMachine.getCount() == <span class="number">0</span>) &#123;</span><br><span class="line">            mCandyMachine.setState(mCandyMachine.mSoldOutState);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;you are a winner!you get another candy!&quot;</span>);</span><br><span class="line">            mCandyMachine.releaseCandy();</span><br><span class="line">            <span class="keyword">if</span> (mCandyMachine.getCount() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                mCandyMachine.setState(mCandyMachine.mOnReadyState);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Oo,out of candies&quot;</span>);</span><br><span class="line">                mCandyMachine.setState(mCandyMachine.mSoldOutState);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printstate</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;***WinnerState***&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getstatename</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;WinnerState&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 接口文件</span></span><br><span class="line"><span class="keyword">import</span> java.rmi.Remote;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CandyMachineRemote</span> <span class="keyword">extends</span> <span class="title class_">Remote</span>&#123;</span><br><span class="line"> String  <span class="title function_">getLocation</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException;</span><br><span class="line"> <span class="type">int</span> <span class="title function_">getCount</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException;</span><br><span class="line"> State <span class="title function_">getstate</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 服务器端(Service文件)</span></span><br><span class="line"><span class="keyword">import</span> java.rmi.Naming;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RemoteMainTest</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="type">CandyMachine</span> <span class="variable">service</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CandyMachine</span>(<span class="string">&quot;test1&quot;</span>, <span class="number">7</span>);</span><br><span class="line">LocateRegistry.createRegistry(<span class="number">6602</span>);</span><br><span class="line">Naming.rebind(<span class="string">&quot;rmi://127.0.0.1:6602/test1&quot;</span>, service);</span><br><span class="line">service.insertCoin();</span><br><span class="line">service = <span class="keyword">new</span> <span class="title class_">CandyMachine</span>(<span class="string">&quot;test2&quot;</span>, <span class="number">5</span>);</span><br><span class="line">Naming.rebind(<span class="string">&quot;rmi://127.0.0.1:6602/test2&quot;</span>, service);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">System.out.println(e.toString());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户端</span></span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Monitor</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;CandyMachineRemote&gt; candyMachinelst;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Monitor</span><span class="params">()</span> &#123;</span><br><span class="line">        candyMachinelst = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addMachine</span><span class="params">(CandyMachineRemote mCandyMachine)</span> &#123;</span><br><span class="line">        candyMachinelst.add(mCandyMachine);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">report</span><span class="params">()</span> &#123;</span><br><span class="line">        CandyMachineRemote mCandyMachine;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, len = candyMachinelst.size(); i &lt; len; i++) &#123;</span><br><span class="line">            mCandyMachine = candyMachinelst.get(i);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Machine Loc:&quot;</span> + mCandyMachine.getLocation());</span><br><span class="line">                System.out.println(<span class="string">&quot;Machine Candy count:&quot;</span> + mCandyMachine.getCount());</span><br><span class="line">                System.out.println(<span class="string">&quot;Machine State:&quot;</span> + mCandyMachine.getstate().getstatename());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 测试类</span></span><br><span class="line"><span class="keyword">import</span> java.rmi.Naming;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainTest</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">Monitor</span> <span class="variable">mMonitor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Monitor</span>();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="type">CandyMachineRemote</span> <span class="variable">mCandyMachine</span> <span class="operator">=</span> (CandyMachineRemote) Naming.lookup(<span class="string">&quot;rmi://127.0.0.1:6602/test1&quot;</span>);</span><br><span class="line">mMonitor.addMachine(mCandyMachine);</span><br><span class="line">mCandyMachine = (CandyMachineRemote) Naming.lookup(<span class="string">&quot;rmi://127.0.0.1:6602/test2&quot;</span>);</span><br><span class="line">mMonitor.addMachine(mCandyMachine);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">mMonitor.report();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="13-4-几种常见的代理模式"><a href="#13-4-几种常见的代理模式" class="headerlink" title="13.4 几种常见的代理模式"></a>13.4 几种常见的代理模式</h2><h3 id="13-4-1-虚拟代理"><a href="#13-4-1-虚拟代理" class="headerlink" title="13.4.1 虚拟代理"></a>13.4.1 虚拟代理</h3><p>虚拟代理位创建开销大的对象提供代理服务。<br>真正的对象在创建前和创建中时，由虚拟代理来扮演替身。</p><p>如Android的在线图片加载类。如微博app在打开图片时，有一个转动的圈，提示加载中，或者加载了百分之多少。这种就是虚拟代理来实现的。即在网络将数据传递过来之前，进行一些友好的提示。</p><h3 id="13-4-2-动态代理-与-保护代理"><a href="#13-4-2-动态代理-与-保护代理" class="headerlink" title="13.4.2 动态代理 与 保护代理"></a>13.4.2 动态代理 与 保护代理</h3><img src="/JeckFS/2020/07/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/28.png" class="" title="This is 28-th image."><p>“找对象项目”示例：<br>每个人可以填写自己的个人信息、兴趣爱好。其他人进行评分。<br>这里有一个权限控制的问题，自己不能给自己打分。其他人不能修改自己的个人信息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">PersonBean</span> &#123;</span><br><span class="line">String <span class="title function_">getName</span><span class="params">()</span>;</span><br><span class="line">String <span class="title function_">getGender</span><span class="params">()</span>;</span><br><span class="line">String <span class="title function_">getInterests</span><span class="params">()</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">getHotOrNotRating</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span>;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">setGender</span><span class="params">(String gender)</span>;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">setInterests</span><span class="params">(String interests)</span>;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">setHotOrNotRating</span><span class="params">(<span class="type">int</span> rating)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 真实对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PersonBeanImpl</span> <span class="keyword">implements</span> <span class="title class_">PersonBean</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String gender;</span><br><span class="line">    <span class="keyword">private</span> String interests;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> rating; <span class="comment">// 评分</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">ratingcount</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">// 评分的次数</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getGender</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getInterests</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> interests;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getHotOrNotRating</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (ratingcount == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> (rating / ratingcount);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setGender</span><span class="params">(String gender)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setInterests</span><span class="params">(String interests)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.interests = interests;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setHotOrNotRating</span><span class="params">(<span class="type">int</span> rating)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.rating = rating;</span><br><span class="line">        ratingcount++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自己</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OwnerInvocationHandler</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span> &#123;</span><br><span class="line">    PersonBean person;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">OwnerInvocationHandler</span><span class="params">(PersonBean person)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.person = person;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="keyword">if</span> (method.getName().startsWith(<span class="string">&quot;get&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> method.invoke(person, args);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.getName().equals(<span class="string">&quot;setHotOrNotRating&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">IllegalAccessException</span>(); <span class="comment">// 自己不能对自己进行评估</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.getName().startsWith(<span class="string">&quot;set&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> method.invoke(person, args);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 其他人</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NonOwnerInvocationHandler</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span> &#123;</span><br><span class="line">    PersonBean person;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">NonOwnerInvocationHandler</span><span class="params">(PersonBean person)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.person = person;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="keyword">if</span> (method.getName().startsWith(<span class="string">&quot;get&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> method.invoke(person, args);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.getName().equals(<span class="string">&quot;setHotOrNotRating&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> method.invoke(person, args);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.getName().startsWith(<span class="string">&quot;set&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">IllegalAccessException</span>(); <span class="comment">// 其他人不能设置自己的信息</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MatchService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MatchService</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">PersonBean</span> <span class="variable">joe</span> <span class="operator">=</span> getPersonInfo(<span class="string">&quot;joe&quot;</span>, <span class="string">&quot;male&quot;</span>, <span class="string">&quot;running&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">PersonBean</span> <span class="variable">OwnerProxy</span> <span class="operator">=</span> getOwnerProxy(joe);</span><br><span class="line">        System.out.println(<span class="string">&quot;Name is &quot;</span> + OwnerProxy.getName());</span><br><span class="line">        System.out.println(<span class="string">&quot;Interests is &quot;</span> + OwnerProxy.getInterests());</span><br><span class="line">        OwnerProxy.setInterests(<span class="string">&quot;Bowling&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Interests are &quot;</span> + OwnerProxy.getInterests());</span><br><span class="line">        OwnerProxy.setHotOrNotRating(<span class="number">50</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Rating is &quot;</span> + OwnerProxy.getHotOrNotRating());</span><br><span class="line">        OwnerProxy.setHotOrNotRating(<span class="number">40</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Rating is &quot;</span> + OwnerProxy.getHotOrNotRating());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;**************&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">PersonBean</span> <span class="variable">nonOwnerProxy</span> <span class="operator">=</span> getNonOwnerProxy(joe);</span><br><span class="line">        System.out.println(<span class="string">&quot;Name is &quot;</span> + nonOwnerProxy.getName());</span><br><span class="line">        System.out.println(<span class="string">&quot;Interests are &quot;</span> + nonOwnerProxy.getInterests());</span><br><span class="line">        nonOwnerProxy.setInterests(<span class="string">&quot;haha&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Interests are &quot;</span> + nonOwnerProxy.getInterests());</span><br><span class="line">        nonOwnerProxy.setHotOrNotRating(<span class="number">60</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Rating is &quot;</span> + nonOwnerProxy.getHotOrNotRating());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    PersonBean <span class="title function_">getPersonInfo</span><span class="params">(String name, String gender, String interests)</span> &#123;</span><br><span class="line">        <span class="type">PersonBean</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PersonBeanImpl</span>();</span><br><span class="line">        person.setName(name);</span><br><span class="line">        person.setGender(gender);</span><br><span class="line">        person.setInterests(interests);</span><br><span class="line">        <span class="keyword">return</span> person;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 自己访问时使用的代理</span></span><br><span class="line">    PersonBean <span class="title function_">getOwnerProxy</span><span class="params">(PersonBean person)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (PersonBean) Proxy.newProxyInstance(person.getClass()</span><br><span class="line">                        .getClassLoader(), person.getClass().getInterfaces(),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">OwnerInvocationHandler</span>(person));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 其他人访问时使用的代理</span></span><br><span class="line">    PersonBean <span class="title function_">getNonOwnerProxy</span><span class="params">(PersonBean person)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (PersonBean) Proxy.newProxyInstance(person.getClass()</span><br><span class="line">                        .getClassLoader(), person.getClass().getInterfaces(),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">NonOwnerInvocationHandler</span>(person));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MatchService</span> <span class="variable">mMatchService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MatchService</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 运行结果</span></span><br><span class="line">Name is joe</span><br><span class="line">Interests is running</span><br><span class="line">Interests are Bowling</span><br><span class="line">Rating is <span class="number">0</span></span><br><span class="line">Rating is <span class="number">0</span></span><br><span class="line">**************</span><br><span class="line">Name is joe</span><br><span class="line">Interests are Bowling</span><br><span class="line">Interests are Bowling</span><br><span class="line">Rating is <span class="number">60</span></span><br></pre></td></tr></table></figure><h3 id="13-4-3-几种变体"><a href="#13-4-3-几种变体" class="headerlink" title="13.4.3 几种变体"></a>13.4.3 几种变体</h3><p><strong>防火墙代理</strong>：内网主机通过防火墙对外进行访问，外部进入内网进行访问控制。<br><strong>缓存代理</strong>：将数据缓存在本地，使用时先看本地有没有，没有再去获取。<br><strong>智能引用代理</strong>：在访问被代理对象时，增加了其他的功能，如统计，打印日志等<br><strong>同步代理</strong>：主要是在多线程环境下，同步时使用的对象。<br><strong>写入时复制代理</strong>：只有在写入时，才会进行复制操作。</p><hr><p><strong>代理模式和装饰者模式的差异：</strong><br>装饰者模式，装饰后会添加新功能<br>代理模式目的是对目标对象访问的控制和管理</p><hr><h1 id="14-复合模式"><a href="#14-复合模式" class="headerlink" title="14.复合模式"></a>14.复合模式</h1><h1 id="15-桥接模式"><a href="#15-桥接模式" class="headerlink" title="15.桥接模式"></a>15.桥接模式</h1><h1 id="16-生成器模式"><a href="#16-生成器模式" class="headerlink" title="16.生成器模式"></a>16.生成器模式</h1><h1 id="17-责任链模式"><a href="#17-责任链模式" class="headerlink" title="17.责任链模式"></a>17.责任链模式</h1><p>“购买请求决策项目”示例：</p><img src="/JeckFS/2020/07/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/29.png" class="" title="This is 29-th image."><img src="/JeckFS/2020/07/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/30.png" class="" title="This is 30-th image."><img src="/JeckFS/2020/07/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/31.png" class="" title="This is 31-th image."><p>责任链模式：如果有多个对象都有机会处理请求，责任链可使请求的发送者和接受者解耦，请求沿着责任链传递，直到有一个对象处理了它为止。</p><p>责任链可以是环形的，也可以是树形的。</p><img src="/JeckFS/2020/07/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/32.png" class="" title="This is 32-th image."><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Client</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> PurchaseRequest <span class="title function_">sendRequst</span><span class="params">(<span class="type">int</span> Type, <span class="type">int</span> Number, <span class="type">float</span> Price)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PurchaseRequest</span>(Type, Number, Price);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 请求</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PurchaseRequest</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">Type</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">Number</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">float</span> <span class="variable">Price</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">ID</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">PurchaseRequest</span><span class="params">(<span class="type">int</span> Type, <span class="type">int</span> Number, <span class="type">float</span> Price)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.Type = Type;</span><br><span class="line">        <span class="built_in">this</span>.Number = Number;</span><br><span class="line">        <span class="built_in">this</span>.Price = Price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">GetType</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Type;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">float</span> <span class="title function_">GetSum</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Number * Price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">GetID</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">int</span>) (Math.random() * <span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Approver</span> &#123;</span><br><span class="line">    Approver successor;</span><br><span class="line">    String Name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Approver</span><span class="params">(String Name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.Name = Name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">ProcessRequest</span><span class="params">(PurchaseRequest request)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">SetSuccessor</span><span class="params">(Approver successor)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.successor = successor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 组长</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GroupApprover</span> <span class="keyword">extends</span> <span class="title class_">Approver</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">GroupApprover</span><span class="params">(String Name)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(Name + <span class="string">&quot; GroupLeader&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">ProcessRequest</span><span class="params">(PurchaseRequest request)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (request.GetSum() &lt; <span class="number">5000</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;**This request &quot;</span> + request.GetID() + <span class="string">&quot; will be handled by &quot;</span> + <span class="built_in">this</span>.Name + <span class="string">&quot; **&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            successor.ProcessRequest(request);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 部长</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DepartmentApprover</span> <span class="keyword">extends</span> <span class="title class_">Approver</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DepartmentApprover</span><span class="params">(String Name)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(Name + <span class="string">&quot; DepartmentLeader&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">ProcessRequest</span><span class="params">(PurchaseRequest request)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> ((<span class="number">5000</span> &lt;= request.GetSum()) &amp;&amp; (request.GetSum() &lt; <span class="number">10000</span>)) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;**This request &quot;</span> + request.GetID()</span><br><span class="line">                    + <span class="string">&quot; will be handled by &quot;</span> + <span class="built_in">this</span>.Name + <span class="string">&quot; **&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            successor.ProcessRequest(request);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 副总</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VicePresidentApprover</span> <span class="keyword">extends</span> <span class="title class_">Approver</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">VicePresidentApprover</span><span class="params">(String Name)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(Name + <span class="string">&quot; Vice President&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">ProcessRequest</span><span class="params">(PurchaseRequest request)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> ((<span class="number">10000</span> &lt;= request.GetSum()) &amp;&amp; (request.GetSum() &lt; <span class="number">50000</span>)) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;**This request &quot;</span> + request.GetID() + <span class="string">&quot; will be handled by &quot;</span> + <span class="built_in">this</span>.Name + <span class="string">&quot; **&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            successor.ProcessRequest(request);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 总裁</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PresidentApprover</span> <span class="keyword">extends</span> <span class="title class_">Approver</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">PresidentApprover</span><span class="params">(String Name)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(Name + <span class="string">&quot; President&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">ProcessRequest</span><span class="params">(PurchaseRequest request)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">50000</span> &lt;= request.GetSum()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;**This request &quot;</span> + request.GetID() + <span class="string">&quot; will be handled by &quot;</span> + <span class="built_in">this</span>.Name + <span class="string">&quot; **&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            successor.ProcessRequest(request);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Client</span> <span class="variable">mClient</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Client</span>();</span><br><span class="line">        <span class="type">Approver</span> <span class="variable">GroupLeader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GroupApprover</span>(<span class="string">&quot;Tom&quot;</span>);</span><br><span class="line">        <span class="type">Approver</span> <span class="variable">DepartmentLeader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DepartmentApprover</span>(<span class="string">&quot;Jerry&quot;</span>);</span><br><span class="line">        <span class="type">Approver</span> <span class="variable">VicePresident</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">VicePresidentApprover</span>(<span class="string">&quot;Kate&quot;</span>);</span><br><span class="line">        <span class="type">Approver</span> <span class="variable">President</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PresidentApprover</span>(<span class="string">&quot;Bush&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 环状责任链,将请求发送给任意一个节点都可以被处理掉</span></span><br><span class="line">        GroupLeader.SetSuccessor(VicePresident);</span><br><span class="line">        DepartmentLeader.SetSuccessor(President);</span><br><span class="line">        VicePresident.SetSuccessor(DepartmentLeader);</span><br><span class="line">        President.SetSuccessor(GroupLeader);</span><br><span class="line"></span><br><span class="line">        VicePresident.ProcessRequest(mClient.sendRequst(<span class="number">1</span>, <span class="number">100</span>, <span class="number">40</span>));</span><br><span class="line">        VicePresident.ProcessRequest(mClient.sendRequst(<span class="number">2</span>, <span class="number">200</span>, <span class="number">40</span>));</span><br><span class="line">        VicePresident.ProcessRequest(mClient.sendRequst(<span class="number">3</span>, <span class="number">300</span>, <span class="number">40</span>));</span><br><span class="line">        VicePresident.ProcessRequest(mClient.sendRequst(<span class="number">4</span>, <span class="number">400</span>, <span class="number">140</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/JeckFS/2020/07/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/33.png" class="" title="This is 33-th image."><img src="/JeckFS/2020/07/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/34.png" class="" title="This is 34-th image."><h1 id="18-蝇量模式"><a href="#18-蝇量模式" class="headerlink" title="18.蝇量模式"></a>18.蝇量模式</h1><h1 id="19-解释器模式"><a href="#19-解释器模式" class="headerlink" title="19.解释器模式"></a>19.解释器模式</h1><h1 id="20-中介者模式"><a href="#20-中介者模式" class="headerlink" title="20.中介者模式"></a>20.中介者模式</h1><h1 id="21-备忘录模式"><a href="#21-备忘录模式" class="headerlink" title="21.备忘录模式"></a>21.备忘录模式</h1><h1 id="22-原型模式"><a href="#22-原型模式" class="headerlink" title="22.原型模式"></a>22.原型模式</h1><h1 id="23-访问者模式"><a href="#23-访问者模式" class="headerlink" title="23.访问者模式"></a>23.访问者模式</h1>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>maven</title>
      <link href="/JeckFS/2020/07/20/maven/"/>
      <url>/JeckFS/2020/07/20/maven/</url>
      
        <content type="html"><![CDATA[<p>maven是一个自动化构建工具，用于整合多个模块。</p><ul><li>自动添加第三方jar包</li><li>自动管理jar包之间的依赖关系</li><li>使用继承对各模块jar包的版本控制</li><li>使用聚合一键安装各个子模块</li></ul><p>补充：开发过程中的目录结构与部署在服务器上的目录结构的对比：</p><img src="/JeckFS/2020/07/20/maven/1.png" class="" title="This is 1-th image."><h1 id="maven的目录结构："><a href="#maven的目录结构：" class="headerlink" title="maven的目录结构："></a>maven的目录结构：</h1><img src="/JeckFS/2020/07/20/maven/2.png" class="" title="This is 2-th image."><h1 id="maven的本地仓库："><a href="#maven的本地仓库：" class="headerlink" title="maven的本地仓库："></a>maven的本地仓库：</h1><p>默认在当前系统用户家目录.m2\repository<br>maven先在本地仓库中寻找插件，没有才会去联网下载。</p><p>仓库中保存的什么内容：</p><ul><li>maven自身需要的插件</li><li>第三方框架或工具的jar包</li><li><strong>自己开发的maven工程</strong></li></ul><p>在maven中使用本地仓库：</p><ul><li>maven安装目录\conf\settings.xml</li><li>在localRepository标签中配置本地仓库的位置</li></ul><h1 id="POM：Project-Object-Model项目对象模型"><a href="#POM：Project-Object-Model项目对象模型" class="headerlink" title="POM：Project Object Model项目对象模型"></a>POM：Project Object Model项目对象模型</h1><h1 id="坐标"><a href="#坐标" class="headerlink" title="坐标"></a>坐标</h1><ul><li>groupid：公司或组织域名倒序 + 项目名</li><li>artifactid：模块名</li><li>version：版本</li></ul><p>maven中的坐标与仓库中路径的对应关系：<br>如<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br></pre></td></tr></table></figure><br>在本地仓库目录中存在以下文件：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">org/springframework/spring-core/4.0.0.RELEASE/spring-core-4.0.0.RELEASE.jar</span><br></pre></td></tr></table></figure></p><h1 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h1><p><strong>依赖的范围：</strong></p><ul><li>compile范围依赖：<br>对主程序是否有效：有效<br>对测试程序是否有效：有效<br>是否参与打包：参与<br>是否参与部署：参与<br>典型例子：spring-core</li><li>test范围依赖<br>对主程序是否有效：无效<br>对测试程序是否有效：有效<br>是否参与打包：不参与<br>是否参与部署：不参与<br>典型例子：junit</li><li>provided范围依赖<br>对主程序是否有效：有效<br>对测试程序是否有效：有效<br>是否参与打包：不参与<br>是否参与部署：不参与<br>典型例子：servlet-api.jar</li></ul><img src="/JeckFS/2020/07/20/maven/3.png" class="" title="This is 3-th image."><p><strong>依赖的传递性：</strong></p><img src="/JeckFS/2020/07/20/maven/4.png" class="" title="This is 4-th image."><p>只有compile范围的jar包参与依赖传递，test，provided不参与。</p><p><strong>依赖的排除：</strong></p><p>排除的是间接依赖。比如spring-core依赖commons-logging，在当前项目中可以排除commons-logging。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span> </span><br><span class="line">   <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>依赖的原则：</strong></p><img src="/JeckFS/2020/07/20/maven/5.png" class="" title="This is 5-th image."><p><strong>统一管理依赖的版本：</strong></p><img src="/JeckFS/2020/07/20/maven/6.png" class="" title="This is 6-th image."><h1 id="maven生命周期"><a href="#maven生命周期" class="headerlink" title="maven生命周期"></a>maven生命周期</h1><p>当执行一条maven命令时，它前面的命令也会相继执行。</p><h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><p><strong>配置继承后，执行install命令时要先安装父工程。</strong></p><p>场景需求：统一管理各个模块工程中对junit依赖的版本。</p><ul><li>创建maven父工程，打包方式为pom<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>配置父工程中统一管理junit的依赖<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>子工程中声明对父工程的引用<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 指定从当前子工程的pom.xml文件出发，查找父工程的pom.xml的路径 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">relativePath</span>&gt;</span>../Parent/pom.xml<span class="tag">&lt;/<span class="name">relativePath</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="聚合"><a href="#聚合" class="headerlink" title="聚合"></a>聚合</h1><p>需求场景：一键安装各个模块工程。</p><p>配置方式：在聚合工程(父工程)中配置各个参与聚合的模块。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在聚合工程中按照下面方式配置模块工程的相对路径即可 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>../Hello<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>../HelloFriend<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>../MakeFriends<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="build标签"><a href="#build标签" class="headerlink" title="build标签"></a>build标签</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置当前工程构建过程中的特殊设置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>$&#123;project.artifactId&#125;<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置构建过程中需要使用的插件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a href="https://www.bilibili.com/video/av21004567/?spm_id_from=333.788.b_636f6d6d656e74.16">参考视频教程</a></p><embed src="尚硅谷_Maven_讲义.pdf" type="application/pdf" style="width:100%; height:700px;"></embed>]]></content>
      
      
      <categories>
          
          <category> maven </category>
          
      </categories>
      
      
        <tags>
            
            <tag> maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库索引</title>
      <link href="/JeckFS/2020/07/19/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B4%A2%E5%BC%95/"/>
      <url>/JeckFS/2020/07/19/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B4%A2%E5%BC%95/</url>
      
        <content type="html"><![CDATA[<h1 id="1-数据库索引的存储结构"><a href="#1-数据库索引的存储结构" class="headerlink" title="1.数据库索引的存储结构"></a>1.数据库索引的存储结构</h1><p>参见xmind思维导图笔记。</p><h1 id="2-高性能的索引策略"><a href="#2-高性能的索引策略" class="headerlink" title="2.高性能的索引策略"></a>2.高性能的索引策略</h1><h2 id="2-1独立的列"><a href="#2-1独立的列" class="headerlink" title="2.1独立的列"></a>2.1独立的列</h2><p>where子句中的列不能是表达式的一部分，也不能是函数的参数。否则不能使用索引。</p><h2 id="2-2前缀索引和索引选择性"><a href="#2-2前缀索引和索引选择性" class="headerlink" title="2.2前缀索引和索引选择性"></a>2.2前缀索引和索引选择性</h2><p>对于索引很长的字串列，一个策略是模拟哈希索引，一个是通过前缀索引。</p><p><strong>索引选择性</strong>：不重复的索引值(也成为基数)与数据表的记录总数之比。索引的选择性越高，查询效率就越高，性能也越好。</p><p>前缀到底选取的长度为多少合适，需要根据索引选择性来确定。不断扩大前缀的长度，直到索引选择性接近整列的索引选择性，或者当前缀选择性的增幅很小时的前缀长度就是合适的。</p><p>前缀索引的缺点：无法使用order by, group by；也无法使用前缀索引做覆盖扫描。</p><h2 id="2-3聚簇索引"><a href="#2-3聚簇索引" class="headerlink" title="2.3聚簇索引"></a>2.3聚簇索引</h2><p><strong>聚簇索引的存储结构：</strong><br>“聚簇”表示数据行和相邻的键值紧凑地存储在一起。聚簇索引的叶子节点存储行的全部数据，节点页只存储索引列的值。<br>二级索引的叶子节点存储的不是“行指针”，而是主键值，以此作为指向行的“指针”。使用二级索引时，先超照到主键值，然后根据主键值，去聚簇索引中查找对应的数据行。</p><p>聚簇索引的索引列一般是主键，没有主键则选择唯一的非空索引列代替，再没有InnoDB会隐式定义一个主键作为聚簇索引。</p><p><strong>聚簇索引与非聚簇索引在数据分布上的区别，以及相对应的主键索引和二级索引在数据分布上的区别:</strong><br>数据在MyISAM中的分布：<br>数据行顺序存储在磁盘上，行是定长的，通过行号可以确定行的位置。(依据行是定行的还是变长的使用不同的策略)</p><img src="/JeckFS/2020/07/19/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B4%A2%E5%BC%95/1.png" class="" title="This is 1-th image."><p>数据在InnoDB中的分布：<br>按照主键，使用聚簇索引存储。</p><img src="/JeckFS/2020/07/19/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B4%A2%E5%BC%95/2.png" class="" title="This is 2-th image."><p><strong>在InnoDB表中按主键顺序插入行(在使用聚簇索引的表中插入数据)：</strong></p><p>若按照列值随机的列建立索引，会因为页分裂和碎片，导致插入时间长，索引占用空间大的问题。应该按照主键顺序插入行，即主键值应是顺序的。</p><img src="/JeckFS/2020/07/19/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B4%A2%E5%BC%95/3.png" class="" title="This is 3-th image."><img src="/JeckFS/2020/07/19/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B4%A2%E5%BC%95/4.png" class="" title="This is 4-th image."><p>顺序主键的缺点：<br>在<strong>高并发</strong>下，<strong>主键的上界</strong>会成为“热点”，因为所有的插入都发生在这里，所以并发插入可能导致间隙锁竞争；另一个“热点”是<strong>auto_increment锁机制</strong>，这个问题可以考虑重新设计表或者更改innodb_autoinc_lock_mode配置解决。</p><p><strong>聚簇索引的优缺点：</strong><br>优点：</p><ol><li>按照主键聚集数据，通过读取很少的数据也就能读取到该主键下相关的其他数据。如一个用户的所有邮件，他们都是存在一起的，可以一并读出。不使用聚簇索引，可能导致每封邮件都要一次磁盘I/O操作。</li><li>数据访问比非聚簇索引快</li><li>覆盖索引可以使用主键值。</li></ol><p>缺点：</p><ol><li>聚簇数据最大限度地提高了I/O密集型应用的性能，但对于内存中的数据，聚簇索引没有优势。</li><li>插入速度依赖于插入顺序。按照主键的顺序插入是速度最快的。</li><li>更新聚簇索引列的代价高，因为会强制InnoDB将每个被更新的行移动到新的位置。</li><li>插入新行，或者主键被更新而需要移动行时，可能导致<strong>页分裂</strong>，进而占据更多磁盘空间。</li><li>聚簇索引导致全表扫描变慢。</li><li>二级索引由于包含了引用行的主键列，导致二级索引占用空间大。</li><li>二级索引访问需要两次索引查找。</li></ol>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java动态代理</title>
      <link href="/JeckFS/2020/07/18/java%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/"/>
      <url>/JeckFS/2020/07/18/java%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>真是对象不能直接访问，需要通过代理对象才可以访问。</p><img src="/JeckFS/2020/07/18/java%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/1.png" class="" title="This is 1-th image."><p>Proxy类似一个“调度器”，InvocationHandler相当于一个增强器，提供一些额外的服务。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 动态代理</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Girl</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">date</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">watchMovie</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WangMeiLi</span> <span class="keyword">implements</span> <span class="title class_">Girl</span> &#123; <span class="comment">// 真实对象</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">date</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;王美丽说：跟你约会好开心啊&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">watchMovie</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;王美丽说：这个电影我不喜欢看&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WangMeiLiProxy</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span> &#123;</span><br><span class="line">    <span class="comment">// private Girl girl; // 被代理的对象一定要作为代理对象的成员变量</span></span><br><span class="line">    <span class="keyword">private</span> Object girl; <span class="comment">// 与上面等价</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">WangMeiLiProxy</span><span class="params">(Girl girl)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">        <span class="built_in">this</span>.girl = girl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object o, Method method, Object[] objects)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="comment">// 第一个参数Object o是真实对象的代理对象，它的名字类似$Proxy0，通过它也可以调用代理对象的方法。invoke()可以直接返回对象o，对该代理对象进行连续调用。</span></span><br><span class="line">        doSomethingBefore(); <span class="comment">// 前置增强</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">ret</span> <span class="operator">=</span> method.invoke(girl, objects); <span class="comment">// 调用girl的method方法，其方法参数为objects</span></span><br><span class="line">        doSomethingEnd(); <span class="comment">// 后置增强</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">doSomethingEnd</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;王美丽的父母说：我得先调查下这个男孩子的背景！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">doSomethingBefore</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;王美丽的父母说：他有没有对你动手动脚啊？&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getProxyInstance</span><span class="params">()</span>&#123; <span class="comment">// 调度器</span></span><br><span class="line">        <span class="comment">// 创建代理对象，并实现Girl接口</span></span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(girl.getClass().getClassLoader(), girl.getClass().getInterfaces(), <span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Zhangsan</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 隔壁有个女孩叫王美丽</span></span><br><span class="line">        <span class="type">Girl</span> <span class="variable">girl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WangMeiLi</span>();</span><br><span class="line">        <span class="comment">// 她有个大家庭，想要跟她约会需要征得她的家人同意</span></span><br><span class="line">        <span class="type">WangMeiLiProxy</span> <span class="variable">family</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WangMeiLiProxy</span>(girl);</span><br><span class="line">        <span class="comment">// 有一次去约王美丽，碰到了他妈妈，并征得了他妈妈的同意</span></span><br><span class="line">        <span class="type">Girl</span> <span class="variable">mother</span> <span class="operator">=</span> (Girl) family.getProxyInstance();</span><br><span class="line">        <span class="comment">// 通过他的妈妈这个代理才能与王美丽约会</span></span><br><span class="line">        mother.date();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">王美丽的父母说：他有没有对你动手动脚啊？</span><br><span class="line">王美丽说：跟你约会好开心啊</span><br><span class="line">王美丽的父母说：我得先调查下这个男孩子的背景！</span><br></pre></td></tr></table></figure><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>一个接口，真是对象。<br>一个真实对象(被代理对象)。<br>一个通过Proxy.newProxyInstance()产生的代理类(实现InvocationHandler接口，并实现invoke()，invoke()方法内可以对真实对象的方法进行前置增强和后置增强；通过Proxy.newProxyInstance(ClassLoader, interfaces, InvocationHandler)创建代理对象，该代理对象需要实现Girl接口)。</p><hr><img src="/JeckFS/2020/07/18/java%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/2.png" class="" title="This is 2-th image."><img src="/JeckFS/2020/07/18/java%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/3.png" class="" title="This is 3-th image."><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 静态代理</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Girl</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">date</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">watchMovie</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WangMeiLi</span> <span class="keyword">implements</span> <span class="title class_">Girl</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">date</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;王美丽说：跟你约会好开心啊&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">watchMovie</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;王美丽说：这个电影我不喜欢看&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WangMeiLiProxy</span> <span class="keyword">implements</span> <span class="title class_">Girl</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Girl girl; <span class="comment">// 被代理的对象一定要作为代理对象的成员变量</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">WangMeiLiProxy</span><span class="params">(Girl girl)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">        <span class="built_in">this</span>.girl = girl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">doSomethingEnd</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;王美丽的父母说：我得先调查下这个男孩子的背景！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">doSomethingBefore</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;王美丽的父母说：他有没有对你动手动脚啊？&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">date</span><span class="params">()</span> &#123;</span><br><span class="line">        doSomethingBefore();</span><br><span class="line">        girl.date();</span><br><span class="line">        doSomethingEnd();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">watchMovie</span><span class="params">()</span> &#123;</span><br><span class="line">        doSomethingBefore();</span><br><span class="line">        girl.watchMovie();</span><br><span class="line">        doSomethingEnd();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Zhangsan</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 隔壁有个女孩叫王美丽</span></span><br><span class="line">        <span class="type">Girl</span> <span class="variable">girl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WangMeiLi</span>();</span><br><span class="line">        <span class="comment">// 她有个大家庭，想要跟她约会需要征得她的家人同意</span></span><br><span class="line">        <span class="type">WangMeiLiProxy</span> <span class="variable">family</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WangMeiLiProxy</span>(girl);</span><br><span class="line">        <span class="comment">// 有一次去约王美丽，碰到了他妈妈，并征得了他妈妈的同意</span></span><br><span class="line">        <span class="type">Girl</span> <span class="variable">mother</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WangMeiLiProxy</span>(girl);</span><br><span class="line">        <span class="comment">// 通过他的妈妈这个代理才能与王美丽约会</span></span><br><span class="line">        mother.date();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/JeckFS/2020/07/18/java%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/4.png" class="" title="This is 4-th image."><p>静态代理没有实现InvocationHandler接口，创建对象时被代理对象的业务发生变化时，代理对象也要改(违反了开闭原则，对修改关闭，对扩展开放)，导致可维护性差，可扩展能力差。动态代理可以解决这个问题。使用动态代理后，接口中的方法的增加或减少，并不影响代理类中的代码，因为他是通过反射进行方法调用的。</p><p>使用动态代理代理多个对象时，只需要定义其接口和真实对象(被代理对象)的类即可，通过同一个代理类进行前置和后置增强，只不过前置增强和后置增强的方法是一样的。</p><p>代理对象的使用：<br>新建真实对象，并将真实对象传递到代理类的构造函数中，通过代理类创建代理对象，将代理对象强转成接口，然后调用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ProxyedObject</span> <span class="variable">proxyedObject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProxyedObject</span>();</span><br><span class="line"><span class="type">ProxyClass</span> <span class="variable">proxyClass</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProxyClass</span>(proxyedObject);</span><br><span class="line"><span class="type">PublicInterface</span> <span class="variable">proxyInstance</span> <span class="operator">=</span> (PublicInterface) proxyClass.getProxyInstance();</span><br><span class="line">proxyInstance.interfaceMethod();</span><br></pre></td></tr></table></figure><p>业务扩展：代理对象代理多个真实对象。</p><p>动态代理中invoke()第一个参数的作用：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 为了实现连续的调用，接口方法的返回参数应是接口类型</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Girl</span> &#123;</span><br><span class="line">    Girl <span class="title function_">date</span><span class="params">()</span>;</span><br><span class="line">    Girl <span class="title function_">watchMovie</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 真实对象实现的方法要返回this</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WangMeiLi</span> <span class="keyword">implements</span> <span class="title class_">Girl</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Girl <span class="title function_">date</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;王美丽说：跟你约会好开心啊&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Girl <span class="title function_">watchMovie</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;王美丽说：这个电影我不喜欢看&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 代理类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WangMeiLiProxy</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Object girl; <span class="comment">// 被代理的对象一定要作为代理对象的成员变量</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">WangMeiLiProxy</span><span class="params">(Girl girl)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">        <span class="built_in">this</span>.girl = girl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">doSomethingEnd</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;王美丽的父母说：我得先调查下这个男孩子的背景！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">doSomethingBefore</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;王美丽的父母说：他有没有对你动手动脚啊？&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object o, Method method, Object[] objects)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        doSomethingBefore();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">ret</span> <span class="operator">=</span> method.invoke(girl, objects);</span><br><span class="line">        doSomethingEnd();</span><br><span class="line">        <span class="comment">// 可以返回对象o，也可以返回对象ret</span></span><br><span class="line">        <span class="keyword">return</span> o;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getProxyInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(girl.getClass().getClassLoader(), girl.getClass().getInterfaces(), <span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Zhangsan</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Girl</span> <span class="variable">girl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WangMeiLi</span>();</span><br><span class="line">        <span class="type">WangMeiLiProxy</span> <span class="variable">family</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WangMeiLiProxy</span>(girl);</span><br><span class="line">        <span class="type">Girl</span> <span class="variable">mother</span> <span class="operator">=</span> (Girl) family.getProxyInstance();</span><br><span class="line">        <span class="comment">// 连续调用演示</span></span><br><span class="line">        mother.date().watchMovie();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><p>JVM如何生成代理对象的？</p><img src="/JeckFS/2020/07/18/java%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/5.png" class="" title="This is 5-th image."><p>关键代码：代理类中的<code>Proxy.newProxyInstance(ClassLoader, Interfaces, InvocationHandler)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Proxy</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Class&lt;?&gt;[] constructorParams = <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;InvocationHandler.class&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">newProxyInstance</span><span class="params">(</span></span><br><span class="line"><span class="params">        ClassLoader loader,</span></span><br><span class="line"><span class="params">        Class&lt;?&gt;[] interfaces,</span></span><br><span class="line"><span class="params">        InvocationHandler h)</span> <span class="keyword">throws</span> IllegalArgumentException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 生成代理类的代码</span></span><br><span class="line">        Class&lt;?&gt; cl = getProxyClass(loader, interfaces);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 生成代理对象</span></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">cons</span> <span class="operator">=</span> cl.getConstructor(constructorParams);</span><br><span class="line">        <span class="keyword">return</span> cons.newInstance(<span class="keyword">new</span> <span class="title class_">Object</span>[] &#123; h &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如何生成代理类的呢？<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过深究下面代码</span></span><br><span class="line">Class&lt;?&gt; cl = getProxyClass(loader, interfaces);</span><br><span class="line"><span class="comment">// 找到生成代理类字节码的方法</span></span><br><span class="line"><span class="type">byte</span>[] proxyClassFile = ProxyGenerator.generateProxyClass(proxyName, interfaces);</span><br></pre></td></tr></table></figure></p><p>示例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 接口定义</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">People</span> &#123;</span><br><span class="line">    voidsayHello(String msg);</span><br><span class="line">    voidsayBye(String msg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 真实对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">implements</span> <span class="title class_">People</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayHello</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Hello &quot;</span>+msg);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayBye</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;ByeBye &quot;</span>+msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 代理对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DynamicProxyHandler</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> People target;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DynamicProxyHandler</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.target=<span class="keyword">new</span> <span class="title class_">Student</span>();<span class="comment">//实例化一个真实对象</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span></span><br><span class="line">            <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="type">boolean</span> friendFlag=<span class="literal">true</span>;</span><br><span class="line">        Object o=<span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(friendFlag)&#123; <span class="comment">//权限验证通过    所有方法的权限验证只需要在这里加代码就行了</span></span><br><span class="line">           o = method.invoke(target, args); </span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;记录访问日志&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> o;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * 通过Proxy动态生成一个代理实例</span></span><br><span class="line"><span class="comment">     *<span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     *<span class="doctag">@author</span>:tanggao</span></span><br><span class="line"><span class="comment">     *<span class="doctag">@date</span>:2017-9-27 下午4:57:07</span></span><br><span class="line"><span class="comment">     *return:Object</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getProxy</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * Proxy.newProxyInstance(ClassLoader loader, Class&lt;?&gt;[] interfaces, InvocationHandler h)</span></span><br><span class="line"><span class="comment">         * 方法的第一个参数的作用就是 获取当前类的类加载器,作用是用来生成类的</span></span><br><span class="line"><span class="comment">         * 第二个参数是获取真实对象的所有接口    获取所有接口的目的是用来生成代理的,因为代理要实现所有的接口</span></span><br><span class="line"><span class="comment">         * 第三个参数是 调用处理器  这里传入调用处理器，是因为生成代理实例需要 调用处理器    为什么需要调用处理器，因为生成的代理不能直接调用真实对象的方法,</span></span><br><span class="line"><span class="comment">         * 而是通过调用处理器来调用真实对象的方法，具体就是通过上面定义的DynamicProxyHandler重写父类InvocationHandler的invoke方法</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">       <span class="keyword">return</span>  Proxy.newProxyInstance(<span class="built_in">this</span>.getClass().getClassLoader(), target.getClass().getInterfaces(), <span class="built_in">this</span> );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>生成代理类字节码文件：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用ProxyGenerator.generateProxyClass()生成字节码类文件</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GenerateDynamic</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        createProxyClassFile();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">createProxyClassFile</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;ProxySubject&quot;</span>;</span><br><span class="line">        <span class="type">byte</span>[] data = ProxyGenerator.generateProxyClass(name,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; People.class &#125;);</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            out = <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(name + <span class="string">&quot;.class&quot;</span>);</span><br><span class="line">            System.out.println((<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;hello&quot;</span>)).getAbsolutePath());</span><br><span class="line">            out.write(data);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="literal">null</span> != out)</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    out.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>使用反编译工具查看代理类字节码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.dynamic.test.People;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.UndeclaredThrowableException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">ProxySubject</span> <span class="keyword">extends</span> <span class="title class_">Proxy</span> <span class="keyword">implements</span> <span class="title class_">People</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m1;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m3;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m4;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m0;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m2;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ProxySubject</span><span class="params">(InvocationHandler paramInvocationHandler)</span> <span class="keyword">throws</span> &#123;</span><br><span class="line">        <span class="comment">// private static final Class&lt;?&gt;[] constructorParams = new Class[]&#123;InvocationHandler.class&#125;;</span></span><br><span class="line">        <span class="comment">// Constructor cons = cl.getConstructor(constructorParams);</span></span><br><span class="line">        <span class="comment">// return cons.newInstance(new Object[] &#123; h &#125;);  // 创建代理对象</span></span><br><span class="line">        <span class="comment">// 此处的 h 就是Proxy.newProxyInstance(this.getClass().getClassLoader(),target.getClass().getInterfaces(), this)中的this</span></span><br><span class="line">        <span class="built_in">super</span>(paramInvocationHandler); <span class="comment">// paramInvocationHandler就是自定义的代理类对象DynamicProxyHandler(实现了InvocationHandler接口)</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object paramObject)</span> <span class="keyword">throws</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> ((Boolean) <span class="built_in">this</span>.h.invoke(<span class="built_in">this</span>, m1, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;paramObject&#125;)).booleanValue();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Error | RuntimeException localError) &#123;</span><br><span class="line">            <span class="keyword">throw</span> localError;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable localThrowable) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UndeclaredThrowableException</span>(localThrowable);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">sayBye</span><span class="params">(String paramString)</span> <span class="keyword">throws</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.h.invoke(<span class="built_in">this</span>, m3, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;paramString&#125;); <span class="comment">//this.h就是自定义的调用处理器(DynamicProxyHandler)</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Error | RuntimeException localError) &#123;</span><br><span class="line">            <span class="keyword">throw</span> localError;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable localThrowable) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UndeclaredThrowableException</span>(localThrowable);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">sayHello</span><span class="params">(String paramString)</span> <span class="keyword">throws</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.h.invoke(<span class="built_in">this</span>, m4, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;paramString&#125;); <span class="comment">//this.h就是自定义的调用处理器(DynamicProxyHandler)</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Error | RuntimeException localError) &#123;</span><br><span class="line">            <span class="keyword">throw</span> localError;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable localThrowable) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UndeclaredThrowableException</span>(localThrowable);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> <span class="keyword">throws</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> ((Integer) <span class="built_in">this</span>.h.invoke(<span class="built_in">this</span>, m0, <span class="literal">null</span>)).intValue();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Error | RuntimeException localError) &#123;</span><br><span class="line">            <span class="keyword">throw</span> localError;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable localThrowable) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UndeclaredThrowableException</span>(localThrowable);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> String <span class="title function_">toString</span><span class="params">()</span> <span class="keyword">throws</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (String) <span class="built_in">this</span>.h.invoke(<span class="built_in">this</span>, m2, <span class="literal">null</span>);  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (Error | RuntimeException localError) &#123;</span><br><span class="line">            <span class="keyword">throw</span> localError;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable localThrowable) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UndeclaredThrowableException</span>(localThrowable);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            m1 = Class.forName(<span class="string">&quot;java.lang.Object&quot;</span>).getMethod(<span class="string">&quot;equals&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Class.forName(<span class="string">&quot;java.lang.Object&quot;</span>)&#125;);</span><br><span class="line">            m3 = Class.forName(<span class="string">&quot;com.dynamic.test.People&quot;</span>).getMethod(<span class="string">&quot;sayBye&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Class.forName(<span class="string">&quot;java.lang.String&quot;</span>)&#125;);</span><br><span class="line">            m4 = Class.forName(<span class="string">&quot;com.dynamic.test.People&quot;</span>).getMethod(<span class="string">&quot;sayHello&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Class.forName(<span class="string">&quot;java.lang.String&quot;</span>)&#125;);</span><br><span class="line">            m0 = Class.forName(<span class="string">&quot;java.lang.Object&quot;</span>).getMethod(<span class="string">&quot;hashCode&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]);</span><br><span class="line">            m2 = Class.forName(<span class="string">&quot;java.lang.Object&quot;</span>).getMethod(<span class="string">&quot;toString&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException localNoSuchMethodException) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NoSuchMethodError</span>(localNoSuchMethodException.getMessage());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException localClassNotFoundException) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NoClassDefFoundError</span>(localClassNotFoundException.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>总结：</strong></p><p><a href="https://cloud.tencent.com/developer/article/1076131">参考连接</a></p><p>Proxy.newProxyInstance(接口的类加载器, 真实对象所实现的接口, 自定义的InvovationHandler)用于创建代理对象<br>具体的操作是：<br>上述函数通过调用过程中有两个关键代码：一个是getProxyClass()用于生成代理类的代码；一个是生成代理类对象。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Proxy</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Class&lt;?&gt;[] constructorParams = <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;InvocationHandler.class&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">newProxyInstance</span><span class="params">(</span></span><br><span class="line"><span class="params">        ClassLoader loader,</span></span><br><span class="line"><span class="params">        Class&lt;?&gt;[] interfaces,</span></span><br><span class="line"><span class="params">        InvocationHandler h)</span> <span class="keyword">throws</span> IllegalArgumentException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 生成代理类的代码</span></span><br><span class="line">        Class&lt;?&gt; cl = getProxyClass(loader, interfaces);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 生成代理对象</span></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">cons</span> <span class="operator">=</span> cl.getConstructor(constructorParams);</span><br><span class="line">        <span class="keyword">return</span> cons.newInstance(<span class="keyword">new</span> <span class="title class_">Object</span>[] &#123; h &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>在getProxyClass()中，代理类的class文件是由<code>ProxyGenerator.generateProxyClass();</code>生成。该代理类的构造函数可以获取到Proxy.newProxyInstance()传递的自定义的InvocationHandler，通过这个自定义的调用处理器，调用前后增强的invoke()，实现前置增强和后置增强。</p><p>应用：<br>Spring事务注解的实现原理。<br>Mybatis通过动态代理实现mapper接口的实现类。<br>Mybatis打开调试模式打印sql语句等日志信息。</p><h1 id="CGLIB实现动态代理-TODO"><a href="#CGLIB实现动态代理-TODO" class="headerlink" title="CGLIB实现动态代理  TODO"></a>CGLIB实现动态代理  TODO</h1>]]></content>
      
      
      <categories>
          
          <category> 面经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面经 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>剑指offer-JZ64-滑动窗口的最大值</title>
      <link href="/JeckFS/2020/07/13/%E5%89%91%E6%8C%87offer-JZ64-%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E7%9A%84%E6%9C%80%E5%A4%A7%E5%80%BC/"/>
      <url>/JeckFS/2020/07/13/%E5%89%91%E6%8C%87offer-JZ64-%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E7%9A%84%E6%9C%80%E5%A4%A7%E5%80%BC/</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><img src="/JeckFS/2020/07/13/%E5%89%91%E6%8C%87offer-JZ64-%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E7%9A%84%E6%9C%80%E5%A4%A7%E5%80%BC/1.png" class="" title="This is 1-th image."><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p>使用双端队列构建单调队列，单调队列中始终保存窗口中的最大值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ArrayList&lt;Integer&gt; <span class="title function_">maxInWindows</span><span class="params">(<span class="type">int</span>[] num, <span class="type">int</span> size)</span> &#123;</span><br><span class="line">        Deque&lt;Integer&gt; deque = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        ArrayList&lt;Integer&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (j &lt; num.length) &#123;</span><br><span class="line">            <span class="comment">// 将num[j]进单调队列</span></span><br><span class="line">            <span class="keyword">while</span> (!deque.isEmpty() &amp;&amp; deque.getLast() &lt; num[j]) &#123;</span><br><span class="line">                deque.pollLast();</span><br><span class="line">            &#125;</span><br><span class="line">            deque.add(num[j]);</span><br><span class="line">            ++j;</span><br><span class="line">            <span class="keyword">if</span> (!deque.isEmpty() &amp;&amp; j - i == size)</span><br><span class="line">                res.add(deque.getFirst());</span><br><span class="line">            <span class="keyword">if</span> (j - i &gt;= size) &#123;</span><br><span class="line">                <span class="keyword">if</span> (num[i] == deque.getFirst())</span><br><span class="line">                    deque.pollFirst();</span><br><span class="line">                ++i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 剑指offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 剑指offer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>牛客-sql59</title>
      <link href="/JeckFS/2020/07/13/%E7%89%9B%E5%AE%A2-sql59/"/>
      <url>/JeckFS/2020/07/13/%E7%89%9B%E5%AE%A2-sql59/</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><img src="/JeckFS/2020/07/13/%E7%89%9B%E5%AE%A2-sql59/4.png" class="" title="This is 4-th image."><img src="/JeckFS/2020/07/13/%E7%89%9B%E5%AE%A2-sql59/5.png" class="" title="This is 5-th image."><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">select emp.emp_no,emp.first_name,emp.last_name,emb.btype,s.salary,</span><br><span class="line">case emb.btype</span><br><span class="line">    when 1 then s.salary*0.1</span><br><span class="line">    when 2 then s.salary*0.2</span><br><span class="line">    else s.salary*0.3</span><br><span class="line">    end as bonus</span><br><span class="line">from employees emp</span><br><span class="line">inner join emp_bonus emb</span><br><span class="line">inner join salaries s</span><br><span class="line">on emp.emp_no = emb.emp_no and emb.emp_no = s.emp_no</span><br><span class="line">where s.to_date = &#x27;9999-01-01&#x27;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>牛客-sql60</title>
      <link href="/JeckFS/2020/07/13/%E7%89%9B%E5%AE%A2-sql60/"/>
      <url>/JeckFS/2020/07/13/%E7%89%9B%E5%AE%A2-sql60/</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><img src="/JeckFS/2020/07/13/%E7%89%9B%E5%AE%A2-sql60/2.png" class="" title="This is 2-th image."><img src="/JeckFS/2020/07/13/%E7%89%9B%E5%AE%A2-sql60/3.png" class="" title="This is 3-th image."><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">select s1.emp_no, s1.salary, (</span><br><span class="line">    select sum(s2.salary) from salaries as s2</span><br><span class="line">    where s2.emp_no &lt;= s1.emp_no and s2.to_date=&#x27;9999-01-01&#x27;</span><br><span class="line">) as running_total from salaries as s1</span><br><span class="line">where s1.to_date=&#x27;9999-01-01&#x27;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>牛客-sql61</title>
      <link href="/JeckFS/2020/07/13/%E7%89%9B%E5%AE%A2-sql61/"/>
      <url>/JeckFS/2020/07/13/%E7%89%9B%E5%AE%A2-sql61/</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><img src="/JeckFS/2020/07/13/%E7%89%9B%E5%AE%A2-sql61/1.png" class="" title="This is 1-th image."><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">select e1.first_name from employees as e1</span><br><span class="line">where (</span><br><span class="line">    select count(*) from employees as e2</span><br><span class="line">    where e1.first_name &gt;= e2.first_name</span><br><span class="line">) % 2 == 1</span><br></pre></td></tr></table></figure><p>思路：先排出号码    然后再去奇数<br>1.利用count函数 排号<br>SELECT COUNT(*) FROM employees E2 WHERE E1.first_name&gt;=E2.first_name<br>2.然后取奇数<br>SELECT E1.first_name FROM employees E1</p><p>WHERE (SELECT COUNT(*) FROM employees E2 WHERE E1.first_name&gt;=E2.first_name)%2=1;</p>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>剑指offer-JZ65-矩阵中的路径</title>
      <link href="/JeckFS/2020/07/12/%E5%89%91%E6%8C%87offer-JZ65-%E7%9F%A9%E9%98%B5%E4%B8%AD%E7%9A%84%E8%B7%AF%E5%BE%84/"/>
      <url>/JeckFS/2020/07/12/%E5%89%91%E6%8C%87offer-JZ65-%E7%9F%A9%E9%98%B5%E4%B8%AD%E7%9A%84%E8%B7%AF%E5%BE%84/</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><img src="/JeckFS/2020/07/12/%E5%89%91%E6%8C%87offer-JZ65-%E7%9F%A9%E9%98%B5%E4%B8%AD%E7%9A%84%E8%B7%AF%E5%BE%84/1.png" class="" title="This is 1-th image."><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p>非递归算法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Point</span> &#123;</span><br><span class="line">        <span class="type">int</span> x,y,cur;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Point</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> cur)</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.x = x;</span><br><span class="line">            <span class="built_in">this</span>.y = y;</span><br><span class="line">            <span class="built_in">this</span>.cur = cur;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">has</span><span class="params">(<span class="type">char</span>[][] a, <span class="type">char</span>[] str, <span class="type">int</span> rows, <span class="type">int</span> cols, <span class="type">int</span> x, <span class="type">int</span> y)</span>&#123;</span><br><span class="line">        Stack&lt;Point&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>();</span><br><span class="line">        stack.add(<span class="keyword">new</span> <span class="title class_">Point</span>(x, y, <span class="number">1</span>));</span><br><span class="line">        <span class="type">int</span>[] deltaI = &#123;-<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;; <span class="comment">// 上下左右</span></span><br><span class="line">        <span class="type">int</span>[] deltaJ = &#123;<span class="number">0</span>,<span class="number">0</span>,-<span class="number">1</span>,<span class="number">1</span>&#125;; <span class="comment">// 上下左右</span></span><br><span class="line">        <span class="type">boolean</span>[][] visited = <span class="keyword">new</span> <span class="title class_">boolean</span>[rows][cols];</span><br><span class="line">        visited[x][y] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">while</span>(!stack.isEmpty())&#123;</span><br><span class="line">            <span class="type">Point</span> <span class="variable">point</span> <span class="operator">=</span> stack.pop();</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            这一步是关键的地方。它标记了不能回退已经走过的位置。</span></span><br><span class="line"><span class="comment">            为什么在这儿，而不在第44行的if中呢？</span></span><br><span class="line"><span class="comment">            if中的语句是试探性的，仅仅用于记录回退后，下一步应该向哪个方向走。程序第42-49行是做这个事情的。41行是实现到达具体位置后，应该做的操作。</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            visited[point.x][point.y] = <span class="literal">true</span>; </span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">                x = point.x + deltaI[i];</span><br><span class="line">                y = point.y + deltaJ[i];</span><br><span class="line">                <span class="keyword">if</span>(!(x &lt; <span class="number">0</span> || x &gt;= rows || y &lt; <span class="number">0</span> || y &gt;= cols) &amp;&amp; !visited[x][y] &amp;&amp; a[x][y] == str[point.cur])&#123;</span><br><span class="line">                    <span class="keyword">if</span>(point.cur == str.length - <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                    stack.add(<span class="keyword">new</span> <span class="title class_">Point</span>(x, y, point.cur + <span class="number">1</span>));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasPath</span><span class="params">(<span class="type">char</span>[] matrix, <span class="type">int</span> rows, <span class="type">int</span> cols, <span class="type">char</span>[] str)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(matrix.length == <span class="number">0</span> &amp;&amp; str.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">true</span>; </span><br><span class="line">        <span class="keyword">if</span>(matrix.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (matrix.length == <span class="number">1</span> &amp;&amp; str.length == <span class="number">1</span>) <span class="keyword">return</span> matrix[<span class="number">0</span>] == str[<span class="number">0</span>]; </span><br><span class="line">        <span class="type">char</span>[][] a = <span class="keyword">new</span> <span class="title class_">char</span>[rows][cols];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; matrix.length; ++i)&#123;</span><br><span class="line">            a[i / cols][i % cols] = matrix[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; rows; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; cols; ++j)&#123;</span><br><span class="line">                <span class="keyword">if</span>(a[i][j] == str[<span class="number">0</span>])&#123;</span><br><span class="line">                    <span class="comment">// 查询从起点(i,j)开始有没有路径是str字符串的。</span></span><br><span class="line">                    <span class="keyword">if</span>(has(a,str,rows,cols,i,j)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">char</span>[][] board;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">char</span>[] word;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当前所在位置(x,y),找上下左右与word[cur]相等的且没有被走过的位置</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">existInXY</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> cur)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (cur == word.length) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (</span><br><span class="line">                x &lt; <span class="number">0</span></span><br><span class="line">                || x &gt;= board.length</span><br><span class="line">                || y &lt; <span class="number">0</span></span><br><span class="line">                || y &gt;= board[<span class="number">0</span>].length</span><br><span class="line"><span class="comment">//                || board[x][y] == &#x27;#&#x27; // #表示该位置已经走过 因为board中都是字母，不加这句也可以</span></span><br><span class="line">                || board[x][y] != word[cur]) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 从当前位置(x,y)向上下左右走</span></span><br><span class="line">        <span class="comment">// 1.上</span></span><br><span class="line">        <span class="type">char</span> <span class="variable">t</span> <span class="operator">=</span> board[x][y];</span><br><span class="line">        board[x][y] = <span class="string">&#x27;#&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span> (existInXY(x - <span class="number">1</span>, y, cur + <span class="number">1</span>)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">// 2.下</span></span><br><span class="line">        <span class="keyword">if</span> (existInXY(x + <span class="number">1</span>, y, cur + <span class="number">1</span>)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">// 3.左</span></span><br><span class="line">        <span class="keyword">if</span> (existInXY(x, y - <span class="number">1</span>, cur + <span class="number">1</span>)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">// 4.右</span></span><br><span class="line">        <span class="keyword">if</span> (existInXY(x, y + <span class="number">1</span>, cur + <span class="number">1</span>)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        board[x][y] = t;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5ms 97.88%</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">exist</span><span class="params">(<span class="type">char</span>[][] board, String word)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (word.length() == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="built_in">this</span>.board = board;</span><br><span class="line">        <span class="built_in">this</span>.word = word.toCharArray();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; board.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; board[i].length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (board[i][j] == <span class="built_in">this</span>.word[<span class="number">0</span>] &amp;&amp; existInXY(i,j,<span class="number">0</span>))</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>回溯的非递归模板：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">nonRecur(递归出发点)&#123;</span><br><span class="line">    Stack&lt;Integer&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>();</span><br><span class="line">    stack.add(递归出发点);</span><br><span class="line">    <span class="type">boolean</span>[][] visited = <span class="keyword">new</span> <span class="title class_">boolean</span>[][];</span><br><span class="line">    visited[递归出发点] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">while</span>(!stack.isEmpty())&#123;</span><br><span class="line">        element = stack.pop();</span><br><span class="line">        <span class="comment">// 在此处处理到达该点后的具体逻辑</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(choice c : choices)&#123;</span><br><span class="line">            stack.add(nextPoint(c)); <span class="comment">// 将选择c达到的点加入栈中</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 剑指offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 剑指offer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>lintCode512-解码方法</title>
      <link href="/JeckFS/2020/07/10/lintCode512-%E8%A7%A3%E7%A0%81%E6%96%B9%E6%B3%95/"/>
      <url>/JeckFS/2020/07/10/lintCode512-%E8%A7%A3%E7%A0%81%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><img src="/JeckFS/2020/07/10/lintCode512-%E8%A7%A3%E7%A0%81%E6%96%B9%E6%B3%95/1.png" class="" title="This is 1-th image."><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 19:38 - 20:25 47min</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    d[i]表示前i个字符组成的字符串的解密方式数量.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    d[i] = d[i-1] + confirm[i] + d[i-2] + confirm[i, i-1];</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    base case:</span></span><br><span class="line"><span class="comment">    d[0] = 1;</span></span><br><span class="line"><span class="comment">    d[1] = confirm[1];</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    变量f：记录两次获得的整数是否是可以被解码成功，若不能成功直接返回0</span></span><br><span class="line"><span class="comment">    比较坑的测试用例：&quot;02&quot;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">numDecodings</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (s.length() == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span>[] d = <span class="keyword">new</span> <span class="title class_">int</span>[s.length() + <span class="number">1</span>];</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">integer</span> <span class="operator">=</span> Integer.valueOf(s.substring(<span class="number">0</span>, <span class="number">1</span>));</span><br><span class="line">        d[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        d[<span class="number">1</span>] = integer &gt; <span class="number">0</span> &amp;&amp; integer &lt; <span class="number">27</span> ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt; s.length() + <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">f</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            integer = Integer.valueOf(s.substring(i - <span class="number">1</span>, i));</span><br><span class="line">            <span class="keyword">if</span> (integer &gt; <span class="number">0</span> &amp;&amp; integer &lt; <span class="number">27</span>) d[i] += d[i - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">else</span> ++f;</span><br><span class="line">            integer = Integer.valueOf(s.substring(i - <span class="number">2</span>, i));</span><br><span class="line">            <span class="keyword">if</span> (integer &gt; <span class="number">9</span> &amp;&amp; integer &lt; <span class="number">27</span>) d[i] += d[i - <span class="number">2</span>];</span><br><span class="line">            <span class="keyword">else</span> ++f;</span><br><span class="line">            <span class="keyword">if</span> (f == <span class="number">2</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> d[s.length()];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 动态规划 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>lintCode515-房屋染色</title>
      <link href="/JeckFS/2020/07/10/lintCode515-%E6%88%BF%E5%B1%8B%E6%9F%93%E8%89%B2/"/>
      <url>/JeckFS/2020/07/10/lintCode515-%E6%88%BF%E5%B1%8B%E6%9F%93%E8%89%B2/</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><img src="/JeckFS/2020/07/10/lintCode515-%E6%88%BF%E5%B1%8B%E6%9F%93%E8%89%B2/1.png" class="" title="This is 1-th image."><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="comment">// 18:53 - 19:12  19min</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    14  2 11</span></span><br><span class="line"><span class="comment">    11 14  5</span></span><br><span class="line"><span class="comment">    14  3 10</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    1 2 3</span></span><br><span class="line"><span class="comment">    1 4 6</span></span><br><span class="line"><span class="comment">    相邻房屋颜色不同</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    d[i][j] 表示染色第i个房屋,且第i个房屋染色为j时,需要的最小花费</span></span><br><span class="line"><span class="comment">    d[i][j] = min &#123; d[i-1][j&#x27;] + costs[i][j] &#125; 其中 j&#x27; != j, j = 0,1,2分别代表不同的颜色</span></span><br><span class="line"><span class="comment">    base case:</span></span><br><span class="line"><span class="comment">        d[0][j] = costs[0][j]</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minCost</span><span class="params">(<span class="type">int</span>[][] costs)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (costs.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span>[][] d = <span class="keyword">new</span> <span class="title class_">int</span>[costs.length][<span class="number">3</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">3</span>; j++) &#123;</span><br><span class="line">            d[<span class="number">0</span>][j] = costs[<span class="number">0</span>][j];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; costs.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">3</span>; j++) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> Integer.MAX_VALUE;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt; <span class="number">3</span>; k++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (k != j) &#123;</span><br><span class="line">                        t = Math.min(t, d[i - <span class="number">1</span>][k] + costs[i][j]);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                d[i][j] = t;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> Integer.MAX_VALUE;</span><br><span class="line">        res = Math.min(res, d[costs.length - <span class="number">1</span>][<span class="number">0</span>]);</span><br><span class="line">        res = Math.min(res, d[costs.length - <span class="number">1</span>][<span class="number">1</span>]);</span><br><span class="line">        res = Math.min(res, d[costs.length - <span class="number">1</span>][<span class="number">2</span>]);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 动态规划 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java秒杀</title>
      <link href="/JeckFS/2020/07/09/java%E7%A7%92%E6%9D%80/"/>
      <url>/JeckFS/2020/07/09/java%E7%A7%92%E6%9D%80/</url>
      
        <content type="html"><![CDATA[<img src="/JeckFS/2020/07/09/java%E7%A7%92%E6%9D%80/1.png" class="" title="This is 1-th image."><p>Thymeleaf是一个服务端的模块引擎。</p><img src="/JeckFS/2020/07/09/java%E7%A7%92%E6%9D%80/2.png" class="" title="This is 2-th image."><img src="/JeckFS/2020/07/09/java%E7%A7%92%E6%9D%80/3.png" class="" title="This is 3-th image."><p>横向扩展（分布式、负载均衡）</p><img src="/JeckFS/2020/07/09/java%E7%A7%92%E6%9D%80/4.png" class="" title="This is 4-th image."><img src="/JeckFS/2020/07/09/java%E7%A7%92%E6%9D%80/5.png" class="" title="This is 5-th image."><img src="/JeckFS/2020/07/09/java%E7%A7%92%E6%9D%80/6.png" class="" title="This is 6-th image."><img src="/JeckFS/2020/07/09/java%E7%A7%92%E6%9D%80/7.png" class="" title="This is 7-th image."><img src="/JeckFS/2020/07/09/java%E7%A7%92%E6%9D%80/8.png" class="" title="This is 8-th image."><img src="/JeckFS/2020/07/09/java%E7%A7%92%E6%9D%80/9.png" class="" title="This is 9-th image."><img src="/JeckFS/2020/07/09/java%E7%A7%92%E6%9D%80/10.png" class="" title="This is 10-th image."><img src="/JeckFS/2020/07/09/java%E7%A7%92%E6%9D%80/11.png" class="" title="This is 11-th image."><p>高并发：缓存+异步化</p><hr><img src="/JeckFS/2020/07/09/java%E7%A7%92%E6%9D%80/12.png" class="" title="This is 12-th image."><p>知识点1：<br>响应码的封装，不同的情况下，响应数据不同，采用不同的方法去构造数据，在函数内构造相应数据。</p><p>继承Mybatis：</p><img src="/JeckFS/2020/07/09/java%E7%A7%92%E6%9D%80/13.png" class="" title="This is 13-th image."><img src="/JeckFS/2020/07/09/java%E7%A7%92%E6%9D%80/14.png" class="" title="This is 14-th image."><p><a href="https://www.jianshu.com/p/13616babe6ae">SpringBoot下使用Mybatis</a><br><a href="https://juejin.im/post/5c40848151882533e05ee6dc">SpringBoot整合Druid</a></p><p>一个数据库表对应一个domain对象(POJO)，一个domain对象对应一个dao接口。<br><img src="/JeckFS/2020/07/09/java%E7%A7%92%E6%9D%80/15.png" class="" title="This is 15-th image."></p><p>dao接口的书写：<br><img src="/JeckFS/2020/07/09/java%E7%A7%92%E6%9D%80/16.png" class="" title="This is 16-th image."></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span> <span class="comment">// 声明tx()为一个事物方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">tx</span><span class="params">()</span> &#123;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>集成Redis：<br><img src="/JeckFS/2020/07/09/java%E7%A7%92%E6%9D%80/17.png" class="" title="This is 17-th image."></p><p><code>@ConfigurationProperties(prefix=&quot;redis&quot;)</code><br>让springboot可以读取到application.properties中以redis打头的配置项。</p><p>后端接受配置参数：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(prefix=&quot;redis&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisConfig</span> &#123;</span><br><span class="line"><span class="keyword">private</span> String host;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> port;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> timeout;<span class="comment">//秒</span></span><br><span class="line"><span class="keyword">private</span> String password;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> poolMaxTotal;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> poolMaxIdle;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> poolMaxWait;<span class="comment">//秒</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getHost</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> host;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setHost</span><span class="params">(String host)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.host = host;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getPort</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> port;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPort</span><span class="params">(<span class="type">int</span> port)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.port = port;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getTimeout</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> timeout;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTimeout</span><span class="params">(<span class="type">int</span> timeout)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.timeout = timeout;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getPassword</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> password;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPassword</span><span class="params">(String password)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.password = password;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getPoolMaxTotal</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> poolMaxTotal;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPoolMaxTotal</span><span class="params">(<span class="type">int</span> poolMaxTotal)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.poolMaxTotal = poolMaxTotal;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getPoolMaxIdle</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> poolMaxIdle;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPoolMaxIdle</span><span class="params">(<span class="type">int</span> poolMaxIdle)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.poolMaxIdle = poolMaxIdle;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getPoolMaxWait</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> poolMaxWait;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPoolMaxWait</span><span class="params">(<span class="type">int</span> poolMaxWait)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.poolMaxWait = poolMaxWait;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#redis</span></span><br><span class="line">redis.host=127.0.0.1</span><br><span class="line">redis.port=6379</span><br><span class="line">redis.timeout=10</span><br><span class="line">redis.password=123</span><br><span class="line">redis.poolMaxTotal=1000</span><br><span class="line">redis.poolMaxIdle=500</span><br><span class="line">redis.poolMaxWait=500</span><br></pre></td></tr></table></figure><img src="/JeckFS/2020/07/09/java%E7%A7%92%E6%9D%80/18.png" class="" title="This is 18-th image."><p><strong>没有注册功能。</strong></p><img src="/JeckFS/2020/07/09/java%E7%A7%92%E6%9D%80/19.png" class="" title="This is 19-th image."><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">create table `miaosha_user` (</span><br><span class="line">`id` bigint(20) not null comment &#x27;用户ID，手机号码&#x27;,</span><br><span class="line">    `nickname` varchar(255) not null,</span><br><span class="line">    `password` varchar(32) default null comment &#x27;MD5(MD5(pass明文+固定salt)+salt)&#x27;,</span><br><span class="line">    `salt` varchar(10) default null,</span><br><span class="line">    `head` varchar(128) default null comment &#x27;头像，云存储的ID&#x27;,</span><br><span class="line">    `register_date` datetime default null comment &#x27;注册时间&#x27;,</span><br><span class="line">    `last_login_date` datetime default null comment &#x27;上次登录时间&#x27;,</span><br><span class="line">    `login_count` int(11) default &#x27;0&#x27; comment &#x27;登录次数&#x27;,</span><br><span class="line">    primary key (`id`)</span><br><span class="line">) engine=InnoDB default CHARSET=utf8mb4;</span><br></pre></td></tr></table></figure><p>第一次md5是防止密码在网络中明文传输。<br>第二次md5是防止数据库被盗后，防止根据md5反查出密码。</p><img src="/JeckFS/2020/07/09/java%E7%A7%92%E6%9D%80/20.png" class="" title="This is 20-th image."><p>前端页面中也会经历这几步的加密过程，前端专递过来的密码其实是经过两次md5之后的密码。后端通过相同的方法进行加密，然后进行比对。相同则说明密码正确，不相同则说明密码不正确。</p><p>shiro密码加密了解一下…</p><p>密码加密的一点感想：从防止根据密文反查出密码的角度，使用一个相当复杂的加密算法，这个加密算法十分难以破解。用户传递过来的密码经过加密后与数据库中的密码进行比对，若相等则密码输入正确。</p><p>jQuery validate插件验证表单。</p><p>自定义验证注解：<br>直接打开validate包中已经实现的注解，拷贝其修饰的注解，<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(&#123; METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER &#125;)</span></span><br><span class="line"><span class="meta">@Retention(RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="comment">// @Constant指定验证的逻辑</span></span><br><span class="line"><span class="meta">@Constraint(validatedBy = &#123;IsMobileValidator.class &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span>  IsMobile &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义的字段</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">required</span><span class="params">()</span> <span class="keyword">default</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从已经实现的注解中拷贝来的</span></span><br><span class="line">String <span class="title function_">message</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;手机号码格式错误&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从已经实现的注解中拷贝来的</span></span><br><span class="line">Class&lt;?&gt;[] groups() <span class="keyword">default</span> &#123; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从已经实现的注解中拷贝来的</span></span><br><span class="line">Class&lt;? <span class="keyword">extends</span> <span class="title class_">Payload</span>&gt;[] payload() <span class="keyword">default</span> &#123; &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 验证逻辑的实现</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IsMobileValidator</span> <span class="keyword">implements</span> <span class="title class_">ConstraintValidator</span>&lt;IsMobile, String&gt; &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">required</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initialize</span><span class="params">(IsMobile constraintAnnotation)</span> &#123;</span><br><span class="line">required = constraintAnnotation.required();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(String value, ConstraintValidatorContext context)</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(required) &#123;</span><br><span class="line"><span class="keyword">return</span> ValidatorUtil.isMobile(value);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(StringUtils.isEmpty(value)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> ValidatorUtil.isMobile(value);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果：</p><img src="/JeckFS/2020/07/09/java%E7%A7%92%E6%9D%80/21.png" class="" title="This is 21-th image."><p>异常的拦截：<br><a href="https://blog.csdn.net/zhaoyanjun6/article/details/80678034">参考博客</a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回信息</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CodeMsg</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> code;</span><br><span class="line"><span class="keyword">private</span> String msg;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通用的错误码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">CodeMsg</span> <span class="variable">SERVER_ERROR</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CodeMsg</span>(<span class="number">500100</span>, <span class="string">&quot;服务端异常&quot;</span>);</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">CodeMsg</span> <span class="variable">BIND_ERROR</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CodeMsg</span>(<span class="number">500101</span>, <span class="string">&quot;参数校验异常：%s&quot;</span>);</span><br><span class="line"><span class="keyword">public</span> CodeMsg <span class="title function_">fillArgs</span><span class="params">(Object... args)</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">code</span> <span class="operator">=</span> <span class="built_in">this</span>.code;</span><br><span class="line"><span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> String.format(<span class="built_in">this</span>.msg, args);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CodeMsg</span>(code, message);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 拦截到异常信息后的处理逻辑</span></span><br><span class="line"><span class="meta">@ControllerAdvice</span>  <span class="comment">// 是一个切面，与@Controller类似</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalExceptionHandler</span> &#123;</span><br><span class="line"><span class="comment">// 拦截Exception异常</span></span><br><span class="line"><span class="meta">@ExceptionHandler(value=Exception.class)</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;String&gt; <span class="title function_">exceptionHandler</span><span class="params">(HttpServletRequest request, Exception e)</span>&#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line"><span class="keyword">if</span>(e <span class="keyword">instanceof</span> GlobalException) &#123;</span><br><span class="line"><span class="type">GlobalException</span> <span class="variable">ex</span> <span class="operator">=</span> (GlobalException)e;</span><br><span class="line"><span class="keyword">return</span> Result.error(ex.getCm());</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(e <span class="keyword">instanceof</span> BindException) &#123;</span><br><span class="line"><span class="type">BindException</span> <span class="variable">ex</span> <span class="operator">=</span> (BindException)e;</span><br><span class="line">List&lt;ObjectError&gt; errors = ex.getAllErrors();</span><br><span class="line"><span class="type">ObjectError</span> <span class="variable">error</span> <span class="operator">=</span> errors.get(<span class="number">0</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> error.getDefaultMessage();</span><br><span class="line"><span class="keyword">return</span> Result.error(CodeMsg.BIND_ERROR.fillArgs(msg));</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> Result.error(CodeMsg.SERVER_ERROR);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@ControllerAdvice 只能捕捉运行时异常(RuntimeException)。自定义的异常如果要想被捕获，需要继承RuntimeException。</p><p>自定义完异常捕获器后，在controller方法中参数校验不通过直接抛出异常，让异常捕获器统一处理即可。<br>如：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">login</span><span class="params">(HttpServletResponse response, LoginVo loginVo)</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(loginVo == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">GlobalException</span>(CodeMsg.SERVER_ERROR);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">String</span> <span class="variable">mobile</span> <span class="operator">=</span> loginVo.getMobile();</span><br><span class="line"><span class="type">String</span> <span class="variable">formPass</span> <span class="operator">=</span> loginVo.getPassword();</span><br><span class="line"><span class="comment">//判断手机号是否存在</span></span><br><span class="line"><span class="type">MiaoshaUser</span> <span class="variable">user</span> <span class="operator">=</span> getById(Long.parseLong(mobile));</span><br><span class="line"><span class="keyword">if</span>(user == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">GlobalException</span>(CodeMsg.MOBILE_NOT_EXIST);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//验证密码</span></span><br><span class="line"><span class="type">String</span> <span class="variable">dbPass</span> <span class="operator">=</span> user.getPassword(); <span class="comment">// 数据库中存储的密码</span></span><br><span class="line"><span class="type">String</span> <span class="variable">saltDB</span> <span class="operator">=</span> user.getSalt();</span><br><span class="line"><span class="type">String</span> <span class="variable">calcPass</span> <span class="operator">=</span> MD5Util.formPassToDBPass(formPass, saltDB); <span class="comment">// 前台经过一次md5后传递过来的密码再次进行md5，然后与数据库中的密码进行比对</span></span><br><span class="line"><span class="keyword">if</span>(!calcPass.equals(dbPass)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">GlobalException</span>(CodeMsg.PASSWORD_ERROR);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//生成cookie</span></span><br><span class="line"><span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> UUIDUtil.uuid();</span><br><span class="line">addCookie(response, token, user);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>分布式session：<br>用户请求可能被不同的服务器接收到，为了保证每台服务器都可以相应用户请求，才引入了分布式session。<br>将cookie名称和过期时间存储到redis中即可实现分布式session。利用redis管理session。</p><img src="/JeckFS/2020/07/09/java%E7%A7%92%E6%9D%80/22.png" class="" title="This is 22-th image."><p>后端Controller函数自定义获取参数：</p><p><a href="https://segmentfault.com/a/1190000011420942">SpringBoot配置类WebMvcConfigurerAdapter</a><br><a href="https://juejin.im/post/5cb778146fb9a068b16e18fc">WebMvcConfigurerAdapter类被弃用后的两种选择</a></p><p>非重点仅了解即可：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebConfig</span>  <span class="keyword">extends</span> <span class="title class_">WebMvcConfigurerAdapter</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">UserArgumentResolver userArgumentResolver;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addArgumentResolvers</span><span class="params">(List&lt;HandlerMethodArgumentResolver&gt; argumentResolvers)</span> &#123;</span><br><span class="line">argumentResolvers.add(userArgumentResolver);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserArgumentResolver</span> <span class="keyword">implements</span> <span class="title class_">HandlerMethodArgumentResolver</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">MiaoshaUserService userService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">supportsParameter</span><span class="params">(MethodParameter parameter)</span> &#123;</span><br><span class="line">Class&lt;?&gt; clazz = parameter.getParameterType();</span><br><span class="line"><span class="keyword">return</span> clazz==MiaoshaUser.class;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">resolveArgument</span><span class="params">(MethodParameter parameter, ModelAndViewContainer mavContainer,</span></span><br><span class="line"><span class="params">NativeWebRequest webRequest, WebDataBinderFactory binderFactory)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> webRequest.getNativeRequest(HttpServletRequest.class);</span><br><span class="line"><span class="type">HttpServletResponse</span> <span class="variable">response</span> <span class="operator">=</span> webRequest.getNativeResponse(HttpServletResponse.class);</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">paramToken</span> <span class="operator">=</span> request.getParameter(MiaoshaUserService.COOKI_NAME_TOKEN);</span><br><span class="line"><span class="type">String</span> <span class="variable">cookieToken</span> <span class="operator">=</span> getCookieValue(request, MiaoshaUserService.COOKI_NAME_TOKEN);</span><br><span class="line"><span class="keyword">if</span>(StringUtils.isEmpty(cookieToken) &amp;&amp; StringUtils.isEmpty(paramToken)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> StringUtils.isEmpty(paramToken)?cookieToken:paramToken;</span><br><span class="line"><span class="keyword">return</span> userService.getByToken(response, token);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String <span class="title function_">getCookieValue</span><span class="params">(HttpServletRequest request, String cookiName)</span> &#123;</span><br><span class="line">Cookie[]  cookies = request.getCookies();</span><br><span class="line"><span class="keyword">for</span>(Cookie cookie : cookies) &#123;</span><br><span class="line"><span class="keyword">if</span>(cookie.getName().equals(cookiName)) &#123;</span><br><span class="line"><span class="keyword">return</span> cookie.getValue();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>list()中直接写对象，就可以传递过来。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/to_list&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">list</span><span class="params">(Model model,MiaoshaUser user)</span> &#123;</span><br><span class="line">   model.addAttribute(<span class="string">&quot;user&quot;</span>, user);</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;goods_list&quot;</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p>实现秒杀功能：<br><img src="/JeckFS/2020/07/09/java%E7%A7%92%E6%9D%80/23.png" class="" title="This is 23-th image."></p><p>用户浏览商品列表，进入商品详情页并点击秒杀按钮，秒杀成功进入订单详情页。</p><img src="/JeckFS/2020/07/09/java%E7%A7%92%E6%9D%80/24.png" class="" title="This is 24-th image."><img src="/JeckFS/2020/07/09/java%E7%A7%92%E6%9D%80/25.png" class="" title="This is 25-th image."><p>插入订单并返回生成的订单号。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Insert(&quot;insert into order_info(user_id, goods_id, goods_name, goods_count, goods_price, order_channel, status, create_date)values(&quot;</span></span><br><span class="line"><span class="meta">+ &quot;#&#123;userId&#125;, #&#123;goodsId&#125;, #&#123;goodsName&#125;, #&#123;goodsCount&#125;, #&#123;goodsPrice&#125;, #&#123;orderChannel&#125;,#&#123;status&#125;,#&#123;createDate&#125; )&quot;)</span></span><br><span class="line"><span class="meta">@SelectKey(keyColumn=&quot;id&quot;, keyProperty=&quot;id&quot;, resultType=long.class, before=false, statement=&quot;select last_insert_id()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">long</span> <span class="title function_">insert</span><span class="params">(OrderInfo orderInfo)</span>;</span><br></pre></td></tr></table></figure></p><p><code>@SelctKey(statement=&quot;SQL语句&quot;,keyProperty=&quot;将SQL语句查询结果存放到keyProperty中去&quot;,before=&quot;true表示先查询再插入，false反之&quot;,resultType=int.class)</code><br>其中：</p><ul><li>statement是要运行的SQL语句，它的返回值通过resultType来指定</li><li>before表示查询语句statement运行的时机</li><li>keyProperty表示查询结果赋值给代码中的哪个对象，keyColumn表示将查询结果赋值给数据库表中哪一列</li><li>keyProperty和keyColumn都不是必需的，有没有都可以</li><li>before=true，插入之前进行查询，可以将查询结果赋给keyProperty和keyColumn，赋给keyColumn相当于更改数据库</li><li>befaore=false，先插入，再查询，这时只能将结果赋给keyProperty</li><li>赋值给keyProperty用来“读”数据库，赋值给keyColumn用来写数据库</li><li>selectKey的两大作用：1、生成主键；2、获取刚刚插入数据的主键。</li><li>使用selectKey，并且使用MySQL的last_insert_id()函数时，before必为false，也就是说必须先插入然后执行last_insert_id()才能获得刚刚插入数据的ID。</li></ul><img src="/JeckFS/2020/07/09/java%E7%A7%92%E6%9D%80/26.png" class="" title="This is 26-th image."><img src="/JeckFS/2020/07/09/java%E7%A7%92%E6%9D%80/27.png" class="" title="This is 27-th image."><img src="/JeckFS/2020/07/09/java%E7%A7%92%E6%9D%80/28.png" class="" title="This is 28-th image."><p>Jmeter的使用：<br>使用多用户进行模拟：<br><img src="/JeckFS/2020/07/09/java%E7%A7%92%E6%9D%80/30.png" class="" title="This is 30-th image."><br><img src="/JeckFS/2020/07/09/java%E7%A7%92%E6%9D%80/29.png" class="" title="This is 29-th image."><br><img src="/JeckFS/2020/07/09/java%E7%A7%92%E6%9D%80/31.png" class="" title="This is 31-th image."><br><img src="/JeckFS/2020/07/09/java%E7%A7%92%E6%9D%80/32.png" class="" title="This is 32-th image."></p><p>redis压测：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">redis-benchmark -h 127.0.0.1 -p 6379 -c 100 -n 100000</span><br><span class="line">100个并发连接，100000个请求</span><br><span class="line"></span><br><span class="line">redis-benchmark -h 127.0.0.1 -p 6379 -q -d 100</span><br><span class="line">存取大小为100字节的数据包</span><br><span class="line"></span><br><span class="line">redis-benchmark -t set,lpush -n 100000 -q</span><br><span class="line">只测试某些操作的性能</span><br><span class="line"></span><br><span class="line">redsi-benchmark -n 100000 -q script load &quot;redis.call(&#x27;set&#x27;,&#x27;foo&#x27;,&#x27;bar&#x27;)&quot;</span><br><span class="line">只测试某些数值存取的性能</span><br></pre></td></tr></table></figure></p><img src="/JeckFS/2020/07/09/java%E7%A7%92%E6%9D%80/33.png" class="" title="This is 33-th image."><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- step 1 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- step 2 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- step 3 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-war-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">failOnMissingWebXml</span>&gt;</span>false<span class="tag">&lt;/<span class="name">failOnMissingWebXml</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// step 4: 继承SpringBootServletInitializer，重写config()</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainApplication</span> <span class="keyword">extends</span> <span class="title class_">SpringBootServletInitializer</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">SpringApplication.run(MainApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> SpringApplicationBuilder <span class="title function_">configure</span><span class="params">(SpringApplicationBuilder builder)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> builder.sources(MainApplication.class);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>部署war包：</p><ol><li>利用maven clean、compile、install生成war包</li><li>将war包放在apache安装目录中的webapp中</li><li>在浏览器中输入<a href="http://localhost:8080/miaosha/login/to_login即可出现登录界面，但这是并不能登录，要真正部署，需要放在root目录下。">http://localhost:8080/miaosha/login/to_login即可出现登录界面，但这是并不能登录，要真正部署，需要放在root目录下。</a></li></ol><img src="/JeckFS/2020/07/09/java%E7%A7%92%E6%9D%80/34.png" class="" title="This is 34-th image."><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ./bin/jmeter.sh -n -t Aggregate\ Report.jmx -l result.jtl</span><br></pre></td></tr></table></figure><p>数据库批量插入与模拟登录<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">createUser</span><span class="params">(<span class="type">int</span> count)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">List&lt;MiaoshaUser&gt; users = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;MiaoshaUser&gt;(count);</span><br><span class="line"><span class="comment">//生成用户</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;count;i++) &#123;</span><br><span class="line"><span class="type">MiaoshaUser</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MiaoshaUser</span>();</span><br><span class="line">user.setId(<span class="number">13000000000L</span>+i);</span><br><span class="line">user.setLoginCount(<span class="number">1</span>);</span><br><span class="line">user.setNickname(<span class="string">&quot;user&quot;</span>+i);</span><br><span class="line">user.setRegisterDate(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">user.setSalt(<span class="string">&quot;1a2b3c&quot;</span>);</span><br><span class="line">user.setPassword(MD5Util.inputPassToDbPass(<span class="string">&quot;123456&quot;</span>, user.getSalt()));</span><br><span class="line">users.add(user);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;create user&quot;</span>);</span><br><span class="line"><span class="comment">////插入数据库</span></span><br><span class="line"><span class="comment">//Connection conn = DBUtil.getConn();</span></span><br><span class="line"><span class="comment">//String sql = &quot;insert into miaosha_user(login_count, nickname, register_date, salt, password, id)values(?,?,?,?,?,?)&quot;;</span></span><br><span class="line"><span class="comment">//PreparedStatement pstmt = conn.prepareStatement(sql);</span></span><br><span class="line"><span class="comment">//for(int i=0;i&lt;users.size();i++) &#123;</span></span><br><span class="line"><span class="comment">//MiaoshaUser user = users.get(i);</span></span><br><span class="line"><span class="comment">//pstmt.setInt(1, user.getLoginCount());</span></span><br><span class="line"><span class="comment">//pstmt.setString(2, user.getNickname());</span></span><br><span class="line"><span class="comment">//pstmt.setTimestamp(3, new Timestamp(user.getRegisterDate().getTime()));</span></span><br><span class="line"><span class="comment">//pstmt.setString(4, user.getSalt());</span></span><br><span class="line"><span class="comment">//pstmt.setString(5, user.getPassword());</span></span><br><span class="line"><span class="comment">//pstmt.setLong(6, user.getId());</span></span><br><span class="line"><span class="comment">//pstmt.addBatch();</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//pstmt.executeBatch();</span></span><br><span class="line"><span class="comment">//pstmt.close();</span></span><br><span class="line"><span class="comment">//conn.close();</span></span><br><span class="line"><span class="comment">//System.out.println(&quot;insert to db&quot;);</span></span><br><span class="line"><span class="comment">//登录，生成token</span></span><br><span class="line"><span class="type">String</span> <span class="variable">urlString</span> <span class="operator">=</span> <span class="string">&quot;http://localhost:8080/login/do_login&quot;</span>;</span><br><span class="line"><span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;/home/yfs/Desktop/tokens.txt&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(file.exists()) &#123;</span><br><span class="line">file.delete();</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">RandomAccessFile</span> <span class="variable">raf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RandomAccessFile</span>(file, <span class="string">&quot;rw&quot;</span>);</span><br><span class="line">file.createNewFile();</span><br><span class="line">raf.seek(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;users.size();i++) &#123;</span><br><span class="line"><span class="type">MiaoshaUser</span> <span class="variable">user</span> <span class="operator">=</span> users.get(i);</span><br><span class="line"><span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(urlString);</span><br><span class="line"><span class="type">HttpURLConnection</span> <span class="variable">co</span> <span class="operator">=</span> (HttpURLConnection)url.openConnection();</span><br><span class="line">co.setRequestMethod(<span class="string">&quot;POST&quot;</span>);</span><br><span class="line">co.setDoOutput(<span class="literal">true</span>);</span><br><span class="line"><span class="type">OutputStream</span> <span class="variable">out</span> <span class="operator">=</span> co.getOutputStream();</span><br><span class="line"><span class="type">String</span> <span class="variable">params</span> <span class="operator">=</span> <span class="string">&quot;mobile=&quot;</span>+user.getId()+<span class="string">&quot;&amp;password=&quot;</span>+MD5Util.inputPassToFormPass(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">out.write(params.getBytes());</span><br><span class="line">out.flush();</span><br><span class="line"><span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> co.getInputStream();</span><br><span class="line"><span class="type">ByteArrayOutputStream</span> <span class="variable">bout</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line"><span class="type">byte</span> buff[] = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line"><span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>((len = inputStream.read(buff)) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">bout.write(buff, <span class="number">0</span> ,len);</span><br><span class="line">&#125;</span><br><span class="line">inputStream.close();</span><br><span class="line">bout.close();</span><br><span class="line"><span class="type">String</span> <span class="variable">response</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(bout.toByteArray());</span><br><span class="line"><span class="type">JSONObject</span> <span class="variable">jo</span> <span class="operator">=</span> JSON.parseObject(response);</span><br><span class="line"><span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> jo.getString(<span class="string">&quot;data&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;create token : &quot;</span> + user.getId());</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">row</span> <span class="operator">=</span> user.getId()+<span class="string">&quot;,&quot;</span>+token;</span><br><span class="line">raf.seek(raf.length());</span><br><span class="line">raf.write(row.getBytes());</span><br><span class="line">raf.write(<span class="string">&quot;\r\n&quot;</span>.getBytes());</span><br><span class="line">System.out.println(<span class="string">&quot;write to file : &quot;</span> + user.getId());</span><br><span class="line">&#125;</span><br><span class="line">raf.close();</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;over&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><img src="/JeckFS/2020/07/09/java%E7%A7%92%E6%9D%80/35.png" class="" title="This is 35-th image."><img src="/JeckFS/2020/07/09/java%E7%A7%92%E6%9D%80/36.png" class="" title="This is 36-th image."><p><a id="staticPage" href="#ret1">静态页面处理：</a></p><ol><li><code>@RequestMapping(value=&quot;/to_list&quot;, produces=&quot;text/html&quot;)</code><br>直接返回html页面信息。</li><li>手动渲染html页面：ThymeleafViewResolver</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value=&quot;/to_list&quot;, produces=&quot;text/html&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">list</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Model model,MiaoshaUser user)</span> &#123;</span><br><span class="line">    model.addAttribute(<span class="string">&quot;user&quot;</span>, user);</span><br><span class="line">    <span class="comment">//取缓存</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">html</span> <span class="operator">=</span> redisService.get(GoodsKey.getGoodsList, <span class="string">&quot;&quot;</span>, String.class);</span><br><span class="line">    <span class="keyword">if</span>(!StringUtils.isEmpty(html)) &#123;</span><br><span class="line">    <span class="keyword">return</span> html;</span><br><span class="line">    &#125;</span><br><span class="line">    List&lt;GoodsVo&gt; goodsList = goodsService.listGoodsVo();</span><br><span class="line">    model.addAttribute(<span class="string">&quot;goodsList&quot;</span>, goodsList);</span><br><span class="line"><span class="comment">//     return &quot;goods_list&quot;;</span></span><br><span class="line">    <span class="type">SpringWebContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SpringWebContext</span>(request,response,</span><br><span class="line">    request.getServletContext(),request.getLocale(), model.asMap(), applicationContext );</span><br><span class="line">    <span class="comment">//手动渲染</span></span><br><span class="line">    html = thymeleafViewResolver.getTemplateEngine().process(<span class="string">&quot;goods_list&quot;</span>, ctx);</span><br><span class="line">    <span class="keyword">if</span>(!StringUtils.isEmpty(html)) &#123;</span><br><span class="line">    redisService.set(GoodsKey.getGoodsList, <span class="string">&quot;&quot;</span>, html);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> html;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/weixin_38035852/article/details/81054397?utm_medium=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase">url缓存</a></p><p>对象缓存，缓存的是一个对象<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> MiaoshaUser <span class="title function_">getByToken</span><span class="params">(HttpServletResponse response, String token)</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(StringUtils.isEmpty(token)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">MiaoshaUser</span> <span class="variable">user</span> <span class="operator">=</span> redisService.get(MiaoshaUserKey.token, token, MiaoshaUser.class);</span><br><span class="line"><span class="comment">//延长有效期</span></span><br><span class="line"><span class="keyword">if</span>(user != <span class="literal">null</span>) &#123;</span><br><span class="line">addCookie(response, token, user);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> MiaoshaUser <span class="title function_">getById</span><span class="params">(<span class="type">long</span> id)</span> &#123;</span><br><span class="line"><span class="comment">//取缓存</span></span><br><span class="line"><span class="type">MiaoshaUser</span> <span class="variable">user</span> <span class="operator">=</span> redisService.get(MiaoshaUserKey.getById, <span class="string">&quot;&quot;</span>+id, MiaoshaUser.class);</span><br><span class="line"><span class="keyword">if</span>(user != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//取数据库</span></span><br><span class="line">user = miaoshaUserDao.getById(id);</span><br><span class="line"><span class="keyword">if</span>(user != <span class="literal">null</span>) &#123;</span><br><span class="line">redisService.set(MiaoshaUserKey.getById, <span class="string">&quot;&quot;</span>+id, user);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/tTU1EvLDeLFq5btqiK/article/details/78693323">缓存更新注意的问题</a></p><p>先更新数据库，再让数据库失效。</p><p><strong>页面静态化</strong></p><ul><li>页面只存的html，动态数据通过接口从后端获取。服务端只需要写好接口即可。</li><li>直接将页面缓存在客户端的浏览器中。</li></ul><img src="/JeckFS/2020/07/09/java%E7%A7%92%E6%9D%80/37.png" class="" title="This is 37-th image."><blockquote><p>GET主要是从后端获取数据，若使用GET删除数据，会导致严重的后果。因为浏览器会遍历GET请求，不知不觉中就把数据删除了。</p><p>304状态码：客户端发送GET请求，且请求已允许，而文档内容较上次未发生改变，则服务器返回304状态码。即服务端已经执行了GET请求，但文件未发生变化。<br>与浏览器缓存相关的HTTP头部字段：Pragma、Expire、Cache-Control</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##### spring对静态文件的处理的相关配置</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启用静态文件处理</span></span><br><span class="line"><span class="string">spring.resources.add-mappings=true</span> </span><br><span class="line"><span class="comment"># 指示客户端缓存页面的时间，单位是秒</span></span><br><span class="line"><span class="string">spring.resources.cache-period=</span> <span class="number">3600</span></span><br><span class="line"><span class="string">spring.resources.chain.cache=true</span> </span><br><span class="line"><span class="string">spring.resources.chain.enabled=true</span></span><br><span class="line"><span class="comment"># 是否对静态页面进行压缩</span></span><br><span class="line"><span class="string">spring.resources.chain.gzipped=true</span> </span><br><span class="line"><span class="comment"># 启用HTML5的应用缓存</span></span><br><span class="line"><span class="string">spring.resources.chain.html-application-cache=true</span> </span><br><span class="line"><span class="comment"># 指定静态文件的路径</span></span><br><span class="line"><span class="string">spring.resources.static-locations=classpath:/static/</span> </span><br></pre></td></tr></table></figure><p><strong>请求拦截器 @NeedLogin</strong></p><p><strong><a id="miaodian2" href="#ret2">超卖问题</a></strong><br>在更新时，判断是否有库存。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Update(&quot;update miaosha_goods set stock_count = stock_count - 1 where goods_id = #&#123;goodsId&#125; and stock_count &gt; 0&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">reduceStock</span><span class="params">(MiaoshaGoods g)</span>;</span><br></pre></td></tr></table></figure><p><strong><a id="maodian3" href="#ret3">一个用户秒杀到两个商品的问题</a></strong><br>在商品库存充足的条件下，同一个用户同时发出两个请求，且这两个请求都没有秒杀到，进入到了减库存下订单的环节，导致一个用户秒杀到两个商品的问题。</p><p>解决方案：<br>通过数据库的唯一索引，确保秒杀到的订单只有一个。<br>应用层的解决方案：设置验证码，不让用户同时发送两个请求。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value=&quot;/do_miaosha&quot;, method=RequestMethod.POST)</span></span><br><span class="line">   <span class="meta">@ResponseBody</span></span><br><span class="line">   <span class="keyword">public</span> Result&lt;OrderInfo&gt; <span class="title function_">miaosha</span><span class="params">(Model model,MiaoshaUser user,</span></span><br><span class="line"><span class="params">   <span class="meta">@RequestParam(&quot;goodsId&quot;)</span><span class="type">long</span> goodsId)</span> &#123;</span><br><span class="line">   model.addAttribute(<span class="string">&quot;user&quot;</span>, user);</span><br><span class="line">   <span class="keyword">if</span>(user == <span class="literal">null</span>) &#123;</span><br><span class="line">   <span class="keyword">return</span> Result.error(CodeMsg.SESSION_ERROR);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//判断库存  （库存充足，两个请求都可以通过）</span></span><br><span class="line">   <span class="type">GoodsVo</span> <span class="variable">goods</span> <span class="operator">=</span> goodsService.getGoodsVoByGoodsId(goodsId);<span class="comment">//10个商品，req1 req2</span></span><br><span class="line">   <span class="type">int</span> <span class="variable">stock</span> <span class="operator">=</span> goods.getStockCount();</span><br><span class="line">   <span class="keyword">if</span>(stock &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">   <span class="keyword">return</span> Result.error(CodeMsg.MIAO_SHA_OVER);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//判断是否已经秒杀到了 （用户以前根本没有秒杀到商品，所以两个请求在这儿查到的秒杀到的订单都是null，进入了减库存下订单的环节，导致一个用户秒杀到了两个商品）</span></span><br><span class="line">   <span class="type">MiaoshaOrder</span> <span class="variable">order</span> <span class="operator">=</span> orderService.getMiaoshaOrderByUserIdGoodsId(user.getId(), goodsId);</span><br><span class="line">   <span class="keyword">if</span>(order != <span class="literal">null</span>) &#123;</span><br><span class="line">   <span class="keyword">return</span> Result.error(CodeMsg.REPEATE_MIAOSHA);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//减库存 下订单 写入秒杀订单</span></span><br><span class="line">   <span class="type">OrderInfo</span> <span class="variable">orderInfo</span> <span class="operator">=</span> miaoshaService.miaosha(user, goods);</span><br><span class="line">       <span class="keyword">return</span> Result.success(orderInfo);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><strong><a id="maodian4" href="#ret4">静态资源优化</a></strong></p><ol><li>JS/CSS压缩，减少流量。如使用jQuery的min版本的js</li><li>多个JS/CSS组合，减少连接数<br>将多个JS/CSS组合到一个请求中，一下子从客户端全部下载下来。</li><li>CDN就近访问</li></ol><p><a href="http://tengine.taobao.org/">Tengine</a><br><a href="https://www.webpackjs.com/concepts/">webpack前端打包工具</a><br><a href="https://baike.baidu.com/item/CDN">CDN</a></p><p>CDN其实是一种缓存，在网络节点中做缓存，让离用户最近的节点响应用户的请求。不仅仅是距离，也可以是网络流量、节点的连接情况、负载状况、响应时间等综合信息确定响应用户请求的节点机器。解决网络拥堵，提高用户访问网站的响应速度。</p><p>请求从发出到最后相应经历的缓存过程：<br> 页面静态化，将页面信息缓存在客户的浏览器端。<br> 在请求到达服务器之前，部署CDN节点，让请求首先访问CDN节点。<br> 请求到达服务端，使用Nginx再做缓存。<br> 在服务器中，页面缓存—&gt;对象缓存—&gt;数据库。</p><p> 总的思路就是一步步的削减访问数据库的请求。对于数据不一致的问题，只能是两者的一个平衡。在满足数据一致的前提下，尽可能的做缓存。</p><hr><img src="/JeckFS/2020/07/09/java%E7%A7%92%E6%9D%80/38.png" class="" title="This is 38-th image."><img src="/JeckFS/2020/07/09/java%E7%A7%92%E6%9D%80/39.png" class="" title="This is 39-th image."><p>分库分表的中间件：Mycat</p><img src="/JeckFS/2020/07/09/java%E7%A7%92%E6%9D%80/40.png" class="" title="This is 40-th image."><img src="/JeckFS/2020/07/09/java%E7%A7%92%E6%9D%80/41.png" class="" title="This is 41-th image."><p>同步订单改为异步订单：</p><p>第三步，订单并不是直接请求数据库，而是放入消息队列中，并给用户反馈排队中。<br>第四步和第五步是并发执行的。生成订单后直接写到redis中，客户端轮询redis，判断是否秒杀成功。</p><img src="/JeckFS/2020/07/09/java%E7%A7%92%E6%9D%80/42.png" class="" title="This is 42-th image."><p>启动、停止、重启、状态rabbitMq命令</p><p>sudo rabbitmq-server start<br>sudo rabbitmq-server stop<br>sudo rabbitmq-server restart<br>sudo rabbitmqctl status</p><img src="/JeckFS/2020/07/09/java%E7%A7%92%E6%9D%80/43.png" class="" title="This is 43-th image."><h2 id="rabbitMQ的使用"><a href="#rabbitMQ的使用" class="headerlink" title="rabbitMQ的使用: "></a><a id="end1" href="#ret5">rabbitMQ的使用: </a></h2><p><strong>Direct模式的使用</strong><br>1.初始化bean：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> Queue <span class="title function_">queue</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">// new Queue(名称, 是否持久化)</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(QUEUE, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>2.MQSender.java中写发送逻辑<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">send</span><span class="params">(Object message)</span> &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> RedisService.beanToString(message);</span><br><span class="line">log.info(<span class="string">&quot;send message:&quot;</span>+msg);</span><br><span class="line">amqpTemplate.convertAndSend(MQConfig.QUEUE, msg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>3.MQReceiver.java中写接受逻辑<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(queues=MQConfig.QUEUE)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receive</span><span class="params">(String message)</span> &#123;</span><br><span class="line">log.info(<span class="string">&quot;receive message:&quot;</span>+message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>消息并不是直接发送到消息队列，而是发送到交换机中。然后再将交换机发送到消息队列中。</p><p><strong>Topic模式 交换机Exchange</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Topic模式 交换机Exchange</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> Queue <span class="title function_">topicQueue1</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(TOPIC_QUEUE1, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> Queue <span class="title function_">topicQueue2</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(TOPIC_QUEUE2, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> TopicExchange <span class="title function_">topicExchage</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TopicExchange</span>(TOPIC_EXCHANGE);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> Binding <span class="title function_">topicBinding1</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> BindingBuilder.bind(topicQueue1()).t(topicExchage()).with(<span class="string">&quot;topic.key1&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> Binding <span class="title function_">topicBinding2</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">// Topic模式支持通配符： ‘*’ 代表一个单词,&#x27;#&#x27; 代表一个或多个词</span></span><br><span class="line"><span class="keyword">return</span> BindingBuilder.bind(topicQueue2()).t(topicExchage()).with(<span class="string">&quot;topic.#&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendTopic</span><span class="params">(Object message)</span> &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> RedisService.beanToString(message);</span><br><span class="line">log.info(<span class="string">&quot;send topic message:&quot;</span>+msg);</span><br><span class="line">    <span class="comment">// convertAndSend参数：</span></span><br><span class="line">    <span class="comment">// String exchange,String routingkey, Object message</span></span><br><span class="line">amqpTemplate.convertAndSend(MQConfig.TOPIC_EXCHANGE,<span class="string">&quot;topic.key1&quot;</span>, msg+<span class="string">&quot;1&quot;</span>); <span class="comment">// 可以匹配topicQueue1和topicQueue2</span></span><br><span class="line">amqpTemplate.convertAndSend(MQConfig.TOPIC_EXCHANGE,<span class="string">&quot;topic.key2&quot;</span>, msg+<span class="string">&quot;2&quot;</span>); <span class="comment">// 只可以匹配topicQueue1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(queues=MQConfig.TOPIC_QUEUE1)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receiveTopic1</span><span class="params">(String message)</span> &#123;</span><br><span class="line">log.info(<span class="string">&quot; topic  queue1 message:&quot;</span>+message);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@RabbitListener(queues=MQConfig.TOPIC_QUEUE2)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receiveTopic2</span><span class="params">(String message)</span> &#123;</span><br><span class="line">log.info(<span class="string">&quot; topic  queue2 message:&quot;</span>+message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Fanout模式 交换机Exchanger</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Fanout模式 交换机Exchange</span></span><br><span class="line"><span class="comment"> * 广播模式,可以发给多个Queue</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> FanoutExchange <span class="title function_">fanoutExchange</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">FanoutExchange</span>(<span class="string">&quot;fanoutxchage&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 一个交换机exchanger绑定到两个队列上</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> Binding <span class="title function_">FanoutBinding1</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> BindingBuilder.bind(topicQueue1()).to(fanoutExchage());</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> Binding <span class="title function_">FanoutBinding2</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> BindingBuilder.bind(topicQueue2()).to(fanoutExchage());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 发送者</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendFanout</span><span class="params">(Object message)</span> &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> RedisService.beanToString(message);</span><br><span class="line">log.info(<span class="string">&quot;send fanout message:&quot;</span>+msg);</span><br><span class="line">amqpTemplate.convertAndSend(<span class="string">&quot;fanoutxchage&quot;</span>, <span class="string">&quot;&quot;</span>, msg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Controller层测试</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/mq/fanout&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;String&gt; <span class="title function_">fanout</span><span class="params">()</span> &#123;</span><br><span class="line">sender.sendFanout(<span class="string">&quot;hello,imooc&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> Result.success(<span class="string">&quot;Hello，world&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 发送者</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendHeader</span><span class="params">(Object message)</span> &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> RedisService.beanToString(message);</span><br><span class="line">log.info(<span class="string">&quot;send fanout message:&quot;</span>+msg);</span><br><span class="line"><span class="type">MessageProperties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MessageProperties</span>();</span><br><span class="line">properties.setHeader(<span class="string">&quot;header1&quot;</span>, <span class="string">&quot;value1&quot;</span>);</span><br><span class="line">properties.setHeader(<span class="string">&quot;header2&quot;</span>, <span class="string">&quot;value2&quot;</span>);</span><br><span class="line"><span class="comment">// 发送的是字节数组</span></span><br><span class="line"><span class="type">Message</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Message</span>(msg.getBytes(), properties);</span><br><span class="line">amqpTemplate.convertAndSend(MQConfig.HEADERS_EXCHANGE, <span class="string">&quot;&quot;</span>, obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 接受者</span></span><br><span class="line"><span class="meta">@RabbitListener(queues=MQConfig.HEADER_QUEUE)</span></span><br><span class="line"><span class="comment">// 接受发送的字节数组</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receiveHeaderQueue</span><span class="params">(<span class="type">byte</span>[] message)</span> &#123;</span><br><span class="line">log.info(<span class="string">&quot; header  queue message:&quot;</span>+<span class="keyword">new</span> <span class="title class_">String</span>(message));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Controller层测试入口</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/mq/header&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;String&gt; <span class="title function_">header</span><span class="params">()</span> &#123;</span><br><span class="line">sender.sendHeader(<span class="string">&quot;hello,imooc&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> Result.success(<span class="string">&quot;Hello，world&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>系统初始化时就将商品信息缓存到redis中：<br>实现InitializingBean接口，并重写afterPropertiesSet()方法。<br>参见MiaoshaController.java</p><p>当库存为0，使用内存标记减少对redis的库存查询。</p><img src="/JeckFS/2020/07/09/java%E7%A7%92%E6%9D%80/44.png" class="" title="This is 44-th image."><h1 id="安全优化"><a href="#安全优化" class="headerlink" title="安全优化"></a><a id="youhua" href="#youhuaret">安全优化</a></h1><img src="/JeckFS/2020/07/09/java%E7%A7%92%E6%9D%80/45.png" class="" title="This is 45-th image."><p>1.秒杀接口地址隐藏<br>从服务端获取，动态生成的地址<br>2.数学公式的验证码<br>防止机器人盗刷，缓解用户请求，避免集中的请求处理。<br>3.接口的限流防刷<br>比如限制用户在某个时间内，访问100次。<br>实现：将访问次数写入缓存中，同时给这个数据加一个有效期。用户在有效期内每次访问，该数值加1。若在有效期内超过指定数值，直接返回失败。有效期结束后，缓存中自动让其失效，再重新添加。</p><img src="/JeckFS/2020/07/09/java%E7%A7%92%E6%9D%80/46.png" class="" title="This is 46-th image."><p>秒杀地址的获取可以通过验证码来防止破解。</p><img src="/JeckFS/2020/07/09/java%E7%A7%92%E6%9D%80/47.png" class="" title="This is 47-th image."><p>前端先请求获取请求的路径标识；后端改造接口，将路径标识作为参数传递到后端接口，在接口函数中判断路径标识是否合法。路径标识是存在与redis中的，后端接口函数从redis中获取并判断其合法性。</p><p><strong>后端：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AccessLimit(seconds=5, maxCount=5, needLogin=true)</span> <span class="comment">// 用于实现限流防刷</span></span><br><span class="line"><span class="meta">@RequestMapping(value=&quot;/path&quot;, method=RequestMethod.GET)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;String&gt; <span class="title function_">getMiaoshaPath</span><span class="params">(HttpServletRequest request, MiaoshaUser user,</span></span><br><span class="line"><span class="params"><span class="meta">@RequestParam(&quot;goodsId&quot;)</span><span class="type">long</span> goodsId,</span></span><br><span class="line"><span class="params"><span class="meta">@RequestParam(value=&quot;verifyCode&quot;, defaultValue=&quot;0&quot;)</span><span class="type">int</span> verifyCode</span></span><br><span class="line"><span class="params">)</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(user == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> Result.error(CodeMsg.SESSION_ERROR);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 校验验证码</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">check</span> <span class="operator">=</span> miaoshaService.checkVerifyCode(user, goodsId, verifyCode);</span><br><span class="line"><span class="keyword">if</span>(!check) &#123;</span><br><span class="line"><span class="keyword">return</span> Result.error(CodeMsg.REQUEST_ILLEGAL);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">String</span> <span class="variable">path</span>  <span class="operator">=</span>miaoshaService.createMiaoshaPath(user, goodsId);</span><br><span class="line"><span class="keyword">return</span> Result.success(path);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value=&quot;/&#123;path&#125;/do_miaosha&quot;, method=RequestMethod.POST)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;Integer&gt; <span class="title function_">miaosha</span><span class="params">(Model model,MiaoshaUser user,</span></span><br><span class="line"><span class="params"><span class="meta">@RequestParam(&quot;goodsId&quot;)</span><span class="type">long</span> goodsId,</span></span><br><span class="line"><span class="params"><span class="meta">@PathVariable(&quot;path&quot;)</span> String path)</span> &#123;</span><br><span class="line">model.addAttribute(<span class="string">&quot;user&quot;</span>, user);</span><br><span class="line"><span class="keyword">if</span>(user == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> Result.error(CodeMsg.SESSION_ERROR);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//验证path</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">check</span> <span class="operator">=</span> miaoshaService.checkPath(user, goodsId, path);</span><br><span class="line"><span class="keyword">if</span>(!check)&#123;</span><br><span class="line"><span class="keyword">return</span> Result.error(CodeMsg.REQUEST_ILLEGAL);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//内存标记，减少redis访问</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">over</span> <span class="operator">=</span> localOverMap.get(goodsId);</span><br><span class="line"><span class="keyword">if</span>(over) &#123;</span><br><span class="line"><span class="keyword">return</span> Result.error(CodeMsg.MIAO_SHA_OVER);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//预减库存</span></span><br><span class="line"><span class="type">long</span> <span class="variable">stock</span> <span class="operator">=</span> redisService.decr(GoodsKey.getMiaoshaGoodsStock, <span class="string">&quot;&quot;</span>+goodsId);<span class="comment">//10</span></span><br><span class="line"><span class="keyword">if</span>(stock &lt;= <span class="number">0</span>) &#123; <span class="comment">// 自己将&lt;替换为了&lt;=</span></span><br><span class="line"> localOverMap.put(goodsId, <span class="literal">true</span>);</span><br><span class="line"><span class="keyword">return</span> Result.error(CodeMsg.MIAO_SHA_OVER);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断是否已经秒杀到了</span></span><br><span class="line"><span class="type">MiaoshaOrder</span> <span class="variable">order</span> <span class="operator">=</span> orderService.getMiaoshaOrderByUserIdGoodsId(user.getId(), goodsId);</span><br><span class="line"><span class="keyword">if</span>(order != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> Result.error(CodeMsg.REPEATE_MIAOSHA);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//入队</span></span><br><span class="line"><span class="type">MiaoshaMessage</span> <span class="variable">mm</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MiaoshaMessage</span>();</span><br><span class="line">mm.setUser(user);</span><br><span class="line">mm.setGoodsId(goodsId);</span><br><span class="line">sender.sendMiaoshaMessage(mm);</span><br><span class="line"><span class="keyword">return</span> Result.success(<span class="number">0</span>);<span class="comment">//排队中</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">//判断库存</span></span><br><span class="line"><span class="comment">GoodsVo goods = goodsService.getGoodsVoByGoodsId(goodsId);//10个商品，req1 req2</span></span><br><span class="line"><span class="comment">int stock = goods.getStockCount();</span></span><br><span class="line"><span class="comment">if(stock &lt;= 0) &#123;</span></span><br><span class="line"><span class="comment">return Result.error(CodeMsg.MIAO_SHA_OVER);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">//判断是否已经秒杀到了</span></span><br><span class="line"><span class="comment">MiaoshaOrder order = orderService.getMiaoshaOrderByUserIdGoodsId(user.getId(), goodsId);</span></span><br><span class="line"><span class="comment">if(order != null) &#123;</span></span><br><span class="line"><span class="comment">return Result.error(CodeMsg.REPEATE_MIAOSHA);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">//减库存 下订单 写入秒杀订单</span></span><br><span class="line"><span class="comment">OrderInfo orderInfo = miaoshaService.miaosha(user, goods);</span></span><br><span class="line"><span class="comment">    return Result.success(orderInfo);</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>前端：</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getMiaoshaPath</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">var</span> goodsId = $(<span class="string">&quot;#goodsId&quot;</span>).<span class="title function_">val</span>();</span><br><span class="line"><span class="title function_">g_showLoading</span>();</span><br><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line"><span class="attr">url</span>:<span class="string">&quot;/miaosha/path&quot;</span>,</span><br><span class="line"><span class="attr">type</span>:<span class="string">&quot;GET&quot;</span>,</span><br><span class="line"><span class="attr">data</span>:&#123;</span><br><span class="line"><span class="attr">goodsId</span>:goodsId,</span><br><span class="line"><span class="attr">verifyCode</span>:$(<span class="string">&quot;#verifyCode&quot;</span>).<span class="title function_">val</span>()</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">success</span>:<span class="keyword">function</span>(<span class="params">data</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(data.<span class="property">code</span> == <span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">var</span> path = data.<span class="property">data</span>;</span><br><span class="line"><span class="title function_">doMiaosha</span>(path); <span class="comment">// 获取路径后请求后端秒杀接口</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">layer.<span class="title function_">msg</span>(data.<span class="property">msg</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">error</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">layer.<span class="title function_">msg</span>(<span class="string">&quot;客户端请求有误&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">doMiaosha</span>(<span class="params">path</span>)&#123;</span><br><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line"><span class="attr">url</span>:<span class="string">&quot;/miaosha/&quot;</span>+path+<span class="string">&quot;/do_miaosha&quot;</span>,</span><br><span class="line"><span class="attr">type</span>:<span class="string">&quot;POST&quot;</span>,</span><br><span class="line"><span class="attr">data</span>:&#123;</span><br><span class="line"><span class="attr">goodsId</span>:$(<span class="string">&quot;#goodsId&quot;</span>).<span class="title function_">val</span>()</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">success</span>:<span class="keyword">function</span>(<span class="params">data</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(data.<span class="property">code</span> == <span class="number">0</span>)&#123;</span><br><span class="line"><span class="comment">//window.location.href=&quot;/order_detail.htm?orderId=&quot;+data.data.id;</span></span><br><span class="line"><span class="title function_">getMiaoshaResult</span>($(<span class="string">&quot;#goodsId&quot;</span>).<span class="title function_">val</span>());</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">layer.<span class="title function_">msg</span>(data.<span class="property">msg</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">error</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">layer.<span class="title function_">msg</span>(<span class="string">&quot;客户端请求有误&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><img src="/JeckFS/2020/07/09/java%E7%A7%92%E6%9D%80/48.png" class="" title="This is 48-th image."><p>使用ScriptEngineManager计算字符串表达式的结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AccessLimit(seconds=5, maxCount=5, needLogin=true)</span> <span class="comment">// 用于实现限流防刷</span></span><br><span class="line"><span class="meta">@RequestMapping(value=&quot;/path&quot;, method=RequestMethod.GET)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;String&gt; <span class="title function_">getMiaoshaPath</span><span class="params">(HttpServletRequest request, MiaoshaUser user,</span></span><br><span class="line"><span class="params"><span class="meta">@RequestParam(&quot;goodsId&quot;)</span><span class="type">long</span> goodsId,</span></span><br><span class="line"><span class="params"><span class="meta">@RequestParam(value=&quot;verifyCode&quot;, defaultValue=&quot;0&quot;)</span><span class="type">int</span> verifyCode</span></span><br><span class="line"><span class="params">)</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(user == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> Result.error(CodeMsg.SESSION_ERROR);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 校验验证码</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">check</span> <span class="operator">=</span> miaoshaService.checkVerifyCode(user, goodsId, verifyCode);</span><br><span class="line"><span class="keyword">if</span>(!check) &#123;</span><br><span class="line"><span class="keyword">return</span> Result.error(CodeMsg.REQUEST_ILLEGAL);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">String</span> <span class="variable">path</span>  <span class="operator">=</span>miaoshaService.createMiaoshaPath(user, goodsId);</span><br><span class="line"><span class="keyword">return</span> Result.success(path);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value=&quot;/verifyCode&quot;, method=RequestMethod.GET)</span></span><br><span class="line">   <span class="meta">@ResponseBody</span></span><br><span class="line">   <span class="keyword">public</span> Result&lt;String&gt; <span class="title function_">getMiaoshaVerifyCod</span><span class="params">(HttpServletResponse response,MiaoshaUser user,</span></span><br><span class="line"><span class="params">   <span class="meta">@RequestParam(&quot;goodsId&quot;)</span><span class="type">long</span> goodsId)</span> &#123;</span><br><span class="line">   <span class="keyword">if</span>(user == <span class="literal">null</span>) &#123;</span><br><span class="line">   <span class="keyword">return</span> Result.error(CodeMsg.SESSION_ERROR);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">   <span class="type">BufferedImage</span> <span class="variable">image</span>  <span class="operator">=</span> miaoshaService.createVerifyCode(user, goodsId);</span><br><span class="line">   <span class="type">OutputStream</span> <span class="variable">out</span> <span class="operator">=</span> response.getOutputStream();</span><br><span class="line">   ImageIO.write(image, <span class="string">&quot;JPEG&quot;</span>, out);</span><br><span class="line">   out.flush();</span><br><span class="line">   out.close();</span><br><span class="line">   <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">   &#125;<span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">   e.printStackTrace();</span><br><span class="line">   <span class="keyword">return</span> Result.error(CodeMsg.MIAOSHA_FAIL);</span><br><span class="line">   &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MiaoshaService.java</span></span><br><span class="line"><span class="keyword">public</span> BufferedImage <span class="title function_">createVerifyCode</span><span class="params">(MiaoshaUser user, <span class="type">long</span> goodsId)</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(user == <span class="literal">null</span> || goodsId &lt;=<span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="variable">width</span> <span class="operator">=</span> <span class="number">80</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">height</span> <span class="operator">=</span> <span class="number">32</span>;</span><br><span class="line"><span class="comment">//create the image</span></span><br><span class="line"><span class="type">BufferedImage</span> <span class="variable">image</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedImage</span>(width, height, BufferedImage.TYPE_INT_RGB);</span><br><span class="line"><span class="type">Graphics</span> <span class="variable">g</span> <span class="operator">=</span> image.getGraphics();</span><br><span class="line"><span class="comment">// set the background color</span></span><br><span class="line">g.setColor(<span class="keyword">new</span> <span class="title class_">Color</span>(<span class="number">0xDCDCDC</span>));</span><br><span class="line">g.fillRect(<span class="number">0</span>, <span class="number">0</span>, width, height);</span><br><span class="line"><span class="comment">// draw the border</span></span><br><span class="line">g.setColor(Color.black);</span><br><span class="line">g.drawRect(<span class="number">0</span>, <span class="number">0</span>, width - <span class="number">1</span>, height - <span class="number">1</span>);</span><br><span class="line"><span class="comment">// create a random instance to generate the codes</span></span><br><span class="line"><span class="type">Random</span> <span class="variable">rdm</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line"><span class="comment">// make some confusion</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">50</span>; i++) &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> rdm.nextInt(width);</span><br><span class="line"><span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> rdm.nextInt(height);</span><br><span class="line">g.drawOval(x, y, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// generate a random code</span></span><br><span class="line"><span class="type">String</span> <span class="variable">verifyCode</span> <span class="operator">=</span> generateVerifyCode(rdm);</span><br><span class="line">g.setColor(<span class="keyword">new</span> <span class="title class_">Color</span>(<span class="number">0</span>, <span class="number">100</span>, <span class="number">0</span>));</span><br><span class="line">g.setFont(<span class="keyword">new</span> <span class="title class_">Font</span>(<span class="string">&quot;Candara&quot;</span>, Font.BOLD, <span class="number">24</span>));</span><br><span class="line">g.drawString(verifyCode, <span class="number">8</span>, <span class="number">24</span>);</span><br><span class="line">g.dispose();</span><br><span class="line"><span class="comment">//把验证码存到redis中</span></span><br><span class="line"><span class="type">int</span> <span class="variable">rnd</span> <span class="operator">=</span> calc(verifyCode);</span><br><span class="line">redisService.set(MiaoshaKey.getMiaoshaVerifyCode, user.getId()+<span class="string">&quot;,&quot;</span>+goodsId, rnd);</span><br><span class="line"><span class="comment">//输出图片</span></span><br><span class="line"><span class="keyword">return</span> image;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">checkVerifyCode</span><span class="params">(MiaoshaUser user, <span class="type">long</span> goodsId, <span class="type">int</span> verifyCode)</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(user == <span class="literal">null</span> || goodsId &lt;=<span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">Integer</span> <span class="variable">codeOld</span> <span class="operator">=</span> redisService.get(MiaoshaKey.getMiaoshaVerifyCode, user.getId()+<span class="string">&quot;,&quot;</span>+goodsId, Integer.class);</span><br><span class="line"><span class="keyword">if</span>(codeOld == <span class="literal">null</span> || codeOld - verifyCode != <span class="number">0</span> ) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 将验证结果从redis中删除</span></span><br><span class="line">redisService.delete(MiaoshaKey.getMiaoshaVerifyCode, user.getId()+<span class="string">&quot;,&quot;</span>+goodsId);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用ScriptEngineManager计算字符串表达式的结果</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">calc</span><span class="params">(String exp)</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="type">ScriptEngineManager</span> <span class="variable">manager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ScriptEngineManager</span>();</span><br><span class="line"><span class="type">ScriptEngine</span> <span class="variable">engine</span> <span class="operator">=</span> manager.getEngineByName(<span class="string">&quot;JavaScript&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> (Integer)engine.eval(exp);</span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">char</span>[] ops = <span class="keyword">new</span> <span class="title class_">char</span>[] &#123;<span class="string">&#x27;+&#x27;</span>, <span class="string">&#x27;-&#x27;</span>, <span class="string">&#x27;*&#x27;</span>&#125;;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * + - * </span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">private</span> String <span class="title function_">generateVerifyCode</span><span class="params">(Random rdm)</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">num1</span> <span class="operator">=</span> rdm.nextInt(<span class="number">10</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">num2</span> <span class="operator">=</span> rdm.nextInt(<span class="number">10</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">num3</span> <span class="operator">=</span> rdm.nextInt(<span class="number">10</span>);</span><br><span class="line"><span class="type">char</span> <span class="variable">op1</span> <span class="operator">=</span> ops[rdm.nextInt(<span class="number">3</span>)];</span><br><span class="line"><span class="type">char</span> <span class="variable">op2</span> <span class="operator">=</span> ops[rdm.nextInt(<span class="number">3</span>)];</span><br><span class="line"><span class="type">String</span> <span class="variable">exp</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>+ num1 + op1 + num2 + op2 + num3;</span><br><span class="line"><span class="keyword">return</span> exp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>接口防刷：</strong><br>1.用拦截器减少对业务的侵入，将与业务不是特别相关的东西抽离出来。<br>使用自定义注解的形式，实现拦截器。<br>不要忘了在<code>WebMvcConfigurerAdapter</code>中重写<code>addInterceptors()</code>将AccessInterceptor注册进拦截器链中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AccessLimit(seconds=5, maxCount=5, needLogin=true)</span> <span class="comment">// 用于实现限流防刷</span></span><br><span class="line"><span class="meta">@RequestMapping(value=&quot;/path&quot;, method=RequestMethod.GET)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;String&gt; <span class="title function_">getMiaoshaPath</span><span class="params">(HttpServletRequest request, MiaoshaUser user,</span></span><br><span class="line"><span class="params"><span class="meta">@RequestParam(&quot;goodsId&quot;)</span><span class="type">long</span> goodsId,</span></span><br><span class="line"><span class="params"><span class="meta">@RequestParam(value=&quot;verifyCode&quot;, defaultValue=&quot;0&quot;)</span><span class="type">int</span> verifyCode</span></span><br><span class="line"><span class="params">)</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(user == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> Result.error(CodeMsg.SESSION_ERROR);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 校验验证码</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">check</span> <span class="operator">=</span> miaoshaService.checkVerifyCode(user, goodsId, verifyCode);</span><br><span class="line"><span class="keyword">if</span>(!check) &#123;</span><br><span class="line"><span class="keyword">return</span> Result.error(CodeMsg.REQUEST_ILLEGAL);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">String</span> <span class="variable">path</span>  <span class="operator">=</span>miaoshaService.createMiaoshaPath(user, goodsId);</span><br><span class="line"><span class="keyword">return</span> Result.success(path);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Retention(RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(METHOD)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> AccessLimit &#123;</span><br><span class="line"><span class="type">int</span> <span class="title function_">seconds</span><span class="params">()</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">maxCount</span><span class="params">()</span>;</span><br><span class="line"><span class="type">boolean</span> <span class="title function_">needLogin</span><span class="params">()</span> <span class="keyword">default</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccessInterceptor</span>  <span class="keyword">extends</span> <span class="title class_">HandlerInterceptorAdapter</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">MiaoshaUserService userService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">RedisService redisService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 用于实现限流防刷</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span></span><br><span class="line"><span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="keyword">if</span>(handler <span class="keyword">instanceof</span> HandlerMethod) &#123;</span><br><span class="line"><span class="type">MiaoshaUser</span> <span class="variable">user</span> <span class="operator">=</span> getUser(request, response);</span><br><span class="line">UserContext.setUser(user);</span><br><span class="line"><span class="type">HandlerMethod</span> <span class="variable">hm</span> <span class="operator">=</span> (HandlerMethod)handler;</span><br><span class="line"><span class="type">AccessLimit</span> <span class="variable">accessLimit</span> <span class="operator">=</span> hm.getMethodAnnotation(AccessLimit.class);</span><br><span class="line"><span class="keyword">if</span>(accessLimit == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="variable">seconds</span> <span class="operator">=</span> accessLimit.seconds();</span><br><span class="line"><span class="type">int</span> <span class="variable">maxCount</span> <span class="operator">=</span> accessLimit.maxCount();</span><br><span class="line"><span class="type">boolean</span> <span class="variable">needLogin</span> <span class="operator">=</span> accessLimit.needLogin();</span><br><span class="line"><span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> request.getRequestURI();</span><br><span class="line"><span class="keyword">if</span>(needLogin) &#123;</span><br><span class="line"><span class="keyword">if</span>(user == <span class="literal">null</span>) &#123;</span><br><span class="line">render(response, CodeMsg.SESSION_ERROR);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">key += <span class="string">&quot;_&quot;</span> + user.getId();</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//do nothing</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">AccessKey</span> <span class="variable">ak</span> <span class="operator">=</span> AccessKey.withExpire(seconds); <span class="comment">// 设置key的有效期</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">count</span> <span class="operator">=</span> redisService.get(ak, key, Integer.class);</span><br><span class="line">    <span class="keyword">if</span>(count  == <span class="literal">null</span>) &#123;</span><br><span class="line">     redisService.set(ak, key, <span class="number">1</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(count &lt; maxCount) &#123;</span><br><span class="line">     redisService.incr(ak, key);</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    render(response, CodeMsg.ACCESS_LIMIT_REACHED);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用户没有登录，返回给客户端的响应消息</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">render</span><span class="params">(HttpServletResponse response, CodeMsg cm)</span><span class="keyword">throws</span> Exception &#123;</span><br><span class="line">response.setContentType(<span class="string">&quot;application/json;charset=UTF-8&quot;</span>); <span class="comment">// 指定返回数据的编码格式</span></span><br><span class="line"><span class="type">OutputStream</span> <span class="variable">out</span> <span class="operator">=</span> response.getOutputStream();</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span>  <span class="operator">=</span> JSON.toJSONString(Result.error(cm));</span><br><span class="line">out.write(str.getBytes(<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">out.flush();</span><br><span class="line">out.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> MiaoshaUser <span class="title function_">getUser</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">paramToken</span> <span class="operator">=</span> request.getParameter(MiaoshaUserService.COOKI_NAME_TOKEN);</span><br><span class="line"><span class="type">String</span> <span class="variable">cookieToken</span> <span class="operator">=</span> getCookieValue(request, MiaoshaUserService.COOKI_NAME_TOKEN);</span><br><span class="line"><span class="keyword">if</span>(StringUtils.isEmpty(cookieToken) &amp;&amp; StringUtils.isEmpty(paramToken)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> StringUtils.isEmpty(paramToken)?cookieToken:paramToken;</span><br><span class="line"><span class="keyword">return</span> userService.getByToken(response, token);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String <span class="title function_">getCookieValue</span><span class="params">(HttpServletRequest request, String cookiName)</span> &#123;</span><br><span class="line">Cookie[]  cookies = request.getCookies();</span><br><span class="line"><span class="keyword">if</span>(cookies == <span class="literal">null</span> || cookies.length &lt;= <span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(Cookie cookie : cookies) &#123;</span><br><span class="line"><span class="keyword">if</span>(cookie.getName().equals(cookiName)) &#123;</span><br><span class="line"><span class="keyword">return</span> cookie.getValue();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://zhanglijun1217.github.io/blog/2018/09/05/springboot%E5%BA%94%E7%94%A8%E6%8B%A6%E6%88%AA%E5%99%A8/">拦截器参考文章</a></p><blockquote><p>推荐的一本书：重构-改善既有代码的设计 作者：martine flower</p></blockquote><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="技术点"><a href="#技术点" class="headerlink" title="技术点"></a>技术点</h2><h3 id="1-两次MD5"><a href="#1-两次MD5" class="headerlink" title="1.两次MD5"></a>1.两次MD5</h3><p>用户端：PASS = MD5(明文 + 固定Salt)      防止密码在网络中明文传输<br>服务端：PASS = MD5(用户输入 + 随机Salt)   防止数据库被盗后，根据md5反查出密码</p><p>数据库中存储的是两次md5加密后的密码，后端接口接收到前端发来的密码只经过了一次md5。将前端传递过来的密码再次md5后，与数据库中的密码进行比对，相等则说明密码正确，反之错误。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.codec.digest.DigestUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MD5Util</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">md5</span><span class="params">(String src)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> DigestUtils.md5Hex(src);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">salt</span> <span class="operator">=</span> <span class="string">&quot;1a2b3c4d&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 将前端传递过来的经过一次md5的密码，再次进行md5操作，今儿与数据库中的密码进行比对</span></span><br><span class="line"><span class="comment">* 利用salt字符串，先对密码进行扰动处理，再进行md5.</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">formPassToDBPass</span><span class="params">(String formPass, String salt)</span> &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>+salt.charAt(<span class="number">0</span>)+salt.charAt(<span class="number">2</span>) + formPass +salt.charAt(<span class="number">5</span>) + salt.charAt(<span class="number">4</span>);</span><br><span class="line"><span class="keyword">return</span> md5(str);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">doLogin</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="title function_">g_showLoading</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> inputPass = $(<span class="string">&quot;#password&quot;</span>).<span class="title function_">val</span>();</span><br><span class="line"><span class="keyword">var</span> salt = g_passsword_salt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 前端进行明文加密</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;&quot;</span>+salt.<span class="title function_">charAt</span>(<span class="number">0</span>)+salt.<span class="title function_">charAt</span>(<span class="number">2</span>) + inputPass +salt.<span class="title function_">charAt</span>(<span class="number">5</span>) + salt.<span class="title function_">charAt</span>(<span class="number">4</span>);</span><br><span class="line"><span class="keyword">var</span> password = <span class="title function_">md5</span>(str);</span><br><span class="line"></span><br><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line"><span class="attr">url</span>: <span class="string">&quot;/login/do_login&quot;</span>,</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&quot;POST&quot;</span>,</span><br><span class="line">    <span class="attr">data</span>:&#123;</span><br><span class="line">    <span class="attr">mobile</span>:$(<span class="string">&quot;#mobile&quot;</span>).<span class="title function_">val</span>(),</span><br><span class="line">    <span class="attr">password</span>: password</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">success</span>:<span class="keyword">function</span>(<span class="params">data</span>)&#123;</span><br><span class="line">    layer.<span class="title function_">closeAll</span>();</span><br><span class="line">    <span class="keyword">if</span>(data.<span class="property">code</span> == <span class="number">0</span>)&#123;</span><br><span class="line">    layer.<span class="title function_">msg</span>(<span class="string">&quot;成功&quot;</span>);</span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span>=<span class="string">&quot;/goods/to_list&quot;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    layer.<span class="title function_">msg</span>(data.<span class="property">msg</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">error</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    layer.<span class="title function_">closeAll</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-JSR303"><a href="#2-JSR303" class="headerlink" title="2.JSR303"></a>2.JSR303</h3><p><strong>JSR303中的注解：</strong></p><img src="/JeckFS/2020/07/09/java%E7%A7%92%E6%9D%80/49.png" class="" title="This is 49-th image."><p><strong>使用JSR303自定义注解</strong></p><p>参考JSR303现有注解，Ctrl+CV，然后修改部分代码即可。<br>0.接口函数中需要验证的参数加上@Valid注解，并在对象参数的字段上添加相应的JSR303注解<br>1.定义注解<br>2.参考JSR303中的注解添加修饰的注解<br>3.使用<code>@Constraint(validatedBy=&#123;RealizeClass.class&#125;)</code>指定实现注解验证逻辑的实现类<br>4.自定义注解逻辑实现类，实现<code>ConstraintValidator&lt;自定义注解的类型, 被修饰字段的类型&gt;</code>接口。实现initialize()，isValid()。initialize()获取注解的值，isValid()用于书写验证逻辑的代码。<br>5.拦截org.springframework.validation.BindException。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/do_login&quot;)</span></span><br><span class="line">   <span class="meta">@ResponseBody</span></span><br><span class="line">   <span class="keyword">public</span> Result&lt;String&gt; <span class="title function_">doLogin</span><span class="params">(HttpServletResponse response, <span class="meta">@Valid</span> LoginVo loginVo)</span> &#123;</span><br><span class="line">   log.info(loginVo.toString());</span><br><span class="line">   <span class="comment">//登录</span></span><br><span class="line">   <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> userService.login(response, loginVo);</span><br><span class="line">   <span class="keyword">return</span> Result.success(token);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginVo</span> &#123;</span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="meta">@IsMobile</span></span><br><span class="line">    <span class="keyword">private</span> String mobile;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="meta">@Length(min = 32)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMobile</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> mobile;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMobile</span><span class="params">(String mobile)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.mobile = mobile;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPassword</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPassword</span><span class="params">(String password)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;LoginVo [mobile=&quot;</span> + mobile + <span class="string">&quot;, password=&quot;</span> + password + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注解定义：</span></span><br><span class="line"><span class="meta">@Target(&#123; METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER &#125;)</span></span><br><span class="line"><span class="meta">@Retention(RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 指定注解的逻辑实现类</span></span><br><span class="line"><span class="meta">@Constraint(validatedBy = &#123;IsMobileValidator.class &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span>  IsMobile &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">required</span><span class="params">()</span> <span class="keyword">default</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">String <span class="title function_">message</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;手机号码格式错误&quot;</span>;</span><br><span class="line"></span><br><span class="line">Class&lt;?&gt;[] groups() <span class="keyword">default</span> &#123; &#125;;</span><br><span class="line"></span><br><span class="line">Class&lt;? <span class="keyword">extends</span> <span class="title class_">Payload</span>&gt;[] payload() <span class="keyword">default</span> &#123; &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IsMobileValidator</span> <span class="keyword">implements</span> <span class="title class_">ConstraintValidator</span>&lt;IsMobile, String&gt; &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">required</span> <span class="operator">=</span> <span class="literal">false</span>; <span class="comment">// 注解中的字段需要在实现类中获取</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initialize</span><span class="params">(IsMobile constraintAnnotation)</span> &#123;</span><br><span class="line">required = constraintAnnotation.required(); <span class="comment">// 获取注解中的字段值</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(String value, ConstraintValidatorContext context)</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(required) &#123;</span><br><span class="line"><span class="keyword">return</span> ValidatorUtil.isMobile(value); <span class="comment">// 实现自己的验证逻辑</span></span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(StringUtils.isEmpty(value)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> ValidatorUtil.isMobile(value);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>拦截org.springframework.validation.BindException参见下一节。</p><h3 id="3-异常拦截，统一处理"><a href="#3-异常拦截，统一处理" class="headerlink" title="3.异常拦截，统一处理"></a>3.异常拦截，统一处理</h3><p>1.定义拦截异常后的处理类，并使用@ControllerAdvice修饰<br>2.在处理方法上，使用@ExceptionHandler指定拦截的具体异常<br>3.自定义继承自RuntimeException的异常，因为它只能拦截RuntimeException异常。<br>4.出现问题后，抛出异常后，该异常就会自动被拦截，进入到拦截异常处理的函数中。<br>5.注册自定义异常处理器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 拦截到异常信息后的处理逻辑</span></span><br><span class="line"><span class="meta">@ControllerAdvice</span>  <span class="comment">// 是一个切面，与@Controller类似</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalExceptionHandler</span> &#123;</span><br><span class="line"><span class="comment">// 拦截Exception异常</span></span><br><span class="line"><span class="meta">@ExceptionHandler(value=Exception.class)</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;String&gt; <span class="title function_">exceptionHandler</span><span class="params">(HttpServletRequest request, Exception e)</span>&#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line"><span class="keyword">if</span>(e <span class="keyword">instanceof</span> GlobalException) &#123;</span><br><span class="line"><span class="type">GlobalException</span> <span class="variable">ex</span> <span class="operator">=</span> (GlobalException)e;</span><br><span class="line"><span class="keyword">return</span> Result.error(ex.getCm());</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(e <span class="keyword">instanceof</span> BindException) &#123;</span><br><span class="line"><span class="type">BindException</span> <span class="variable">ex</span> <span class="operator">=</span> (BindException)e;</span><br><span class="line">List&lt;ObjectError&gt; errors = ex.getAllErrors();</span><br><span class="line"><span class="type">ObjectError</span> <span class="variable">error</span> <span class="operator">=</span> errors.get(<span class="number">0</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> error.getDefaultMessage();</span><br><span class="line"><span class="keyword">return</span> Result.error(CodeMsg.BIND_ERROR.fillArgs(msg)); <span class="comment">// 手机号码验证不通过的响应消息。</span></span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> Result.error(CodeMsg.SERVER_ERROR);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CodeMsg</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> code;</span><br><span class="line"><span class="keyword">private</span> String msg;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">CodeMsg</span> <span class="variable">BIND_ERROR</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CodeMsg</span>(<span class="number">500101</span>, <span class="string">&quot;参数校验异常：%s&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> CodeMsg <span class="title function_">fillArgs</span><span class="params">(Object... args)</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">code</span> <span class="operator">=</span> <span class="built_in">this</span>.code;</span><br><span class="line"><span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> String.format(<span class="built_in">this</span>.msg, args);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CodeMsg</span>(code, message);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebConfig</span>  <span class="keyword">extends</span> <span class="title class_">WebMvcConfigurerAdapter</span>&#123;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">AccessInterceptor accessInterceptor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">registry.addInterceptor(accessInterceptor);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自定义异常，本异常在本项目中只用在登录出错返回GlobalException</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> CodeMsg cm;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">GlobalException</span><span class="params">(CodeMsg cm)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>(cm.toString());</span><br><span class="line"><span class="built_in">this</span>.cm = cm;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> CodeMsg <span class="title function_">getCm</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> cm;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-Controller方法入参自动封装器"><a href="#4-Controller方法入参自动封装器" class="headerlink" title="4.Controller方法入参自动封装器"></a>4.Controller方法入参自动封装器</h3><p>1.自定义实现HandlerMethodArgumentResolver接口的Resolver类<br>2.重写supportsParameter(),resolveArgument()<br>3.supportsParameter()指定什么样的参数需要处理; resolveArgument()实现具体的处理逻辑并返回处理后的参数,这个参数就是要传入Controller接口中的参数.<br>4.注册自定义的Resolver</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * HandlerMethodArgumentResolver接口,用于在给定请求的上下文中将方法参数解析为参数值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserArgumentResolver</span> <span class="keyword">implements</span> <span class="title class_">HandlerMethodArgumentResolver</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    MiaoshaUserService userService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * MethodParameter指的是控制器层方法的参数</span></span><br><span class="line"><span class="comment"> * 是否支持此接口,true就会执行下面的方法去解析</span></span><br><span class="line"><span class="comment"> * 常用方法:</span></span><br><span class="line"><span class="comment"> *    hasMethodAnnotation()  是否有方法注解</span></span><br><span class="line"><span class="comment"> *     hasParameterAnnotation()  是否有参数注解</span></span><br><span class="line"><span class="comment"> *     getMethodAnnotation()  获取方法注解(传入注解的class类型可以指定)</span></span><br><span class="line"><span class="comment"> *     getParameterAnnotation() 获取参数注解(传入注解的class类型可以指定)</span></span><br><span class="line"><span class="comment"> *     getParameterType()  获取参数类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">supportsParameter</span><span class="params">(MethodParameter parameter)</span> &#123;</span><br><span class="line">Class&lt;?&gt; clazz = parameter.getParameterType();</span><br><span class="line">        <span class="type">return</span> <span class="variable">clazz</span> <span class="operator">=</span>= MiaoshaUser.class;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 常见的写法就是把前端的参数经过处理再复制给控制器方法的参数</span></span><br><span class="line"><span class="comment"> * NativeWebRequest: 可理解为前端传递过来的数据</span></span><br><span class="line"><span class="comment"> * 常用方法:</span></span><br><span class="line"><span class="comment"> *    getParameter()</span></span><br><span class="line"><span class="comment"> *     getParameterMap()</span></span><br><span class="line"><span class="comment"> *     getParameterNames()</span></span><br><span class="line"><span class="comment"> *     getParameterValues()</span></span><br><span class="line"><span class="comment"> * NativeWebRequest中的常用方法：</span></span><br><span class="line"><span class="comment"> *    HttpServletRequest request = webRequest.getNativeRequest(HttpServletRequest.class);</span></span><br><span class="line"><span class="comment">HttpServletResponse response = webRequest.getNativeResponse(HttpServletResponse.class);</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">resolveArgument</span><span class="params">(</span></span><br><span class="line"><span class="params">            MethodParameter parameter,</span></span><br><span class="line"><span class="params">            ModelAndViewContainer mavContainer,</span></span><br><span class="line"><span class="params">            NativeWebRequest webRequest,</span></span><br><span class="line"><span class="params">            WebDataBinderFactory binderFactory)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="keyword">return</span> UserContext.getUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注册自定义的Resolver</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebConfig</span>  <span class="keyword">extends</span> <span class="title class_">WebMvcConfigurerAdapter</span>&#123;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">UserArgumentResolver userArgumentResolver;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addArgumentResolvers</span><span class="params">(List&lt;HandlerMethodArgumentResolver&gt; argumentResolvers)</span> &#123;</span><br><span class="line">argumentResolvers.add(userArgumentResolver);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-生成token作为sessionId"><a href="#5-生成token作为sessionId" class="headerlink" title="5.生成token作为sessionId"></a>5.生成token作为sessionId</h3><p>用户登录成功后，给用户生成一个Token(类似sessionId)，并写入cookie中，发送到客户端。客户端每次请求后台，都传递这个token，后端根据Token来判别用户。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 登录成功后，将Token写入cookie中</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">addCookie</span><span class="params">(HttpServletResponse response, String token, MiaoshaUser user)</span> &#123;</span><br><span class="line">    redisService.set(MiaoshaUserKey.token, token, user);</span><br><span class="line">    <span class="type">Cookie</span> <span class="variable">cookie</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cookie</span>(COOKI_NAME_TOKEN, token);</span><br><span class="line">    cookie.setMaxAge(MiaoshaUserKey.token.expireSeconds());</span><br><span class="line">    cookie.setPath(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">    response.addCookie(cookie);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 后端根据Token获取用户</span></span><br><span class="line">`getUser()`在拦截器的`preHandle()`中调用，判别用户是否登录。</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> MiaoshaUser <span class="title function_">getUser</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">paramToken</span> <span class="operator">=</span> request.getParameter(MiaoshaUserService.COOKI_NAME_TOKEN);</span><br><span class="line">System.out.println(<span class="string">&quot;request.getParameter(MiaoshaUserService.COOKI_NAME_TOKEN): &quot;</span>+paramToken);</span><br><span class="line">    <span class="type">String</span> <span class="variable">cookieToken</span> <span class="operator">=</span> getCookieValue(request, MiaoshaUserService.COOKI_NAME_TOKEN);</span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isEmpty(cookieToken) &amp;&amp; StringUtils.isEmpty(paramToken)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> StringUtils.isEmpty(paramToken) ? cookieToken : paramToken;</span><br><span class="line">    <span class="keyword">return</span> userService.getByToken(response, token);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String <span class="title function_">getCookieValue</span><span class="params">(HttpServletRequest request, String cookiName)</span> &#123;</span><br><span class="line">    Cookie[] cookies = request.getCookies();</span><br><span class="line">    <span class="keyword">if</span> (cookies == <span class="literal">null</span> || cookies.length &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (Cookie cookie : cookies) &#123;</span><br><span class="line">        <span class="keyword">if</span> (cookie.getName().equals(cookiName)) &#123;</span><br><span class="line">            <span class="keyword">return</span> cookie.getValue(); <span class="comment">// 从cookie中取出该用户的Token值</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> MiaoshaUser <span class="title function_">getByToken</span><span class="params">(HttpServletResponse response, String token)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isEmpty(token)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">MiaoshaUser</span> <span class="variable">user</span> <span class="operator">=</span> redisService.get(MiaoshaUserKey.token, token, MiaoshaUser.class);</span><br><span class="line">    <span class="comment">//延长有效期</span></span><br><span class="line">    <span class="keyword">if</span> (user != <span class="literal">null</span>) &#123;</span><br><span class="line">        addCookie(response, token, user);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>user对象的信息在自定已拦截器中被放入到ThreadLocal中，在controller接口函数的入参构造器中获取user对象。每次调用Controller接口函数都会在拦截器中检查用户是否登录。</p><p><strong>自定义拦截器先于Controller接口函数入参构造器执行。</strong></p><h3 id="6-分布式Session"><a href="#6-分布式Session" class="headerlink" title="6.分布式Session"></a>6.分布式Session</h3><p>用户请求可能被不同的服务器接收到，为了保证每台服务器都可以相应用户请求，才引入了分布式session。</p><p>利用Token标识用户，将Token存储在redis中，实现分布式缓存。</p><p>见上述第5小节。</p><p><del>将cookie名称和过期时间存储到redis中即可实现分布式session。利用redis管理session。</del></p><h3 id="7-商品列表页面缓存"><a href="#7-商品列表页面缓存" class="headerlink" title="7.商品列表页面缓存"></a>7.<a id="ret1" href="#staticPage">商品列表页面缓存</a></h3><p>包括静态页面处理、更新缓存的问题、页面的静态化问题。</p><p><strong>后端函数使用<code>ThymeleafViewResolver</code>手动渲染，将渲染的页面直接存入redis中，下次请求直接取出并返回。</strong></p><p>更新缓存时，要先更新数据库，在更新缓存。</p><p>一个反例：<br>两个并发操作，一个更新操作，一个查询操作。不能先删除缓存，因为当缓存删除后，查询操作可能直接将数据库中的旧值读取到缓存中，等价于缓存没有删除，然后更新操作再将新值更新到数据库。导致缓存中的数据一直是旧数据。</p><h3 id="8-超卖问题"><a href="#8-超卖问题" class="headerlink" title="8.超卖问题"></a>8.<a id="ret2" href="#miaodian2">超卖问题</a></h3><p>使用数据库，判断是否有库存，有库存再更新数据库。让数据库解决超卖的问题。</p><h3 id="9-一个用户秒杀到两个商品的问题"><a href="#9-一个用户秒杀到两个商品的问题" class="headerlink" title="9.一个用户秒杀到两个商品的问题"></a>9.<a id="ret3" href="#maodian3">一个用户秒杀到两个商品的问题</a></h3><p>后端给<strong>订单表的userid</strong>加唯一索引，确保只能秒杀到一个订单。<br>前端使用<strong>验证码</strong>，防止用户同时发送多个请求。</p><h3 id="10-静态资源优化的问题"><a href="#10-静态资源优化的问题" class="headerlink" title="10.静态资源优化的问题"></a>10.<a id="ret4" href="#maodian4">静态资源优化的问题</a></h3><h3 id="11-接口优化"><a href="#11-接口优化" class="headerlink" title="11.接口优化"></a>11.接口优化</h3><p>redis预减库存，rabbitMQ队列异步下单。</p><ol><li>Redis预减库存，减少数据库访问<ol><li>系统初始化，把商品库存数量加载到Redis中。<br>系统初始化时就将商品信息缓存到redis中：<br>实现InitializingBean接口，并重写afterPropertiesSet()方法。<br>参见MiaoshaController.java</li><li>收到请求，Redis预减库存，库存不足直接返回，否则进入3</li><li>请求入队列，并立即返回排队中</li><li>请求出队列，生成订单，同时减少库存</li><li>客户端轮询，是否秒杀成功。<br>第4,5步是并发执行的。生成订单后直接写入redis中，客户端轮询redis，判断是否秒杀成功。<br>2,3,4参见MiaoshaController.java、MQSender.java、MQReceiver.java。<br>5参见static/goods_detail.htm中的getMishaResult()。</li></ol></li><li>内存标记减少redis访问<br>参见MiaoshaController.java 的localOverMap变量，标记秒杀的商品是否已经被秒杀完。</li><li>请求先入队列缓冲，异步下单，增强用户体验。</li></ol><h3 id="12-安全优化"><a href="#12-安全优化" class="headerlink" title="12.安全优化"></a>12.<a id="youhuaret" href="#youhua">安全优化</a></h3><ol><li>方式一：秒杀接口隐藏</li></ol><p>秒杀请求先请求另一个Controller接口，获取一个随机串。再请求真实的秒杀接口。方法是客户端在请求秒杀的路径中将随机串拼接组成新的路径，客户端中对随机路径进行判断是否是合法的路径。服务端会将随机串存入Redis中，请求的时候会取出来进行判断，客户端请求路径中的随机串是否是服务端发送给它的。</p><ol><li>方式二：接口限流防刷</li></ol><p>在请求真正的秒杀接口前需要请求另一个Controller，对该Controller接口进行限流防刷。</p><p>逻辑是：用户第一次访问的时候，构造一个key，其value是访问的次数，然后存入Redis中，并设置一个有效期。在有效期内，访问的次数不得超过规定的次数，超过了就给用户返回拒绝提示。</p><ol><li>方式三：使用数学公式验证码</li></ol><blockquote><ol><li>秒杀接口地址隐藏<br>接口访问前，不是直接访问该接口，而是访问另一个接口，获取秒杀地址。该地址是随机生成的。返回给客户端后，客户端再去请求新的接口，服务端验证地址的合法性。</li><li><p>数学公式验证码</p></li><li><p>接口限流防刷</p></li></ol></blockquote><h3 id="13-所有的请求通过拦截器，拦截器中对使用AccessLimit注解修饰的方法进行拦截，然后进行限流处理。对于Controller入参封装器-HandlerMethodArgumentResolver接口-对秒杀用户对象和登录参数封装后的对象进行拦截，并处理。"><a href="#13-所有的请求通过拦截器，拦截器中对使用AccessLimit注解修饰的方法进行拦截，然后进行限流处理。对于Controller入参封装器-HandlerMethodArgumentResolver接口-对秒杀用户对象和登录参数封装后的对象进行拦截，并处理。" class="headerlink" title="13.所有的请求通过拦截器，拦截器中对使用AccessLimit注解修饰的方法进行拦截，然后进行限流处理。对于Controller入参封装器(HandlerMethodArgumentResolver接口)   对秒杀用户对象和登录参数封装后的对象进行拦截，并处理。"></a>13.所有的请求通过拦截器，拦截器中对使用AccessLimit注解修饰的方法进行拦截，然后进行限流处理。对于Controller入参封装器(HandlerMethodArgumentResolver接口)   对秒杀用户对象和登录参数封装后的对象进行拦截，并处理。</h3><h3 id="13-所有的请求通过拦截器，拦截器中对使用AccessLimit注解修饰的方法进行拦截，然后进行限流处理。对于Controller入参封装器-HandlerMethodArgumentResolver接口-对秒杀用户对象和登录参数封装后的对象进行拦截，并处理。-1"><a href="#13-所有的请求通过拦截器，拦截器中对使用AccessLimit注解修饰的方法进行拦截，然后进行限流处理。对于Controller入参封装器-HandlerMethodArgumentResolver接口-对秒杀用户对象和登录参数封装后的对象进行拦截，并处理。-1" class="headerlink" title="13.所有的请求通过拦截器，拦截器中对使用AccessLimit注解修饰的方法进行拦截，然后进行限流处理。对于Controller入参封装器(HandlerMethodArgumentResolver接口)   对秒杀用户对象和登录参数封装后的对象进行拦截，并处理。"></a>13.所有的请求通过拦截器，拦截器中对使用AccessLimit注解修饰的方法进行拦截，然后进行限流处理。对于Controller入参封装器(HandlerMethodArgumentResolver接口)   对秒杀用户对象和登录参数封装后的对象进行拦截，并处理。</h3><h1 id="小知识点"><a href="#小知识点" class="headerlink" title="小知识点"></a>小知识点</h1><h2 id="1-Result结果封装："><a href="#1-Result结果封装：" class="headerlink" title="1.Result结果封装："></a>1.Result结果封装：</h2><p>不同的模块自定义不同的响应码，代表不同的含义，在前后端分离中有重要的作用。<br>CodeMsg类定义了不同模块，不同情况下，状态码的含义。<br>Result类将CodeMsg与对应返回的数据data一并封装，并提供了操作成功的方法以及操作错误时的方法。</p><h2 id="2-Mybatis目录结构"><a href="#2-Mybatis目录结构" class="headerlink" title="2.Mybatis目录结构"></a>2.Mybatis目录结构</h2><p>dao包存放操作数据库的接口。<br>domain包存放PO对象，与数据库表一一对应。</p><p>一个数据库表对应一个domain对象(POJO)，一个domain对象对应一个dao接口。<br>dao接口使用domain对象作为操作数据的载体，它一般与数据库操作有关。</p><h2 id="3-pom-xml文件"><a href="#3-pom-xml文件" class="headerlink" title="3.pom.xml文件"></a>3.pom.xml文件</h2><h3 id="1-打包方式"><a href="#1-打包方式" class="headerlink" title="1.打包方式"></a>1.打包方式</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 打jar包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 打war包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-pom文件中变量的定义与引用"><a href="#2-pom文件中变量的定义与引用" class="headerlink" title="2.pom文件中变量的定义与引用"></a>2.pom文件中变量的定义与引用</h3><p>变量定义在properties标签中，使用<code>$&#123;&#125;</code>进行引用。<br>引用定义在某个标签下的变量：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 变量定义在properties标签中 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jdk.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">jdk.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">springframework.version</span>&gt;</span>4.2.4.RELEASE<span class="tag">&lt;/<span class="name">springframework.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;springframework.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">source</span>&gt;</span>$&#123;jdk.version&#125;<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">target</span>&gt;</span>$&#123;jdk.version&#125;<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.imooc<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>miaosha<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>$&#123;project.artifactId&#125;<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-Mybatis的注解使用方式"><a href="#2-Mybatis的注解使用方式" class="headerlink" title="2.Mybatis的注解使用方式"></a>2.Mybatis的注解使用方式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line"><span class="meta">@Select(&quot;select * from user where id = #&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">getById</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span><span class="type">int</span> id)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Insert(&quot;insert into user(id, name)values(#&#123;id&#125;, #&#123;name&#125;)&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">insert</span><span class="params">(User user)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-domain、entity、model、JavaBean、POJO、PO、BO、VO、DTO、EJB的区别"><a href="#3-domain、entity、model、JavaBean、POJO、PO、BO、VO、DTO、EJB的区别" class="headerlink" title="3.domain、entity、model、JavaBean、POJO、PO、BO、VO、DTO、EJB的区别"></a>3.domain、entity、model、JavaBean、POJO、PO、BO、VO、DTO、EJB的区别</h3><p><a href="https://blog.csdn.net/qq_32447321/article/details/53148092">包：domain,entity,model参考连接</a><br><a href="https://www.cnblogs.com/EasonJim/p/7967999.html">对象</a><br><a href="https://www.cnblogs.com/xt0810/p/3654574.html">对象</a></p><ul><li>entity：entity包中的类的字段必须和数据库表严格对应。<ul><li>PO对象：一个PO对应一条记录</li></ul></li><li>model：该包下，定义用来给前端使用的实体类。前端获取到该包下的类直接显示。与domain类似。</li><li>domain(域)：项目中每一个模块(如用户、订单、商品)叫做一个domain。domain中的对象是对该模块下多个表数据的一个综合，用于提供给前端。比如一个简历可以有基本信息表、工作经验表、学习经验表等，前端想要获取一个用户的完整信息，需要多个表的数据，domain下的对象就是将数据整合到一个对象中，用于提供给前端。<ul><li>BO：组合多张表数据，并不是为了提供给前端，而是为了<strong>业务</strong>实现上的需要进行包装的对象。</li><li>VO：传递给前端的对象，前端直接展示该对象。</li><li>DTO：封装了两个系统之间传递的数据，可以是前端/后端，也可以是其他的系统。与VO界限并不是那么清晰。</li></ul></li></ul><h3 id="4-ConfigurationProperties"><a href="#4-ConfigurationProperties" class="headerlink" title="4.@ConfigurationProperties"></a>4.@ConfigurationProperties</h3><p>将<code>application.properties</code>中的自定义配置映射为JavaBean，供逻辑代码使用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 扫描类路径下main.properties文件(默认扫描application.properties)，</span></span><br><span class="line"><span class="comment">// ignoreUnknownFields = false存在不能匹配的属性，抛出异常</span></span><br><span class="line"><span class="comment">// prefix = “mail” 扫描对应配置文件中以mail开头的配置项</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(locations = &quot;classpath:mail.properties&quot;, </span></span><br><span class="line"><span class="meta">                         ignoreUnknownFields = false, </span></span><br><span class="line"><span class="meta">                         prefix = &quot;mail&quot;)</span></span><br></pre></td></tr></table></figure><p><a href="https://www.jianshu.com/p/df57fefe0ab7">参考连接</a></p><h3 id="5-JQuery-validate插件验证表单"><a href="#5-JQuery-validate插件验证表单" class="headerlink" title="5.JQuery validate插件验证表单"></a>5.JQuery validate插件验证表单</h3><p><a href="https://www.runoob.com/jquery/jquery-plugin-validate.html">参考连接</a></p><h3 id="6-注解的定义"><a href="#6-注解的定义" class="headerlink" title="6.注解的定义"></a>6.注解的定义</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注解类型其实就是注解声明在什么地方</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">ElementType</span> &#123;</span><br><span class="line">    TYPE,               <span class="comment">/* 类、接口（包括注释类型）或枚举声明  */</span></span><br><span class="line">    FIELD,              <span class="comment">/* 字段声明（包括枚举常量）  */</span></span><br><span class="line">    METHOD,             <span class="comment">/* 方法声明  */</span></span><br><span class="line">    PARAMETER,          <span class="comment">/* 参数声明  */</span></span><br><span class="line">    CONSTRUCTOR,        <span class="comment">/* 构造方法声明  */</span></span><br><span class="line">    LOCAL_VARIABLE,     <span class="comment">/* 局部变量声明  */</span></span><br><span class="line">    ANNOTATION_TYPE,    <span class="comment">/* 注释类型声明  */</span></span><br><span class="line">    PACKAGE             <span class="comment">/* 包声明  */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注解策略RetentionPolicy</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">RetentionPolicy</span> &#123;</span><br><span class="line">    SOURCE,  <span class="comment">/* Annotation信息仅存在于编译器处理期间，编译器处理完之后就没有该Annotation信息了*/</span></span><br><span class="line">    CLASS,   <span class="comment">/* 编译器将Annotation存储于类对应的.class文件中。默认行为  */</span></span><br><span class="line">    RUNTIME  <span class="comment">/* 编译器将Annotation存储于class文件中，并且可由JVM读入 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这个Target就是这么使用的</span></span><br><span class="line"><span class="comment">// 现在这个注解，本人希望它只能声明在方法上还有参数上，别的地方声明就会报错</span></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.METHOD, ElementType.PARAMETER&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Base64DecodeStr &#123;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">count</span><span class="params">()</span> <span class="keyword">default</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-Mybatis中-SelectKey-的使用"><a href="#7-Mybatis中-SelectKey-的使用" class="headerlink" title="7.Mybatis中@SelectKey()的使用"></a>7.Mybatis中@SelectKey()的使用</h3><h3 id="8-JMeter的使用"><a href="#8-JMeter的使用" class="headerlink" title="8.JMeter的使用"></a>8.JMeter的使用</h3><h3 id="9-SpringBoot打war包"><a href="#9-SpringBoot打war包" class="headerlink" title="9.SpringBoot打war包"></a>9.SpringBoot打war包</h3><h3 id="10-数据库批量导入"><a href="#10-数据库批量导入" class="headerlink" title="10.数据库批量导入"></a>10.数据库批量导入</h3><h3 id="11-系统初始化时，执行某些初始化操作"><a href="#11-系统初始化时，执行某些初始化操作" class="headerlink" title="11.系统初始化时，执行某些初始化操作"></a>11.系统初始化时，执行某些初始化操作</h3><p>实现<code>InitializingBean</code>接口，并实现afterPropertiesSet()方法，该方法用于做初始化操作。示例参见MiaoshaController.java，预先将库存信息加载到redis中。</p><h3 id="12-rabbitMQ的基本使用"><a href="#12-rabbitMQ的基本使用" class="headerlink" title="12.rabbitMQ的基本使用 "></a>12.rabbitMQ的基本使用 <a id="ret5" href="#end1"></a></h3>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java商城秒杀系统设计与实现</title>
      <link href="/JeckFS/2020/07/08/java%E5%95%86%E5%9F%8E%E7%A7%92%E6%9D%80%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/"/>
      <url>/JeckFS/2020/07/08/java%E5%95%86%E5%9F%8E%E7%A7%92%E6%9D%80%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>适用于高并发业务场景。</p><img src="/JeckFS/2020/07/08/java%E5%95%86%E5%9F%8E%E7%A7%92%E6%9D%80%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/1.png" class="" title="This is 1-th image."><p>核心技术列表：</p><img src="/JeckFS/2020/07/08/java%E5%95%86%E5%9F%8E%E7%A7%92%E6%9D%80%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/2.png" class="" title="This is 2-th image."><p>RabbitMQ：业务服务模块的解耦与异步通信。</p><p>要求：Springboot + 分布式锁 + 消息中间件  作者：debug</p><img src="/JeckFS/2020/07/08/java%E5%95%86%E5%9F%8E%E7%A7%92%E6%9D%80%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/3.png" class="" title="This is 3-th image."><p><a href="https://blog.csdn.net/u013871100/article/details/95023066">参考博客</a></p><p><a href="https://blog.csdn.net/qq_41822647/article/details/84647037">zookeeper的安装与启动</a><br>启动命令：<br>1.进入zookeeper安装路径；<br>2.sudo bin/zkServer.sh start // 启动服务器端<br>3.sudo bin/zkCli.sh //启动客户端</p><p><a href="https://my.oschina.net/u/2364788/blog/2875902">rabbitMQ安装</a></p><h1 id="项目创建"><a href="#项目创建" class="headerlink" title="项目创建"></a>项目创建</h1><p>新建module：api、model、server<br>复制pom文件</p><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p>用到的技术参见server模块的pom文件。<br>model模块下的com.debug.kill.model下的entity使用mybatis逆向工程生成。</p><p>1.编写启动类MainApplication, 继承自SpringBootServletInitializer, 并重写configure()<br>2.在server模块下的resources中添加配置文件<br>3.settings—&gt;file encoding Default encoding for properties files为UTF-8, 勾选Transparent native-to-ascii conversion</p><p>rabbitMQ队列对超期的订单进行失效操作。</p><p>项目运行配置:<br><img src="/JeckFS/2020/07/08/java%E5%95%86%E5%9F%8E%E7%A7%92%E6%9D%80%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/6.png" class="" title="This is 6-th image."></p><p>更改jsp文件后自动更新整个项目的classes和resources<br>On ‘Update’ action: Update classes and resources<br>Ob frame deactivaion: Update classes and resources</p><p>tomcat启动信息乱码:</p><img src="/JeckFS/2020/07/08/java%E5%95%86%E5%9F%8E%E7%A7%92%E6%9D%80%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/7.png" class="" title="This is 7-th image."><p>VM options: -Dfile.encoding=UTF-8即可</p><p><a href="https://www.cnblogs.com/lilinzhiyu/p/7921890.html">页面异常</a></p><p><a href="https://www.bilibili.com/video/BV12E41127m2?p=11">进度</a></p><h1 id="业务逻辑"><a href="#业务逻辑" class="headerlink" title="业务逻辑"></a>业务逻辑</h1><p>入口：com/debug/kill/server/controller/ItemController.java</p><img src="/JeckFS/2020/07/08/java%E5%95%86%E5%9F%8E%E7%A7%92%E6%9D%80%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/4.png" class="" title="This is 4-th image."><img src="/JeckFS/2020/07/08/java%E5%95%86%E5%9F%8E%E7%A7%92%E6%9D%80%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/5.png" class="" title="This is 5-th image."><img src="/JeckFS/2020/07/08/java%E5%95%86%E5%9F%8E%E7%A7%92%E6%9D%80%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/5.png" class="" title="This is 5-th image."><p>查询可秒杀，且该货物有存货，且处于抢购时间内的商品信息：</p><img src="/JeckFS/2020/07/08/java%E5%95%86%E5%9F%8E%E7%A7%92%E6%9D%80%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/11.png" class="" title="This is 11-th image."><img src="/JeckFS/2020/07/08/java%E5%95%86%E5%9F%8E%E7%A7%92%E6%9D%80%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/12.png" class="" title="This is 12-th image."><p>对从数据库中查询出时间进行格式转换，以满足前台展示的要求：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @JsonFormat:</span></span><br><span class="line"><span class="comment">// 用对应的实体类来接收数据库查询出来的结果时就完成了</span></span><br><span class="line"><span class="comment">// 时间格式的转换，再返回给前端时就是一个符合我们设置的时间格式了</span></span><br><span class="line"><span class="meta">@JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;,timezone = &quot;GMT+8&quot;)</span></span><br><span class="line"><span class="keyword">private</span> Date startTime;</span><br></pre></td></tr></table></figure></p><p>不清除图片</p><img src="/JeckFS/2020/07/08/java%E5%95%86%E5%9F%8E%E7%A7%92%E6%9D%80%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/8.png" class="" title="This is 8-th image."><p>清除：</p><img src="/JeckFS/2020/07/08/java%E5%95%86%E5%9F%8E%E7%A7%92%E6%9D%80%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/9.png" class="" title="This is 9-th image."><img src="/JeckFS/2020/07/08/java%E5%95%86%E5%9F%8E%E7%A7%92%E6%9D%80%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/10.png" class="" title="This is 10-th image."><h1 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h1><p>ThreadLocalRandom多线程环境下产生随机数。</p><p>登录地址：<br><a href="http://localhost:8080/login?userName=debug&amp;password=123456">http://localhost:8080/login?userName=debug&amp;password=123456</a></p><p>商品秒杀核心业务逻辑<br><a href="http://localhost:8080/kill/execute">http://localhost:8080/kill/execute</a></p>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>gradle入门</title>
      <link href="/JeckFS/2020/07/07/gradle%E5%85%A5%E9%97%A8/"/>
      <url>/JeckFS/2020/07/07/gradle%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// groovy可以省略括号和分号</span></span><br><span class="line">println <span class="string">&quot;hello world&quot;</span></span><br><span class="line">println(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">println <span class="string">&quot;-----------------&quot;</span></span><br><span class="line"><span class="comment">// 定义变量</span></span><br><span class="line"><span class="type">def</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">18</span></span><br><span class="line">println i</span><br><span class="line">println <span class="string">&quot;--------定义集合--------&quot;</span></span><br><span class="line"><span class="type">def</span> <span class="variable">list</span> <span class="operator">=</span> [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>]</span><br><span class="line">list &lt;&lt; <span class="string">&#x27;c&#x27;</span> <span class="comment">// 往集合中添加元素</span></span><br><span class="line">println list.get(<span class="number">2</span>) <span class="comment">// 从集合中取出第三个元素</span></span><br><span class="line">println <span class="string">&quot;---------定义map------------&quot;</span></span><br><span class="line"><span class="type">def</span> <span class="variable">map</span> <span class="operator">=</span> [<span class="string">&#x27;key1&#x27;</span>: <span class="string">&#x27;value1&#x27;</span>, <span class="string">&#x27;key2&#x27;</span>: <span class="string">&#x27;value2&#x27;</span>]</span><br><span class="line">map.put(<span class="string">&#x27;key3&#x27;</span>, <span class="string">&#x27;value3&#x27;</span>) <span class="comment">// 方式1: 向map中添加键值对</span></span><br><span class="line">println map.get(<span class="string">&#x27;key3&#x27;</span>)   <span class="comment">// 方式1: 从map根据key取出value</span></span><br><span class="line">map.key4 = <span class="string">&#x27;value4&#x27;</span>       <span class="comment">// 方式2: 向map中添加键值对</span></span><br><span class="line">println map.key4          <span class="comment">// 方式2: 从map根据key取出value</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 闭包就是一段代码块, 在gradle中主要是把闭包当做参数来使用</span></span><br><span class="line">println <span class="string">&quot;-----------闭包-----------&quot;</span></span><br><span class="line"><span class="comment">// 定义一个闭包</span></span><br><span class="line"><span class="type">def</span> <span class="variable">b1</span> <span class="operator">=</span> &#123;</span><br><span class="line">    println <span class="string">&#x27;闭包&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定义方法, 方法里面需要闭包类型的参数</span></span><br><span class="line">def <span class="title function_">method1</span><span class="params">(Closure closure)</span>&#123;</span><br><span class="line">    closure()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用方法</span></span><br><span class="line">method1(b1) <span class="comment">// method1 b1 也可以</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个带有参数的闭包</span></span><br><span class="line"><span class="type">def</span> <span class="variable">b2</span> <span class="operator">=</span> &#123;</span><br><span class="line">    v -&gt; println <span class="string">&quot;hello $&#123;v&#125;&quot;</span> <span class="comment">// v就是参数</span></span><br><span class="line">&#125;</span><br><span class="line">def <span class="title function_">method2</span><span class="params">(Closure closure)</span> &#123;</span><br><span class="line">    closure <span class="string">&quot;xiaoming&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">method2 b2</span><br><span class="line"></span><br></pre></td></tr></table></figure><img src="/JeckFS/2020/07/07/gradle%E5%85%A5%E9%97%A8/1.png" class="" title="This is 1-th image."><p><strong>使用本地maven仓库开发gradle工程</strong><br>将本地maven仓库的路径配成全局环境变量即可。<code>GRADLE_USER_HOME</code><br>配置先从本地仓库查找jar包：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">repositories&#123;</span><br><span class="line">    mavenLocal()</span><br><span class="line">    mavenCentral()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Gradle </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Gradle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>halo项目源码学习</title>
      <link href="/JeckFS/2020/07/07/halo%E9%A1%B9%E7%9B%AE%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
      <url>/JeckFS/2020/07/07/halo%E9%A1%B9%E7%9B%AE%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="项目技术栈"><a href="#项目技术栈" class="headerlink" title="项目技术栈"></a>项目技术栈</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    implementation <span class="string">&quot;org.kohsuke:github-api:$githubApiVersion&quot;</span></span><br><span class="line">    implementation <span class="string">&quot;org.springframework.boot:spring-boot-starter-actuator&quot;</span></span><br><span class="line">    implementation <span class="string">&quot;org.springframework.boot:spring-boot-starter-data-jpa&quot;</span></span><br><span class="line">    implementation <span class="string">&quot;org.springframework.boot:spring-boot-starter-web&quot;</span></span><br><span class="line">    implementation <span class="string">&quot;org.springframework.boot:spring-boot-starter-jetty&quot;</span></span><br><span class="line">    implementation <span class="string">&quot;org.springframework.boot:spring-boot-starter-freemarker&quot;</span></span><br><span class="line">    implementation <span class="string">&#x27;org.springframework.boot:spring-boot-starter-validation&#x27;</span></span><br><span class="line"></span><br><span class="line">    implementation <span class="string">&quot;com.sun.mail:jakarta.mail&quot;</span></span><br><span class="line">    implementation <span class="string">&quot;cn.hutool:hutool-core:$hutoolVersion&quot;</span></span><br><span class="line">    implementation <span class="string">&quot;cn.hutool:hutool-crypto:$hutoolVersion&quot;</span></span><br><span class="line">    implementation <span class="string">&quot;cn.hutool:hutool-extra:$hutoolVersion&quot;</span></span><br><span class="line">    implementation <span class="string">&quot;com.upyun:java-sdk:$upyunSdkVersion&quot;</span></span><br><span class="line">    implementation <span class="string">&quot;com.qiniu:qiniu-java-sdk:$qiniuSdkVersion&quot;</span></span><br><span class="line">    implementation <span class="string">&quot;com.aliyun.oss:aliyun-sdk-oss:$aliyunSdkVersion&quot;</span></span><br><span class="line">    implementation <span class="string">&quot;com.baidubce:bce-java-sdk:$baiduSdkVersion&quot;</span></span><br><span class="line">    implementation <span class="string">&quot;com.qcloud:cos_api:$qcloudSdkVersion&quot;</span></span><br><span class="line">    implementation <span class="string">&quot;com.huaweicloud:esdk-obs-java:$huaweiObsVersion&quot;</span></span><br><span class="line">    implementation <span class="string">&quot;io.springfox:springfox-swagger2:$swaggerVersion&quot;</span></span><br><span class="line">    implementation <span class="string">&quot;io.springfox:springfox-swagger-ui:$swaggerVersion&quot;</span></span><br><span class="line">    implementation <span class="string">&quot;org.apache.commons:commons-lang3:$commonsLangVersion&quot;</span></span><br><span class="line">    implementation <span class="string">&quot;org.apache.httpcomponents:httpclient:$httpclientVersion&quot;</span></span><br><span class="line">    implementation <span class="string">&quot;com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:$dataformatYamlVersion&quot;</span></span><br><span class="line">    implementation <span class="string">&quot;org.eclipse.jgit:org.eclipse.jgit:$jgitVersion&quot;</span></span><br><span class="line">    implementation <span class="string">&quot;com.google.code.findbugs:annotations:$annotationsVersion&quot;</span></span><br><span class="line"></span><br><span class="line">    implementation <span class="string">&quot;com.vladsch.flexmark:flexmark:$flexmarkVersion&quot;</span></span><br><span class="line">    implementation <span class="string">&quot;com.vladsch.flexmark:flexmark-ext-attributes:$flexmarkVersion&quot;</span></span><br><span class="line">    implementation <span class="string">&quot;com.vladsch.flexmark:flexmark-ext-autolink:$flexmarkVersion&quot;</span></span><br><span class="line">    implementation <span class="string">&quot;com.vladsch.flexmark:flexmark-ext-emoji:$flexmarkVersion&quot;</span></span><br><span class="line">    implementation <span class="string">&quot;com.vladsch.flexmark:flexmark-ext-escaped-character:$flexmarkVersion&quot;</span></span><br><span class="line">    implementation <span class="string">&quot;com.vladsch.flexmark:flexmark-ext-gfm-strikethrough:$flexmarkVersion&quot;</span></span><br><span class="line">    implementation <span class="string">&quot;com.vladsch.flexmark:flexmark-ext-gfm-tasklist:$flexmarkVersion&quot;</span></span><br><span class="line">    implementation <span class="string">&quot;com.vladsch.flexmark:flexmark-ext-ins:$flexmarkVersion&quot;</span></span><br><span class="line">    implementation <span class="string">&quot;com.vladsch.flexmark:flexmark-ext-media-tags:$flexmarkVersion&quot;</span></span><br><span class="line">    implementation <span class="string">&quot;com.vladsch.flexmark:flexmark-ext-tables:$flexmarkVersion&quot;</span></span><br><span class="line">    implementation <span class="string">&quot;com.vladsch.flexmark:flexmark-ext-toc:$flexmarkVersion&quot;</span></span><br><span class="line">    implementation <span class="string">&quot;com.vladsch.flexmark:flexmark-ext-superscript:$flexmarkVersion&quot;</span></span><br><span class="line">    implementation <span class="string">&quot;com.vladsch.flexmark:flexmark-ext-yaml-front-matter:$flexmarkVersion&quot;</span></span><br><span class="line">    implementation <span class="string">&quot;com.vladsch.flexmark:flexmark-ext-gitlab:$flexmarkVersion&quot;</span></span><br><span class="line"></span><br><span class="line">    implementation <span class="string">&quot;net.coobird:thumbnailator:$thumbnailatorVersion&quot;</span></span><br><span class="line">    implementation <span class="string">&quot;net.sf.image4j:image4j:$image4jVersion&quot;</span></span><br><span class="line">    implementation <span class="string">&quot;org.flywaydb:flyway-core:$flywayVersion&quot;</span></span><br><span class="line"></span><br><span class="line">    implementation <span class="string">&quot;com.google.zxing:core:$zxingVersion&quot;</span></span><br><span class="line"></span><br><span class="line">    implementation <span class="string">&quot;org.iq80.leveldb:leveldb:$levelDbVersion&quot;</span></span><br><span class="line">    implementation <span class="string">&quot;redis.clients:jedis:$jedisVersion&quot;</span></span><br><span class="line">    runtimeOnly <span class="string">&quot;com.h2database:h2:$h2Version&quot;</span></span><br><span class="line">    runtimeOnly <span class="string">&quot;mysql:mysql-connector-java&quot;</span></span><br><span class="line"></span><br><span class="line">    compileOnly <span class="string">&quot;org.projectlombok:lombok&quot;</span></span><br><span class="line">    annotationProcessor <span class="string">&quot;org.projectlombok:lombok&quot;</span></span><br><span class="line"></span><br><span class="line">    testCompileOnly <span class="string">&quot;org.projectlombok:lombok&quot;</span></span><br><span class="line">    testAnnotationProcessor <span class="string">&quot;org.projectlombok:lombok&quot;</span></span><br><span class="line"></span><br><span class="line">    testImplementation(<span class="string">&quot;org.springframework.boot:spring-boot-starter-test&quot;</span>) &#123;</span><br><span class="line">        exclude group: <span class="string">&#x27;org.junit.vintage&#x27;</span>, <span class="keyword">module</span>: <span class="string">&#x27;junit-vintage-engine&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//    testImplementation group: &#x27;org.powermock&#x27;, name: &#x27;powermock-api-mockito2&#x27;, version: &quot;$powermockApiMockito2&quot;</span></span><br><span class="line"><span class="comment">//    testImplementation group: &#x27;org.powermock&#x27;, name: &#x27;powermock-module-junit4&#x27;, version: &quot;$powermockVersion&quot;</span></span><br><span class="line"></span><br><span class="line">    developmentOnly <span class="string">&quot;org.springframework.boot:spring-boot-devtools&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Spring Boot 基于Spring的web开发框架</li><li>Freemarker 一种模板引擎</li><li>H2 Database：嵌入式数据库，无需安装</li><li>Mysql：关系型数据库</li><li>Spring-data-JPA：持久层框架</li><li>Ehcache：缓存框架</li><li>Lombok：Java高效开发工具</li><li>swagger2：在线API生成工具</li><li>hutool:一个Java基础工具类（也是一个有名的Github开源项目）</li><li>七牛云：是国内领先的企业级公有云服务商，致力于打造以数据为核心的场景化PaaS服务。</li><li>阿里云 OSS:提供基于网络的数据存取服务</li><li>flexmark：将MarkDown转为HTML</li><li>等等…</li></ul><h1 id="halo源码分析登录部分"><a href="#halo源码分析登录部分" class="headerlink" title="halo源码分析登录部分"></a>halo源码分析登录部分</h1><p><a href="https://blog.csdn.net/lzl980111/article/details/104409888">参考连接</a></p>]]></content>
      
      
      <categories>
          
          <category> 项目准备 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目准备 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode508-出现次数最多的子树元素和</title>
      <link href="/JeckFS/2020/07/06/leetcode508-%E5%87%BA%E7%8E%B0%E6%AC%A1%E6%95%B0%E6%9C%80%E5%A4%9A%E7%9A%84%E5%AD%90%E6%A0%91%E5%85%83%E7%B4%A0%E5%92%8C/"/>
      <url>/JeckFS/2020/07/06/leetcode508-%E5%87%BA%E7%8E%B0%E6%AC%A1%E6%95%B0%E6%9C%80%E5%A4%9A%E7%9A%84%E5%AD%90%E6%A0%91%E5%85%83%E7%B4%A0%E5%92%8C/</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><img src="/JeckFS/2020/07/06/leetcode508-%E5%87%BA%E7%8E%B0%E6%AC%A1%E6%95%B0%E6%9C%80%E5%A4%9A%E7%9A%84%E5%AD%90%E6%A0%91%E5%85%83%E7%B4%A0%E5%92%8C/2.png" class="" title="This is 2-th image."><img src="/JeckFS/2020/07/06/leetcode508-%E5%87%BA%E7%8E%B0%E6%AC%A1%E6%95%B0%E6%9C%80%E5%A4%9A%E7%9A%84%E5%AD%90%E6%A0%91%E5%85%83%E7%B4%A0%E5%92%8C/3.png" class="" title="This is 3-th image."><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p>思路：后序遍历 + HashMap</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> HashMap&lt;Integer, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> Integer.MIN_VALUE;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">postOrder</span><span class="params">(TreeNode p)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">cur</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (p != <span class="literal">null</span>) &#123;</span><br><span class="line">            cur = postOrder(p.left) + postOrder(p.right) + p.val;</span><br><span class="line">            max = Math.max(max, map.getOrDefault(cur, <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">            map.put(cur, map.getOrDefault(cur, <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cur;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 88.44% 5ms(中文) </span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] findFrequentTreeSum(TreeNode root) &#123;</span><br><span class="line">        List&lt;Integer&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        postOrder(root);</span><br><span class="line">        <span class="keyword">for</span> (Integer i : map.keySet()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (map.get(i) == max) &#123;</span><br><span class="line">                res.add(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span>[] r = <span class="keyword">new</span> <span class="title class_">int</span>[res.size()];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; res.size(); i++) &#123;</span><br><span class="line">            r[i] = res.get(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> HashMap </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HashMap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode面试题16-24-数对和</title>
      <link href="/JeckFS/2020/07/06/leetcode%E9%9D%A2%E8%AF%95%E9%A2%9816-24-%E6%95%B0%E5%AF%B9%E5%92%8C/"/>
      <url>/JeckFS/2020/07/06/leetcode%E9%9D%A2%E8%AF%95%E9%A2%9816-24-%E6%95%B0%E5%AF%B9%E5%92%8C/</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><img src="/JeckFS/2020/07/06/leetcode%E9%9D%A2%E8%AF%95%E9%A2%9816-24-%E6%95%B0%E5%AF%B9%E5%92%8C/1.png" class="" title="This is 1-th image."><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 22:34-22:43</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="comment">// 60.64% 32ms(中文)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">pairSums</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, j = nums.length-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] + nums[j] == target) &#123;</span><br><span class="line">                List&lt;Integer&gt; elem = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">                elem.add(nums[i]);</span><br><span class="line">                elem.add(nums[j]);</span><br><span class="line">                res.add(elem);</span><br><span class="line">                ++i;</span><br><span class="line">                --j;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[i] + nums[j] &gt; target) &#123;</span><br><span class="line">                --j;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                ++i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>使用HashMap：</strong><br>map.getOrDefault(Object key, V defaultValue): 当Map集合中有这个key时，就是用这个key值；如果没有就是用默认值defaultValue。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">pairSums</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">    <span class="comment">//key:数组的元素;value:该元素出现的次数</span></span><br><span class="line">    Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; ans = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">count</span> <span class="operator">=</span> map.get(target - num);</span><br><span class="line">        <span class="keyword">if</span> (count != <span class="literal">null</span>) &#123; <span class="comment">// 找到与num配对的</span></span><br><span class="line">            ans.add(Arrays.asList(num, target - num));</span><br><span class="line">            <span class="keyword">if</span> (count == <span class="number">1</span>)</span><br><span class="line">                map.remove(target - num);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                map.put(target - num, --count);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="comment">// 没有找到与num配对的</span></span><br><span class="line">            map.put(num, map.getOrDefault(num, <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> HashMap </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HashMap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>杂七杂八</title>
      <link href="/JeckFS/2020/07/06/%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB/"/>
      <url>/JeckFS/2020/07/06/%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB/</url>
      
        <content type="html"><![CDATA[<h1 id="github如何精准搜索"><a href="#github如何精准搜索" class="headerlink" title="github如何精准搜索"></a>github如何精准搜索</h1><p><code>in:name</code>在项目名称中搜<br><code>in:readme</code>在readme中搜<br><code>in:description</code>在描述中搜</p><p>条件限定：<br><code>stars:&gt;3000</code><br><code>forks:&gt;200</code><br><code>language:java</code> 限定项目使用的语言<br><code>pushed:&gt;2019-09-03</code> 限定更新时间</p><hr><p>示例：</p><p><code>in:name 搜索名字</code> 显示名称中有要搜索字符串的项目。</p><p><code>in:name 搜索名字 stars:&gt;3000 forks:&gt;200</code> 显示3000星以上, 且forks数超过200的项目。</p><hr><p><code>in:readme 搜索名字</code> 显示readme中出现过”搜索名字”的项目。</p><h1 id="如何学习项目"><a href="#如何学习项目" class="headerlink" title="如何学习项目"></a>如何学习项目</h1><ul><li>了解技术点</li><li>跑项目</li><li>阅读项目源码并调试<ul><li>可结合某个运行起来的功能入手，一个组件一个组件弄熟，看报错、看日志、看打印变量。</li><li>从Controller入手。然后Service，repository，model这些层。</li></ul></li><li>改东西，加自己的功能和模块</li></ul><p>构建文件中会显示项目用了(依赖了)哪些技术点。gradle文件或者基于maven的pom文件。</p><h1 id="git项目中又引用其他的项目的解决办法"><a href="#git项目中又引用其他的项目的解决办法" class="headerlink" title="git项目中又引用其他的项目的解决办法"></a>git项目中又引用其他的项目的解决办法</h1><p>导入halo项目报错。<br><a href="https://bbs.halo.run/d/504-themes-anatole/8">参考连接</a></p><img src="/JeckFS/2020/07/06/%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB/1.png" class="" title="This is 1-th image."><p>可以使用命令解决：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git submodule init</span><br><span class="line">git submodule update</span><br></pre></td></tr></table></figure></p><h1 id="github项目介绍"><a href="#github项目介绍" class="headerlink" title="github项目介绍"></a>github项目介绍</h1><h2 id="1-分支变动比较"><a href="#1-分支变动比较" class="headerlink" title="1.分支变动比较"></a>1.分支变动比较</h2><img src="/JeckFS/2020/07/06/%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB/2.png" class="" title="This is 2-th image."><p><strong>在网址后面加上/compare即可</strong></p><img src="/JeckFS/2020/07/06/%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB/3.png" class="" title="This is 3-th image."><h1 id="值得学的springboot项目"><a href="#值得学的springboot项目" class="headerlink" title="值得学的springboot项目"></a>值得学的springboot项目</h1><img src="/JeckFS/2020/07/06/%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB/4.png" class="" title="This is 4-th image."><h1 id="拼多多"><a href="#拼多多" class="headerlink" title="拼多多"></a>拼多多</h1><img src="/JeckFS/2020/07/06/%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB/6.png" class="" title="This is 6-th image."><img src="/JeckFS/2020/07/06/%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB/5.png" class="" title="This is 5-th image."><h1 id="Idea中好用的插件"><a href="#Idea中好用的插件" class="headerlink" title="Idea中好用的插件"></a>Idea中好用的插件</h1><p>Translation：汉译英，英译汉</p><p>GenerateAllSetter：一键生成bean的set方法。</p><img src="/JeckFS/2020/07/06/%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB/7.png" class="" title="This is 7-th image."><img src="/JeckFS/2020/07/06/%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB/8.png" class="" title="This is 8-th image.">]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 其他 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java基础</title>
      <link href="/JeckFS/2020/07/06/java%E5%9F%BA%E7%A1%80/"/>
      <url>/JeckFS/2020/07/06/java%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<blockquote class="pullquote mindmap mindmap-md"><ul><li>[Java基础]<ul><li>final关键字<ul><li>用法<ul><li>修饰类，类不能被继承</li><li>修饰方法，方法不能被重写</li><li>修饰变量，变量值不能被改变</li><li>变量为引用类型，引用不可变，引用的对象内容可变</li></ul></li><li>final语义靠编译器在编译期保证</li><li>考虑到变量作用域，匿名内部类只能引用外部方法的final变量，final关键字可以不加</li></ul></li><li>深拷贝与浅拷贝<ul><li>浅拷贝<ul><li>基本数据类型字段独立，引用类型字段不独立</li></ul></li><li>深拷贝<ul><li>基本数据类型字段和引用类型字段都独立</li></ul></li><li>实现方式</li><li>数组拷贝<ul><li>浅拷贝：Arrays.copyOf(), 默认clone()方法</li></ul></li><li>集合拷贝<ul><li>默认是浅拷贝：通过构造函数、clone()实现</li></ul></li></ul></li><li>重写与重载的异同点</li><li>String、StringBuffer.(线程安全)、StringBuilder(非线程安全)</li></ul></li></ul></blockquote><h1 id="final关键字"><a href="#final关键字" class="headerlink" title="final关键字"></a>final关键字</h1><p><a href="https://www.yuque.com/books/share/c5692525-ea89-4571-82bd-fae4b816039d/pn4oq1#LpI66">参考</a><br><a href="https://www.cnblogs.com/cciejh/p/final-in-java.html">补充</a></p><img src="/JeckFS/2020/07/06/java%E5%9F%BA%E7%A1%80/1.png" class="" title="This is 1-th image."><p><strong>final与匿名内部类：</strong></p><ul><li>内部类中用到的外部方法的局部变量，该局部变量应是final类型。</li><li>内部类的方法参数使用到外部的变量，则形参需要被final修饰。</li></ul><p>示例：</p><img src="/JeckFS/2020/07/06/java%E5%9F%BA%E7%A1%80/2.png" class="" title="This is 2-th image."><p>外部方法中变量i虽然可以不用final修饰，但是默认他是final类型的。若发生更改，如i++，匿名内部类中对变量i的引用将报错。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error:(<span class="number">94</span>, <span class="number">26</span>) java: 从内部类引用的本地变量必须是最终变量或实际上的最终变量</span><br></pre></td></tr></table></figure><p>假设变量i不是final类型的。当main()执行完毕，局部变量i就会消亡，但是匿名内部类中还保持着对变量i的引用，这样导致异常产生。而此时需要使用 final 在类加载的时候进入常量池，即使方法弹栈，常量池的常量还在，也可以继续使用，JVM 会持续维护这个引用在回调方法中的生命周期。</p><p><strong>但是 JDK 1.8 取消了对匿名内部类引用的局部变量 final 修饰的检查</strong></p><p>对此，theonlin专门通过实验做出了总结：其实局部内部类并不是直接调用方法传进来的参数，而是内部类将传进来的参数通过自己的构造器备份到了自己的内部，自己内部的方法调用的实际是自己的属性而不是外部类方法的参数。外部类中的方法中的变量或参数只是方法的局部变量，这些变量或参数的作用域只在这个方法内部有效，所以方法中被 final的变量的仅仅作用是表明这个变量将作为内部类构造器参数，其实final不加也可以，加了可能还会占用内存空间，影响 GC。最后结论就是，需要使用 final 去持续维护这个引用在回调方法中的生命周期这种说法应该是错误的，也没必要。</p><p>对于声明为final类型的变量而言，它的final语义是在Java编译器在编译期来保障的，在编译成字节码文件后，加final与不加final其字节码文件是一样的。如下图：</p><img src="/JeckFS/2020/07/06/java%E5%9F%BA%E7%A1%80/8.png" class="" title="This is 8-th image."><h1 id="深拷贝与浅拷贝"><a href="#深拷贝与浅拷贝" class="headerlink" title="深拷贝与浅拷贝"></a>深拷贝与浅拷贝</h1><p><a href="https://juejin.im/post/5c988a7ef265da6116246d11">参考连接1</a><br><a href="https://www.cnblogs.com/plokmju/p/7357205.html">参考连接2</a></p><p><strong>对象拷贝</strong>：将一个对象的属性拷贝到另一个有着相同类类型的对象中去。主要是为了在新的上下文环境中复用对象的部分或全部数据。<br>拷贝前后的对象是两个不同的对象。针对一个对象而言，浅拷贝还是深拷贝的主要区别是其对象内部的引用类型的属性是否相等。</p><h2 id="1-浅拷贝"><a href="#1-浅拷贝" class="headerlink" title="1.浅拷贝"></a>1.浅拷贝</h2><p>被拷贝的对象中的基本类型和String类型的字段，拷贝的是值；<br>背拷贝的对象中的引用类型的字段，拷贝的是内存地址；</p><img src="/JeckFS/2020/07/06/java%E5%9F%BA%E7%A1%80/3.png" class="" title="This is 3-th image."><p><strong>浅拷贝的实现：</strong><br>实现Cloneable接口，重写clone()，在重写的clone()中直接调用父类的clone()，即super.clone()即可。</p><h2 id="2-深拷贝"><a href="#2-深拷贝" class="headerlink" title="2.深拷贝"></a>2.深拷贝</h2><p>引用类型字段充分配内存。基本类型或者String类型字段以及引用类型字段拷贝前后是两个不同的对象。<br>经过深拷贝后的两个对象是相互独立的。</p><img src="/JeckFS/2020/07/06/java%E5%9F%BA%E7%A1%80/4.png" class="" title="This is 4-th image."><p><strong>深拷贝的实现</strong><br>实现Cloneable接口，重写clone()，只不过clone方法是创建的一个新的对象。</p><h2 id="3-数组的拷贝"><a href="#3-数组的拷贝" class="headerlink" title="3.数组的拷贝"></a>3.数组的拷贝</h2><p>数组的拷贝两种方式：</p><ul><li>Arrays.copyOf()</li><li>clone()</li></ul><p>这两种方法都是浅拷贝。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 基本类型数组的浅拷贝</span></span><br><span class="line"><span class="type">int</span>[] i1 = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">5</span>];</span><br><span class="line">i1[<span class="number">0</span>] = <span class="number">9</span>;</span><br><span class="line"><span class="type">int</span>[] i2 = i1.clone();</span><br><span class="line">i2[<span class="number">0</span>] = <span class="number">4</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;i1[0]:&quot;</span>+i1[<span class="number">0</span>]+<span class="string">&quot;, i2[0]:&quot;</span>+i2[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象数组的浅拷贝</span></span><br><span class="line">Employee[] a = <span class="keyword">new</span> <span class="title class_">Employee</span>[<span class="number">5</span>];</span><br><span class="line">a[<span class="number">0</span>] = <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;zhagnsan&quot;</span>, <span class="number">25</span>);</span><br><span class="line">Employee[] b = Arrays.copyOf(a, a.length);</span><br><span class="line">System.out.println(b[<span class="number">0</span>] == a[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">Employee[] c = <span class="keyword">new</span> <span class="title class_">Employee</span>[<span class="number">5</span>];</span><br><span class="line">c[<span class="number">0</span>] = <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;xiaoming&quot;</span>, <span class="number">26</span>);</span><br><span class="line">Employee[] d = c.clone();</span><br><span class="line">System.out.println(c[<span class="number">0</span>] == d[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">i1[0]:9, i2[0]:4</span></span><br><span class="line"><span class="comment">true</span></span><br><span class="line"><span class="comment">true</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></p><h2 id="4-集合的拷贝"><a href="#4-集合的拷贝" class="headerlink" title="4.集合的拷贝"></a>4.集合的拷贝</h2><p>集合的拷贝默认都是浅拷贝。<br>实现方式：</p><ul><li>构造函数</li><li>clone()</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;Employee&gt; a = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">a.add(<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;zhangsan&quot;</span>, <span class="number">26</span>));</span><br><span class="line">ArrayList&lt;Employee&gt; b = (ArrayList&lt;Employee&gt;) a.clone();</span><br><span class="line">System.out.println(a.get(<span class="number">0</span>) == b.get(<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果：</span></span><br><span class="line"><span class="literal">true</span></span><br></pre></td></tr></table></figure><p>集合的深拷贝：<br>创建新集合，然后深拷贝原集合中的每个元素，并加入到新的集合中。</p><h1 id="重写与重载"><a href="#重写与重载" class="headerlink" title="重写与重载"></a>重写与重载</h1><img src="/JeckFS/2020/07/06/java%E5%9F%BA%E7%A1%80/5.png" class="" title="This is 5-th image."><img src="/JeckFS/2020/07/06/java%E5%9F%BA%E7%A1%80/6.png" class="" title="This is 6-th image."><img src="/JeckFS/2020/07/06/java%E5%9F%BA%E7%A1%80/7.png" class="" title="This is 7-th image."><h1 id="String-线程安全-、StringBuffer-线程安全-、StringBuilder-非线程安全"><a href="#String-线程安全-、StringBuffer-线程安全-、StringBuilder-非线程安全" class="headerlink" title="String(线程安全)、StringBuffer(线程安全)、StringBuilder(非线程安全)"></a>String(线程安全)、StringBuffer(线程安全)、StringBuilder(非线程安全)</h1><p>String类是典型的不可变类String类被声明为final，所有的属性也被声明为final的。<br>不可变对象的一个特点就是对其做的任何修改操作都会返回一个新的对象。<br><strong>StringBuffer的线程安全是通过把各种各种修改数据的方法都加上synchronized关键字实现的。</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;abaa&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">replace</span> <span class="operator">=</span> s.replace(<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>);</span><br><span class="line">System.out.println(s == replace);</span><br><span class="line">System.out.println(s.intern() == replace.intern());</span><br><span class="line">System.out.println(<span class="string">&quot;acaa&quot;</span>.intern() == replace.intern());</span><br></pre></td></tr></table></figure></p><p><code>String s = new String(&quot;abc&quot;);</code>创建了几个对象？<br>如果常量池中没有”abc”，则在常量池中创建”abc”，然后在堆上创建对该字符串的String类型的引用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// String 构造函数的源码</span></span><br><span class="line"><span class="comment">// 在将一个字符串对象作为另一个字符串对象的构造函数参数时，</span></span><br><span class="line"><span class="comment">// 并不会完全复制 value 数组内容，而是都会指向同一个 value 数组。</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">String</span><span class="params">(String original)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.value = original.value;</span><br><span class="line">    <span class="built_in">this</span>.hash = original.hash;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> sc.nextLine();</span><br><span class="line">System.out.println(s.intern() == <span class="string">&quot;aaa&quot;</span>); <span class="comment">// 控制台输入aaa，结果为true</span></span><br></pre></td></tr></table></figure><h1 id="static"><a href="#static" class="headerlink" title="static"></a>static</h1><p><strong>static不能修饰局部变量。</strong></p><img src="/JeckFS/2020/07/06/java%E5%9F%BA%E7%A1%80/9.png" class="" title="This is 9-th image."><p><strong>父类静态成员初始化、子类静态成员初始化的顺序如何？</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">static</span> <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">static</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;父类静态成员变量初始化&quot;</span>+i+<span class="string">&quot; 同时执行父类静态代码块&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;父类非静态成员变量初始化&quot;</span>+a+<span class="string">&quot; 同时执行父类非静态代码块&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Animal</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;父类构造函数&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">static</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;子类静态成员变量初始化&quot;</span>+j+<span class="string">&quot; 同时执行子类静态代码块&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;子类非静态成员变量&quot;</span>+b+<span class="string">&quot; 同时执行子类非静态代码块&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Dog</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;子类构造函数&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">父类静态成员变量初始化1 同时执行父类静态代码块</span></span><br><span class="line"><span class="comment">子类静态成员变量初始化2 同时执行子类静态代码块</span></span><br><span class="line"><span class="comment">父类非静态成员变量初始化1 同时执行父类非静态代码块</span></span><br><span class="line"><span class="comment">父类构造函数</span></span><br><span class="line"><span class="comment">子类非静态成员变量2 同时执行子类非静态代码块</span></span><br><span class="line"><span class="comment">子类构造函数</span></span><br><span class="line"><span class="comment">    */</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong><br>-&gt;父类静态代码块或静态成员变量初始化-&gt;子类静态代码块子类静态成员变量初始化<br>-&gt;父类实例代码块或非静态成员变量初始化-&gt;父类构造函数<br>-&gt;子类实例代码块或非静态成员变量初始化-&gt;子类够赞函数</p><h1 id="接口默认方法-静态接口方法"><a href="#接口默认方法-静态接口方法" class="headerlink" title="接口默认方法, 静态接口方法"></a>接口默认方法, 静态接口方法</h1><ul><li>接口默认方法<ul><li>可以定义不止一个. </li><li>可以在实现类的实例静态代码块中使用,但不可以在实现类的静态代码块中使用.</li><li>接口方法只能是public的</li></ul></li><li>接口静态方法<ul><li>可以定义不止一个</li><li>可以在实现类的静态代码块中使用.</li><li>只能是public.</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 面经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面经 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode12-整数转罗马数字</title>
      <link href="/JeckFS/2020/07/05/leetcode12-%E6%95%B4%E6%95%B0%E8%BD%AC%E7%BD%97%E9%A9%AC%E6%95%B0%E5%AD%97/"/>
      <url>/JeckFS/2020/07/05/leetcode12-%E6%95%B4%E6%95%B0%E8%BD%AC%E7%BD%97%E9%A9%AC%E6%95%B0%E5%AD%97/</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><img src="/JeckFS/2020/07/05/leetcode12-%E6%95%B4%E6%95%B0%E8%BD%AC%E7%BD%97%E9%A9%AC%E6%95%B0%E5%AD%97/1.png" class="" title="This is 1-th image."><img src="/JeckFS/2020/07/05/leetcode12-%E6%95%B4%E6%95%B0%E8%BD%AC%E7%BD%97%E9%A9%AC%E6%95%B0%E5%AD%97/2.png" class="" title="This is 2-th image."><img src="/JeckFS/2020/07/05/leetcode12-%E6%95%B4%E6%95%B0%E8%BD%AC%E7%BD%97%E9%A9%AC%E6%95%B0%E5%AD%97/3.png" class="" title="This is 3-th image."><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="comment">// 85.18% 5ms(中文) 62.21% 5ms(英文)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">intToRoman</span><span class="params">(<span class="type">int</span> num)</span> &#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="type">int</span>[] t = &#123;<span class="number">1000</span>, <span class="number">500</span>, <span class="number">100</span>, <span class="number">50</span>, <span class="number">10</span>, <span class="number">5</span>, <span class="number">1</span>&#125;;</span><br><span class="line">        String[] s = &#123;<span class="string">&quot;M&quot;</span>, <span class="string">&quot;D&quot;</span>, <span class="string">&quot;C&quot;</span>, <span class="string">&quot;L&quot;</span>, <span class="string">&quot;X&quot;</span>, <span class="string">&quot;V&quot;</span>, <span class="string">&quot;I&quot;</span>&#125;;</span><br><span class="line">        <span class="keyword">while</span> (num &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; t.length; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="number">4</span> &lt;= num &amp;&amp; num &lt; <span class="number">5</span>) &#123;</span><br><span class="line">                    sb.append(<span class="string">&quot;IV&quot;</span>);</span><br><span class="line">                    num -= <span class="number">4</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">9</span> &lt;= num &amp;&amp; num &lt; <span class="number">10</span>) &#123;</span><br><span class="line">                    sb.append(<span class="string">&quot;IX&quot;</span>);</span><br><span class="line">                    num -= <span class="number">9</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">40</span> &lt;= num &amp;&amp; num &lt; <span class="number">50</span>) &#123;</span><br><span class="line">                    sb.append(<span class="string">&quot;XL&quot;</span>);</span><br><span class="line">                    num -= <span class="number">40</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">90</span> &lt;= num &amp;&amp; num &lt; <span class="number">100</span>) &#123;</span><br><span class="line">                    sb.append(<span class="string">&quot;XC&quot;</span>);</span><br><span class="line">                    num -= <span class="number">90</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">400</span> &lt;= num &amp;&amp; num &lt; <span class="number">500</span>) &#123;</span><br><span class="line">                    sb.append(<span class="string">&quot;CD&quot;</span>);</span><br><span class="line">                    num -= <span class="number">400</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">900</span> &lt;= num &amp;&amp; num &lt; <span class="number">1000</span>) &#123;</span><br><span class="line">                    sb.append(<span class="string">&quot;CM&quot;</span>);</span><br><span class="line">                    num -= <span class="number">900</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (num - t[i] &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    sb.append(s[i]);</span><br><span class="line">                    num -= t[i];</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> leetcode其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode其他 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode43-字符串相乘</title>
      <link href="/JeckFS/2020/07/05/leetcode43-%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9B%B8%E4%B9%98/"/>
      <url>/JeckFS/2020/07/05/leetcode43-%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9B%B8%E4%B9%98/</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><img src="/JeckFS/2020/07/05/leetcode43-%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9B%B8%E4%B9%98/1.png" class="" title="This is 1-th image."><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>先计算第一个乘数与第二个乘数的每一位相乘的结果。然后再相加。相加时要考虑到乘10。</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 由数字组成的字符数组与数字字符y相乘的计算逻辑。x必须满足前缀不是0开头</span></span><br><span class="line"><span class="keyword">private</span> StringBuilder <span class="title function_">multiByOne</span><span class="params">(<span class="type">char</span>[] x, <span class="type">char</span> y)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">yy</span> <span class="operator">=</span> y - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">jinWei</span> <span class="operator">=</span> (x[x.length - <span class="number">1</span>] - <span class="string">&#x27;0&#x27;</span>) * yy / <span class="number">10</span>;</span><br><span class="line">    <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>((x[x.length - <span class="number">1</span>] - <span class="string">&#x27;0&#x27;</span>) * yy % <span class="number">10</span> + <span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> x.length - <span class="number">2</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> (x[i] - <span class="string">&#x27;0&#x27;</span>) * yy + jinWei;</span><br><span class="line">        jinWei = t / <span class="number">10</span>;</span><br><span class="line">        sb.append(t % <span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (jinWei &gt; <span class="number">0</span>) sb.append(jinWei);</span><br><span class="line">    <span class="keyword">return</span> sb.reverse();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 有数字组成的字符串a与b相加的结果。a与b必须满足前缀不能以0开头</span></span><br><span class="line"><span class="keyword">private</span> StringBuilder <span class="title function_">add</span><span class="params">(StringBuilder a, StringBuilder b)</span> &#123; </span><br><span class="line">    <span class="comment">// 参数的类型直接换成String，其他代码不变，也可以</span></span><br><span class="line">    <span class="comment">// private StringBuilder add(String a, String b) &#123; </span></span><br><span class="line">    <span class="type">int</span> <span class="variable">jinWei</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">StringBuilder</span> <span class="variable">res</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> a.length() - <span class="number">1</span>, j = b.length() - <span class="number">1</span>; i &gt;= <span class="number">0</span> || j &gt;= <span class="number">0</span>; i--, j--) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> i &lt; <span class="number">0</span> ? <span class="number">0</span> : a.charAt(i) - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> j &lt; <span class="number">0</span> ? <span class="number">0</span> : b.charAt(j) - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> x + y + jinWei;</span><br><span class="line">        res.append(t % <span class="number">10</span>);</span><br><span class="line">        jinWei = t / <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (jinWei != <span class="number">0</span>) res.append(jinWei);</span><br><span class="line">    <span class="keyword">return</span> res.reverse();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="comment">// 主函数</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">multiply</span><span class="params">(String num1, String num2)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (num1.equals(<span class="string">&quot;0&quot;</span>) || num2.equals(<span class="string">&quot;0&quot;</span>)) <span class="keyword">return</span> <span class="string">&quot;0&quot;</span>;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">res</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">        <span class="type">char</span>[] chars = num1.toCharArray();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> num2.length() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="type">StringBuilder</span> <span class="variable">byOne</span> <span class="operator">=</span> multiByOne(chars, num2.charAt(i));</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; num2.length() - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line">                byOne.append(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            res = add(res.toString(), byOne.toString());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>jdk8新特性</title>
      <link href="/JeckFS/2020/07/04/jdk8%E6%96%B0%E7%89%B9%E6%80%A7/"/>
      <url>/JeckFS/2020/07/04/jdk8%E6%96%B0%E7%89%B9%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.runoob.com/java/java8-new-features.html">参考连接</a></p><h1 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h1><p><strong>Lambda表达式可以访问外层的局部变量，该局部变量是隐含final语义的，虽然在定义时不声明为final，但其在后续的程序中并不能被改变。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Java8Tester</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        Converter&lt;Integer, String&gt; s = (param) -&gt; System.out.println(String.valueOf(param + num));</span><br><span class="line">        s.convert(<span class="number">2</span>);  <span class="comment">// 输出结果为 3</span></span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Converter</span>&lt;T1, T2&gt; &#123;</span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">convert</span><span class="params">(<span class="type">int</span> i)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">1</span>;  </span><br><span class="line">Converter&lt;Integer, String&gt; s = (param) -&gt; System.out.println(String.valueOf(param + num));</span><br><span class="line">s.convert(<span class="number">2</span>);</span><br><span class="line">num = <span class="number">5</span>;  </span><br><span class="line"><span class="comment">//报错信息：Local variable num defined in an enclosing scope must be final or effectively </span></span><br><span class="line"> <span class="keyword">final</span></span><br></pre></td></tr></table></figure><p><strong>Lambda表达式中不允许声明与局部变量同名的参数或局部变量。</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">first</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;  </span><br><span class="line">Comparator&lt;String&gt; comparator = (first, second) -&gt; Integer.compare(first.length(), second.length());  <span class="comment">//编译会出错 </span></span><br></pre></td></tr></table></figure></p><img src="/JeckFS/2020/07/04/jdk8%E6%96%B0%E7%89%B9%E6%80%A7/1.png" class="" title="This is 1-th image."><p>Lambda表达式类似简洁版的匿名内部类，其写法更简洁。</p><img src="/JeckFS/2020/07/04/jdk8%E6%96%B0%E7%89%B9%E6%80%A7/2.png" class="" title="This is 2-th image."><p>对比匿名内部类，只有接口方法run()，留了下来，函数名都省略了，取而代之的是一个箭头。</p><p>因为run()只有一条语句，连花括号都可省略。。。</p><img src="/JeckFS/2020/07/04/jdk8%E6%96%B0%E7%89%B9%E6%80%A7/3.png" class="" title="This is 3-th image."><p>将Lambda表达式作为参数传递：</p><img src="/JeckFS/2020/07/04/jdk8%E6%96%B0%E7%89%B9%E6%80%A7/4.png" class="" title="This is 4-th image."><p>示例2：</p><img src="/JeckFS/2020/07/04/jdk8%E6%96%B0%E7%89%B9%E6%80%A7/5.png" class="" title="This is 5-th image."><img src="/JeckFS/2020/07/04/jdk8%E6%96%B0%E7%89%B9%E6%80%A7/6.png" class="" title="This is 6-th image."><p>省略掉参数类型和return关键字：</p><img src="/JeckFS/2020/07/04/jdk8%E6%96%B0%E7%89%B9%E6%80%A7/7.png" class="" title="This is 7-th image."><p><strong>基本语法：</strong></p><img src="/JeckFS/2020/07/04/jdk8%E6%96%B0%E7%89%B9%E6%80%A7/8.png" class="" title="This is 8-th image."><img src="/JeckFS/2020/07/04/jdk8%E6%96%B0%E7%89%B9%E6%80%A7/9.png" class="" title="This is 9-th image."><h1 id="函数式接口"><a href="#函数式接口" class="headerlink" title="函数式接口"></a>函数式接口</h1><p>只有函数式接口才可以使用Lambda表达式。</p><img src="/JeckFS/2020/07/04/jdk8%E6%96%B0%E7%89%B9%E6%80%A7/10.png" class="" title="This is 10-th image."><p>@FunctionallInterface只能修饰函数式接口，否则报错。</p><p><strong>JDK提供的常见的函数式接口：</strong></p><img src="/JeckFS/2020/07/04/jdk8%E6%96%B0%E7%89%B9%E6%80%A7/11.png" class="" title="This is 11-th image."><img src="/JeckFS/2020/07/04/jdk8%E6%96%B0%E7%89%B9%E6%80%A7/12.png" class="" title="This is 12-th image."><img src="/JeckFS/2020/07/04/jdk8%E6%96%B0%E7%89%B9%E6%80%A7/13.png" class="" title="This is 13-th image."><img src="/JeckFS/2020/07/04/jdk8%E6%96%B0%E7%89%B9%E6%80%A7/14.png" class="" title="This is 14-th image."><img src="/JeckFS/2020/07/04/jdk8%E6%96%B0%E7%89%B9%E6%80%A7/15.png" class="" title="This is 15-th image."><img src="/JeckFS/2020/07/04/jdk8%E6%96%B0%E7%89%B9%E6%80%A7/16.png" class="" title="This is 16-th image."><p><strong>用法：</strong></p><img src="/JeckFS/2020/07/04/jdk8%E6%96%B0%E7%89%B9%E6%80%A7/17.png" class="" title="This is 17-th image."><img src="/JeckFS/2020/07/04/jdk8%E6%96%B0%E7%89%B9%E6%80%A7/18.png" class="" title="This is 18-th image."><p>Supplier 供给型接口</p><img src="/JeckFS/2020/07/04/jdk8%E6%96%B0%E7%89%B9%E6%80%A7/19.png" class="" title="This is 19-th image."><img src="/JeckFS/2020/07/04/jdk8%E6%96%B0%E7%89%B9%E6%80%A7/20.png" class="" title="This is 20-th image."><h1 id="方法引用"><a href="#方法引用" class="headerlink" title="方法引用"></a>方法引用</h1><img src="/JeckFS/2020/07/04/jdk8%E6%96%B0%E7%89%B9%E6%80%A7/21.png" class="" title="This is 21-th image."><p>接口方法中特定的方法与接口方法的方法描述符一致，(参数类型，返回值类型都一致)，则可以使用<code>对象::实例方法</code>的形式调用。</p><img src="/JeckFS/2020/07/04/jdk8%E6%96%B0%E7%89%B9%E6%80%A7/22.png" class="" title="This is 22-th image."><p><code>类::静态方法</code><br><img src="/JeckFS/2020/07/04/jdk8%E6%96%B0%E7%89%B9%E6%80%A7/23.png" class="" title="This is 23-th image."></p><p>Comparator中的compare()与Integer中的compare()参数和返回值一致，可以使用上述形式来使用。</p><p><code>类::实例方法</code></p><blockquote><p>只要求接口函数的返回值与被引用函数的返回值一致。<code>Function&lt;T,V&gt;</code>其中T为接口方法的参数，V为接口方法的返回值类型。<br><img src="/JeckFS/2020/07/04/jdk8%E6%96%B0%E7%89%B9%E6%80%A7/24.png" class="" title="This is 24-th image."></p></blockquote><p><code>类::new</code><br><img src="/JeckFS/2020/07/04/jdk8%E6%96%B0%E7%89%B9%E6%80%A7/25.png" class="" title="This is 25-th image."><br>只能引用类的无参构造函数。</p><h1 id="Lambda表达式和方法引用的应用：Stream"><a href="#Lambda表达式和方法引用的应用：Stream" class="headerlink" title="Lambda表达式和方法引用的应用：Stream"></a>Lambda表达式和方法引用的应用：Stream</h1><p>Stream不改变集合或数组中的数据。</p><img src="/JeckFS/2020/07/04/jdk8%E6%96%B0%E7%89%B9%E6%80%A7/26.png" class="" title="This is 26-th image."><img src="/JeckFS/2020/07/04/jdk8%E6%96%B0%E7%89%B9%E6%80%A7/27.png" class="" title="This is 27-th image."><img src="/JeckFS/2020/07/04/jdk8%E6%96%B0%E7%89%B9%E6%80%A7/28.png" class="" title="This is 28-th image."><img src="/JeckFS/2020/07/04/jdk8%E6%96%B0%E7%89%B9%E6%80%A7/29.png" class="" title="This is 29-th image."><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        Function&lt;Employee, String&gt; function = Employee::getName;</span><br><span class="line">        String 小明 = function.apply(<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;小明&quot;</span>, <span class="number">25</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;小明 = &quot;</span> + 小明);</span><br><span class="line"></span><br><span class="line">        <span class="type">Employee</span> <span class="variable">xiaoming</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;hello world&quot;</span>, <span class="number">25</span>);</span><br><span class="line">        Supplier&lt;String&gt; supplier = xiaoming::getName;</span><br><span class="line">        System.out.println(supplier.get());</span><br><span class="line"></span><br><span class="line">        Consumer&lt;String&gt; consumer = xiaoming::setName;</span><br><span class="line">        consumer.accept(<span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line">        System.out.println(supplier.get());</span><br><span class="line"></span><br><span class="line">        Supplier&lt;Employee&gt; supplier1 = Employee::<span class="keyword">new</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;=========================================&quot;</span>);</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">&quot;apple&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;huawei&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;xiaomi&quot;</span>);</span><br><span class="line">        Stream&lt;String&gt; stream = list.stream();</span><br><span class="line"><span class="comment">//        stream.forEach(s -&gt; System.out.println(&quot;s = &quot; + s));</span></span><br><span class="line">        stream.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;-----------------------------------------&quot;</span>);</span><br><span class="line">        String[] arr = &#123;<span class="string">&quot;aaa&quot;</span>, <span class="string">&quot;bbb&quot;</span>, <span class="string">&quot;ccc&quot;</span>&#125;;</span><br><span class="line">        Stream&lt;String&gt; stream1 = Arrays.stream(arr);</span><br><span class="line">        stream1.forEach(System.out::println);</span><br><span class="line">        System.out.println(<span class="string">&quot;-----------------------------------------&quot;</span>);</span><br><span class="line">        Stream&lt;Integer&gt; stream2 = Stream.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>);</span><br><span class="line">        stream2.forEach(s -&gt; System.out.println(s));</span><br><span class="line">        System.out.println(<span class="string">&quot;-----------------------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 利用Stream.iterate()生成有规律的数据</span></span><br><span class="line">        Stream&lt;Integer&gt; stream3 = Stream.iterate(<span class="number">0</span>, x -&gt; x + <span class="number">2</span>);</span><br><span class="line">        <span class="comment">// stream3.forEach(System.out::println); // 将会一直输出每个元素只差为2</span></span><br><span class="line">        stream3.limit(<span class="number">5</span>).forEach(System.out::print);<span class="comment">//输出02468; limit(5)表示取迭代流中前5个元素</span></span><br><span class="line">        System.out.println(<span class="string">&quot;\n-----------------------------------------&quot;</span>);</span><br><span class="line">        Stream&lt;Integer&gt; generate = Stream.generate(() -&gt; <span class="keyword">new</span> <span class="title class_">Random</span>().nextInt(<span class="number">100</span>));</span><br><span class="line">        generate.limit(<span class="number">5</span>).forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;-----------------------------------------&quot;</span>);</span><br><span class="line">        <span class="comment">// 使用IntStream, LongStream, DoubleStream的of(),range(),rangeClosed()产生流</span></span><br><span class="line">        <span class="comment">// range()产生左闭右开的区间</span></span><br><span class="line">        <span class="comment">// rangeClosed()产生左闭右也闭的区间</span></span><br><span class="line">        <span class="type">IntStream</span> <span class="variable">intStream</span> <span class="operator">=</span> IntStream.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line">        intStream.forEach((s)-&gt; System.out.print(s+<span class="string">&quot;,&quot;</span>));</span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="type">IntStream</span> <span class="variable">range</span> <span class="operator">=</span> IntStream.range(<span class="number">0</span>, <span class="number">5</span>);</span><br><span class="line">        range.forEach((s) -&gt; System.out.print(s + <span class="string">&quot;,&quot;</span>));</span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="type">IntStream</span> <span class="variable">intStream1</span> <span class="operator">=</span> IntStream.rangeClosed(<span class="number">0</span>, <span class="number">5</span>);</span><br><span class="line">        intStream1.forEach((s)-&gt; System.out.print(s+<span class="string">&quot;,&quot;</span>));</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><img src="/JeckFS/2020/07/04/jdk8%E6%96%B0%E7%89%B9%E6%80%A7/30.png" class="" title="This is 30-th image."><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    ArrayList&lt;Employee&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    list.add(<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;小王&quot;</span>, <span class="number">15000</span>));</span><br><span class="line">    list.add(<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;小张&quot;</span>, <span class="number">12000</span>));</span><br><span class="line">    list.add(<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;小李&quot;</span>, <span class="number">18000</span>));</span><br><span class="line">    list.add(<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;小孙&quot;</span>, <span class="number">20000</span>));</span><br><span class="line">    list.add(<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;小刘&quot;</span>, <span class="number">25000</span>));</span><br><span class="line">    list.add(<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;小刘&quot;</span>, <span class="number">25000</span>));</span><br><span class="line">    <span class="comment">// 中间操作 filter, limit, skip, distinct, sorted</span></span><br><span class="line">    System.out.println(<span class="string">&quot;-------filter-------&quot;</span>);</span><br><span class="line">    list.stream()</span><br><span class="line">            .filter(e -&gt; e.getAge() &gt; <span class="number">15000</span>)</span><br><span class="line">            .forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;---------limit-------&quot;</span>);</span><br><span class="line">    list.stream()</span><br><span class="line">            .limit(<span class="number">2</span>)</span><br><span class="line">            .forEach(System.out::println);</span><br><span class="line">    System.out.println(<span class="string">&quot;---------skip-------&quot;</span>);</span><br><span class="line">    list.stream()</span><br><span class="line">            .skip(<span class="number">2</span>)   <span class="comment">//跳过前两个元素</span></span><br><span class="line">            .forEach(System.out::println);</span><br><span class="line">    System.out.println(<span class="string">&quot;----------distinct---------&quot;</span>);</span><br><span class="line">    list.stream()</span><br><span class="line">            .distinct() <span class="comment">// 需要重写元素的equals()和hashCode()</span></span><br><span class="line">            .forEach(System.out::println);</span><br><span class="line">    System.out.println(<span class="string">&quot;-----------sorted----------&quot;</span>);</span><br><span class="line">    list.stream()</span><br><span class="line">            <span class="comment">//sorted((o1, o2) -&gt; o1.getAge() - o2.getAge())</span></span><br><span class="line">            .sorted(Comparator.comparingInt(Employee::getAge)) <span class="comment">// 用到了方法引用</span></span><br><span class="line">            .forEach(System.out::println);</span><br><span class="line">    System.out.println(<span class="string">&quot;------------map-----------&quot;</span>);</span><br><span class="line">    list.stream()</span><br><span class="line">            <span class="comment">//.map(Employee::getName) 通过方法引用的方式</span></span><br><span class="line">            .map((e) -&gt; e.getName()) <span class="comment">// 只获取员工的名字(返回处理过后的元素数据)</span></span><br><span class="line">            .forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    ArrayList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5000000</span>; i++) &#123;</span><br><span class="line">        list.add(UUID.randomUUID().toString());</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;----------串行流---------&quot;</span>);</span><br><span class="line">    <span class="type">long</span> <span class="variable">l</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    list.stream().sorted().limit(<span class="number">10</span>).forEach(System.out::println);</span><br><span class="line">    System.out.println(<span class="string">&quot;用时:&quot;</span> + (System.currentTimeMillis() - l));</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;---------并行流----------&quot;</span>);</span><br><span class="line">    <span class="type">long</span> <span class="variable">l1</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    list.parallelStream().sorted().limit(<span class="number">10</span>).forEach(System.out::println);</span><br><span class="line">    System.out.println(<span class="string">&quot;用时:&quot;</span> + (System.currentTimeMillis() - l1));</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    ----------串行流---------</span></span><br><span class="line"><span class="comment">    00000605-bb68-43f0-b93d-c62830e583c7</span></span><br><span class="line"><span class="comment">    000010c1-ac0f-40a4-82eb-d601f9c4dd15</span></span><br><span class="line"><span class="comment">    000012a0-1802-40d9-8d6c-3f2da6f20163</span></span><br><span class="line"><span class="comment">    000015d3-4a01-40d1-a3fe-e7be823402f5</span></span><br><span class="line"><span class="comment">    000021b4-80c2-419a-94c3-1eb7ae64f7e5</span></span><br><span class="line"><span class="comment">    000021bd-afdb-4633-aff9-8ec042c8e0f0</span></span><br><span class="line"><span class="comment">    000032b9-e9c5-4668-bfda-a84014c1a045</span></span><br><span class="line"><span class="comment">    00003373-afe7-4125-a2f9-d833c363ef30</span></span><br><span class="line"><span class="comment">    000039fd-c319-4c3a-84b5-b92ed632cbe1</span></span><br><span class="line"><span class="comment">    00003d32-14f0-4ff5-8b20-8c583f3ff7d3</span></span><br><span class="line"><span class="comment">    用时:4587</span></span><br><span class="line"><span class="comment">    ---------并行流----------</span></span><br><span class="line"><span class="comment">    00003d32-14f0-4ff5-8b20-8c583f3ff7d3</span></span><br><span class="line"><span class="comment">    000021b4-80c2-419a-94c3-1eb7ae64f7e5</span></span><br><span class="line"><span class="comment">    000010c1-ac0f-40a4-82eb-d601f9c4dd15</span></span><br><span class="line"><span class="comment">    000015d3-4a01-40d1-a3fe-e7be823402f5</span></span><br><span class="line"><span class="comment">    000021bd-afdb-4633-aff9-8ec042c8e0f0</span></span><br><span class="line"><span class="comment">    00000605-bb68-43f0-b93d-c62830e583c7</span></span><br><span class="line"><span class="comment">    000039fd-c319-4c3a-84b5-b92ed632cbe1</span></span><br><span class="line"><span class="comment">    00003373-afe7-4125-a2f9-d833c363ef30</span></span><br><span class="line"><span class="comment">    000032b9-e9c5-4668-bfda-a84014c1a045</span></span><br><span class="line"><span class="comment">    000012a0-1802-40d9-8d6c-3f2da6f20163</span></span><br><span class="line"><span class="comment">    用时:1392</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/JeckFS/2020/07/04/jdk8%E6%96%B0%E7%89%B9%E6%80%A7/31.png" class="" title="This is 31-th image."><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    ArrayList&lt;Employee&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    list.add(<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;小王&quot;</span>, <span class="number">15000</span>));</span><br><span class="line">    list.add(<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;小张&quot;</span>, <span class="number">12000</span>));</span><br><span class="line">    list.add(<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;小李&quot;</span>, <span class="number">18000</span>));</span><br><span class="line">    list.add(<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;小孙&quot;</span>, <span class="number">20000</span>));</span><br><span class="line">    list.add(<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;小刘&quot;</span>, <span class="number">25000</span>));</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;---------延迟调用的演示---------&quot;</span>);</span><br><span class="line">    list.stream()</span><br><span class="line">            .filter(e -&gt; &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;过滤了....&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> e.getAge() &gt; <span class="number">15000</span>;</span><br><span class="line">            &#125;)</span><br><span class="line">            .forEach(System.out::println);</span><br><span class="line">    System.out.println(<span class="string">&quot;---------终止操作min---------&quot;</span>);</span><br><span class="line">    Optional&lt;Employee&gt; min = list.stream()</span><br><span class="line">            .min((o1, o2) -&gt; o1.getAge() - o2.getAge());</span><br><span class="line">    System.out.println(min.get());</span><br><span class="line">    System.out.println(<span class="string">&quot;---------终止操作max---------&quot;</span>);</span><br><span class="line">    Optional&lt;Employee&gt; max = list.stream()</span><br><span class="line">            .max((o1, o2) -&gt; o1.getAge() - o2.getAge());</span><br><span class="line">    System.out.println(max.get());</span><br><span class="line">    System.out.println(<span class="string">&quot;---------终止操作count---------&quot;</span>);</span><br><span class="line">    <span class="type">long</span> <span class="variable">count</span> <span class="operator">=</span> list.stream()</span><br><span class="line">            .count();</span><br><span class="line">    System.out.println(count);</span><br><span class="line">    System.out.println(<span class="string">&quot;---------终止操作reduce---------&quot;</span>);</span><br><span class="line">    Optional&lt;Integer&gt; sum = list.stream()</span><br><span class="line">            .map(e -&gt; e.getAge())</span><br><span class="line">            .reduce((x, y) -&gt; x + y);</span><br><span class="line">    System.out.println(<span class="string">&quot;工资之和: &quot;</span>+sum.get());</span><br><span class="line">    System.out.println(<span class="string">&quot;---------终止操作collect---------&quot;</span>);</span><br><span class="line">    <span class="comment">// 获取所有员工姓名, 并封装成一个list集合</span></span><br><span class="line">    List&lt;String&gt; collect = list.stream()</span><br><span class="line">            .map(e -&gt; e.getName())</span><br><span class="line">            .collect(Collectors.toList());</span><br><span class="line">    collect.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="新的时间API"><a href="#新的时间API" class="headerlink" title="新的时间API"></a>新的时间API</h1><img src="/JeckFS/2020/07/04/jdk8%E6%96%B0%E7%89%B9%E6%80%A7/32.png" class="" title="This is 32-th image."><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 有线程安全的SimpleDateFormat</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyyMMdd&quot;</span>);</span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">pool</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line">        Callable&lt;Date&gt; callable = () -&gt; sdf.parse(<span class="string">&quot;20200520&quot;</span>);</span><br><span class="line">        ArrayList&lt;Future&lt;Date&gt;&gt; results = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            Future&lt;Date&gt; res = pool.submit(callable);</span><br><span class="line">            results.add(res);</span><br><span class="line">        &#125;</span><br><span class="line">        results.forEach(e -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(e.get());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException | ExecutionException ex) &#123;</span><br><span class="line">                ex.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>新的时间API的变动:<br>SimpleDateFormat替换为线程安全的<code>DateTimeFormatter</code>.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class="line">    <span class="type">DateTimeFormatter</span> <span class="variable">dtf</span> <span class="operator">=</span> DateTimeFormatter.ofPattern(<span class="string">&quot;yyyyMMdd&quot;</span>);</span><br><span class="line">    <span class="type">ExecutorService</span> <span class="variable">pool</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line">    Callable&lt;LocalDate&gt; callable = () -&gt; LocalDate.parse(<span class="string">&quot;20200520&quot;</span>,dtf);</span><br><span class="line">    ArrayList&lt;Future&lt;LocalDate&gt;&gt; results = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        Future&lt;LocalDate&gt; res = pool.submit(callable);</span><br><span class="line">        results.add(res);</span><br><span class="line">    &#125;</span><br><span class="line">    results.forEach(e -&gt; &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(e.get());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException | ExecutionException ex) &#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    pool.shutdown();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><img src="/JeckFS/2020/07/04/jdk8%E6%96%B0%E7%89%B9%E6%80%A7/33.png" class="" title="This is 33-th image."><p>LocalDateTime是不可变对象, 类似于Integer. LocalDateTime对象经过操作后返回的是一个新的对象.</p><p>以LocalDateTime为例, LocalTime, LocalDate用法类似.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class="line">    <span class="comment">// LocalDateTime.now()创建当前日期和时间;</span></span><br><span class="line">    <span class="comment">// LocalDateTime.of(year,month,dayOfMonth,hour,minute)创建指定的日期和时间</span></span><br><span class="line">    <span class="type">LocalDateTime</span> <span class="variable">now</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line">    System.out.println(<span class="string">&quot;now = &quot;</span> + now);</span><br><span class="line">    <span class="type">LocalDateTime</span> <span class="variable">of1</span> <span class="operator">=</span> LocalDateTime.of(<span class="number">2020</span>, <span class="number">5</span>, <span class="number">20</span>, <span class="number">12</span>, <span class="number">30</span>, <span class="number">20</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;of1 = &quot;</span> + of1);</span><br><span class="line">    <span class="comment">// 增加两天</span></span><br><span class="line">    <span class="type">LocalDateTime</span> <span class="variable">of2</span> <span class="operator">=</span> of1.plusDays(<span class="number">2</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;of2 = &quot;</span> + of2);</span><br><span class="line">    <span class="comment">// 减少两个月</span></span><br><span class="line">    <span class="type">LocalDateTime</span> <span class="variable">of3</span> <span class="operator">=</span> of1.minusMonths(<span class="number">2</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;of3 = &quot;</span> + of3);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    now = 2020-07-04T19:30:54.026599</span></span><br><span class="line"><span class="comment">    of1 = 2020-05-20T12:30:20</span></span><br><span class="line"><span class="comment">    of2 = 2020-05-22T12:30:20</span></span><br><span class="line"><span class="comment">    of3 = 2020-03-20T12:30:20</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><img src="/JeckFS/2020/07/04/jdk8%E6%96%B0%E7%89%B9%E6%80%A7/34.png" class="" title="This is 34-th image."><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;-------------创建时间------------&quot;</span>);</span><br><span class="line">    <span class="comment">// 创建时间</span></span><br><span class="line">    System.out.println(Instant.now());</span><br><span class="line">    System.out.println(Instant.ofEpochMilli(<span class="number">1588562</span>)); <span class="comment">// 返回给定时间戳对应的时间</span></span><br><span class="line">    System.out.println(Instant.now().toEpochMilli()); <span class="comment">// 根据时间返回时间戳</span></span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;--------------增加或减少时间-----------&quot;</span>);</span><br><span class="line">    <span class="comment">// 添加减少时间</span></span><br><span class="line">    <span class="type">Instant</span> <span class="variable">instant</span> <span class="operator">=</span> Instant.now();</span><br><span class="line">    <span class="type">Instant</span> <span class="variable">instant1</span> <span class="operator">=</span> instant.plusSeconds(<span class="number">10</span>);</span><br><span class="line">    System.out.println(Duration.between(instant1, instant).toMillis());</span><br><span class="line">    <span class="type">Instant</span> <span class="variable">instant2</span> <span class="operator">=</span> instant.minusSeconds(<span class="number">10</span>);</span><br><span class="line">    System.out.println(Duration.between(instant2, instant).toMillis());</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;----------ZoneId---------&quot;</span>);</span><br><span class="line">    Set&lt;String&gt; availableZoneIds = ZoneId.getAvailableZoneIds(); <span class="comment">// 获取ZoneId支持的时区</span></span><br><span class="line">    System.out.println(ZoneId.systemDefault().toString());<span class="comment">// 获取当前时区</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/JeckFS/2020/07/04/jdk8%E6%96%B0%E7%89%B9%E6%80%A7/35.png" class="" title="This is 35-th image."><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;----------Date--&gt;Instant--&gt;LocalDateTime-----------&quot;</span>);</span><br><span class="line">    <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">    <span class="type">Instant</span> <span class="variable">instant</span> <span class="operator">=</span> date.toInstant();</span><br><span class="line">    System.out.println(<span class="string">&quot;instant = &quot;</span> + instant);</span><br><span class="line">    <span class="type">LocalDateTime</span> <span class="variable">localDateTime</span> <span class="operator">=</span> LocalDateTime.ofInstant(instant, ZoneId.systemDefault());</span><br><span class="line">    System.out.println(<span class="string">&quot;localDateTime = &quot;</span> + localDateTime);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;----------LocalDateTime--&gt;Instant--&gt;Date----------&quot;</span>);</span><br><span class="line">    <span class="type">Instant</span> <span class="variable">instant1</span> <span class="operator">=</span> localDateTime.atZone(ZoneId.systemDefault()).toInstant();</span><br><span class="line">    System.out.println(<span class="string">&quot;instant1 = &quot;</span> + instant1);</span><br><span class="line">    <span class="type">Date</span> <span class="variable">from</span> <span class="operator">=</span> Date.from(instant1);</span><br><span class="line">    System.out.println(<span class="string">&quot;from = &quot;</span> + from);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/JeckFS/2020/07/04/jdk8%E6%96%B0%E7%89%B9%E6%80%A7/36.png" class="" title="This is 36-th image."><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;---------创建DateTimeFormatter-------&quot;</span>);</span><br><span class="line">    <span class="type">DateTimeFormatter</span> <span class="variable">dtf</span> <span class="operator">=</span> DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">format</span> <span class="operator">=</span> dtf.format(LocalDateTime.now());</span><br><span class="line">    System.out.println(<span class="string">&quot;format = &quot;</span> + format);</span><br><span class="line">    System.out.println(<span class="string">&quot;---------把字符串解析为时间---------&quot;</span>);</span><br><span class="line">    <span class="type">LocalDateTime</span> <span class="variable">localDateTime</span> <span class="operator">=</span> LocalDateTime.parse(<span class="string">&quot;2020-12-23 08:12:03&quot;</span>, dtf);</span><br><span class="line">    System.out.println(<span class="string">&quot;localDateTime = &quot;</span> + localDateTime);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/JeckFS/2020/07/04/jdk8%E6%96%B0%E7%89%B9%E6%80%A7/37.png" class="" title="This is 37-th image.">]]></content>
      
      
      <categories>
          
          <category> 面经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面经 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>787-K站中转内最便宜的航班</title>
      <link href="/JeckFS/2020/07/04/787-K%E7%AB%99%E4%B8%AD%E8%BD%AC%E5%86%85%E6%9C%80%E4%BE%BF%E5%AE%9C%E7%9A%84%E8%88%AA%E7%8F%AD/"/>
      <url>/JeckFS/2020/07/04/787-K%E7%AB%99%E4%B8%AD%E8%BD%AC%E5%86%85%E6%9C%80%E4%BE%BF%E5%AE%9C%E7%9A%84%E8%88%AA%E7%8F%AD/</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><img src="/JeckFS/2020/07/04/787-K%E7%AB%99%E4%B8%AD%E8%BD%AC%E5%86%85%E6%9C%80%E4%BE%BF%E5%AE%9C%E7%9A%84%E8%88%AA%E7%8F%AD/1.png" class="" title="This is 1-th image."><img src="/JeckFS/2020/07/04/787-K%E7%AB%99%E4%B8%AD%E8%BD%AC%E5%86%85%E6%9C%80%E4%BE%BF%E5%AE%9C%E7%9A%84%E8%88%AA%E7%8F%AD/2.png" class="" title="This is 2-th image."><img src="/JeckFS/2020/07/04/787-K%E7%AB%99%E4%B8%AD%E8%BD%AC%E5%86%85%E6%9C%80%E4%BE%BF%E5%AE%9C%E7%9A%84%E8%88%AA%E7%8F%AD/3.png" class="" title="This is 3-th image."><img src="/JeckFS/2020/07/04/787-K%E7%AB%99%E4%B8%AD%E8%BD%AC%E5%86%85%E6%9C%80%E4%BE%BF%E5%AE%9C%E7%9A%84%E8%88%AA%E7%8F%AD/4.png" class="" title="This is 4-th image."><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>用广度优先出错，用深度优先超时，哎，此时的内心是崩溃的。哎，动态规划大法好啊。</p><p>状态定义：<br><code>d[i][j]表示最多经过i站，到达j站的最小价格</code></p><p>状态转移方程：<br><code>d[i][j] = min &#123;d[i][j], d[i - 1][j], d[i - 1][j&#39;] + price[j&#39;][j]&#125;，其中j&#39;与j是直接相连的节点，由j&#39;指向j。</code></p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findCheapestPrice</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span>[][] flights, <span class="type">int</span> src, <span class="type">int</span> dst, <span class="type">int</span> K)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[][] graph = <span class="keyword">new</span> <span class="title class_">int</span>[n][n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; flights.length; i++) &#123;</span><br><span class="line">            graph[flights[i][<span class="number">0</span>]][flights[i][<span class="number">1</span>]] = flights[i][<span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span>[][] d = <span class="keyword">new</span> <span class="title class_">int</span>[K + <span class="number">1</span>][n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; K + <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                d[i][j] = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        d[<span class="number">0</span>][src] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            d[<span class="number">0</span>][j] = graph[src][j] == <span class="number">0</span> ? <span class="number">1</span> &lt;&lt; <span class="number">30</span> : graph[src][j];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">1</span>; k &lt;= K; k++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (graph[i][j] != <span class="number">0</span>)&#123;</span><br><span class="line">                        d[k][j] = Math.min(d[k][j], d[k - <span class="number">1</span>][j]);</span><br><span class="line">                        d[k][j] = Math.min(d[k][j], d[k - <span class="number">1</span>][i] + graph[i][j]);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> d[K][dst] == <span class="number">1</span> &lt;&lt; <span class="number">30</span> ? -<span class="number">1</span> : d[K][dst];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>改进一下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="comment">// 63.53% 8ms(中文) 55.62% 13ms(英文)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findCheapestPrice</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span>[][] flights, <span class="type">int</span> src, <span class="type">int</span> dst, <span class="type">int</span> K)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[][] d = <span class="keyword">new</span> <span class="title class_">int</span>[K + <span class="number">1</span>][n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; K + <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                d[i][j] = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        d[<span class="number">0</span>][src] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] elem : flights) &#123;</span><br><span class="line">            <span class="keyword">if</span> (elem[<span class="number">0</span>] == src) &#123;</span><br><span class="line">                d[<span class="number">0</span>][elem[<span class="number">1</span>]] = elem[<span class="number">2</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">1</span>; k &lt;= K; k++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span>[] elem : flights) &#123;</span><br><span class="line">                d[k][elem[<span class="number">1</span>]] = Math.min(d[k][elem[<span class="number">1</span>]], d[k - <span class="number">1</span>][elem[<span class="number">1</span>]]);</span><br><span class="line">                d[k][elem[<span class="number">1</span>]] = Math.min(d[k][elem[<span class="number">1</span>]], d[k - <span class="number">1</span>][elem[<span class="number">0</span>]] + elem[<span class="number">2</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> d[K][dst] == <span class="number">1</span> &lt;&lt; <span class="number">30</span> ? -<span class="number">1</span> : d[K][dst];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 动态规划 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode515-在每个树行中找最大值</title>
      <link href="/JeckFS/2020/07/03/leetcode515-%E5%9C%A8%E6%AF%8F%E4%B8%AA%E6%A0%91%E8%A1%8C%E4%B8%AD%E6%89%BE%E6%9C%80%E5%A4%A7%E5%80%BC/"/>
      <url>/JeckFS/2020/07/03/leetcode515-%E5%9C%A8%E6%AF%8F%E4%B8%AA%E6%A0%91%E8%A1%8C%E4%B8%AD%E6%89%BE%E6%9C%80%E5%A4%A7%E5%80%BC/</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><img src="/JeckFS/2020/07/03/leetcode515-%E5%9C%A8%E6%AF%8F%E4%B8%AA%E6%A0%91%E8%A1%8C%E4%B8%AD%E6%89%BE%E6%9C%80%E5%A4%A7%E5%80%BC/1.png" class="" title="This is 1-th image."><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">TreeNode</span> &#123;</span><br><span class="line">        <span class="type">int</span> val;</span><br><span class="line">        TreeNode left;</span><br><span class="line">        TreeNode right;</span><br><span class="line"></span><br><span class="line">        TreeNode(<span class="type">int</span> x) &#123;</span><br><span class="line">            val = x;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 45.80% 3ms(中文) 14.65% 4ms(英文)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">largestValues</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Queue&lt;TreeNode&gt; q = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        List&lt;Integer&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        q.add(root);</span><br><span class="line">        <span class="keyword">while</span> (!q.isEmpty()) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> Integer.MIN_VALUE;</span><br><span class="line">            Queue&lt;TreeNode&gt; t = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (!q.isEmpty()) &#123;</span><br><span class="line">                <span class="type">TreeNode</span> <span class="variable">poll</span> <span class="operator">=</span> q.poll();</span><br><span class="line">                max = Math.max(max, poll.val);</span><br><span class="line">                <span class="keyword">if</span> (poll.left != <span class="literal">null</span>) t.add(poll.left);</span><br><span class="line">                <span class="keyword">if</span> (poll.right != <span class="literal">null</span>) t.add(poll.right);</span><br><span class="line">            &#125;</span><br><span class="line">            res.add(max);</span><br><span class="line">            q = t;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 图; 广度优先遍历 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图; 广度优先遍历 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>剑指Offer32-III-从上到下打印二叉树III</title>
      <link href="/JeckFS/2020/07/03/%E5%89%91%E6%8C%87Offer32-III-%E4%BB%8E%E4%B8%8A%E5%88%B0%E4%B8%8B%E6%89%93%E5%8D%B0%E4%BA%8C%E5%8F%89%E6%A0%91III/"/>
      <url>/JeckFS/2020/07/03/%E5%89%91%E6%8C%87Offer32-III-%E4%BB%8E%E4%B8%8A%E5%88%B0%E4%B8%8B%E6%89%93%E5%8D%B0%E4%BA%8C%E5%8F%89%E6%A0%91III/</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><img src="/JeckFS/2020/07/03/%E5%89%91%E6%8C%87Offer32-III-%E4%BB%8E%E4%B8%8A%E5%88%B0%E4%B8%8B%E6%89%93%E5%8D%B0%E4%BA%8C%E5%8F%89%E6%A0%91III/1.png" class="" title="This is 1-th image."><img src="/JeckFS/2020/07/03/%E5%89%91%E6%8C%87Offer32-III-%E4%BB%8E%E4%B8%8A%E5%88%B0%E4%B8%8B%E6%89%93%E5%8D%B0%E4%BA%8C%E5%8F%89%E6%A0%91III/2.png" class="" title="This is 2-th image."><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>在广度优先遍历的代码上每隔一层，将上一层的节点逆序一下即可。</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">TreeNode</span> &#123;</span><br><span class="line">        <span class="type">int</span> val;</span><br><span class="line">        TreeNode left;</span><br><span class="line">        TreeNode right;</span><br><span class="line"></span><br><span class="line">        TreeNode(<span class="type">int</span> x) &#123;</span><br><span class="line">            val = x;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 99.78% 1ms(中文)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">levelOrder</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Queue&lt;TreeNode&gt; q = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        q.add(root);</span><br><span class="line">        <span class="keyword">while</span> (!q.isEmpty()) &#123;</span><br><span class="line">            Queue&lt;TreeNode&gt; t = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">            List&lt;Integer&gt; elem = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (!q.isEmpty()) &#123;</span><br><span class="line">                <span class="type">TreeNode</span> <span class="variable">poll</span> <span class="operator">=</span> q.poll();</span><br><span class="line">                elem.add(poll.val);</span><br><span class="line">                <span class="keyword">if</span> (poll.left != <span class="literal">null</span>) t.add(poll.left);</span><br><span class="line">                <span class="keyword">if</span> (poll.right != <span class="literal">null</span>) t.add(poll.right);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">                res.add(elem);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                List&lt;Integer&gt; elemT = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> elem.size()-<span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">                    elemT.add(elem.get(i));</span><br><span class="line">                &#125;</span><br><span class="line">                res.add(elemT);</span><br><span class="line">            &#125;</span><br><span class="line">            flag = !flag;</span><br><span class="line">            q = t;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 剑指offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 剑指offer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实战Java高并发3</title>
      <link href="/JeckFS/2020/07/03/%E5%AE%9E%E6%88%98Java%E9%AB%98%E5%B9%B6%E5%8F%913/"/>
      <url>/JeckFS/2020/07/03/%E5%AE%9E%E6%88%98Java%E9%AB%98%E5%B9%B6%E5%8F%913/</url>
      
        <content type="html"><![CDATA[<img src="/JeckFS/2020/07/03/%E5%AE%9E%E6%88%98Java%E9%AB%98%E5%B9%B6%E5%8F%913/y-1.png" class="" title="This is y-1-th image."><img src="/JeckFS/2020/07/03/%E5%AE%9E%E6%88%98Java%E9%AB%98%E5%B9%B6%E5%8F%913/y-2.jpg" class="" title="This is y-2-th image."><img src="/JeckFS/2020/07/03/%E5%AE%9E%E6%88%98Java%E9%AB%98%E5%B9%B6%E5%8F%913/y-3.jpg" class="" title="This is y-3-th image."><h1 id="1-同步控制工具"><a href="#1-同步控制工具" class="headerlink" title="1.同步控制工具"></a>1.同步控制工具</h1><p><a href="https://blog.csdn.net/Sundy_sc/article/details/102783666">Synchronized与重入锁的区别</a></p><p>重入锁可以完全替代synchronized、Object.wait()、Object.notify()。</p><p><strong>重入锁的中断响应解决死锁问题</strong><br><img src="/JeckFS/2020/07/03/%E5%AE%9E%E6%88%98Java%E9%AB%98%E5%B9%B6%E5%8F%913/17.png" class="" title="This is 17-th image."><br><img src="/JeckFS/2020/07/03/%E5%AE%9E%E6%88%98Java%E9%AB%98%E5%B9%B6%E5%8F%913/18.png" class="" title="This is 18-th image."><br><img src="/JeckFS/2020/07/03/%E5%AE%9E%E6%88%98Java%E9%AB%98%E5%B9%B6%E5%8F%913/19.png" class="" title="This is 19-th image."></p><p><strong>公平锁</strong><br><img src="/JeckFS/2020/07/03/%E5%AE%9E%E6%88%98Java%E9%AB%98%E5%B9%B6%E5%8F%913/20.png" class="" title="This is 20-th image."><br><img src="/JeckFS/2020/07/03/%E5%AE%9E%E6%88%98Java%E9%AB%98%E5%B9%B6%E5%8F%913/21.png" class="" title="This is 21-th image."><br><img src="/JeckFS/2020/07/03/%E5%AE%9E%E6%88%98Java%E9%AB%98%E5%B9%B6%E5%8F%913/22.png" class="" title="This is 22-th image."></p><p><strong>Condition</strong><br><img src="/JeckFS/2020/07/03/%E5%AE%9E%E6%88%98Java%E9%AB%98%E5%B9%B6%E5%8F%913/23.png" class="" title="This is 23-th image."><br><img src="/JeckFS/2020/07/03/%E5%AE%9E%E6%88%98Java%E9%AB%98%E5%B9%B6%E5%8F%913/24.png" class="" title="This is 24-th image."><br><img src="/JeckFS/2020/07/03/%E5%AE%9E%E6%88%98Java%E9%AB%98%E5%B9%B6%E5%8F%913/25.png" class="" title="This is 25-th image."><br><img src="/JeckFS/2020/07/03/%E5%AE%9E%E6%88%98Java%E9%AB%98%E5%B9%B6%E5%8F%913/25.png" class="" title="This is 25-th image."></p><p>ArrayBockingQueue就是使用重入锁实现的。<br><img src="/JeckFS/2020/07/03/%E5%AE%9E%E6%88%98Java%E9%AB%98%E5%B9%B6%E5%8F%913/26.png" class="" title="This is 26-th image."><br><img src="/JeckFS/2020/07/03/%E5%AE%9E%E6%88%98Java%E9%AB%98%E5%B9%B6%E5%8F%913/27.png" class="" title="This is 27-th image."><br><img src="/JeckFS/2020/07/03/%E5%AE%9E%E6%88%98Java%E9%AB%98%E5%B9%B6%E5%8F%913/28.png" class="" title="This is 28-th image."><br><img src="/JeckFS/2020/07/03/%E5%AE%9E%E6%88%98Java%E9%AB%98%E5%B9%B6%E5%8F%913/29.png" class="" title="This is 29-th image."></p><p><strong>信号量</strong><br>内部锁synchronized和重入锁ReentrantLock一次只允许一个线程访问一个资源。信号量可以指定多个线程，同时访问同一个资源。<br><img src="/JeckFS/2020/07/03/%E5%AE%9E%E6%88%98Java%E9%AB%98%E5%B9%B6%E5%8F%913/30.png" class="" title="This is 30-th image."></p><p>信号量举例<br><img src="/JeckFS/2020/07/03/%E5%AE%9E%E6%88%98Java%E9%AB%98%E5%B9%B6%E5%8F%913/31.png" class="" title="This is 31-th image."><br>第2行，允许5个线程进入。<br>第7-9行，程序会限制执行这段代码的线程数。<br>第13行，释放许可。<br>第21行，开启20个线程，但会以5个线程为一组，一次输出带有线程id的提示文本。</p><p><strong>ReadWriteLock读写锁</strong><br><img src="/JeckFS/2020/07/03/%E5%AE%9E%E6%88%98Java%E9%AB%98%E5%B9%B6%E5%8F%913/32.png" class="" title="This is 32-th image."><br><img src="/JeckFS/2020/07/03/%E5%AE%9E%E6%88%98Java%E9%AB%98%E5%B9%B6%E5%8F%913/33.png" class="" title="This is 33-th image."><br><img src="/JeckFS/2020/07/03/%E5%AE%9E%E6%88%98Java%E9%AB%98%E5%B9%B6%E5%8F%913/34.png" class="" title="This is 34-th image."><br><img src="/JeckFS/2020/07/03/%E5%AE%9E%E6%88%98Java%E9%AB%98%E5%B9%B6%E5%8F%913/35.png" class="" title="This is 35-th image."></p><p><strong>倒计数器：CountDownLatch</strong><br><img src="/JeckFS/2020/07/03/%E5%AE%9E%E6%88%98Java%E9%AB%98%E5%B9%B6%E5%8F%913/36.png" class="" title="This is 36-th image."><br><img src="/JeckFS/2020/07/03/%E5%AE%9E%E6%88%98Java%E9%AB%98%E5%B9%B6%E5%8F%913/37.png" class="" title="This is 37-th image."><br><img src="/JeckFS/2020/07/03/%E5%AE%9E%E6%88%98Java%E9%AB%98%E5%B9%B6%E5%8F%913/38.png" class="" title="This is 38-th image."><br><img src="/JeckFS/2020/07/03/%E5%AE%9E%E6%88%98Java%E9%AB%98%E5%B9%B6%E5%8F%913/39.png" class="" title="This is 39-th image."></p><p><strong>循环栅栏：CyclicBarrier</strong><br><img src="/JeckFS/2020/07/03/%E5%AE%9E%E6%88%98Java%E9%AB%98%E5%B9%B6%E5%8F%913/40.png" class="" title="This is 40-th image."><br><img src="/JeckFS/2020/07/03/%E5%AE%9E%E6%88%98Java%E9%AB%98%E5%B9%B6%E5%8F%913/41.png" class="" title="This is 41-th image."><br><img src="/JeckFS/2020/07/03/%E5%AE%9E%E6%88%98Java%E9%AB%98%E5%B9%B6%E5%8F%913/42.png" class="" title="This is 42-th image."><br><img src="/JeckFS/2020/07/03/%E5%AE%9E%E6%88%98Java%E9%AB%98%E5%B9%B6%E5%8F%913/43.png" class="" title="This is 43-th image."><br><img src="/JeckFS/2020/07/03/%E5%AE%9E%E6%88%98Java%E9%AB%98%E5%B9%B6%E5%8F%913/44.png" class="" title="This is 44-th image."></p><p><strong>线程阻塞工具类：LockSupport</strong><br>在任意线程内任意位置让线程阻塞，而不必担心出现suspend()与resume()类似操作顺序倒置倒置线程永远阻塞的问题。<br><img src="/JeckFS/2020/07/03/%E5%AE%9E%E6%88%98Java%E9%AB%98%E5%B9%B6%E5%8F%913/45.png" class="" title="This is 45-th image."><br><img src="/JeckFS/2020/07/03/%E5%AE%9E%E6%88%98Java%E9%AB%98%E5%B9%B6%E5%8F%913/46.png" class="" title="This is 46-th image."></p><p>LockSupport遭遇中断：<br><img src="/JeckFS/2020/07/03/%E5%AE%9E%E6%88%98Java%E9%AB%98%E5%B9%B6%E5%8F%913/47.png" class="" title="This is 47-th image."><br><img src="/JeckFS/2020/07/03/%E5%AE%9E%E6%88%98Java%E9%AB%98%E5%B9%B6%E5%8F%913/48.png" class="" title="This is 48-th image."><br><img src="/JeckFS/2020/07/03/%E5%AE%9E%E6%88%98Java%E9%AB%98%E5%B9%B6%E5%8F%913/49.png" class="" title="This is 49-th image."></p><p><strong>限流工具：RateLimiter</strong><br><img src="/JeckFS/2020/07/03/%E5%AE%9E%E6%88%98Java%E9%AB%98%E5%B9%B6%E5%8F%913/50.png" class="" title="This is 50-th image."><br><img src="/JeckFS/2020/07/03/%E5%AE%9E%E6%88%98Java%E9%AB%98%E5%B9%B6%E5%8F%913/51.png" class="" title="This is 51-th image."></p><p>若想要丢弃过载请求可以使用tryAcquire()，当请求成功时，tryAcquire()返回ture，否则返回false，该方法不会阻塞。<br><img src="/JeckFS/2020/07/03/%E5%AE%9E%E6%88%98Java%E9%AB%98%E5%B9%B6%E5%8F%913/52.png" class="" title="This is 52-th image."></p><h1 id="2-线程池"><a href="#2-线程池" class="headerlink" title="2.线程池"></a>2.线程池</h1><p>基本用法：<br><img src="/JeckFS/2020/07/03/%E5%AE%9E%E6%88%98Java%E9%AB%98%E5%B9%B6%E5%8F%913/53.png" class="" title="This is 53-th image."><br><img src="/JeckFS/2020/07/03/%E5%AE%9E%E6%88%98Java%E9%AB%98%E5%B9%B6%E5%8F%913/54.png" class="" title="This is 54-th image."></p><img src="/JeckFS/2020/07/03/%E5%AE%9E%E6%88%98Java%E9%AB%98%E5%B9%B6%E5%8F%913/55.png" class="" title="This is 55-th image."><img src="/JeckFS/2020/07/03/%E5%AE%9E%E6%88%98Java%E9%AB%98%E5%B9%B6%E5%8F%913/56.png" class="" title="This is 56-th image."><p>几种线程池的基本实现：<br><img src="/JeckFS/2020/07/03/%E5%AE%9E%E6%88%98Java%E9%AB%98%E5%B9%B6%E5%8F%913/57.png" class="" title="This is 57-th image."><br><img src="/JeckFS/2020/07/03/%E5%AE%9E%E6%88%98Java%E9%AB%98%E5%B9%B6%E5%8F%913/58.png" class="" title="This is 58-th image."></p><p>ThreadPoolExecutor类的任务调度逻辑：<br><img src="/JeckFS/2020/07/03/%E5%AE%9E%E6%88%98Java%E9%AB%98%E5%B9%B6%E5%8F%913/59.png" class="" title="This is 59-th image."></p><p>自定义拒绝策略：<br><img src="/JeckFS/2020/07/03/%E5%AE%9E%E6%88%98Java%E9%AB%98%E5%B9%B6%E5%8F%913/60.png" class="" title="This is 60-th image."><br><img src="/JeckFS/2020/07/03/%E5%AE%9E%E6%88%98Java%E9%AB%98%E5%B9%B6%E5%8F%913/61.png" class="" title="This is 61-th image."><br>输出：<br><img src="/JeckFS/2020/07/03/%E5%AE%9E%E6%88%98Java%E9%AB%98%E5%B9%B6%E5%8F%913/62.png" class="" title="This is 62-th image."></p><p>自定义ThreadFactory：<br><img src="/JeckFS/2020/07/03/%E5%AE%9E%E6%88%98Java%E9%AB%98%E5%B9%B6%E5%8F%913/63.png" class="" title="This is 63-th image."><br><img src="/JeckFS/2020/07/03/%E5%AE%9E%E6%88%98Java%E9%AB%98%E5%B9%B6%E5%8F%913/64.png" class="" title="This is 64-th image."></p><p>线程池扩展：<br><img src="/JeckFS/2020/07/03/%E5%AE%9E%E6%88%98Java%E9%AB%98%E5%B9%B6%E5%8F%913/65.png" class="" title="This is 65-th image."><br><img src="/JeckFS/2020/07/03/%E5%AE%9E%E6%88%98Java%E9%AB%98%E5%B9%B6%E5%8F%913/66.png" class="" title="This is 66-th image."><br>shutdown()会等待所有任务执行完成后，再关闭线程池。<br>执行输出：<br><img src="/JeckFS/2020/07/03/%E5%AE%9E%E6%88%98Java%E9%AB%98%E5%B9%B6%E5%8F%913/67.png" class="" title="This is 67-th image."><br><img src="/JeckFS/2020/07/03/%E5%AE%9E%E6%88%98Java%E9%AB%98%E5%B9%B6%E5%8F%913/68.png" class="" title="This is 68-th image."></p><p><strong>打印线程池中出错后的堆栈信息：</strong><br><img src="/JeckFS/2020/07/03/%E5%AE%9E%E6%88%98Java%E9%AB%98%E5%B9%B6%E5%8F%913/69.png" class="" title="This is 69-th image."><br><img src="/JeckFS/2020/07/03/%E5%AE%9E%E6%88%98Java%E9%AB%98%E5%B9%B6%E5%8F%913/70.png" class="" title="This is 70-th image."><br><img src="/JeckFS/2020/07/03/%E5%AE%9E%E6%88%98Java%E9%AB%98%E5%B9%B6%E5%8F%913/71.png" class="" title="This is 71-th image."><br><img src="/JeckFS/2020/07/03/%E5%AE%9E%E6%88%98Java%E9%AB%98%E5%B9%B6%E5%8F%913/72.png" class="" title="This is 72-th image."><br><img src="/JeckFS/2020/07/03/%E5%AE%9E%E6%88%98Java%E9%AB%98%E5%B9%B6%E5%8F%913/73.png" class="" title="This is 73-th image."></p><p><strong>Fork/Join框架示例：数列求和</strong><br><img src="/JeckFS/2020/07/03/%E5%AE%9E%E6%88%98Java%E9%AB%98%E5%B9%B6%E5%8F%913/74.png" class="" title="This is 74-th image."><br><img src="/JeckFS/2020/07/03/%E5%AE%9E%E6%88%98Java%E9%AB%98%E5%B9%B6%E5%8F%913/75.png" class="" title="This is 75-th image."><br>程序第43行，get()执行时任务没有结束，则主线程会在get()上等待。</p>]]></content>
      
      
      <categories>
          
          <category> 实战Java高并发程序设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实战Java高并发程序设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实战Java高并发2</title>
      <link href="/JeckFS/2020/07/03/%E5%AE%9E%E6%88%98Java%E9%AB%98%E5%B9%B6%E5%8F%912/"/>
      <url>/JeckFS/2020/07/03/%E5%AE%9E%E6%88%98Java%E9%AB%98%E5%B9%B6%E5%8F%912/</url>
      
        <content type="html"><![CDATA[<img src="/JeckFS/2020/07/03/%E5%AE%9E%E6%88%98Java%E9%AB%98%E5%B9%B6%E5%8F%912/y-1.jpg" class="" title="This is y-1-th image."><img src="/JeckFS/2020/07/03/%E5%AE%9E%E6%88%98Java%E9%AB%98%E5%B9%B6%E5%8F%912/4.png" class="" title="This is 4-th image."><p>线程中所有的状态都在Thread中的State枚举类中定义：<br><img src="/JeckFS/2020/07/03/%E5%AE%9E%E6%88%98Java%E9%AB%98%E5%B9%B6%E5%8F%912/5.png" class="" title="This is 5-th image."></p><h1 id="线程中断："><a href="#线程中断：" class="headerlink" title="线程中断："></a>线程中断：</h1><img src="/JeckFS/2020/07/03/%E5%AE%9E%E6%88%98Java%E9%AB%98%E5%B9%B6%E5%8F%912/6.png" class="" title="This is 6-th image."><p>上述程序在调用<code>t1.interrupt()</code>后是不会中断的。因为响应中断是需要代码来判定，中断后的处理逻辑也需要代码明示。</p><p>正确的代码是：<br><img src="/JeckFS/2020/07/03/%E5%AE%9E%E6%88%98Java%E9%AB%98%E5%B9%B6%E5%8F%912/7.png" class="" title="This is 7-th image."></p><p><strong>sleep()相应中断：</strong><br><img src="/JeckFS/2020/07/03/%E5%AE%9E%E6%88%98Java%E9%AB%98%E5%B9%B6%E5%8F%912/8.png" class="" title="This is 8-th image."><br><img src="/JeckFS/2020/07/03/%E5%AE%9E%E6%88%98Java%E9%AB%98%E5%B9%B6%E5%8F%912/9.png" class="" title="This is 9-th image."></p><p>sleep()后，会将中断标记清除，如果被中断的线程还需要根据中断标记退出的话，需要再次设置中断标记。</p><p><strong>wait()与notify()</strong><br>Object.wait()与Object.notify()必须在Synchronized块中，因为这两个方法都需要首先获得目标对象锁才能执行。<br><img src="/JeckFS/2020/07/03/%E5%AE%9E%E6%88%98Java%E9%AB%98%E5%B9%B6%E5%8F%912/10.png" class="" title="This is 10-th image."></p><img src="/JeckFS/2020/07/03/%E5%AE%9E%E6%88%98Java%E9%AB%98%E5%B9%B6%E5%8F%912/11.png" class="" title="This is 11-th image."><img src="/JeckFS/2020/07/03/%E5%AE%9E%E6%88%98Java%E9%AB%98%E5%B9%B6%E5%8F%912/12.png" class="" title="This is 12-th image."><img src="/JeckFS/2020/07/03/%E5%AE%9E%E6%88%98Java%E9%AB%98%E5%B9%B6%E5%8F%912/13.png" class="" title="This is 13-th image."><p>T2通知T1继续执行后，T1不能立即继续执行，而是要等待T2释放object锁，并重新获得锁后，才能继续执行。</p><p>wait()会释放目标对象的锁，sleep()不会释放任何资源。</p><p><strong>join()与yield()</strong><br><img src="/JeckFS/2020/07/03/%E5%AE%9E%E6%88%98Java%E9%AB%98%E5%B9%B6%E5%8F%912/14.png" class="" title="This is 14-th image."><br>一个无限等待，一个有时间限制的等待。<br>不要在Thread对象上调用wait()和notify()，否则影响系统API工作。</p><p><strong>线程组</strong><br>对功能分配比较明确，功能相同的多个线程进行集中管理的一种方式。它们可以同属一个线程组。<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 估计线程组中活动线程的数目</span><br><span class="line">threadGroup.activeCount()</span><br><span class="line"></span><br><span class="line">// 列出线程组中所有的线程信息</span><br><span class="line">threadGroup.list()</span><br></pre></td></tr></table></figure></p><p><strong>当加锁对象是不变对象时引发的问题</strong><br><img src="/JeckFS/2020/07/03/%E5%AE%9E%E6%88%98Java%E9%AB%98%E5%B9%B6%E5%8F%912/15.png" class="" title="This is 15-th image."><br><img src="/JeckFS/2020/07/03/%E5%AE%9E%E6%88%98Java%E9%AB%98%E5%B9%B6%E5%8F%912/16.png" class="" title="This is 16-th image."><br>Integer属于不变对象。i++在真正执行时是这样的：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">i = Integer.valueOf(i.intValue()+<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title function_">valueOf</span><span class="params">(<span class="type">int</span> i)</span>&#123;</span><br><span class="line">    <span class="keyword">assert</span> IntegerCache.high &gt;= <span class="number">127</span>;</span><br><span class="line">    <span class="keyword">if</span>(i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)</span><br><span class="line">        <span class="keyword">return</span> IntegerCache.cache[i + (-IntegerCache.low)];</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>i++本质上书创建了一个新的Integer对象。对这样的不变对象进行加锁，可能加锁的并不是同一个对象。</p>]]></content>
      
      
      <categories>
          
          <category> 实战Java高并发程序设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实战Java高并发程序设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode815-公交线路</title>
      <link href="/JeckFS/2020/07/01/leetcode815-%E5%85%AC%E4%BA%A4%E7%BA%BF%E8%B7%AF/"/>
      <url>/JeckFS/2020/07/01/leetcode815-%E5%85%AC%E4%BA%A4%E7%BA%BF%E8%B7%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><img src="/JeckFS/2020/07/01/leetcode815-%E5%85%AC%E4%BA%A4%E7%BA%BF%E8%B7%AF/1.png" class="" title="This is 1-th image."><img src="/JeckFS/2020/07/01/leetcode815-%E5%85%AC%E4%BA%A4%E7%BA%BF%E8%B7%AF/2.png" class="" title="This is 2-th image."><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>问题的关键是如何构建图的结构.<br><strong>将一个公交线路作为图结构中的一个节点. 一个公交线路可以包含多个站点</strong>. 计算最少乘坐的公交车数量等同于从出发节点到目的节点的最短路径. 采用广度优先即可轻松实现.</p><p><code>relationMap</code>类型为HashMap, 其key是站点, value是该站点所属的公交线路(节点). 注意一个站点可以属于多个公交线路, 所以value应该是一个集合. 本代码采用Set, 经测验若为ArrayList将会超时. </p><p>图结构采用邻接矩阵. </p><p>节点的关系的构建:<br>若站点n属于m个公交线路, 则这m个公交线路之间两两连通.</p><p>在同一个站点可以选择不同的公交线路(起始节点集合Start), 目的站点也可以通过不同的公交线路到达(目的节点集合End). 计算Start与End中任意两个节点的最短距离的最小值, 即为最终答案.</p><p>特殊情况:<br>当起始站点与目的站点同属于一个公交线路(节点)时, 单独判断一下. 因此在构建图之前应判断是否是属于同一公交线路, 对于这种情况应及时返回.</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 37.69% 88ms(中文)  37.05% 63ms(英文)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="type">int</span>[][] graph; <span class="comment">//  = new int[501][501]; // graph[i][j]</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">helper</span><span class="params">(<span class="type">int</span> s, <span class="type">int</span> t)</span> &#123; <span class="comment">// 广度优先的方式, 查找s到t的最短路径</span></span><br><span class="line">        Queue&lt;Integer&gt; q = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        q.add(s);</span><br><span class="line">        <span class="type">boolean</span>[] isVisited = <span class="keyword">new</span> <span class="title class_">boolean</span>[graph.length];</span><br><span class="line">        <span class="type">int</span> <span class="variable">depth</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (!q.isEmpty()) &#123;</span><br><span class="line">            <span class="type">Integer</span> <span class="variable">u</span> <span class="operator">=</span> q.poll();</span><br><span class="line">            isVisited[u] = <span class="literal">true</span>;</span><br><span class="line">            ++depth;</span><br><span class="line"></span><br><span class="line">            Queue&lt;Integer&gt; temp = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; graph.length; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (graph[u][i] == <span class="number">1</span> &amp;&amp; !isVisited[i]) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (i == t) <span class="keyword">return</span> depth;</span><br><span class="line">                    temp.add(i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            q = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">numBusesToDestination</span><span class="params">(<span class="type">int</span>[][] routes, <span class="type">int</span> S, <span class="type">int</span> T)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (S == T) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        HashMap&lt;Integer, Set&lt;Integer&gt;&gt; relationMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(); <span class="comment">// 判断站点(key)属于哪个公交线路(value)</span></span><br><span class="line">        graph = <span class="keyword">new</span> <span class="title class_">int</span>[routes.length + <span class="number">1</span>][routes.length + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; routes.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; routes[i].length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!relationMap.containsKey(routes[i][j]))</span><br><span class="line">                    relationMap.put(routes[i][j], <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; routes.length; i++) &#123; <span class="comment">// 公交线路</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; routes[i].length; j++) &#123; <span class="comment">// 站点</span></span><br><span class="line">                relationMap.get(routes[i][j]).add(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断S,T是否在同一个节点中</span></span><br><span class="line">        Set&lt;Integer&gt; initSSet = relationMap.get(S);</span><br><span class="line">        Set&lt;Integer&gt; initTSet = relationMap.get(T);</span><br><span class="line">        <span class="keyword">for</span> (Integer u : initSSet) &#123;</span><br><span class="line">            <span class="keyword">if</span> (initTSet.contains(u)) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; routes.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; routes[i].length; j++) &#123;</span><br><span class="line">                Set&lt;Integer&gt; nodes = relationMap.get(routes[i][j]);</span><br><span class="line">                <span class="keyword">for</span> (Integer u : nodes) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (Integer v : nodes) &#123;</span><br><span class="line">                        graph[u][v] = <span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Set&lt;Integer&gt; sSet = relationMap.get(S);</span><br><span class="line">        Set&lt;Integer&gt; tSet = relationMap.get(T);</span><br><span class="line">        <span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">for</span> (Integer s : sSet) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Integer t : tSet) &#123;</span><br><span class="line">                min = Math.min(min, helper(s, t));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> min;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 图; 广度优先遍历 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图; 广度优先遍历 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode983-最低票价</title>
      <link href="/JeckFS/2020/06/15/leetcode983-%E6%9C%80%E4%BD%8E%E7%A5%A8%E4%BB%B7/"/>
      <url>/JeckFS/2020/06/15/leetcode983-%E6%9C%80%E4%BD%8E%E7%A5%A8%E4%BB%B7/</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><img src="/JeckFS/2020/06/15/leetcode983-%E6%9C%80%E4%BD%8E%E7%A5%A8%E4%BB%B7/1.png" class="" title="This is 1-th image."><img src="/JeckFS/2020/06/15/leetcode983-%E6%9C%80%E4%BD%8E%E7%A5%A8%E4%BB%B7/2.png" class="" title="This is 2-th image."><img src="/JeckFS/2020/06/15/leetcode983-%E6%9C%80%E4%BD%8E%E7%A5%A8%E4%BB%B7/3.png" class="" title="This is 3-th image."><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>状态定义：<br><code>d[i]表示第i天之前的出游计划都已经完成，所用的最低消费</code>。</p><p>状态转移方程：<br><code>d[i]=min&#123;d[i-1] + costs[0], d[i - 7] + costs[1], d[i - 30] + costs[2], d[i - 1] if travel[i] = false&#125;，其中travel[i] = false表示第i天没有出游计划，= true表示有。</code></p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="comment">// 1ms 98.68%(中文) 1ms 82.07%(英文)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">mincostTickets</span><span class="params">(<span class="type">int</span>[] days, <span class="type">int</span>[] costs)</span> &#123;</span><br><span class="line">        <span class="type">boolean</span>[] travel = <span class="keyword">new</span> <span class="title class_">boolean</span>[<span class="number">366</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i : days) &#123;</span><br><span class="line">            travel[i] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span>[] d = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">366</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= days[days.length-<span class="number">1</span>]; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (travel[i]) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> d[i-<span class="number">1</span>]+costs[<span class="number">0</span>];</span><br><span class="line">                t = Math.min(t, i - <span class="number">7</span> &gt;= <span class="number">0</span> ? d[i - <span class="number">7</span>] + costs[<span class="number">1</span>] : costs[<span class="number">1</span>]);</span><br><span class="line">                t = Math.min(t, i - <span class="number">30</span> &gt;= <span class="number">0</span> ? d[i - <span class="number">30</span>] + costs[<span class="number">2</span>] : costs[<span class="number">2</span>]);</span><br><span class="line">                d[i] = t;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                d[i] = d[i-<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> d[days[days.length-<span class="number">1</span>]];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 动态规划 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Class文件中的CONSTANT_MethodHandle_info常量</title>
      <link href="/JeckFS/2020/06/15/Class%E6%96%87%E4%BB%B6%E4%B8%AD%E7%9A%84CONSTANT-MethodHandle-info%E5%B8%B8%E9%87%8F/"/>
      <url>/JeckFS/2020/06/15/Class%E6%96%87%E4%BB%B6%E4%B8%AD%E7%9A%84CONSTANT-MethodHandle-info%E5%B8%B8%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<p>CONSTANT_MethodHandle_info在字节码文件中的格式：<br><img src="/JeckFS/2020/06/15/Class%E6%96%87%E4%BB%B6%E4%B8%AD%E7%9A%84CONSTANT-MethodHandle-info%E5%B8%B8%E9%87%8F/1.png" class="" title="This is 1-th image."></p><p><code>reference_kind</code>的取值：<br><img src="/JeckFS/2020/06/15/Class%E6%96%87%E4%BB%B6%E4%B8%AD%E7%9A%84CONSTANT-MethodHandle-info%E5%B8%B8%E9%87%8F/2.png" class="" title="This is 2-th image."></p><p><code>reference_index</code>的取值：</p><ul><li>对于Kind=1，2，3，4，reference_index引用一个<code>CONSTANT_Fieldref_info</code></li><li>对于Kind=5，6，7，8，reference_index引用一个<code>CONSTANT_Methodref_info</code></li><li>对于Kind=9，reference_index引用一个<code>CONSTANT_InterfaceMethodref_info</code></li></ul><blockquote><p>CONSTANT_Fieldref_info在字节码文件中的格式：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CONSTANT_Fieldref_info &#123;</span><br><span class="line">  u1 tag;</span><br><span class="line">  u2 class_index;</span><br><span class="line">  u2 name_and_type_index;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>tag=9，表示一个引用field信息，包括静态field和实例field。class_index 是常量池中一个CONSTANT_Class_info类型常量（类/接口）的索引，表示字段 field 归属类。name_and_type_index 是常量池中一个CONSTANT_NameAndType_info类型常量的索引，表示字段的名称和类型。</p><p>关于 field 引用解释一下，包括下面的 method，接口 method 引用同理：</p><ul><li>以本文开头 User 类的 name 字段为例，name 在多个方法中都有用到，相比保存多份该字段信息来讲，在常量池中保存一份该字段信息，然后在其他用到的地方保存其索引显然更合适。</li><li>CONSTANT_Fieldref_info 是把在代码中引用的 field（可能是本类的，也可能是外部类的）抽离成常量，请不要 class 中的字段表集合 field_info 混淆。</li></ul><p>CONSTANT_Methodref_info在字节码文件中的格式：<br>CONSTANT_Methodref_info {<br>  u1 tag;<br>  u2 class_index;<br>  u2 name_and_type_index;<br>}<br>tag=10，表示引用一个方法 method 的信息，包括<strong>静态方法</strong>和<strong>实例方法</strong>。class_index 是常量池中一个CONSTANT_Class_info类型常量（类/接口）的索引，表示方法 method 归属类。name_and_type_index 是常量池中一个CONSTANT_NameAndType_info类型常量的索引，表示<strong>方法的名称、参数和返回类型</strong>。</p><p>CONSTANT_InterfaceMethodref_info在字节码文件中的格式：<br>CONSTANT_InterfaceMethodref_info {<br>  u1 tag;<br>  u2 class_index;<br>  u2 name_and_type_index;<br>}<br>tag=11，表示一个接口 method 信息。class_index 是常量池中一个CONSTANT_Class_info类型常量（接口）的索引，表示<strong>方法的所属接口</strong>。name_and_type_index 同CONSTANT_Methodref_info。</p></blockquote><h1 id="与MethodHandle相关的知识点"><a href="#与MethodHandle相关的知识点" class="headerlink" title="与MethodHandle相关的知识点"></a>与MethodHandle相关的知识点</h1><ul><li>当java.lang.invoke.MethodHandle实例的最后解析结果为REF_getStatic、REF_putStatic、REF_invokeStatic、REF_newInvokeSpecial四种类型的方法句柄。则初始化实例句柄对应的类(假定其没有被初始化)</li></ul>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂谈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实战Java高并发1</title>
      <link href="/JeckFS/2020/06/14/%E5%AE%9E%E6%88%98Java%E9%AB%98%E5%B9%B6%E5%8F%911/"/>
      <url>/JeckFS/2020/06/14/%E5%AE%9E%E6%88%98Java%E9%AB%98%E5%B9%B6%E5%8F%911/</url>
      
        <content type="html"><![CDATA[<h1 id="一些概念"><a href="#一些概念" class="headerlink" title="一些概念"></a>一些概念</h1><h2 id="1-并发与并行"><a href="#1-并发与并行" class="headerlink" title="1.并发与并行"></a>1.并发与并行</h2><img src="/JeckFS/2020/06/14/%E5%AE%9E%E6%88%98Java%E9%AB%98%E5%B9%B6%E5%8F%911/y-1.jpg" class="" title="This is y-1-th image."><img src="/JeckFS/2020/06/14/%E5%AE%9E%E6%88%98Java%E9%AB%98%E5%B9%B6%E5%8F%911/y-2.jpg" class="" title="This is y-2-th image."><img src="/JeckFS/2020/06/14/%E5%AE%9E%E6%88%98Java%E9%AB%98%E5%B9%B6%E5%8F%911/1.png" class="" title="This is 1-th image."><h2 id="2-死锁、饥饿、活锁"><a href="#2-死锁、饥饿、活锁" class="headerlink" title="2.死锁、饥饿、活锁"></a>2.死锁、饥饿、活锁</h2><p>死锁：每个线程永远获取不到自己想要的资源，导致本线程一直永远阻塞下去。</p><blockquote><p>死锁发生条件：<br><strong>互斥条件</strong>：线程对资源的访问是排他性的，如果一个线程对占用了某资源，那么其他线程必须处于等待状态，直到资源被释放。<br><strong>请求和保持条件</strong>：线程T1至少已经保持了一个资源R1占用,但又提出对另一个资源R2请求，而此时，资源R2被其他线程T2占用，于是该线程T1也必须等待，但又对自己保持的资源R1不释放。<br><strong>不剥夺条件</strong>：线程已获得的资源，在未使用完之前，不能被其他线程剥夺，只能在使用完以后由自己释放。<br><strong>环路等待条件</strong>：在死锁发生时，必然存在一个“进程-资源环形链”，即：{p0,p1,p2,…pn},进程p0（或线程）等待p1占用的资源，p1等待p2占用的资源，pn等待p0占用的资源。（最直观的理解是，p0等待p1占用的资源，而p1而在等待p0占用的资源，于是两个进程就相互等待）</p></blockquote><p>饥饿：指的是一个或多个线程无法获得所需的资源，导致一直无法执行。</p><blockquote><p>如高优先级线程总抢在低优先级线程之前执行，导致低优先级线程得不到执行。</p></blockquote><p>活锁：线程之间互相谦让，主动将资源让给其他线程，导致资源在两个线程之间来回跳动。</p><h2 id="3-并发级别"><a href="#3-并发级别" class="headerlink" title="3.并发级别"></a>3.并发级别</h2><ul><li>阻塞</li><li><p>无饥饿<br>非公平锁产生饥饿：</p><img src="/JeckFS/2020/06/14/%E5%AE%9E%E6%88%98Java%E9%AB%98%E5%B9%B6%E5%8F%911/2.png" class="" title="This is 2-th image."></li><li><p>无障碍</p></li></ul><p>当多个线程之间发生冲突的概率不大时，同时进入临界区，而不会因为临界区的问题导致一方被挂起。当修改共享数据时，线程回滚自己修改的内容，保证数据的安全。</p><p>可能存在的问题：<br>临界区中存在严重冲突，所有线程不断回滚自己的操作，导致没有一个线程可以结束。<br>可以使用“一致性标记”解决。线程操作前，先更新标记(标识当前线程在操作，其他线程读取到的数据不再安全)，再读取并保存标记，操作完成后，再次读取，检测是否被更改过，若两者一致，说明没有冲突。若不一致，说明线程之间有冲突，需要回滚。</p><ul><li>无锁<br>无锁并发必然有一个线程在有限步内完成并离开临界区。无锁并行都是无障碍的。</li></ul><p>通常做法是在一个无穷循环中，线程不断尝试修改共享变量。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(!atomicVar.compareAndSet(localVar, localVar + <span class="number">1</span>)) &#123;</span><br><span class="line">    localVar = atomicVar.get();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li>无等待</li></ul><p>无等待要求<strong>所有线程都必须在有限步内完成</strong>。这种情况没有饥饿问题。<br>无等待结构：RCU(Read Copy Update)。基本思想是：<strong>所有读线程是无等待的</strong>。写时，先获取原始数据的副本，<strong>只修改副本</strong>(这也是为什么可以不控制读操作的原因)，修改完后，在合适的时机回写数据。<br>如 <code>CopyOnWriteArrayList</code>类。</p><h1 id="Java内存模型的基本保证"><a href="#Java内存模型的基本保证" class="headerlink" title="Java内存模型的基本保证"></a>Java内存模型的基本保证</h1><ul><li>原子性、</li><li>可见性(<br>影响可见性的因素：<br>1.线程内的本地缓存<br>变量从主存读取到本地缓存，该线程只操作其本地缓存，导致与主存内存产生不一致，进而其他线程看不到该线程所做的更改。<br>2.指令重排及编译器优化。<br>使用同一变量a为两个不同的内存中的变量赋值，根据<strong>向前替换</strong>，这第二个内存变量将从第一个内存变量中取值，而减少访问变量a的次数。当在第一个内存变量和第二个内存变量之间，其他线程对变量a进行改变，则导致第二个内存变量读取有误。</li><li><p>有序性<br>影响因素：<br>1.<strong>指令重排</strong>(能够保证串行语义的一致性)：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">OrderExample</span>&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">()</span>&#123; <span class="comment">// 线程A（先运行）</span></span><br><span class="line">        a = <span class="number">1</span>;</span><br><span class="line">        flag = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reader</span><span class="params">()</span> &#123; <span class="comment">// 线程B（后运行）</span></span><br><span class="line">        <span class="keyword">if</span>(flag) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> a + <span class="number">1</span>;</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/JeckFS/2020/06/14/%E5%AE%9E%E6%88%98Java%E9%AB%98%E5%B9%B6%E5%8F%911/3.png" class="" title="This is 3-th image."><p>2.流水线技术<br>在CPU中由5—6个不同功能的电路单元组成一条指令处理流水线，然后将一条指令分成5—6步后再由这些电路单元分别执行，这样就能实现在一个CPU时钟周期完成一条指令，因此提高CPU的运算速度。对于IF, ID, EX, MEM, WB都有对应的电路单元来处理，将一个指令分成 n 多个步骤，每个步骤有对应的电路单元进行处理，这样可以做到同时执行n条指令。如生产汽车可以分为冲压，焊接，涂装，总装。不采用流水线生产只能生产一辆车，采用流水线可以同时生产4辆车，当第一辆车的冲压刚完成后在要开始焊接时，将第二辆车冲压。<br>流水线满载时，性能相当不错，一旦中断，需要几个周期恢复到满载状态。指令重排就是尽量减少中断流水线的次数。</p><p><strong>Happens-Before</strong>：禁止指令重排的规则</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 实战Java高并发程序设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实战Java高并发程序设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解Java虚拟机9</title>
      <link href="/JeckFS/2020/06/13/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA9/"/>
      <url>/JeckFS/2020/06/13/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA9/</url>
      
        <content type="html"><![CDATA[<blockquote class="pullquote mindmap mindmap-md"><ul><li>类加载器案例<ul><li>Tomcat<ul><li>不同目录的类库的隔离：派生出不同的类加载器，不同目录的加载器加载对应目录的类库。</li></ul></li><li>OSGi<ul><li>每个Bundle都有自己的类加载器，用于加载本Bundle的类(包括发布的和未发布的)。</li><li>每个Bundle可以发布自己的某些Package，也可以依赖其他Bundle的Package。</li><li>注意：依赖其他Bundle的Package中的类，交由对应Bundle的类加载器加载。</li><li>类加载器之间是一种网状结构。</li><li>Bundle循环依赖的死锁问题：<ul><li>原因：本Bundle在加载依赖于其他Bundle的类时，会锁定本Bundle的类加载器。</li><li>解决：使用ClassLoader类的registerAsParallelCapable()对并行的类加载进行注册声明，把锁的级别由ClassLoader降为要加载的这个类。</li></ul></li></ul></li><li>实战：远程加载并执行代码<ul><li>使用自定义类加载就是显示调用ClassLoader的defineClass()</li><li>一个测试类对应一个自定义的ClassLoader，测试类执行完毕，加载该测试类的ClassLoader自动销毁</li><li>劫持System.out(将字节码文件的System.out的CONSTANT_Utf8_info的符号引用变为自定义的HackSystem)</li><li>测试类字节码文件上传至服务器，通过反射获取测试类的执行方法main()</li></ul></li></ul></li></ul></blockquote><h1 id="一、类加载器案例"><a href="#一、类加载器案例" class="headerlink" title="一、类加载器案例"></a>一、类加载器案例</h1><h2 id="Tomcat：正头的类加载器架构"><a href="#Tomcat：正头的类加载器架构" class="headerlink" title="Tomcat：正头的类加载器架构"></a>Tomcat：正头的类加载器架构</h2><ul><li>不同目录下的类库的访问权限：</li><li><blockquote><p>/common目录，类库可被Tomcat和所有Web应用程序共同使用</p></blockquote></li><li><blockquote><p>/server目录，类库可被Tomcat使用，但所有的Web应用程序不可见</p></blockquote></li><li><blockquote><p>/shared目录，类库可被所有Web应用程序使用，但Tomcat不可见</p></blockquote></li><li><blockquote><p>/WebApp/WEB-INF目录，类库可被<strong>该Web应用程序</strong>使用，对Tomcat和其他Web应用程序不可见。</p></blockquote></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">graph BT;</span><br><span class="line">    ex(扩展类加载器&lt;br&gt;Extension ClassLoader)--&gt;bo(启动类加载器&lt;br&gt;Bootstrap ClassLoader)</span><br><span class="line">    ap(应用程序类加载器&lt;br&gt;Application ClassLoader)--&gt;ex</span><br><span class="line">    co(Common类加载器&lt;br&gt;CommonClassLoader)--&gt;ap</span><br><span class="line">    ca(Catalina类加载器&lt;br&gt;CatalinaClassLoader)--&gt;co</span><br><span class="line">    sh(Shared类加载器&lt;br&gt;SharedClassLoader)--&gt;co</span><br><span class="line">    we(WebApp类加载器&lt;br&gt;WebappClassLoader)--&gt;sh</span><br><span class="line">    js(Jsp类加载器&lt;br&gt;JasperLoader)--&gt;we</span><br></pre></td></tr></table></figure><p>Common类加载器能加载的类都可以被Catalina类加载器和Shared类加载器使用.</p><p>而Catalina类加载器和Shared类加载器自己能加载的类则与对方相互隔离。</p><p>WebApp类加载器可以使用Shared类加载器加载到的类，但各个WebApp类加载器实例之间相互隔离。</p><p>JasperLoader的加载范围仅仅是这个JSP文件所编译出来的那一个Class文件，它存在的目的就是为了被丢弃：当服务器检测到JSP文件被修改时，会替换掉目前的JasperLoader的实例，并通过再建立一个新的JSP类加载器来实现JSP文件的HotSwap功能。</p><h2 id="OSGi"><a href="#OSGi" class="headerlink" title="OSGi"></a>OSGi</h2><p><strong>Bundle之间具有依赖关系的package中的类是如何加载的：</strong><br>BundleA使用了BundleB发布的PackageA，那么PackageA的类加载动作由发布它的Bundle类加载器(BundleA类加载器)完成(这种会产生Bundle之间的依赖关系)。<br>对于未导出的package，由自己所在的Bundle类加载器加载。</p><p><strong>OSGi的类加载器架构：</strong></p><img src="/JeckFS/2020/06/13/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA9/1.png" class="" title="This is 1-th image."><p><strong>类加载时的查找规则：</strong><br>·以java.*开头的类，委派给父类加载器加载。<br>·否则，委派列表名单内的类，委派给父类加载器加载。<br>·否则，Import列表中的类，委派给Export这个类的Bundle的类加载器加载。<br>·否则，查找当前Bundle的Classpath，使用自己的类加载器加载。<br>·否则，查找是否在自己的Fragment Bundle中，如果是则委派给Fragment Bundle的类加载器加载。<br>·否则，查找Dynamic Import列表的Bundle，委派给对应Bundle的类加载器加载。<br>·否则，类查找失败。</p><p><strong>Bundle类加载时的死锁问题：</strong><br>出现原因：<br>Bundle A依赖Bundle B的Package B，而Bundle B又依赖了Bundle A的Package A。<br>当Bundle A加载Package B的类时，首先需要锁定当前类加载器的实例对象（java.lang.ClassLoader.loadClass()是一个同步方法），然后把请求委派给Bundle B的加载器处理，但如果这时Bundle B也正好想加载Package A的类，它会先锁定自己的加载器再去请求Bundle A的加载器处理，这样两个加载器都在等待对方处理自己的请求，而对方处理完之前自己又一直处于同步锁定的状态，因此它们就互相死锁，永远无法完成加载请求了。</p><p>解决：<br>使用ClassLoader类的registerAsParallelCapable方法对可并行的类加载进行注册声明，把锁的级别从ClassLoader对象本身，降低为要加载的类名这个级别。</p><h1 id="二、实战：自己动手实现远程执行功能"><a href="#二、实战：自己动手实现远程执行功能" class="headerlink" title="二、实战：自己动手实现远程执行功能"></a>二、实战：自己动手实现远程执行功能</h1><p>临时代码要求：</p><ul><li>测试类可被反复修改、提交、执行</li><li>提交的测试类可访问服务端的其他类库</li><li>提交的测试类在执行后被卸载或回收掉</li><li>仅收集测试类的标准输出(System.out)和标准错误输出(System.err)并输出<ul><li>实现方法：将测试类中的System.out的符号引用替换为PrintStream的符号引用(劫持System.out)</li></ul></li></ul><p><strong>1.自定义类加载器HotSwapClassLoader，并公开父类的protected方法defineClass()</strong></p><blockquote><p>defineClass()负责将提交的测试类的byte[]转变为Class对象。<br>调用HotSwapClassLoader的loadByte()方法加载测试类，不调用该方法的话，测试类的类加载器就是HotSwapClassLoader的父类加载器。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 为了多次载入执行类而加入的加载器</span></span><br><span class="line"><span class="comment">* 把defineClass方法开放出来，只有外部显式调用的时候才会使用到loadByte方法</span></span><br><span class="line"><span class="comment">* 由虚拟机调用时，仍然按照原有的双亲委派规则使用loadClass方法进行类加载</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> zzm</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HotSwapClassLoader</span> <span class="keyword">extends</span> <span class="title class_">ClassLoader</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HotSwapClassLoader</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 指定为加载HotSwapClassLoader类的类加载器作为父类加载器</span></span><br><span class="line">        <span class="built_in">super</span>(HotSwapClassLoader.class.getClassLoader());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Class <span class="title function_">loadByte</span><span class="params">(<span class="type">byte</span>[] classByte)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> defineClass(<span class="literal">null</span>, classByte, <span class="number">0</span>, classByte.length);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2.自定义System.out的劫持类HackSystem类</strong></p><blockquote><p>主要逻辑是：修改测试类字节码文件的CONSTANT_Utf8_info，将java.lang.System替换为HackSystem。这种直接替换符号引用的方式与被调试代码直接引用HackSystem类再编译成Class是完全一样的。<br>将修改后的测试类字节码文件传给HotSwapClassLoader.loadByte()进行类加载。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 修改Class文件，暂时只提供修改常量池常量的功能</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> zzm</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClassModifier</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Class文件中常量池的起始偏移</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">CONSTANT_POOL_COUNT_INDEX</span> <span class="operator">=</span> <span class="number">8</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * CONSTANT_Utf8_info常量的tag标志</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">CONSTANT_Utf8_info</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 常量池中11种常量所占的长度，CONSTANT_Utf8_info型常量除外，因为它不是定长的</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span>[] CONSTANT_ITEM_LENGTH = &#123; -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span> &#125;;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">u1</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">u2</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">byte</span>[] classByte;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ClassModifier</span><span class="params">(<span class="type">byte</span>[] classByte)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.classByte = classByte;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 修改常量池中CONSTANT_Utf8_info常量的内容</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> oldStr 修改前的字符串</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> newStr 修改后的字符串</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> 修改结果</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">byte</span>[] modifyUTF8Constant(String oldStr, String newStr) &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">cpc</span> <span class="operator">=</span> getConstantPoolCount();</span><br><span class="line">    <span class="type">int</span> <span class="variable">offset</span> <span class="operator">=</span> CONSTANT_POOL_COUNT_INDEX + u2;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; cpc; i++) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">tag</span> <span class="operator">=</span> ByteUtils.bytes2Int(classByte, offset, u1);</span><br><span class="line">        <span class="keyword">if</span> (tag == CONSTANT_Utf8_info) &#123;</span><br><span class="line">            <span class="comment">// 此处u1是tag的长度</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> ByteUtils.bytes2Int(classByte, offset + u1, u2);</span><br><span class="line">            offset += (u1 + u2);</span><br><span class="line">            <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> ByteUtils.bytes2String(classByte, offset, len);</span><br><span class="line">            <span class="keyword">if</span> (str.equalsIgnoreCase(oldStr)) &#123;</span><br><span class="line">                <span class="type">byte</span>[] strBytes = ByteUtils.string2Bytes(newStr);</span><br><span class="line">                <span class="type">byte</span>[] strLen = ByteUtils.int2Bytes(newStr.length(), u2);</span><br><span class="line">                classByte = ByteUtils.bytesReplace(classByte, offset - u2, u2, strLen);</span><br><span class="line">                classByte = ByteUtils.bytesReplace(classByte, offset, len, strBytes);</span><br><span class="line">                <span class="keyword">return</span> classByte;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                offset += len;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            offset += CONSTANT_ITEM_LENGTH[tag];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> classByte;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 获取常量池中常量的数量</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> 常量池数量</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getConstantPoolCount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ByteUtils.bytes2Int(classByte, CONSTANT_POOL_COUNT_INDEX, u2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Bytes数组处理工具</span></span><br><span class="line"><span class="comment">* 除了把out和err两个静态变量改成使用ByteArrayOutputStream作为打印目标的同一个PrintStream对象，</span></span><br><span class="line"><span class="comment">* 以及增加了读取、清理ByteArrayOutputStream中内容的getBufferString()和clearBuffer()方法外，</span></span><br><span class="line"><span class="comment">* 其余的方法全部都来自于System类的public方法，方法名字、参数、返回值都完全一样，并且实现也是直接</span></span><br><span class="line"><span class="comment">* 转调了System类的对应方法而已。保留这些方法的目的，是为了在Sytem被替换成HackSystem之后，保证执</span></span><br><span class="line"><span class="comment">* 行代码中调用的System的其余方法仍然可以继续使用。</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ByteUtils</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">bytes2Int</span><span class="params">(<span class="type">byte</span>[] b, <span class="type">int</span> start, <span class="type">int</span> len)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">end</span> <span class="operator">=</span> start + len;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> start; i &lt; end; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> ((<span class="type">int</span>) b[i]) &amp; <span class="number">0xff</span>;</span><br><span class="line">            n &lt;&lt;= (--len) * <span class="number">8</span>;</span><br><span class="line">            sum = n + sum;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">byte</span>[] int2Bytes(<span class="type">int</span> value, <span class="type">int</span> len) &#123;</span><br><span class="line">        <span class="type">byte</span>[] b = <span class="keyword">new</span> <span class="title class_">byte</span>[len];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            b[len - i - <span class="number">1</span>] = (<span class="type">byte</span>) ((value &gt;&gt; <span class="number">8</span> * i) &amp; <span class="number">0xff</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">bytes2String</span><span class="params">(<span class="type">byte</span>[] b, <span class="type">int</span> start, <span class="type">int</span> len)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>(b, start, len);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">byte</span>[] string2Bytes(String str) &#123;</span><br><span class="line">        <span class="keyword">return</span> str.getBytes();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">byte</span>[] bytesReplace(<span class="type">byte</span>[] originalBytes, <span class="type">int</span> offset, <span class="type">int</span> len, <span class="type">byte</span>[] replaceBytes) &#123;</span><br><span class="line">        <span class="type">byte</span>[] newBytes = <span class="keyword">new</span> <span class="title class_">byte</span>[originalBytes.length + (replaceBytes.length - len)];</span><br><span class="line">        System.arraycopy(originalBytes, <span class="number">0</span>, newBytes, <span class="number">0</span>, offset);</span><br><span class="line">        System.arraycopy(replaceBytes, <span class="number">0</span>, newBytes, offset, replaceBytes.length);</span><br><span class="line">        System.arraycopy(originalBytes, offset + len, newBytes, offset + replaceBytes.length, originalBytes.length - offset - len);</span><br><span class="line">        <span class="keyword">return</span> newBytes;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3.提供给外部调用的入口，调用前面几个支持类组装逻辑，完成类加载工作</strong></p><blockquote><p>每次执行execute()都会生成一个新的类加载器实例，因此可实现同一个类重复加载。<br>利用反射调用测试类的main()方法。<br>测试类的输出结果都保存在HackSystem.out的缓冲区中。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Javaclass执行工具</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> zzm</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JavaclassExecuter</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 执行外部传过来的代表一个Java类的Byte数组&lt;br&gt;</span></span><br><span class="line"><span class="comment">    * 将输入类的byte数组中代表java.lang.System的CONSTANT_Utf8_info常量修改为劫持后的HackSystem类</span></span><br><span class="line"><span class="comment">    * 执行方法为该类的static main(String[] args)方法，输出结果为该类向System.out/err输出的信息</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> classByte 代表一个Java类的Byte数组</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> 执行结果</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">execute</span><span class="params">(<span class="type">byte</span>[] classByte)</span> &#123;</span><br><span class="line">        HackSystem.clearBuffer();</span><br><span class="line">        <span class="type">ClassModifier</span> <span class="variable">cm</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassModifier</span>(classByte);</span><br><span class="line">        <span class="type">byte</span>[] modiBytes = cm.modifyUTF8Constant(<span class="string">&quot;java/lang/System&quot;</span>, <span class="string">&quot;org/fenixsoft/classloading/execute/HackSystem&quot;</span>);</span><br><span class="line">        <span class="type">HotSwapClassLoader</span> <span class="variable">loader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HotSwapClassLoader</span>();</span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> loader.loadByte(modiBytes);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> clazz.getMethod(<span class="string">&quot;main&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; String[].class &#125;);</span><br><span class="line">            method.invoke(<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="literal">null</span>&#125;);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Throwable e) &#123;</span><br><span class="line">            e.printStackTrace(HackSystem.out);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> HackSystem.getBufferString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>4.编写测试类TestClass与JSP文件</strong><br><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.lang.*&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.*&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.fenixsoft.classloading.execute.*&quot;</span> %&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;c:/TestClass.class&quot;</span>);</span><br><span class="line">    <span class="type">byte</span>[] b = <span class="keyword">new</span> <span class="title class_">byte</span>[is.available()];</span><br><span class="line">    is.read(b);</span><br><span class="line">    is.close();</span><br><span class="line">    out.println(<span class="string">&quot;&lt;textarea style=&#x27;width:1000;height=800&#x27;&gt;&quot;</span>);</span><br><span class="line">    out.println(JavaclassExecuter.execute(b));</span><br><span class="line">    out.println(<span class="string">&quot;&lt;/textarea&gt;&quot;</span>);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><br><strong>5.测试类字节码文件上传至服务器的C盘根目录下，让JSP文件可以加载的到</strong></p>]]></content>
      
      
      <categories>
          
          <category> 深入理解Java虚拟机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深入理解Java虚拟机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解Java虚拟机8</title>
      <link href="/JeckFS/2020/06/08/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA8/"/>
      <url>/JeckFS/2020/06/08/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA8/</url>
      
        <content type="html"><![CDATA[<blockquote class="pullquote mindmap mindmap-md"><ul><li>运行时栈帧结构<ul><li>局部变量表<ul><li>作用</li><li>大小</li><li>变量槽<ul><li>变量槽的重用<ul><li>依据是变量的作用域</li></ul></li><li>32位变量占用1个slot，64位变量占用2个相邻的变量槽</li><li>reference变量的作用<ul><li>索引到对象在Java堆中的起始地址</li><li>查找到对象所属类型在方法区中的类型信息</li></ul></li></ul></li><li>局部变量的回收<ul><li>将要回收的标志</li><li>作用域</li><li>手动设null的优缺点</li></ul></li></ul></li><li>操作数栈<ul><li>作用<ul><li>算术运算</li><li>方法参数传递</li></ul></li><li>栈帧重叠<ul><li>用于参数传递减少额外参数复制传递的开销</li></ul></li></ul></li><li>动态连接<ul><li>动态连接的概念</li><li>静态解析的概念</li><li>两者的本质是由符号引用转化为直接引用的过程，区别在于转化发生的时间</li></ul></li><li>方法返回地址<ul><li>正常调用完成时返回</li><li>异常调用完成时返回</li></ul></li><li>附加信息<ul><li>与调试、性能收集相关</li><li>取决于虚拟机的实现</li></ul></li></ul></li></ul></blockquote><p><br><br></p><blockquote class="pullquote mindmap mindmap-md"><ul><li>方法调用<ul><li>两种方式<ul><li>解析<ul><li>编译期确定，类加载阶段完成</li><li>解析的对象<ul><li>invokestatic—静态方法</li><li>invokespecial—实例构造器<code>&lt;init&gt;()</code>、私有方法、父类方法</li><li>final修饰的方法</li></ul></li></ul></li><li>分派<ul><li>两对概念<ul><li>静态类型(编译期可知) —- 静态分派 —- 方法重载</li><li>实际类型(运行期可知) —- 动态分派 —- 方法重写</li><li>单分派(选择宗量为1)</li><li>多分派(选择宗量超过1)</li></ul></li><li>分派的过程<ul><li>首先静态分派，在编译期根据方法接受者和参数产生两条invokevirtual指令，指令参数与方法接受者和参数有关。</li><li>其次动态分派，只根据方法接受者(对象的实际类型)选择执行哪个版本的方法</li><li>因此Java语言是静态多分派、动态单分派的语言。</li></ul></li><li>invokevirtual的解析过程<ul><li>取操作数栈顶第一个元素所指对象的实际类型C</li><li>递归地在C及其父类中查找描述符与简单名称相符的方法，有则进行访问权限校验，校验不通过抛IllegalAccessError异常</li><li>找不到合适方法，跑AbstractMethodError异常</li></ul></li><li>虚拟机动态分派的实现<ul><li>使用虚方法表，其中每个表项存放各个方法的实际入口地址。子类的虚方法表除了重写的方法外，其余表项与父类相同。</li></ul></li></ul></li></ul></li><li>目的是确定调用哪个版本的方法，即由符号引用转换为直接饮用</li></ul></li></ul></blockquote><h1 id="一、运行时栈帧结构"><a href="#一、运行时栈帧结构" class="headerlink" title="一、运行时栈帧结构"></a>一、运行时栈帧结构</h1><h2 id="1-局部变量表"><a href="#1-局部变量表" class="headerlink" title="1.局部变量表"></a>1.局部变量表</h2><p>以变量槽为单位，用于存放方法参数和方法内部定义的局部变量，其最大容量由Code属性中的max_Locals决定。</p><p>当方法被调用时，局部变量表可以完成从实参到形参传递的过程。</p><p><strong>变量槽的重用：</strong><br>若当前字节码PC计数器的值超出某个变量的作用域，该变量对应的变量槽就可分配给其他变量来重用。可分配并不意味着超过该变量的作用域就立马将其对应的变量槽回收，当没有其他变量需要分配空间时，原先变量的引用虽然已超过了作用域，但仍然存在，垃圾回收时并不会被回收，只有当其他变量需要分配空间时才会回收。即<strong>当局部变量表中的变量槽是否回收取决于是否存在对该变量槽的引用。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 手动设null进行内存回收的应用</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span><span class="params">()</span> &#123;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">byte</span>[] placeholder = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">64</span> * <span class="number">1024</span> * <span class="number">1024</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    System.gc();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 运行结果</span></span><br><span class="line">[GC 66401K-&gt;65778K(125632K), <span class="number">0.0035471</span> secs]</span><br><span class="line">[Full GC 65778K-&gt;218K(125632K), <span class="number">0.0140596</span> secs]</span><br></pre></td></tr></table></figure><p><strong>手动设null进行内存回收</strong>在某些情况下(对象占用内存大、此方法的栈帧长时间不能被回收、方法调用次数达不到即时编译器的编译条件)有奇效，但在虚拟机中，即时编译才是虚拟机执行代码的主要方式，赋null值在经过即时编译后一定会被当做无效操作消除掉，这也是使用这种方法的一个缺点。正确的做法应该是利用作用域来指导内存的回收。</p><blockquote><p>每个变量槽可存储数据类型在32位以内的变量，即boolean、byte、char、short、int、float、reference和returnAddress。<br>64位虚拟机变量槽的大小为64位，但需要使用对齐和补白使得在外观上看起来与32位虚拟机一致。<br>对于reference变量，通过它可以做两件事：</p><ol><li>根据引用直接或间接地查找到对象在Java堆中的数据存放的<strong>起始地址或索引</strong></li><li>根据引用直接或间接地查找到对象所属数据类型在方法区中的存储的<strong>类型信息</strong></li></ol></blockquote><h2 id="2-操作数栈"><a href="#2-操作数栈" class="headerlink" title="2.操作数栈"></a>2.操作数栈</h2><p>在算术运算和方法参数传递时，会用到操作数栈。如执行iadd命令时，会将操作数栈的前两个元素出栈并相加，结果重新存入栈中。栈中元素类型与字节码指令序列的匹配在类校验阶段的数据流分析中得到保证。</p><p><strong>栈帧重叠：</strong><br>主要用于参数传递。两栈帧共用存放参数的空间，达到无须额外参数复制传递的效果。</p><img src="/JeckFS/2020/06/08/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA8/1.png" class="" title="This is 1-th image."><h2 id="3-动态连接"><a href="#3-动态连接" class="headerlink" title="3.动态连接"></a>3.动态连接</h2><p><strong>动态连接</strong>是在运行期由符号引用解析为直接引用的过程。<br>与动态连接相对的是静态解析，<strong>静态解析</strong>是在类加载阶段或者第一次使用的时候直接将符号引用转化为直接引用的过程。</p><h2 id="4-方法返回地址"><a href="#4-方法返回地址" class="headerlink" title="4.方法返回地址"></a>4.方法返回地址</h2><blockquote><p>明确一点：方法返回地址并不是方法的返回值。而是返回到主调用法下一个指令的执行位置。</p></blockquote><p>方法的返回有两种情况：<br><strong>正常调用完成</strong>时返回。方法返回地址为主调方法的PC计数器的值。返回的方法有返回值。<br><strong>异常调用完成</strong>时返回。返回地址通过异常表确定。返回的方法无返回值。</p><h2 id="5-附加信息"><a href="#5-附加信息" class="headerlink" title="5.附加信息"></a>5.附加信息</h2><p>存储与调试、性能收集相关的信息，这部分信息完全取决于具体的虚拟机实现。</p><h1 id="二、方法调用"><a href="#二、方法调用" class="headerlink" title="二、方法调用"></a>二、方法调用</h1><p>即确定调用的方法的哪个版本。有两种方法类确定，一是解析，二是分派。</p><h2 id="2-1解析"><a href="#2-1解析" class="headerlink" title="2.1解析"></a>2.1解析</h2><p>在编译期间就确定，类加载阶段完成符号引用到直接引用的解析，且方法版本唯一的方法。不同的指令解析不同的方法。这些方法都是非虚方法。</p><ul><li>invokestatic：用于调用静态方法</li><li>invokespecial：用于调用实例构造器<code>&lt;init&gt;()</code>、私有方法、父类中的方法</li><li>final方法(invokevirtual指令调用)</li></ul><blockquote><p>其他方法调用的指令</p><ul><li>invokevirtual：用于调用所有的虚方法。</li><li>invokeinterface：用于调用接口方法，会在运行时再确定一个实现该接口的对象。</li><li>invokedynamic：先在运行时动态解析出<strong>调用点限定符</strong>所引用的方法，然后再执行该方法。前面4条调用指令，分派逻辑都固化在Java虚拟机内部，而invokedynamic指令的分派逻辑是<strong>由用户设定的引导方法</strong>来决定的。</li></ul></blockquote><h2 id="2-2分派"><a href="#2-2分派" class="headerlink" title="2.2分派"></a>2.2分派</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.fenixsoft.polymorphic;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 方法静态分派演示</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> zzm</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StaticDispatch</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Human</span> &#123;&#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Man</span> <span class="keyword">extends</span> <span class="title class_">Human</span> &#123;&#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Woman</span> <span class="keyword">extends</span> <span class="title class_">Human</span> &#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayHello</span><span class="params">(Human guy)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello,guy!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayHello</span><span class="params">(Man guy)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello,gentleman!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayHello</span><span class="params">(Woman guy)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello,lady!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Human</span> <span class="variable">man</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Man</span>();</span><br><span class="line">        <span class="type">Human</span> <span class="variable">woman</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Woman</span>();</span><br><span class="line">        <span class="type">StaticDispatch</span> <span class="variable">sr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StaticDispatch</span>();</span><br><span class="line">        sr.sayHello(man);</span><br><span class="line">        sr.sayHello(woman);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 运行结果</span></span><br><span class="line">hello,guy!</span><br><span class="line">hello,guy!</span><br></pre></td></tr></table></figure><p><code>Human man = new Man();</code><br><strong>静态类型</strong>：Human(左侧类型)。<br><strong>实际类型</strong>：Man(右侧类型)。<br>由静态类型决定方法调用版本的叫静态分派；由实际类型确定方法调用版本的叫动态分派。</p><p>静态类型与实际类型都可以在程序中发生变化。静态类型的变化是在编译期可知的，而实际类型的变化结果在运行期才能确定。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实际类型变化</span></span><br><span class="line"><span class="type">Human</span> <span class="variable">human</span> <span class="operator">=</span> (<span class="keyword">new</span> <span class="title class_">Random</span>()).nextBoolean() ? <span class="keyword">new</span> <span class="title class_">Man</span>() : <span class="keyword">new</span> <span class="title class_">Woman</span>();</span><br><span class="line"><span class="comment">// 静态类型变化</span></span><br><span class="line">sr.sayHello((Man) human)</span><br><span class="line">sr.sayHello((Woman) human)</span><br></pre></td></tr></table></figure><br>静态分派的一个应用：<strong>方法重载</strong>。<br>动态分派的一个应用：<strong>方法重写</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.fenixsoft.polymorphic;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 方法动态分派演示</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> zzm</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DynamicDispatch</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Human</span> &#123;</span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">sayHello</span><span class="params">()</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Man</span> <span class="keyword">extends</span> <span class="title class_">Human</span> &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">sayHello</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;man say hello&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Woman</span> <span class="keyword">extends</span> <span class="title class_">Human</span> &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">sayHello</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;woman say hello&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Human</span> <span class="variable">man</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Man</span>();</span><br><span class="line">        <span class="type">Human</span> <span class="variable">woman</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Woman</span>();</span><br><span class="line">        man.sayHello();</span><br><span class="line">        woman.sayHello();</span><br><span class="line">        man = <span class="keyword">new</span> <span class="title class_">Woman</span>();</span><br><span class="line">        man.sayHello();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 运行结果</span></span><br><span class="line">man say hello</span><br><span class="line">woman say hello</span><br><span class="line">woman say hello</span><br></pre></td></tr></table></figure><p>与动态分派相关的指令为invokevirtual，其解析过程为：</p><ol><li>在程序<strong>运行时</strong>，找到<strong>操作数栈顶的第一个元素</strong>所指向的<strong>对象</strong>的实际类型，记为C。</li><li>如果在类型C中找到与常量中的<strong>描述符和简单名称</strong>都相符的方法，则进行访问<strong>权限校验</strong>，如果通过则返回这个方法的直接引用，查找过程结束；不通过则返回java.lang.IllegalAccessError异常。</li><li>否则，按照继承关系<strong>从下往上</strong>依次对C的各个<strong>父类</strong>进行第二步的搜索和验证过程。</li><li>如果始终没有找到合适的方法，则抛出java.lang.AbstractMethodError异常。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.fenixsoft.polymorphic;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 字段不参与多态</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> zzm</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FieldHasNoPolymorphic</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Father</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="variable">money</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Father</span><span class="params">()</span> &#123;</span><br><span class="line">            money = <span class="number">2</span>;</span><br><span class="line">            showMeTheMoney();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showMeTheMoney</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;I am Father, i have $&quot;</span> + money);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_">Father</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="variable">money</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Son</span><span class="params">()</span> &#123;</span><br><span class="line">            money = <span class="number">4</span>;</span><br><span class="line">            showMeTheMoney();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showMeTheMoney</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;I am Son, i have $&quot;</span> + money);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Father</span> <span class="variable">gay</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Son</span>();</span><br><span class="line">        System.out.println(<span class="string">&quot;This gay has $&quot;</span> + gay.money);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 运行结果</span></span><br><span class="line">I am Son, i have $<span class="number">0</span></span><br><span class="line">I am Son, i have $<span class="number">4</span></span><br><span class="line">This gay has $<span class="number">2</span></span><br></pre></td></tr></table></figure><p>new Son()时，先隐式调用父类Father类的构造函数，设置父类的money=2，然后调用虚方法showMeTheMoney()，因为是虚方法所以叼哦用的是Son类中的showMeTheMoney()，此时Son类的money仍然是0。父类构造方法结束后，执行子类的构造方法，将Son的money=4，并调用Son类的showMeTheMoney()输出money为4。</p><p><strong>单分派与多分派：</strong></p><blockquote><p><strong>宗量</strong>：方法的接收者(方法调用的对象)与方法的参数统称为方法的宗量。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 单分派、多分派演示</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> zzm</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dispatch</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">QQ</span> &#123;&#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">_360</span> &#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Father</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hardChoice</span><span class="params">(QQ arg)</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;father choose qq&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hardChoice</span><span class="params">(_360 arg)</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;father choose 360&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_">Father</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hardChoice</span><span class="params">(QQ arg)</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;son choose qq&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hardChoice</span><span class="params">(_360 arg)</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;son choose 360&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Father</span> <span class="variable">father</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Father</span>();</span><br><span class="line">        <span class="type">Father</span> <span class="variable">son</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Son</span>();</span><br><span class="line">        father.hardChoice(<span class="keyword">new</span> <span class="title class_">_360</span>());</span><br><span class="line">        son.hardChoice(<span class="keyword">new</span> <span class="title class_">QQ</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 运行结果</span></span><br><span class="line">father choose <span class="number">360</span></span><br><span class="line">son choose qq</span><br></pre></td></tr></table></figure><p>该程序方法调用版本的确定过程包括两个，一个是静态分派的过程，一个是动态分派的过程。在静态分派(编译阶段的选择过程)中，根据静态类型是Father还是Son，以及方法参数是QQ还是360，确定静态分派的选择结果为<code>Father::hardChoice(360)</code>及<code>Father.hardChoice(QQ)</code>。由于过程中涉及两个宗量，所以<strong>Java语言的静态分派是多分派类型</strong>。<br>在动态分派(程序运行阶段)中，当执行<code>son.hardChoice(new QQ())</code>时，执行的方法的签名(hardChoice(QQ))已经在静态分派过程中确定，接下来只由该方法的接受者是Father还是Son决定到底执行哪个版本的方法。这个过程只由一个宗量(方法接受者)作为选择依据，所以<strong>Java语言的动态分派是单分派</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line">Classfile /home/yfs/Dispatch.<span class="keyword">class</span></span><br><span class="line">  <span class="title class_">Last</span> modified <span class="number">2020</span>-<span class="number">6</span>-<span class="number">8</span>; size <span class="number">565</span> bytes</span><br><span class="line">  MD5 checksum 4f72a7312037b578d2b954b835a8d81f</span><br><span class="line">  Compiled from <span class="string">&quot;Dispatch.java&quot;</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dispatch</span></span><br><span class="line">  minor version: <span class="number">0</span></span><br><span class="line">  major version: <span class="number">52</span></span><br><span class="line">  flags: ACC_PUBLIC, ACC_SUPER</span><br><span class="line">Constant pool:</span><br><span class="line">   #<span class="number">1</span> = Methodref          #<span class="number">13.</span>#<span class="number">27</span>        <span class="comment">// java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">   #<span class="number">2</span> = Class              #<span class="number">28</span>            <span class="comment">// Dispatch$Father</span></span><br><span class="line">   #<span class="number">3</span> = Methodref          #<span class="number">2.</span>#<span class="number">27</span>         <span class="comment">// Dispatch$Father.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">   #<span class="number">4</span> = Class              #<span class="number">29</span>            <span class="comment">// Dispatch$Son</span></span><br><span class="line">   #<span class="number">5</span> = Methodref          #<span class="number">4.</span>#<span class="number">27</span>         <span class="comment">// Dispatch$Son.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">   #<span class="number">6</span> = Class              #<span class="number">30</span>            <span class="comment">// Dispatch$_360</span></span><br><span class="line">   #<span class="number">7</span> = Methodref          #<span class="number">6.</span>#<span class="number">27</span>         <span class="comment">// Dispatch$_360.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">   #<span class="number">8</span> = Methodref          #<span class="number">2.</span>#<span class="number">31</span>         <span class="comment">// Dispatch$Father.hardChoice:(LDispatch$_360;)V</span></span><br><span class="line">   #<span class="number">9</span> = Class              #<span class="number">32</span>            <span class="comment">// Dispatch$QQ</span></span><br><span class="line">  #<span class="number">10</span> = Methodref          #<span class="number">9.</span>#<span class="number">27</span>         <span class="comment">// Dispatch$QQ.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">  #<span class="number">11</span> = Methodref          #<span class="number">2.</span>#<span class="number">33</span>         <span class="comment">// Dispatch$Father.hardChoice:(LDispatch$QQ;)V</span></span><br><span class="line">  #<span class="number">12</span> = Class              #<span class="number">34</span>            <span class="comment">// Dispatch</span></span><br><span class="line">  #<span class="number">13</span> = Class              #<span class="number">35</span>            <span class="comment">// java/lang/Object</span></span><br><span class="line">  #<span class="number">14</span> = Utf8               Son</span><br><span class="line">  #<span class="number">15</span> = Utf8               InnerClasses</span><br><span class="line">  #<span class="number">16</span> = Utf8               Father</span><br><span class="line">  #<span class="number">17</span> = Utf8               _360</span><br><span class="line">  #<span class="number">18</span> = Utf8               QQ</span><br><span class="line">  #<span class="number">19</span> = Utf8               &lt;init&gt;</span><br><span class="line">  #<span class="number">20</span> = Utf8               ()V</span><br><span class="line">  #<span class="number">21</span> = Utf8               Code</span><br><span class="line">  #<span class="number">22</span> = Utf8               LineNumberTable</span><br><span class="line">  #<span class="number">23</span> = Utf8               main</span><br><span class="line">  #<span class="number">24</span> = Utf8               ([Ljava/lang/String;)V</span><br><span class="line">  #<span class="number">25</span> = Utf8               SourceFile</span><br><span class="line">  #<span class="number">26</span> = Utf8               Dispatch.java</span><br><span class="line">  #<span class="number">27</span> = NameAndType        #<span class="number">19</span>:#<span class="number">20</span>        <span class="comment">// &quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">  #<span class="number">28</span> = Utf8               Dispatch$Father</span><br><span class="line">  #<span class="number">29</span> = Utf8               Dispatch$Son</span><br><span class="line">  #<span class="number">30</span> = Utf8               Dispatch$_360</span><br><span class="line">  #<span class="number">31</span> = NameAndType        #<span class="number">36</span>:#<span class="number">37</span>        <span class="comment">// hardChoice:(LDispatch$_360;)V</span></span><br><span class="line">  #<span class="number">32</span> = Utf8               Dispatch$QQ</span><br><span class="line">  #<span class="number">33</span> = NameAndType        #<span class="number">36</span>:#<span class="number">38</span>        <span class="comment">// hardChoice:(LDispatch$QQ;)V</span></span><br><span class="line">  #<span class="number">34</span> = Utf8               Dispatch</span><br><span class="line">  #<span class="number">35</span> = Utf8               java/lang/Object</span><br><span class="line">  #<span class="number">36</span> = Utf8               hardChoice</span><br><span class="line">  #<span class="number">37</span> = Utf8               (LDispatch$_360;)V</span><br><span class="line">  #<span class="number">38</span> = Utf8               (LDispatch$QQ;)V</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">Dispatch</span><span class="params">()</span>;</span><br><span class="line">    descriptor: ()V</span><br><span class="line">    flags: ACC_PUBLIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">1</span>, locals=<span class="number">1</span>, args_size=<span class="number">1</span></span><br><span class="line">         <span class="number">0</span>: aload_0</span><br><span class="line">         <span class="number">1</span>: invokespecial #<span class="number">1</span>                  <span class="comment">// Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">         <span class="number">4</span>: <span class="keyword">return</span></span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">1</span>: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(java.lang.String[])</span>;</span><br><span class="line">    descriptor: ([Ljava/lang/String;)V</span><br><span class="line">    flags: ACC_PUBLIC, ACC_STATIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">3</span>, locals=<span class="number">3</span>, args_size=<span class="number">1</span></span><br><span class="line">         <span class="number">0</span>: <span class="keyword">new</span>           #<span class="number">2</span>                  <span class="comment">// class Dispatch$Father</span></span><br><span class="line">         <span class="number">3</span>: dup</span><br><span class="line">         <span class="number">4</span>: invokespecial #<span class="number">3</span>                  <span class="comment">// Method Dispatch$Father.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">         <span class="number">7</span>: astore_1</span><br><span class="line">         <span class="number">8</span>: <span class="keyword">new</span>           #<span class="number">4</span>                  <span class="comment">// class Dispatch$Son</span></span><br><span class="line">        <span class="number">11</span>: dup</span><br><span class="line">        <span class="number">12</span>: invokespecial #<span class="number">5</span>                  <span class="comment">// Method Dispatch$Son.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">        <span class="number">15</span>: astore_2</span><br><span class="line">        <span class="number">16</span>: aload_1</span><br><span class="line">        <span class="number">17</span>: <span class="keyword">new</span>           #<span class="number">6</span>                  <span class="comment">// class Dispatch$_360</span></span><br><span class="line">        <span class="number">20</span>: dup</span><br><span class="line">        <span class="number">21</span>: invokespecial #<span class="number">7</span>                  <span class="comment">// Method Dispatch$_360.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">        <span class="number">24</span>: invokevirtual #<span class="number">8</span>                  <span class="comment">// Method Dispatch$Father.hardChoice:(LDispatch$_360;)V</span></span><br><span class="line">        <span class="number">27</span>: aload_2</span><br><span class="line">        <span class="number">28</span>: <span class="keyword">new</span>           #<span class="number">9</span>                  <span class="comment">// class Dispatch$QQ</span></span><br><span class="line">        <span class="number">31</span>: dup</span><br><span class="line">        <span class="number">32</span>: invokespecial #<span class="number">10</span>                 <span class="comment">// Method Dispatch$QQ.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">        <span class="number">35</span>: invokevirtual #<span class="number">11</span>                 <span class="comment">// Method Dispatch$Father.hardChoice:(LDispatch$QQ;)V</span></span><br><span class="line">        <span class="number">38</span>: <span class="keyword">return</span></span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">21</span>: <span class="number">0</span></span><br><span class="line">        line <span class="number">22</span>: <span class="number">8</span></span><br><span class="line">        line <span class="number">23</span>: <span class="number">16</span></span><br><span class="line">        line <span class="number">24</span>: <span class="number">27</span></span><br><span class="line">        line <span class="number">25</span>: <span class="number">38</span></span><br><span class="line">&#125;</span><br><span class="line">SourceFile: <span class="string">&quot;Dispatch.java&quot;</span></span><br><span class="line">InnerClasses:</span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">static</span> #<span class="number">14</span>= #<span class="number">4</span> of #<span class="number">12</span>; <span class="comment">//Son=class Dispatch$Son of class Dispatch</span></span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">static</span> #<span class="number">16</span>= #<span class="number">2</span> of #<span class="number">12</span>; <span class="comment">//Father=class Dispatch$Father of class Dispatch</span></span><br><span class="line">     <span class="keyword">static</span> #<span class="number">17</span>= #<span class="number">6</span> of #<span class="number">12</span>; <span class="comment">//_360=class Dispatch$_360 of class Dispatch</span></span><br><span class="line">     <span class="keyword">static</span> #<span class="number">18</span>= #<span class="number">9</span> of #<span class="number">12</span>; <span class="comment">//QQ=class Dispatch$QQ of class Dispatch</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>从<code>javac -v Dispatch</code>反编译的代码中可以看到，静态编译产生了两个invokevirtual指令(行号为24，35)，即<code>Dispatch$Father.hardChoice:(LDispatch$_360;)V</code>，<code>Dispatch$Father.hardChoice:(LDispatch$QQ;)V</code>。分析为什么都是Father类下的？</p><p>稍微改下代码再重新编译看结果：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dispatch</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">QQ</span> &#123;&#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">_360</span> &#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Father</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hardChoice</span><span class="params">(QQ arg)</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;father choose qq&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hardChoice</span><span class="params">(_360 arg)</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;father choose 360&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_">Father</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hardChoice</span><span class="params">(QQ arg)</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;son choose qq&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hardChoice</span><span class="params">(_360 arg)</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;son choose 360&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Father</span> <span class="variable">father</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Father</span>();</span><br><span class="line">        <span class="comment">// 将Father son = new Son(); 替换为Son son = new Son(); </span></span><br><span class="line">        <span class="type">Son</span> <span class="variable">son</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Son</span>(); </span><br><span class="line">        father.hardChoice(<span class="keyword">new</span> <span class="title class_">_360</span>());</span><br><span class="line">        son.hardChoice(<span class="keyword">new</span> <span class="title class_">QQ</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>反编译结果：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line">Classfile /home/yfs/Dispatch.<span class="keyword">class</span></span><br><span class="line">  <span class="title class_">Last</span> modified <span class="number">2020</span>-<span class="number">6</span>-<span class="number">8</span>; size <span class="number">565</span> bytes</span><br><span class="line">  MD5 checksum cc43fca7f12a5411f67ddc079e7bd622</span><br><span class="line">  Compiled from <span class="string">&quot;Dispatch.java&quot;</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dispatch</span></span><br><span class="line">  minor version: <span class="number">0</span></span><br><span class="line">  major version: <span class="number">52</span></span><br><span class="line">  flags: ACC_PUBLIC, ACC_SUPER</span><br><span class="line">Constant pool:</span><br><span class="line">   #<span class="number">1</span> = Methodref          #<span class="number">13.</span>#<span class="number">27</span>        <span class="comment">// java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">   #<span class="number">2</span> = Class              #<span class="number">28</span>            <span class="comment">// Dispatch$Father</span></span><br><span class="line">   #<span class="number">3</span> = Methodref          #<span class="number">2.</span>#<span class="number">27</span>         <span class="comment">// Dispatch$Father.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">   #<span class="number">4</span> = Class              #<span class="number">29</span>            <span class="comment">// Dispatch$Son</span></span><br><span class="line">   #<span class="number">5</span> = Methodref          #<span class="number">4.</span>#<span class="number">27</span>         <span class="comment">// Dispatch$Son.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">   #<span class="number">6</span> = Class              #<span class="number">30</span>            <span class="comment">// Dispatch$_360</span></span><br><span class="line">   #<span class="number">7</span> = Methodref          #<span class="number">6.</span>#<span class="number">27</span>         <span class="comment">// Dispatch$_360.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">   #<span class="number">8</span> = Methodref          #<span class="number">2.</span>#<span class="number">31</span>         <span class="comment">// Dispatch$Father.hardChoice:(LDispatch$_360;)V</span></span><br><span class="line">   #<span class="number">9</span> = Class              #<span class="number">32</span>            <span class="comment">// Dispatch$QQ</span></span><br><span class="line">  #<span class="number">10</span> = Methodref          #<span class="number">9.</span>#<span class="number">27</span>         <span class="comment">// Dispatch$QQ.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">  #<span class="number">11</span> = Methodref          #<span class="number">4.</span>#<span class="number">33</span>         <span class="comment">// Dispatch$Son.hardChoice:(LDispatch$QQ;)V</span></span><br><span class="line">  #<span class="number">12</span> = Class              #<span class="number">34</span>            <span class="comment">// Dispatch</span></span><br><span class="line">  #<span class="number">13</span> = Class              #<span class="number">35</span>            <span class="comment">// java/lang/Object</span></span><br><span class="line">  #<span class="number">14</span> = Utf8               Son</span><br><span class="line">  #<span class="number">15</span> = Utf8               InnerClasses</span><br><span class="line">  #<span class="number">16</span> = Utf8               Father</span><br><span class="line">  #<span class="number">17</span> = Utf8               _360</span><br><span class="line">  #<span class="number">18</span> = Utf8               QQ</span><br><span class="line">  #<span class="number">19</span> = Utf8               &lt;init&gt;</span><br><span class="line">  #<span class="number">20</span> = Utf8               ()V</span><br><span class="line">  #<span class="number">21</span> = Utf8               Code</span><br><span class="line">  #<span class="number">22</span> = Utf8               LineNumberTable</span><br><span class="line">  #<span class="number">23</span> = Utf8               main</span><br><span class="line">  #<span class="number">24</span> = Utf8               ([Ljava/lang/String;)V</span><br><span class="line">  #<span class="number">25</span> = Utf8               SourceFile</span><br><span class="line">  #<span class="number">26</span> = Utf8               Dispatch.java</span><br><span class="line">  #<span class="number">27</span> = NameAndType        #<span class="number">19</span>:#<span class="number">20</span>        <span class="comment">// &quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">  #<span class="number">28</span> = Utf8               Dispatch$Father</span><br><span class="line">  #<span class="number">29</span> = Utf8               Dispatch$Son</span><br><span class="line">  #<span class="number">30</span> = Utf8               Dispatch$_360</span><br><span class="line">  #<span class="number">31</span> = NameAndType        #<span class="number">36</span>:#<span class="number">37</span>        <span class="comment">// hardChoice:(LDispatch$_360;)V</span></span><br><span class="line">  #<span class="number">32</span> = Utf8               Dispatch$QQ</span><br><span class="line">  #<span class="number">33</span> = NameAndType        #<span class="number">36</span>:#<span class="number">38</span>        <span class="comment">// hardChoice:(LDispatch$QQ;)V</span></span><br><span class="line">  #<span class="number">34</span> = Utf8               Dispatch</span><br><span class="line">  #<span class="number">35</span> = Utf8               java/lang/Object</span><br><span class="line">  #<span class="number">36</span> = Utf8               hardChoice</span><br><span class="line">  #<span class="number">37</span> = Utf8               (LDispatch$_360;)V</span><br><span class="line">  #<span class="number">38</span> = Utf8               (LDispatch$QQ;)V</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">Dispatch</span><span class="params">()</span>;</span><br><span class="line">    descriptor: ()V</span><br><span class="line">    flags: ACC_PUBLIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">1</span>, locals=<span class="number">1</span>, args_size=<span class="number">1</span></span><br><span class="line">         <span class="number">0</span>: aload_0</span><br><span class="line">         <span class="number">1</span>: invokespecial #<span class="number">1</span>                  <span class="comment">// Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">         <span class="number">4</span>: <span class="keyword">return</span></span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">1</span>: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(java.lang.String[])</span>;</span><br><span class="line">    descriptor: ([Ljava/lang/String;)V</span><br><span class="line">    flags: ACC_PUBLIC, ACC_STATIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">3</span>, locals=<span class="number">3</span>, args_size=<span class="number">1</span></span><br><span class="line">         <span class="number">0</span>: <span class="keyword">new</span>           #<span class="number">2</span>                  <span class="comment">// class Dispatch$Father</span></span><br><span class="line">         <span class="number">3</span>: dup</span><br><span class="line">         <span class="number">4</span>: invokespecial #<span class="number">3</span>                  <span class="comment">// Method Dispatch$Father.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">         <span class="number">7</span>: astore_1</span><br><span class="line">         <span class="number">8</span>: <span class="keyword">new</span>           #<span class="number">4</span>                  <span class="comment">// class Dispatch$Son</span></span><br><span class="line">        <span class="number">11</span>: dup</span><br><span class="line">        <span class="number">12</span>: invokespecial #<span class="number">5</span>                  <span class="comment">// Method Dispatch$Son.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">        <span class="number">15</span>: astore_2</span><br><span class="line">        <span class="number">16</span>: aload_1</span><br><span class="line">        <span class="number">17</span>: <span class="keyword">new</span>           #<span class="number">6</span>                  <span class="comment">// class Dispatch$_360</span></span><br><span class="line">        <span class="number">20</span>: dup</span><br><span class="line">        <span class="number">21</span>: invokespecial #<span class="number">7</span>                  <span class="comment">// Method Dispatch$_360.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">        <span class="number">24</span>: invokevirtual #<span class="number">8</span>                  <span class="comment">// Method Dispatch$Father.hardChoice:(LDispatch$_360;)V</span></span><br><span class="line">        <span class="number">27</span>: aload_2</span><br><span class="line">        <span class="number">28</span>: <span class="keyword">new</span>           #<span class="number">9</span>                  <span class="comment">// class Dispatch$QQ</span></span><br><span class="line">        <span class="number">31</span>: dup</span><br><span class="line">        <span class="number">32</span>: invokespecial #<span class="number">10</span>                 <span class="comment">// Method Dispatch$QQ.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">        <span class="number">35</span>: invokevirtual #<span class="number">11</span>                 <span class="comment">// Method Dispatch$Son.hardChoice:(LDispatch$QQ;)V</span></span><br><span class="line">        <span class="number">38</span>: <span class="keyword">return</span></span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">21</span>: <span class="number">0</span></span><br><span class="line">        line <span class="number">22</span>: <span class="number">8</span></span><br><span class="line">        line <span class="number">23</span>: <span class="number">16</span></span><br><span class="line">        line <span class="number">24</span>: <span class="number">27</span></span><br><span class="line">        line <span class="number">25</span>: <span class="number">38</span></span><br><span class="line">&#125;</span><br><span class="line">SourceFile: <span class="string">&quot;Dispatch.java&quot;</span></span><br><span class="line">InnerClasses:</span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">static</span> #<span class="number">14</span>= #<span class="number">4</span> of #<span class="number">12</span>; <span class="comment">//Son=class Dispatch$Son of class Dispatch</span></span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">static</span> #<span class="number">16</span>= #<span class="number">2</span> of #<span class="number">12</span>; <span class="comment">//Father=class Dispatch$Father of class Dispatch</span></span><br><span class="line">     <span class="keyword">static</span> #<span class="number">17</span>= #<span class="number">6</span> of #<span class="number">12</span>; <span class="comment">//_360=class Dispatch$_360 of class Dispatch</span></span><br><span class="line">     <span class="keyword">static</span> #<span class="number">18</span>= #<span class="number">9</span> of #<span class="number">12</span>; <span class="comment">//QQ=class Dispatch$QQ of class Dispatch</span></span><br></pre></td></tr></table></figure><br>生成的invokevirtual指令的参数分别为<code>Dispatch$Father.hardChoice:(LDispatch$_360;)V</code>，<code>Dispatch$Son.hardChoice:(LDispatch$QQ;)V</code>。一个Father的一个Son的，足以证明静态分派过程中是根据方法接受者和参数两个总量进行确定方法的调用版本的。</p><p><strong>虚拟机动态分派的实现</strong><br>使用虚方法表确定具体调用哪个版本的方法。虚方法表中存放着各个方法的<strong>实际入口地址</strong>。如果某个方法在子类中<strong>没有被重写</strong>，那子类的虚方法表中的地址入口和父类相同方法的地址入口是一致的，都指向父类的实现入口。如果子类中<strong>重写了</strong>这个方法，子类虚方法表中的地址也会被<strong>替换</strong>为指向子类实现版本的入口地址。</p><img src="/JeckFS/2020/06/08/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA8/2.png" class="" title="This is 2-th image."><h1 id="三、动态类型语言支持"><a href="#三、动态类型语言支持" class="headerlink" title="三、动态类型语言支持"></a>三、动态类型语言支持</h1><p><strong>什么是动态类型语言？</strong></p><ul><li>关键特征是类型检查的主题过程是运行期而不是编译器进行的。</li><li>变量无类型而变量值才有类型。</li></ul><p><strong>运行时异常与连接时异常</strong><br>运行时异常：只要代码不执行到这一行就不会出现问题。<br>连接时异常：不管是否会被执行到，在类加载时照样会抛出异常。(Java的连接过程在类加载阶段。)</p><p><strong>类型检查</strong><br><code>obj.println(&quot;hello world&quot;);</code></p><ul><li><p>假设在Java中，obj的实际类型是确定的并在编译期写入字节码文件。<br>如<code>invokevirtual #4; //Method java/io/PrintStream.println:(Ljava/lang/String;)V</code><br><strong>即方法的符号引用在编译时产生。</strong></p></li><li><p>在动态类型语言中，无论obj是何种类型，只要该类型的方法定义中包含了pritnln(String)方法，便可调用成功。<br><strong>即动态类型语言在运行期确定方法的接受者。</strong></p></li></ul><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在动态类型语言中是可运行的，静态类型语言中不可以。</span></span><br><span class="line"><span class="type">var</span> <span class="variable">arrays</span> <span class="operator">=</span> &#123;<span class="string">&quot;abc&quot;</span>, <span class="keyword">new</span> <span class="title class_">ObjectX</span>(), <span class="number">123</span>, Dog, Cat, Car..&#125;</span><br><span class="line"><span class="keyword">for</span>(item in arrays)&#123;</span><br><span class="line">  item.sayHello();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><p><strong>Java在虚拟机层面上实现动态类型语言相关特性的方式：</strong></p><ol><li>java.lang.invoke包(方法句柄MethodHandle，类似于C/C++的指针)</li></ol><p>Java MethodHandle与C/C++指针的对比：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// C/C++</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(<span class="type">int</span> list[], const <span class="type">int</span> size, <span class="type">int</span> (*compare)</span><span class="params">(<span class="type">int</span>, <span class="type">int</span>)</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Java</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(List list, MethodHandle compare)</span></span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.invoke.MethodHandles.lookup;</span><br><span class="line"><span class="keyword">import</span> java.lang.invoke.MethodHandle;</span><br><span class="line"><span class="keyword">import</span> java.lang.invoke.MethodType;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* JSR 292 MethodHandle基础用法演示</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> zzm</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MethodHandleTest</span> &#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">ClassA</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">println</span><span class="params">(String s)</span> &#123;</span><br><span class="line">      System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">    <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> System.currentTimeMillis() % <span class="number">2</span> == <span class="number">0</span> ? System.out : <span class="keyword">new</span> <span class="title class_">ClassA</span>();</span><br><span class="line">    <span class="comment">// 无论obj最终是哪个实现类，下面这句都能正确调用到println方法。</span></span><br><span class="line">    getPrintlnMH(obj).invokeExact(<span class="string">&quot;icyfenix&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> MethodHandle <span class="title function_">getPrintlnMH</span><span class="params">(Object reveiver)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">    <span class="comment">// MethodType：代表“方法类型”，包含了方法的返回值（methodType()的第一个参数）</span></span><br><span class="line">    <span class="comment">// 和具体参数（methodType()第二个及以后的参数）。</span></span><br><span class="line">    <span class="type">MethodType</span> <span class="variable">mt</span> <span class="operator">=</span> MethodType.methodType(<span class="keyword">void</span>.class, String.class);</span><br><span class="line">    <span class="comment">// lookup()方法来自于MethodHandles.lookup，这句的作用是在指定类中查找符合</span></span><br><span class="line">    <span class="comment">// 给定的方法名称、方法类型，并且符合调用权限的方法句柄。</span></span><br><span class="line">    <span class="comment">// 因为这里调用的是一个虚方法，按照Java语言的规则，方法第一个参数是隐式的，代表</span></span><br><span class="line">    <span class="comment">// 该方法的接收者，也即this指向的对象，这个参数以前是放在参数列表中进行传递，</span></span><br><span class="line">    <span class="comment">// 现在提供了bindTo()方法来完成这件事情。</span></span><br><span class="line">    <span class="keyword">return</span> lookup().findVirtual(reveiver.getClass(), <span class="string">&quot;println&quot;</span>, mt).bindTo(reveiver);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  getPrintlnMH()<strong>模拟了invokevirtual指令的执行过程</strong>，区别是分派逻辑由用户设计的Java方法实现，该方法的返回值(MethodHandle对象)可作为最终调用方法的一个引用。</p><p>  <strong>MethodHande与反射的异同点：</strong></p><ul><li>反射和MethodHandle本质上都是模拟方法调用，反射是在Java代码层次模拟方法调用；MethodHandle是在字节码层次模拟方法调用。MethodHandles.Lookup中的findStatic(),findVirtual(),findSpecial()对应这invokestatic，invokevirtual(以及invokeinterface)和invokespecial指令的权限校验行为。</li><li>反射是重量级的，MethodHandle是轻量级的。反射了方法的信息、执行权限等运行期信息，MethodHandle仅包含执行该方法的相关信息。</li><li>反射API只为Java服务，MethodHandle可服务于所有Java虚拟机之上的语言，并不但是Java语言。</li></ul><ol><li><p>invokedynamic指令<br>每一处invokedynamic指令的位置称为一个<strong>动态调用点</strong>，其参数为CONSTANT_InvokeDynamic_info常量，该常量包含了引导方法、方法类型(MethodType)、名称。<strong>引导方法</strong>(bootsttrap method)存放在BootstrapMethods属性中，且返回值规定是代表了真正要执行的目标方法调用的java.lang.invoke.CallSite对象。</p><p>invokedynamic指令主要用来实现Lambda表示式和接口默认方法。</p><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.invoke.MethodHandles.lookup;</span><br><span class="line"><span class="keyword">import</span> java.lang.invoke.CallSite;</span><br><span class="line"><span class="keyword">import</span> java.lang.invoke.ConstantCallSite;</span><br><span class="line"><span class="keyword">import</span> java.lang.invoke.MethodHandle;</span><br><span class="line"><span class="keyword">import</span> java.lang.invoke.MethodHandles;</span><br><span class="line"><span class="keyword">import</span> java.lang.invoke.MethodType;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InvokeDynamicTest</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">    INDY_BootstrapMethod().invokeExact(<span class="string">&quot;icyfenix&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testMethod</span><span class="params">(String s)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;hello String:&quot;</span> + s);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> CallSite <span class="title function_">BootstrapMethod</span><span class="params">(MethodHandles.Lookup lookup, String name, MethodType mt)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ConstantCallSite</span>(lookup.findStatic(InvokeDynamicTest.class, name, mt));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> MethodType <span class="title function_">MT_BootstrapMethod</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> MethodType.fromMethodDescriptorString(<span class="string">&quot;(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String; Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> MethodHandle <span class="title function_">MH_BootstrapMethod</span><span class="params">()</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">    <span class="keyword">return</span> lookup().findStatic(InvokeDynamicTest.class, <span class="string">&quot;BootstrapMethod&quot;</span>, MT_BootstrapMethod());</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> MethodHandle <span class="title function_">INDY_BootstrapMethod</span><span class="params">()</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">    <span class="type">CallSite</span> <span class="variable">cs</span> <span class="operator">=</span> (CallSite) MH_BootstrapMethod().invokeWithArguments(lookup(), <span class="string">&quot;testMethod&quot;</span>,MethodType.fromMethodDescriptorString(<span class="string">&quot;(Ljava/lang/String;)V&quot;</span>, <span class="literal">null</span>));</span><br><span class="line">    <span class="keyword">return</span> cs.dynamicInvoker();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 转化为字节码后</span></span><br><span class="line">Constant pool:</span><br><span class="line">  #<span class="number">121</span> = NameAndType #<span class="number">33</span>:#<span class="number">30</span> <span class="comment">// testMethod:(Ljava/lang/String;)V</span></span><br><span class="line">  #<span class="number">123</span> = InvokeDynamic #<span class="number">0</span>:#<span class="number">121</span> <span class="comment">// #0:testMethod:(Ljava/lang/String;)V</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(java.lang.String[])</span> <span class="keyword">throws</span> java.lang.Throwable;</span><br><span class="line">  Code:</span><br><span class="line">    stack=<span class="number">2</span>, locals=<span class="number">1</span>, args_size=<span class="number">1</span></span><br><span class="line">    <span class="number">0</span>: ldc #<span class="number">23</span> <span class="comment">// String abc</span></span><br><span class="line">    <span class="number">2</span>: invokedynamic #<span class="number">123</span>, <span class="number">0</span> <span class="comment">// InvokeDynamic #0:testMethod: (Ljava/lang/String;)V</span></span><br><span class="line">    <span class="number">7</span>: nop</span><br><span class="line">    <span class="number">8</span>: <span class="keyword">return</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> java.lang.invoke.CallSite <span class="title function_">BootstrapMethod</span><span class="params">(java.lang.invoke.Method Handles$Lookup, java.lang.String, java.lang.invoke.MethodType)</span> <span class="keyword">throws</span> java.lang.Throwable;</span><br><span class="line">  Code:</span><br><span class="line">    stack=<span class="number">6</span>, locals=<span class="number">3</span>, args_size=<span class="number">3</span></span><br><span class="line">    <span class="number">0</span>: <span class="keyword">new</span> #<span class="number">63</span> <span class="comment">// class java/lang/invoke/ConstantCallSite</span></span><br><span class="line">    <span class="number">3</span>: dup</span><br><span class="line">    <span class="number">4</span>: aload_0</span><br><span class="line">    <span class="number">5</span>: ldc #<span class="number">1</span> <span class="comment">// class org/fenixsoft/InvokeDynamicTest</span></span><br><span class="line">    <span class="number">7</span>: aload_1</span><br><span class="line">    <span class="number">8</span>: aload_2</span><br><span class="line">    <span class="number">9</span>: invokevirtual #<span class="number">65</span> <span class="comment">// Method java/lang/invoke/MethodHandles$ Lookup.findStatic:(Ljava/lang/Class;Ljava/ lang/String;Ljava/lang/invoke/Method Type;)Ljava/lang/invoke/MethodHandle;</span></span><br><span class="line">    <span class="number">12</span>: invokespecial #<span class="number">71</span> <span class="comment">// Method java/lang/invoke/ConstantCallSite. &quot;&lt;init&gt;&quot;:(Ljava/lang/invoke/MethodHandle;)V</span></span><br><span class="line">    <span class="number">15</span>: areturn</span><br></pre></td></tr></table></figure></li></ol><p><code>2: invokedynamic #123, 0 // InvokeDynamic #0:testMethod:(Ljava/lang/String;)V</code><br>从常量池中可见，第123项常量显示“#123=InvokeDynamic#0：#121”说明它是一项CONSTANT_InvokeDynamic_info类型常量，常量值中前面“#0”代表引导方法取Bootstrap Methods属性表的第0项（javap没有列出属性表的具体内容，不过示例中仅有一个引导方法，即BootstrapMethod()），而后面的“#121”代表引用第121项类型为CONSTANT_NameAndType_info的常量，从这个常量中可以获取到方法名称和描述符，即后面输出的“testMethod：(Ljava/lang/String；)V”。</p><p>BootstrapMethod()方法在Java源码中并不存在，是由INDY产生的，但是它的字节码很容易读懂，所有逻辑都是调用MethodHandles$Lookup的findStatic()方法，产生testMethod()方法的MethodHandle，然后用它创建一个ConstantCallSite对象。最后，这个对象返回给invokedynamic指令实现对testMethod()方法的调用，invokedynamic指令的调用过程到此就宣告完成了。</p><p><a href="https://www.cnblogs.com/chenpi/p/5503997.html">Java中静态类型检查是如何进行的</a></p><p><a href="https://blog.csdn.net/ghost_Programmer/article/details/51532064">运行时类型检查</a></p><p><strong>实战：改变方法分派规则(调用祖父类的方法)</strong><br>在Son类的thinking()方法中根本无法获取到一个实际类型是GrandFather的对象引用，而invokevirtual指令的分派逻辑是固定的，只能按照方法接收者的实际类型进行分派，这个逻辑完全固化在虚拟机中，程序员无法改变。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.invoke.MethodHandles.lookup;</span><br><span class="line"><span class="keyword">import</span> java.lang.invoke.MethodHandle;</span><br><span class="line"><span class="keyword">import</span> java.lang.invoke.MethodType;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">  <span class="keyword">class</span> <span class="title class_">GrandFather</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">thinking</span><span class="params">()</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;i am grandfather&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">class</span> <span class="title class_">Father</span> <span class="keyword">extends</span> <span class="title class_">GrandFather</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">thinking</span><span class="params">()</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;i am father&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_">Father</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">thinking</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">MethodType</span> <span class="variable">mt</span> <span class="operator">=</span> MethodType.methodType(<span class="keyword">void</span>.class);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">lookupImpl</span> <span class="operator">=</span> MethodHandles.Lookup.class.getDeclaredField(<span class="string">&quot;IMPL_LOOKUP&quot;</span>);</span><br><span class="line">        lookupImpl.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">MethodHandle</span> <span class="variable">mh</span> <span class="operator">=</span> ((MethodHandles.Lookup) lookupImpl.get(<span class="literal">null</span>)).findSpecial(GrandFather.class,<span class="string">&quot;thinking&quot;</span>, mt, GrandFather.class);</span><br><span class="line">        mh.invoke(<span class="built_in">this</span>);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    (<span class="keyword">new</span> <span class="title class_">Test</span>().<span class="keyword">new</span> <span class="title class_">Son</span>()).thinking();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="四、基于栈的字节码解释执行引擎"><a href="#四、基于栈的字节码解释执行引擎" class="headerlink" title="四、基于栈的字节码解释执行引擎"></a>四、基于栈的字节码解释执行引擎</h1><p><strong>基于栈的指令集架构</strong>：指的是指令为零地址指令。Java大部分指令都是零地址指令，所以javac编译器输出的字节码指令流基本上是一种基于栈的指令集架构。<br><strong>零地址指令</strong>有两种情况：一是无需操作数，另一种是操作数为默认的（隐含的），默认为操作数在寄存器中，指令可直接访问寄存器。</p><p>基于栈的解释器执行过程：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">calc</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">  <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">200</span>;</span><br><span class="line">  <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">300</span>;</span><br><span class="line">  <span class="keyword">return</span> (a + b) * c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 编译后的字节码文件</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">calc</span><span class="params">()</span>;</span><br><span class="line">  Code:</span><br><span class="line">    Stack=<span class="number">2</span>, Locals=<span class="number">4</span>, Args_size=<span class="number">1</span></span><br><span class="line">    <span class="number">0</span>: bipush <span class="number">100</span></span><br><span class="line">    <span class="number">2</span>: istore_1</span><br><span class="line">    <span class="number">3</span>: sipush <span class="number">200</span></span><br><span class="line">    <span class="number">6</span>: istore_2</span><br><span class="line">    <span class="number">7</span>: sipush <span class="number">300</span></span><br><span class="line">    <span class="number">10</span>: istore_3</span><br><span class="line">    <span class="number">11</span>: iload_1</span><br><span class="line">    <span class="number">12</span>: iload_2</span><br><span class="line">    <span class="number">13</span>: iadd</span><br><span class="line">    <span class="number">14</span>: iload_3</span><br><span class="line">    <span class="number">15</span>: imul</span><br><span class="line">    <span class="number">16</span>: ireturn</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><img src="/JeckFS/2020/06/08/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA8/3.png" class="" title="This is 3-th image."><img src="/JeckFS/2020/06/08/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA8/4.png" class="" title="This is 4-th image."><img src="/JeckFS/2020/06/08/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA8/5.png" class="" title="This is 5-th image."><img src="/JeckFS/2020/06/08/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA8/6.png" class="" title="This is 6-th image."><img src="/JeckFS/2020/06/08/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA8/7.png" class="" title="This is 7-th image."><img src="/JeckFS/2020/06/08/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA8/8.png" class="" title="This is 8-th image."><img src="/JeckFS/2020/06/08/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA8/9.png" class="" title="This is 9-th image."><p>芝麻、杏干、豆类、花生、草蜢、黑巧克力 提供植物雌激素</p>]]></content>
      
      
      <categories>
          
          <category> 深入理解Java虚拟机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深入理解Java虚拟机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解Java虚拟机7</title>
      <link href="/JeckFS/2020/06/02/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA7/"/>
      <url>/JeckFS/2020/06/02/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA7/</url>
      
        <content type="html"><![CDATA[<blockquote class="pullquote mindmap mindmap-md"><ul><li>[类加载]<ul><li>1.类加载机制<ul><li>class文件—内存—数据校验、转换解析、初始化—虚拟机直接可用的Java类型</li></ul></li><li>2.类的生命周期<ul><li>1.加载</li><li>2.连接<ul><li>1.验证</li><li>2.准备</li><li>3.解析</li></ul></li><li>3.初始化</li><li>4.使用</li><li>5.卸载</li></ul></li><li>3.示例结论<ul><li>子类通过继承关系引用父类的静态字段，子类不会初始化</li><li>通过数组定义来引用类，不会导致该类的初始化</li><li>引用其他类的final常量，被引用类不会被初始化(常量传播优化)</li></ul></li><li>4.类加载过程<ul><li>1.加载<ul><li>主要任务<ul><li>通过类的全限定名获取二进制字节流</li><li>将字节流由静态存储结构转变为方法区的运行时数据结构</li><li>生成该类的访问入口(Class对象)</li></ul></li><li>数组类型的加载<ul><li>加载流程<ul><li>不断获取组件类型直到元素类型为止，元素类型为引用类型时为原始类型时情况不一样。</li></ul></li><li>数组类由虚拟机在内存中动态构造，其元素类型由类加载器加载完成。</li></ul></li></ul></li><li>2.验证<ul><li>文件格式验证<ul><li>验证的是字节码的格式</li><li>能正确解析字节流并存储于方法区内</li></ul></li><li>元数据验证<ul><li>类是否有父类</li><li>类继承是否合法</li><li>是否实现了抽象类或接口中的所有方法</li><li>类中字段是否与父类产生矛盾</li></ul></li><li>字节码验证 (验证的是Code属性)<ul><li>通过数据流分析控制流分析和校验分析，验证的是方法体</li><li>操作数栈的数据类型与指令代码匹配</li><li>保证跳转指令不会跳出方法体外</li><li>方法体中类型转化的合法性</li></ul></li><li>符号引用验证<ul><li>验证常量池中的符号引用</li><li>通过符号引用的的全限定名字符串是否找到该类</li><li>指定类中是否存在符合方法的字段描述符、简单名称所描述的方法和字段</li><li>当前类是否可访问符号引用中的类、字段、方法</li></ul></li></ul></li><li>3.准备<ul><li>为类变量分配内存并设置原始的初始值</li><li>final关键字修饰的静态变量会在准备阶段赋用户指定的值</li></ul></li><li>4.解析<ul><li>将常量池中的符号引用替换为直接引用的过程</li><li>符号引用与直接引用的区别</li><li>解析的时机</li><li>解析结果的缓存</li><li>解析的对象<ul><li>类或接口的解析过程(CONSTANT_Class_info)<ul><li>待解析的接口或类(记为C)由被解析的符号引用所在类(记为D)的类加载器加载</li><li>有父类的话，要加载其父类；若使用了其接口中的字段，要初始化该接口</li><li>进行符号引用验证，确定D是否对C可访问</li></ul></li><li>字段解析过程(CONSTANT_Fieldref_info)<ul><li>搜索字段所在类及父类或接口及父接口中是否有简单名称和字段描述符都一致的字段</li><li>先递归搜索其接口及父接口，再递归搜索其父类</li><li>访问权限验证</li></ul></li><li>方法解析(CONSTANT_Methodref_info)<ul><li>方法声明(class_index的指向位置)位于接口中，直接抛异常</li><li>先递归查找其父类是否有简单名称和描述符都一致的方法</li><li>后递归查找方法所属类实现的接口及其父接口中是否有匹配的方法，有则抛异常，因为不可以调用抽象方法。</li><li>访问权限验证</li></ul></li><li>接口方法解析(CONSTANT_interfaceMethodred_info)<ul><li>方法所属是类而不是接口，抛出异常</li><li>递归查找该接口及其父接口是否有匹配的方法</li><li>权限验证</li></ul></li><li>CONSTANT_MethodType_info</li><li>CONSTANT_MethodHandle_info</li><li>CONSTANT_Dynamic_info</li><li>CONSTANT_InvokeDynamic_info</li></ul></li></ul></li><li>5.初始化<ul><li>new、getstatic、putstatic、invokestatic</li><li>反射调用时</li><li>未初始化的父类</li><li>主类</li><li>java.lang.invoke.MethodHandler解析结果为REF_getStatic、REF_putStatic、REF_invokeStatic、REF_newInvokeSpecial四类方法句柄，初始化句柄对应的类</li><li>定义了默认方法的接口的实现类初始化，该接口也要初始化<ul><li>接口的初始化<ul><li>初始化接口中的成员变量(\<clinit\>())</li><li>父接口什么时候用到什么时候初始化</li></ul></li></ul></li></ul></li></ul></li><li>5.类与类加载器<ul><li>类的唯一性由该类及其加载它的类加载器唯一确定</li><li>类加载器的种类<ul><li>启动类加载器(Bootstrap Class Loader)</li><li>扩展类加载器(Extension Class Loader)</li><li>应用程序类加载器(Application Class Loader)</li><li>线程上下文类加载器(Thread Context ClassLoader)<ul><li>父加载器请求子加载器完成类加载行为</li></ul></li></ul></li><li>类加载器的双亲委派机制<ul><li>类加载的任务优先委派给父加载器</li><li>类加载器的层级导致类的被访问范围也有层级</li></ul></li></ul></li><li>6.Java模块化系统<ul><li>JAR文件在类路径、模块路径上的访问规则</li><li>模块在模块路径上的访问规则</li><li>一些概念：<ul><li>模块路径</li><li>匿名模块</li><li>具名模块</li><li>自动模块</li></ul></li><li>模块化下的类加载器及其委派关系</li></ul></li></ul></li></ul></blockquote><h1 id="一、类加载"><a href="#一、类加载" class="headerlink" title="一、类加载"></a>一、类加载</h1><h2 id="1-类的加载机制"><a href="#1-类的加载机制" class="headerlink" title="1. 类的加载机制"></a>1. 类的加载机制</h2><p>Java虚拟机把描述类的数据从Class文件<strong>加载到内存</strong>，并对进行<strong>数据校验</strong>、<strong>转换解析和初始化</strong>，最终形成可以被虚拟机直接使用的<strong>Java类型</strong>，这个过程被称作虚拟机的类加载机制。</p><h2 id="2-类的生命周期"><a href="#2-类的生命周期" class="headerlink" title="2. 类的生命周期"></a>2. 类的生命周期</h2><img src="/JeckFS/2020/06/02/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA7/1.png" class="" title="This is 1-th image."><p>图上标记的阶段的顺序是确定的，其他阶段穿插在固定阶段中。</p><h2 id="3-类初始化的时机"><a href="#3-类初始化的时机" class="headerlink" title="3. 类初始化的时机"></a>3. 类初始化的时机</h2><p>有且仅有以下6种情况会进行类初始化操作。</p><ul><li>遇到<strong>new、getstatic、putstatic、invokestatic</strong>这四条字节码指令时，会初始化没有被初始化的所需类型。具体情况有：<ul><li>使用new实例化对象时。(new)</li><li>读取或设置某类型的静态字段时(被final修饰，在编译期把结果放入常量池的静态字段除外)。(getstatic、putstatic)</li><li>调用某类型的静态方法时。(invokestatic)</li></ul></li><li>使用java.lang.reflect包的方法对类型进行<strong>反射调用</strong>的时候。</li><li>初始化类时，出发其<strong>父类</strong>(如果该父类没有被初始化)</li><li>初始化<strong>主类</strong>(main()所在类)</li><li>java.lang.invoke.MethodHandle实例的最后解析结果为<code>REF_getStatic</code>、<code>REF_putStatic</code>、<code>REF_invokeStatic</code>、<code>REF_newInvokeSpecial</code>四种类型的方法句柄。则初始化实例句柄对应的类(假定其没有被初始化)</li><li>当一个接口中定义了JDK 8新加入的默认方法（<strong>被default关键字修饰的接口方法</strong>）时，如果有这个接口的实现类发生了初始化，那该接口要在其之前被初始化。</li></ul><p><strong>示例1：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.fenixsoft.classloading;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 被动使用类字段演示一：</span></span><br><span class="line"><span class="comment">* 通过子类引用父类的静态字段，不会导致子类初始化</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SuperClass</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;SuperClass init!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">value</span> <span class="operator">=</span> <span class="number">123</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SubClass</span> <span class="keyword">extends</span> <span class="title class_">SuperClass</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;SubClass init!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 非主动使用类字段演示</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NotInitialization</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(SubClass.value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line">SuperClass init!</span><br></pre></td></tr></table></figure><br><code>-XX: +TraceClassLoading查看类加载的过程。</code></p><p><strong>示例2：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.fenixsoft.classloading;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 被动使用类字段演示二：</span></span><br><span class="line"><span class="comment">* 通过数组定义来引用类，不会触发此类的初始化</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NotInitialization</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SuperClass[] sca = <span class="keyword">new</span> <span class="title class_">SuperClass</span>[<span class="number">10</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line">不会输出SuperClass init!</span><br></pre></td></tr></table></figure><br>分析：程序并没有出发类<code>org.fenixsoft.classloading.SuperClass</code>的初始化阶段，而是出发了名为<code>[Lorg.fenixsoft.classloading.SuperClass</code>的类的初始化阶段。该类型由虚拟机自动生成、直接继承于java.lang.Object，创建动作由字节码指令newarray触发。</p><p><strong>示例3：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.fenixsoft.classloading;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 被动使用类字段演示三：</span></span><br><span class="line"><span class="comment">* 常量在编译阶段会存入调用类的常量池中，本质上没有直接引用到定义常量的类，因此不会触发定义常量的类的初始化</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConstClass</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;ConstClass init!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">HELLOWORLD</span> <span class="operator">=</span> <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 非主动使用类字段演示</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NotInitialization</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(ConstClass.HELLOWORLD);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 运行结果</span></span><br><span class="line">不会输出ConstClass init!</span><br></pre></td></tr></table></figure><br>分析：<br>ConstClass类的常量HELLOWORLD在编译阶段通过<strong>常量传播优化</strong>，已经将此常量值“hello world”直接存储在<strong>NotInitialization类的常量池</strong>中，以后对常量ConstClass.HELLOWORLD的引用，都转化为NotInitialization类对自身常量池的引用了。实际上NotInitialization的Class文件之中并没有ConstClass类的符号引用入口，这两个类在编译成Class文件后就已不存在任何联系了。</p><h2 id="4-接口的初始化："><a href="#4-接口的初始化：" class="headerlink" title="4. 接口的初始化："></a>4. 接口的初始化：</h2><ul><li>编译器为接口生成<code>&lt;clinit&gt;()</code>类构造器，用于初始化接口中所定义的成员变量。</li><li>并不要求其父接口全部初始化，只有真正就用到父接口的时候(如引用接口中定义的变量)才会初始化。</li></ul><h2 id="5-类加载的过程"><a href="#5-类加载的过程" class="headerlink" title="5. 类加载的过程"></a>5. 类加载的过程</h2><p>包括加载、验证、准备、解析和初始化五个阶段。</p><h3 id="5-1-加载"><a href="#5-1-加载" class="headerlink" title="5.1 加载"></a>5.1 加载</h3><p>主要任务：<br>1）通过一个类的全限定名来获取定义此类的二进制字节流。<br>2）将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构。<br>3）在内存中生成一个代表这个类的java.lang.Class对象，作为方法区这个类的各种数据的访问入口。</p><p>对于非数组类的加载可由自定义的类加载器控制。<br>对于数组类，其创建是由Java虚拟机直接在内存中动态构造出来的。其<strong>元素类型</strong>还是由类加载器完成加载。</p><p>元素类型：指的是数组去掉所有维度的类型。<br>组件类型：指的是数组去掉一个维度的类型。</p><p><strong>数组类型的加载：</strong><br><img src="/JeckFS/2020/06/02/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA7/2.png" class="" title="This is 2-th image."></p><h3 id="5-2-验证"><a href="#5-2-验证" class="headerlink" title="5.2 验证"></a>5.2 验证</h3><p>用于确保Class文件的字节流中包含的信息符合《Java虚拟机规范》的全部约束要求，保证这些信息被当作代码运行后不会危害虚拟机自身的安全。</p><ol><li><p>文件格式验证<br>保证输入的字节流能正确地解析并存储于方法区内，格式上符合描述一个Java类型信息的要求。基于二进制字节流。</p><p>如：<br>·是否以魔数0xCAFEBABE开头。<br>·主、次版本号是否在当前Java虚拟机接受范围之内。<br>·常量池的常量中是否有不被支持的常量类型（检查常量tag标志）。<br>·指向常量的各种索引值中是否有指向不存在的常量或不符合类型的常量。<br>·CONSTANT_Utf8_info型的常量中是否有不符合UTF-8编码的数据。<br>·Class文件中各个部分及文件本身是否有被删除的或附加的其他信息。<br>……</p></li><li><p>元数据验证<br>对类的元数据信息进行<strong>语义分析</strong>，保证不存在与《Java语言规范》定义相悖的元数据信息。</p><p>如：<br>·这个类是否有父类（除了java.lang.Object之外，所有的类都应当有父类）。<br>·这个类的父类是否继承了不允许被继承的类（被final修饰的类）。<br>·如果这个类不是抽象类，是否实现了其父类或接口之中要求实现的所有方法。<br>·类中的字段、方法是否与父类产生矛盾。<br>……</p></li><li><p>字节码验证<br>对类的方法体（Class文件中的Code属性）进行过数据流分析、控制流分析和校验分析，保证被校验类的方法在运行时不会做出危害虚拟机安全的行为。</p><p>如：<br>·保证任意时刻操作数栈的数据类型与指令代码序列都能配合工作，例如不会出现类似于“在操作栈放置了一个int类型的数据，使用时却按long类型来加载入本地变量表中”这样的情况。<br>·保证任何跳转指令都不会跳转到方法体以外的字节码指令上。<br>·保证方法体中的类型转换总是有效的，例如可以把一个子类对象赋值给父类数据类型，这是安全的，但是把父类对象赋值给子类数据类型，甚至把对象赋值给与它毫无继承关系、完全不相干的一个数据类型，则是危险和不合法的。<br>……</p></li><li><p>符号引用验证<br>对类自身以外（常量池中的各种符号引用）的各类信息进行匹配性校验。确保解析行为能正常进行。<br>可使用-Xverify：none关闭大部分的类验证措施，以缩短类加载的时间。</p><p>如：<br>·符号引用中通过字符串描述的全限定名是否能找到对应的类。<br>·在指定类中是否存在符合方法的字段描述符及简单名称所描述的方法和字段。<br>·符号引用中的类、字段、方法的可访问性（<code>private、protected、public、&lt;package&gt;</code>）是否可被当前类访问。<br>……</p></li></ol><h3 id="5-3-准备"><a href="#5-3-准备" class="headerlink" title="5.3 准备"></a>5.3 准备</h3><p>正式为类中定义的变量（即静态变量，被static修饰的变量）<strong>分配内存</strong>并设置<strong>类变量初始值</strong>的阶段。</p><p>示例1：<br><code>public static int value = 123;</code><br>在准备阶段value的初始值为0，而不是123。把value赋值为123是由类构造器<code>&lt;clinit&gt;()</code>中putstatic指令完成的。</p><p>示例2：<br><code>public static final int value = 123;</code><br>编译时Javac会为value生成ConstantValue属性，在准备阶段虚拟机会根据ConstantValue为value赋值为123。</p><h3 id="5-4-解析"><a href="#5-4-解析" class="headerlink" title="5.4 解析"></a>5.4 解析</h3><p>将常量池中的<strong>符号引用</strong>替换为<strong>直接引用</strong>的过程。</p><p><strong>符号引用</strong>：所谓符号，可以是任何形式的字面量，它用来描述所引用的目标。符号引用与内存布局无关，引用的目标不一定加载到内存中。</p><p><strong>直接引用</strong>：是直接指向目标的指针、相对偏移量、能间接定位到目标的句柄。与内存布局相关，引用的目标已经加载到内存中。</p><p>在执行anewarray、checkcast、getfield、getstatic、instanceof、invokedynamic、invokeinterface、invokespecial、invokestatic、invokevirtual、ldc、ldc_w、ldc2_w、multianewarray、new、putfield和putstatic这17个用于操作符号引用的字节码指令之前，先对它们所使用的符号引用进行解析。</p><p><strong>解析结果的缓存：</strong><br>除invokedynamic外，虚拟机会对第一次解析结果进行缓存。虚拟机会保证，如果一个符号应用之前被成功解析过，那么后续的引用解析也应当一直成功。若果第一次解析失败，即使后来该符号加载进内存中，也不能解析成功。对于invokedynamic，它是什么时候什么时候解析，不存在缓存。</p><p><strong>解析的对象：</strong><br>类或接口、字段、类方法、接口方法、方法类型、方法句柄和调用点限定符。分别对应于常量池中CONSTANT_Class_info、CON-STANT_Fieldref_info、CONSTANT_Methodref_info、CONSTANT_InterfaceMethodref_info、CONSTANT_MethodType_info、CONSTANT_MethodHandle_info、CONSTANT_Dynamic_info和CONSTANT_InvokeDynamic_info 8种常量类型。</p><ol><li>类或接口的解析CONSTANT_Class_info<br>解析过程：<img src="/JeckFS/2020/06/02/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA7/3.png" class="" title="This is 3-th image."></li></ol><p><strong>D拥有C的访问权限的情况：</strong><br>·被访问类C是public的，并且与访问类D处于同一个模块。<br>·被访问类C是public的，不与访问类D处于同一个模块，但是被访问类C的模块允许被访问类D的模块进行访问。<br>·被访问类C不是public的，但是它与访问类D处于同一个包中。</p><ol><li><p>字段解析CONSTANT_Fieldref_info<br>解析过程：</p><img src="/JeckFS/2020/06/02/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA7/4.png" class="" title="This is 4-th image."></li><li><p>方法解析CONSTANT_Methodref_info<br>解析过程：</p><img src="/JeckFS/2020/06/02/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA7/5.png" class="" title="This is 5-th image."></li><li><p>接口方法解析CONSTANT_interfaceMethodred_info<br>解析过程：</p><img src="/JeckFS/2020/06/02/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA7/6.png" class="" title="This is 6-th image."></li></ol><p><strong>接口方法的访问权限：</strong><br>jdk 9增加了接口的静态私有方法，也有了模块化的访问约束。所以接口方法访问权限不够也会抛出IllegalAccessError异常。</p><h2 id="6-类与类加载器"><a href="#6-类与类加载器" class="headerlink" title="6. 类与类加载器"></a>6. 类与类加载器</h2><p><strong>类的唯一性：</strong><br>加载它的类加载器与类本身共同确定其唯一性。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 类加载器与instanceof关键字演示</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> zzm</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClassLoaderTest</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">ClassLoader</span> <span class="variable">myLoader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassLoader</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Class&lt;?&gt; loadClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> name.substring(name.lastIndexOf(<span class="string">&quot;.&quot;</span>) + <span class="number">1</span>)+<span class="string">&quot;.class&quot;</span>;</span><br><span class="line">                    <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> getClass().getResourceAsStream(fileName);</span><br><span class="line">                    <span class="keyword">if</span> (is == <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="built_in">super</span>.loadClass(name);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="type">byte</span>[] b = <span class="keyword">new</span> <span class="title class_">byte</span>[is.available()];</span><br><span class="line">                    is.read(b);</span><br><span class="line">                    <span class="keyword">return</span> defineClass(name, b, <span class="number">0</span>, b.length);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ClassNotFoundException</span>(name);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> myLoader.loadClass(<span class="string">&quot;org.fenixsoft.classloading.ClassLoaderTest&quot;</span>).newInstance();</span><br><span class="line">        System.out.println(obj.getClass());</span><br><span class="line">        System.out.println(obj <span class="keyword">instanceof</span> org.fenixsoft.classloading.ClassLoaderTest);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 运行结果</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">org</span>.fenixsoft.classloading.ClassLoaderTest</span><br><span class="line"><span class="literal">false</span></span><br></pre></td></tr></table></figure><p><strong>类加载器的种类：</strong></p><ul><li>启动类加载器(Bootstrap Class Loader)：加载<code>&lt;JAVA_HOME&gt;\lib</code>目录下的类，或者被-Xbootclasspath指定路径下的类。按文件名识别固定类库，如rt.jar, tools.jar等，其他类库即使放在lib目录下也不会被加载。</li><li>扩展类加载器(Extension Class Loader)：加载<code>&lt;JAVA_HOME&gt;\lib\ext</code>目录中，或者被java.ext.dirs系统变量所指定的路径下的<strong>所有类库</strong>。</li><li>应用程序类加载器(Application Class Loader)：该加载器是ClassLoader类中getSystemClassLoader()方法的返回值。负责加载ClassPath上的<strong>所有类库</strong>。</li><li>线程上下文类加载器(Thread Context ClassLoader)：在JNDI服务中，JNDI的代码由启动类加载器加载，但其有加载部署在ClassPath下的JNDI服务提供者接口的代码的需求，并且启动类加载器绝对不可能认识、加载这些代码。线程上下文类加载器就是父类加载器请求子类加载器完成类加载行为的一种方式。线程类加载器可由java.lang.Thread类的setContextClassLoader()设置。若创建线程时未设置，它将从父线程中继承一个。若在应用程序全局范围内都没设置，线程上下文类加载器默认就是应用程序类加载器。</li></ul><p><strong>类加载器的双亲委派模型：</strong><br><img src="/JeckFS/2020/06/02/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA7/7.png" class="" title="This is 7-th image."><br>工作过程：<br>每一层次的类加载器都先把类加载请求委派给父类加载器，父类加载器无法完成才会由子加载器加载。</p><p>由于类加载器与该类本身唯一确定一个类，所以加载的类随加载它的类加载器一起具备了<strong>带有优先级的层次关系</strong>。对于类java.lang.Object无论哪个类加载器加载它，最终都会由启动类加载器进行加载，因此Object类在程序的各种类加载器环境中能够保证是同一个类。</p><p><strong>双亲委派模型的实现：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">synchronized</span> Class&lt;?&gt; loadClass(String name, <span class="type">boolean</span> resolve) <span class="keyword">throws</span> ClassNotFoundException</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 首先，检查请求的类是否已经被加载过了</span></span><br><span class="line">    <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> findLoadedClass(name);</span><br><span class="line">    <span class="keyword">if</span> (c == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (parent != <span class="literal">null</span>) &#123;</span><br><span class="line">                c = parent.loadClass(name, <span class="literal">false</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                c = findBootstrapClassOrNull(name);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            <span class="comment">// 如果父类加载器抛出ClassNotFoundException</span></span><br><span class="line">            <span class="comment">// 说明父类加载器无法完成加载请求</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 在父类加载器无法加载时</span></span><br><span class="line">            <span class="comment">// 再调用本身的findClass方法来进行类加载</span></span><br><span class="line">            c = findClass(name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (resolve) &#123;</span><br><span class="line">        resolveClass(c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>OSGi实现模块化热部署：</strong><br>每个程序模块成为一个Bundle，每个Bundle都有自己的类加载器。当更换一个Bundle时，就把Bundle连同其类加载器一起换掉实现代码的热替换。在OSGi环境中，类加载器是复杂的<strong>网状结构</strong>。</p><h2 id="6-Java模块化系统"><a href="#6-Java模块化系统" class="headerlink" title="6.Java模块化系统"></a>6.Java模块化系统</h2><p>JDK 9之后的模块可以声明对其他模块的<strong>显示依赖</strong>，虚拟机在<strong>启动时</strong>验证应用程序开发阶段设定好的依赖关系在<strong>运行期</strong>是否完备，若有缺失则启动失败，从而避免了很大一部分的<strong>由于类型依赖而引发的运行时异常</strong>。</p><p><strong>Java的模块定义包含的内容：</strong><br>·依赖其他模块的列表。<br>·导出的包列表，即其他模块可以使用的列表。<br>·开放的包列表，即其他模块可反射访问模块的列表。<br>·使用的服务列表。<br>·提供服务的实现列表。</p><h3 id="6-1-模块的兼容性"><a href="#6-1-模块的兼容性" class="headerlink" title="6.1 模块的兼容性"></a>6.1 模块的兼容性</h3><p>模块化下的<strong>可配置的封装隔离机制</strong>如何运行传统的<strong>类路径查找机制</strong>？</p><ul><li>规则1：JAR文件在类路径的访问规则。匿名模块可以看到和使用类路径上所有的包、JDK系统模块中所有的导出包、模块路径上所有模块中导出的包。</li><li>规则2：JAR文件在模块路径的访问规则。自动模块默认依赖于整个模块路径中的所有模块，因此可以访问所有模块导出的包，自动模块默认导出自己所有的包。</li><li>规则3：模块在模块路径的访问规则。具名模块只能访问它依赖定义中列出的模块和包。不能访问匿名模块中的内容。</li></ul><blockquote><p><strong>模块路径</strong>：概念与类路径相对应，某个类库是模块还是传统的JAR包取决于它存放在哪种路径上。模块路径中的类库不管有没有标准模块应该具有的信息，它都是一个模块。<br><strong>匿名模块</strong>：指的是类路径下的JAR文件以及其他资源文件。<br><strong>具名模块</strong>：指的是模块路径中的包含模块定义的模块。<br><strong>自动模块</strong>：指的是模块路径下传统的、不包含模块定义的JAR文件。</p></blockquote><p>模块间的管理和兼容性问题：若同一个模块存在多个不同的版本，需要开发者在编译打包时人工选择好正确版本的模块。Java模块化系统不支持在模块定义中加入版本号来管理和约束依赖，也不支持多版本号的概念和版本选择功能。所以也不支持多版本模块并存、运行时热替换热部署模块的能力。</p><h3 id="6-2-模块化下的类加载器"><a href="#6-2-模块化下的类加载器" class="headerlink" title="6.2 模块化下的类加载器"></a>6.2 模块化下的类加载器</h3><p>平台类加载器取代了扩展类加载器。<br>类加载器的继承结构也发生了变化：<br><img src="/JeckFS/2020/06/02/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA7/8.png" class="" title="This is 8-th image."><br><img src="/JeckFS/2020/06/02/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA7/9.png" class="" title="This is 9-th image."><br>jdk.internal.loader.BuiltinClassLoader中实现了新的模块化架构下类如何<strong>从模块中加载</strong>的逻辑，以及<strong>模块中资源可访问性</strong>的处理。</p><p>JDK 9后的类加载器委派关系：<br><img src="/JeckFS/2020/06/02/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA7/10.png" class="" title="This is 10-th image."><br>当<strong>平台及应用程序类加载器</strong>收到类加载请求，在委派给父加载器加载前，要先判断该类是否能够<strong>归属到某一个系统模块</strong>中，如果可以找到这样的归属关系，就要优先委派给负责那个模块的加载器完成加载。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 启动类加载器负责加载的模块</span></span><br><span class="line">java.base            java.security.sasl</span><br><span class="line">java.datatransfer    java.xml</span><br><span class="line">java.desktop         jdk.httpserver</span><br><span class="line">java.instrument      jdk.internal.vm.ci</span><br><span class="line">java.logging         jdk.management</span><br><span class="line">java.management      jdk.management.agent</span><br><span class="line">java.management.rmi  jdk.naming.rmi</span><br><span class="line">java.naming          jdk.net</span><br><span class="line">java.prefs           jdk.sctp</span><br><span class="line">java.rmi             jdk.unsupported</span><br><span class="line"></span><br><span class="line"><span class="comment">// 平台类加载器负责加载的模块</span></span><br><span class="line">java.activation*           jdk.accessibility</span><br><span class="line">java.compiler*             jdk.charsets</span><br><span class="line">java.corba*                jdk.crypto.cryptoki</span><br><span class="line">java.scripting             jdk.crypto.ec</span><br><span class="line">java.se                    jdk.dynalink</span><br><span class="line">java.se.ee                 jdk.incubator.httpclient</span><br><span class="line">java.security.jgss         jdk.internal.vm.compiler*</span><br><span class="line">java.smartcardio           jdk.jsobject</span><br><span class="line">java.sql                   jdk.localedata</span><br><span class="line">java.sql.rowset            jdk.naming.dns</span><br><span class="line">java.transaction*          jdk.scripting.nashorn</span><br><span class="line">java.xml.bind*             jdk.security.auth</span><br><span class="line">java.xml.crypto            jdk.security.jgss</span><br><span class="line">java.xml.ws*               jdk.xml.dom</span><br><span class="line">java.xml.ws.annotation*    jdk.zipfs</span><br><span class="line"></span><br><span class="line"><span class="comment">// 应用程序类加载器负责加载的模块</span></span><br><span class="line">jdk.aot                    jdk.jdeps</span><br><span class="line">jdk.attach                 jdk.jdi</span><br><span class="line">jdk.compiler               jdk.jdwp.agent</span><br><span class="line">jdk.editpad                jdk.jlink</span><br><span class="line">jdk.hotspot.agent          jdk.jshell</span><br><span class="line">jdk.internal.ed            jdk.jstatd</span><br><span class="line">jdk.internal.jvmstat       jdk.pack</span><br><span class="line">jdk.internal.le            jdk.policytool</span><br><span class="line">jdk.internal.opt           jdk.rmic</span><br><span class="line">jdk.jartool                jdk.scripting.nashorn.shell</span><br><span class="line">jdk.javadoc                jdk.xml.bind*</span><br><span class="line">jdk.jcmd                   jdk.xml.ws*</span><br><span class="line">jdk.jconsole</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 深入理解Java虚拟机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深入理解Java虚拟机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解Java虚拟机6</title>
      <link href="/JeckFS/2020/05/28/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA6/"/>
      <url>/JeckFS/2020/05/28/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA6/</url>
      
        <content type="html"><![CDATA[<blockquote class="pullquote mindmap mindmap-md"><ul><li>[Class文件结构]<ul><li>魔数(magic)</li><li>主版本号(major_version)</li><li>次版本号(minor_version)</li><li>常量池(constant_pool)<ul><li>分类<ul><li>字面量</li><li>符号引用</li></ul></li><li>17种常量类型结构</li></ul></li><li>访问标志(access_flags)<ul><li>public? final? 接口？abstract？注解？枚举？模块？类是否由用户代码生成</li></ul></li><li>类索引(this_class)、父类索引(super_class)与接口索引集合(interfaces)<ul><li>类索引查找全限定名的过程</li></ul></li><li>字段表(field_info)集合<ul><li>描述对象：接口、类变量、实例变量。方法内的局部变量除外。</li><li>字段修饰符(access_flags)<ul><li>public,private,protected,static,final,volatile,transient,enum</li></ul></li><li>name_index：字段的简单名称</li><li>descriptor_index：字段和方法的描述符<ul><li>字段描述符<ul><li>基本类型</li><li>对象类型</li><li>void</li></ul></li><li>方法描述符：(参数的类型描述符)+返回值类型的描述符</li></ul></li><li>方法表集合(methods)<ul><li>access_flags：访问标志<ul><li>public,private,protected,static,final,synchronized,native,abstract</li><li>是否由编译器生成</li><li>是否是由编译器产生的桥接方法</li><li>是否接受不定参数</li></ul></li><li>Java程序中的方法签名和字节码中的方法签名</li></ul></li><li>属性表集合(attribute)</li></ul></li></ul></li></ul></blockquote><p><br><br></p><blockquote class="pullquote mindmap mindmap-md"><ul><li>[属性表集合]<ul><li>拥有属性表的结构<ul><li>Class文件</li><li>字段表</li><li>方法表</li></ul></li><li>Code属性<ul><li>max_stack</li><li>max_locals<ul><li>有哪些局部变量</li><li>Slot重用</li></ul></li><li>code_length</li><li>code<ul><li>存储方法体的字节码指令</li></ul></li><li>exception_table_length</li><li>exception_table<ul><li>start_pc</li><li>end_pc</li><li>handler_pc</li><li>catch_type</li></ul></li><li>attributes_count</li><li>attributes</li></ul></li><li>Exceptions属性<ul><li>描述throws关键字后面的异常</li></ul></li><li>LineNumberTable属性<ul><li>Java源码与字节码行号之间的对应关系</li></ul></li><li>LocalVariableTable属性<ul><li>描述栈帧中局部变量表的变量与Java源码中的变量之间的关系</li><li>字节码中无此项，会丢失参数名；调试期间无法根据名称获取参数值</li><li>local_variable_info<ul><li>start_pc</li><li>length</li><li>name_index</li><li>descriptor_index</li><li>index</li></ul></li></ul></li><li>LocalVariableTypeTable属性<ul><li>用于在运行期获取泛型的类型</li></ul></li><li>SourceFile属性</li><li>SourceDebugExtention属性<ul><li>JSP调试</li></ul></li><li>ConstantValue属性<ul><li>类变量的初始化</li><li>final关键字的影响</li></ul></li><li>InnerClasses属性</li><li>Deprecated属性</li><li>Synthetic属性</li><li>StackMapTable属性<ul><li>用于编译期局部变量表与操作数栈的类型验证</li></ul></li><li>Signature属性</li><li>BootstrapMethods属性<ul><li>用于支持Lambda表达式与接口默认方法。</li><li>bootstrap_methods</li></ul></li><li>MethodParameters属性<ul><li>涉及泛型</li></ul></li><li>模块化相关属性<ul><li>Module属性</li><li>ModulePackages属性</li><li>ModuleMainClass属性</li></ul></li><li>运行时注解相关属性<ul><li>RuntimeVisibleAnnotations<ul><li>annotations属性：其元素代表一个运行时课件的注解<ul><li>annotation属性<ul><li>保存注解的参数和值</li></ul></li></ul></li></ul></li><li>RuntimeInvisibleAnnotations</li><li>RuntimeVisibleParameterAnnotations</li><li>RuntimeInvisibleParameterAnnotations</li><li>RuntimeVisibleTypeAnnotations</li><li>RuntimeInvisibleTypeAnnotations</li></ul></li></ul></li></ul></blockquote><p><a href="https://www.shuzhiduo.com/A/RnJW91Owdq/">参考文章1</a><br><a href="https://www.zhoujunwen.com/2019/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84#constant95methodhandle95info">参考文章2</a></p><h1 id="一、Class文件的结构"><a href="#一、Class文件的结构" class="headerlink" title="一、Class文件的结构"></a>一、Class文件的结构</h1><p>Class的文件格式：<br><img src="/JeckFS/2020/05/28/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA6/1.png" class="" title="This is 1-th image."><br>子标题是按照在class文件中的顺序列举的。</p><p>字节码分析工具：<code>javap</code>。<br>如<code>javap -verbose TestClass</code></p><h2 id="1-魔数与Class文件的版本"><a href="#1-魔数与Class文件的版本" class="headerlink" title="1.魔数与Class文件的版本"></a>1.魔数与Class文件的版本</h2><p><strong>魔数</strong>：每个Class文件的头4个字节。作用是确定这个文件是否为一个能被虚拟机接受的Class文件。<br><strong>Class文件的版本号</strong>：紧随魔数之后的4个字节。5,6字节是次版本号，7,8字节是主版本号。作用是向下兼容以前版本的class文件，但不能运行以后版本的class文件。</p><h2 id="2-常量池"><a href="#2-常量池" class="headerlink" title="2.常量池"></a>2.常量池</h2><p>constant_pool_count：记录class文件中常量池中实际出现多少个项目类型。数值从1开始，数值0表示不引用任何一个常量池项目。</p><p>常量池中的两类常量：<br>· 字面量<br>· 符号引用<br>  主要包括：<br>  ·被模块导出或者开放的包（Package）<br>  ·类和接口的全限定名（Fully Qualified Name）<br>  ·字段的名称和描述符（Descriptor）<br>  ·方法的名称和描述符<br>  ·方法句柄和方法类型（Method Handle、Method Type、Invoke Dynamic）<br>  ·动态调用点和动态常量（Dynamically-Computed Call Site、Dynamically-Computed Constant）</p><img src="/JeckFS/2020/05/28/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA6/2.png" class="" title="This is 2-th image."><p>CONSTANT_Utf8_info占两个字节，最大值为65535，也就是说最大可以存64KB的字符串。Java程序中的变量或者方法名最大不能超过64KB。</p><p>常量池中17种数据类型的结构总表：<br><img src="/JeckFS/2020/05/28/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA6/3.png" class="" title="This is 3-th image."><br><img src="/JeckFS/2020/05/28/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA6/4.png" class="" title="This is 4-th image."><br><img src="/JeckFS/2020/05/28/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA6/5.png" class="" title="This is 5-th image."><br><img src="/JeckFS/2020/05/28/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA6/6.png" class="" title="This is 6-th image."></p><h2 id="3-访问标志-access-flags"><a href="#3-访问标志-access-flags" class="headerlink" title="3.访问标志(access_flags)"></a>3.访问标志(access_flags)</h2><img src="/JeckFS/2020/05/28/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA6/7.png" class="" title="This is 7-th image."><h2 id="4-类索引、父类索引与接口索引集合"><a href="#4-类索引、父类索引与接口索引集合" class="headerlink" title="4.类索引、父类索引与接口索引集合"></a>4.类索引、父类索引与接口索引集合</h2><p>类索引(this_class)：用于确定这个类的全限定名。<br>父类索引(super_class)：用于确定这个类的父类的全限定名。除java.lang.Object为0外，java类的索引都为1。<br>接口索引集合(interfaces)：用于描述这个类实现了哪些接口。第一项为u2类型的接口计数器，为0，表示没有实现任何接口，后面也就不跟任何字节。不为0，则后面跟实现的接口。</p><p>类索引查找全限定名的过程：<br><img src="/JeckFS/2020/05/28/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA6/8.png" class="" title="This is 8-th image."></p><h2 id="5-字段表-field-info-集合"><a href="#5-字段表-field-info-集合" class="headerlink" title="5.字段表(field_info)集合"></a>5.字段表(field_info)集合</h2><p>用于描述接口或者类中声明的变量。即类变量与实例变量，方法内的局部变量除外。</p><p>字段表的结构：<br><img src="/JeckFS/2020/05/28/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA6/10.png" class="" title="This is 10-th image."></p><p>access_flags：字段的修饰符()<br><img src="/JeckFS/2020/05/28/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA6/9.png" class="" title="This is 9-th image."></p><p>name_index：字段的简单名称<br>descriptor_index：方法和字段的描述符</p><p><strong>描述符：</strong><br><img src="/JeckFS/2020/05/28/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA6/11.png" class="" title="This is 11-th image."><br>数组类型：如<code>java.lang.String[][]</code>的描述符为<code>[[Ljava/lang/String</code>；<code>int[]</code>的描述符为<code>[I</code><br>描述方法：如<code>void inc()</code>的描述符为<code>()V</code>；<code>int indexOf(char[]source，int sourceOffset，int sourceCount，char[]target，int targetOffset，int targetCount，int fromIndex)</code>的描述符为<code>([CII[CIII)I</code></p><p>Java程序中的字段必须保证数据类型、修饰符不同。但在Class文件中只要保证两个字段的描述符不同即可，即使字段重名也可共存。</p><h2 id="6-方法表集合"><a href="#6-方法表集合" class="headerlink" title="6.方法表集合"></a>6.方法表集合</h2><p>方法表结构：<br><img src="/JeckFS/2020/05/28/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA6/12.png" class="" title="This is 12-th image."></p><p>方法访问标志：<br><img src="/JeckFS/2020/05/28/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA6/13.png" class="" title="This is 13-th image."></p><p>方法表只存方法的定义(访问标志、名称索引、描述符索引)，方法体经过编译后存储在方法属性表集合中的<code>Code</code>属性中。</p><p>子类没有重写父类的方法，方法表集合中就不会出现父类的方法信息。有可能会出现编译器自动添加的类构造器方法<code>&lt;clinit&gt;()</code>和实例构造器方法<code>&lt;init&gt;()</code>。</p><p>Java程序中的方法签名和字节码中方法签名：<br>· 程序中的方法签名只包括方法名称、参数顺序及参数类型。<br>· 字节码的方法签名包括方法名称、参数顺序、参数类型、方法返回值以及受查异常表。</p><h2 id="7-属性表集合"><a href="#7-属性表集合" class="headerlink" title="7.属性表集合"></a>7.属性表集合</h2><p>拥有属性表的结构有：Class文件、字段表、方法表。对于属性表中的项目不要求各个属性具有严格的顺序，只要属性名不重复即可。属性也可以自定义，不过Java虚拟机在运行时会忽略掉。</p><p>虚拟机规范预定义的属性：<br><img src="/JeckFS/2020/05/28/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA6/14.png" class="" title="This is 14-th image."><br><img src="/JeckFS/2020/05/28/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA6/15.png" class="" title="This is 15-th image."><br><img src="/JeckFS/2020/05/28/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA6/16.png" class="" title="This is 16-th image."><br><img src="/JeckFS/2020/05/28/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA6/17.png" class="" title="This is 17-th image."></p><h3 id="7-1-Code属性"><a href="#7-1-Code属性" class="headerlink" title="7.1 Code属性"></a>7.1 Code属性</h3><p>Code属性存在于方法表的属性集合中，主要用于存储前Javac编译后的方法体。接口或者抽象类中的方法不存在Code属性。</p><p>Code属性表的结构：<br><img src="/JeckFS/2020/05/28/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA6/18.png" class="" title="This is 18-th image."></p><p>· <code>attribute_name_index</code>：指向CONSTANT_Utf8_info型常亮，常量值固定为Code。其他与Code同级的属性与此类似。<br>· <code>max_stack</code>：表示操作数栈深度的最大值。<br>· <code>max_locals</code>：代表局部变量表所需的存储空间。单位是Slot(变量槽)。</p><blockquote><p>数据类型不超过32位的局部变量(byte、char、float、int、short、boolean、returnAddress等)占用一个Slot，64位数据类型的局部变量(long、double)占用两个Slot。<br>方法体中的局部变量可以是：</p><ul><li>实例方法中的隐藏参数this（存储于局部变量表的第一个变量槽位）</li><li>try-catch中catch块中定义的异常</li><li>方法体中定义的局部变量<br>max_local并不一定等于方法体内所有局部变量所占Slot之和，原因在于Slot会根据局部变量的作用于进行重用。对于超出作用域的局部变量的Slot可以分配给其他局部变量。</li></ul></blockquote><p>· <code>code_length、code</code>：用来存储源程序编译后的字节码指令。</p><blockquote><p>一个字节码占一个字节，所以最多容纳256条指令。实际中只指定了约200条编码值的含义。<br>规定一个方法中不能超过65535条字节码指令。对于复杂的JSP文件，JSP编译器会把JSP内容和页面输出的信息归并于一个方法中，这有违背这条规定的风险，最后只能编译失败。</p></blockquote><p>· <code>exception_table_length、exception_table</code><br>属性表结构：<br><img src="/JeckFS/2020/05/28/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA6/19.png" class="" title="This is 19-th image."></p><p>当字节码从第start_pc行到第end_pc行(不含end_pc行)之间出现了类型为catch_type或者其子类的异常（catch_type为指向一个CONSTANT_Class_info型常量的索引），则转到第handler_pc行继续处理。当catch_type的值为0时，代表任意异常情况都需要转到handler_pc处进行处理。</p><p>示例：<br><img src="/JeckFS/2020/05/28/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA6/20.png" class="" title="This is 20-th image."></p><h3 id="7-2-Exceptions属性"><a href="#7-2-Exceptions属性" class="headerlink" title="7.2 Exceptions属性"></a>7.2 Exceptions属性</h3><p>作用于列举出方法描述时在throws关键字后面列举的异常。</p><p>属性结构：<br><img src="/JeckFS/2020/05/28/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA6/21.png" class="" title="This is 21-th image."></p><p><code>number_of_exceptions</code>表示抛出受查异常的个数。<br><code>exception_index_table</code>指向常量池中CONSTANT_Class_info型常量，代表了该受查异常的类型。</p><h3 id="7-3-LineNumberTable属性"><a href="#7-3-LineNumberTable属性" class="headerlink" title="7.3 LineNumberTable属性"></a>7.3 LineNumberTable属性</h3><p>用于描述Java源码行号与字节码行号（字节码的偏移量）之间的对应关系。</p><blockquote><p>对程序运行产生的的最主要影响就是当抛出异常时，堆栈中将不会显示出错的行号，并且在调试程序的时候，也无法按照源码行来设置断点。</p></blockquote><p>属性结构：<br><img src="/JeckFS/2020/05/28/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA6/22.png" class="" title="This is 22-th image."></p><p><code>line_number_info</code>：包含start_pc和line_number两个u2类型的数据项，前者是字节码行号，后者是Java源码行号。</p><blockquote><p>javac -g: none或 -g: vars取消或生成这项信息；</p></blockquote><h3 id="7-4-LocalVariableTable与LocalVariableTypeTable属性"><a href="#7-4-LocalVariableTable与LocalVariableTypeTable属性" class="headerlink" title="7.4 LocalVariableTable与LocalVariableTypeTable属性"></a>7.4 LocalVariableTable与LocalVariableTypeTable属性</h3><p>LocalVariableTable属性用于描述<strong>栈帧中局部变量表的变量</strong>与<strong>Java源码中定义的变量</strong>之间的关系。</p><p>LocalVariableTable属性结构：<br><img src="/JeckFS/2020/05/28/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA6/23.png" class="" title="This is 23-th image."></p><p><code>local_variable_info</code>代表了一个栈帧与源码中的局部变量的关联。其项目结构如下：<br><img src="/JeckFS/2020/05/28/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA6/24.png" class="" title="This is 24-th image."></p><p><code>start_pc与length</code>表示这个局部变量的声明周期开始的字节码偏移量及其作用范围的覆盖长度，即这个局部变量在字节码中的作用域范围。<br><code>name_index与descriptor_index</code>指向常量池中CONSTANT_Utf8_info型常量索引。分别代表了局部变量的<strong>名称</strong>以及这个局部变量的<strong>描述符</strong>。<br><code>index</code>表示这个局部变量在栈帧的局部变量表中变量槽的位置。当这个变量类型是long, double时，它占用的变量槽为index和index+1两个。</p><blockquote><p>javac -g: none或 -g: vars取消或生成这项信息；<br>没有这个信息当其他人引用这个方法时，所有的参数名称都将会丢失，譬如IDE将会使用诸如<strong>arg0、arg1之类的占位符代替原有的参数名</strong>，这对程序运行没有影响，但是会对代码编写带来较大不便，而且在<strong>调试期间无法根据参数名称从上下文中获得参数值</strong>。</p></blockquote><p>LocalVariableTypeTable属性结构与LocalVariableTable的差别仅在于记录字段描述符的descriptor_index替换为<strong>字段的特征签名(Signature)</strong>。</p><blockquote><p>对于非泛型类型来说，描述符与特征签名的信息是一致的。对于泛型类型来说，LocalVariableTypeTable能够记录字段的特征签名。</p></blockquote><h3 id="7-5-SourceFile及SourceDebugExtension属性"><a href="#7-5-SourceFile及SourceDebugExtension属性" class="headerlink" title="7.5 SourceFile及SourceDebugExtension属性"></a>7.5 SourceFile及SourceDebugExtension属性</h3><p>SourceFile记录生成这个Class文件的<strong>源码文件名称</strong>。</p><blockquote><p>javac -g: none或 -g: vars取消或生成这项信息；<br>没有这项信息，当抛出异常时，堆栈中不会显示出错代码所属文件名。</p></blockquote><p>SourceFile属性结构：<br><img src="/JeckFS/2020/05/28/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA6/25.png" class="" title="This is 25-th image."></p><p><code>sourcefile_index</code>指向常量池中CONSTANT_Utf8_info型常量索引，常量值为源码文件的文件名。</p><p>SourceDebugExtention属性主要用来存储额外的代码调试信息。</p><blockquote><p>存储对于<strong>非Java编写，且编译成字节码并运行于Java虚拟机上的程序</strong>(如JSP)的调试信息。如从异常堆栈中定位出原始JSP中出现问题的行号。</p></blockquote><p>SourceDebugExtention属性结构：<br><img src="/JeckFS/2020/05/28/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA6/26.png" class="" title="This is 26-th image."></p><p><code>debug_extension</code>存储额外的调试信息，是一组通过边长UTF-8格式来表示的字符串。</p><blockquote><p>一个类中最多只有一个SourceDebugExtention属性。</p></blockquote><h3 id="7-6-ConstantValue属性"><a href="#7-6-ConstantValue属性" class="headerlink" title="7.6 ConstantValue属性"></a>7.6 ConstantValue属性</h3><p>作用是通知虚拟机为类变量(static修饰变量)赋值。</p><blockquote><p>对于没有被final修饰的或者并非基本类型及字符串的类变量，则在类构造器<code>&lt;clinit&gt;()</code>中赋值，反之，是通过ConstantValue属性赋值。对于非static类型变量(实例变量)的赋值是在<code>&lt;init&gt;()</code>中的。<br>ConstantValue属性的属性值只能是一个常量池的索引号，由于Class文件中的常量类型只是一些基本类型和字符串类型，所以使用ConstantValue只能为一些基本类型和字符串类型赋值。所以它会配合final一起使用。</p></blockquote><h3 id="7-7-InnerClasses属性"><a href="#7-7-InnerClasses属性" class="headerlink" title="7.7 InnerClasses属性"></a>7.7 InnerClasses属性</h3><p>用于记录内部类与宿主类之间的关联。</p><p>InnerClasses属性结构：<br><img src="/JeckFS/2020/05/28/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA6/27.png" class="" title="This is 27-th image."></p><p><code>number_of_classes</code>表示内部类的个数。</p><p>内部类信息由inner_classes_info来描述。</p><p>inner_classes_info表的结构：<br><img src="/JeckFS/2020/05/28/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA6/28.png" class="" title="This is 28-th image."><br><code>inner_class_info_index和outer_class_info_index</code>指向常量池中CONSTANT_Class_info型常量，分别代表内部类和宿主类的符号引用。<br><code>innser_name_index</code>指向常量池中CONSTANT_Utf8_info型常量，代表内部类的名称。若是匿名内部类，该值为0。<br><code>inner_class_access_flags</code>表示内部类的访问标志。如下：<br><img src="/JeckFS/2020/05/28/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA6/29.png" class="" title="This is 29-th image."></p><h3 id="7-8-Deprecated及Synthetic属性"><a href="#7-8-Deprecated及Synthetic属性" class="headerlink" title="7.8 Deprecated及Synthetic属性"></a>7.8 Deprecated及Synthetic属性</h3><p>Deprecated属性可通过<code>@Deprecated</code>注解设置，修饰的类、字段、方法表示不再推荐使用。</p><p>Synthetic属性标明此字段或方法并不是有Java源码直接产生，而是编译器自动添加的。但<code>&lt;init&gt;(), &lt;clinit&gt;()</code>除外。</p><p>Deprecated及Synthetic属性结构：<br><img src="/JeckFS/2020/05/28/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA6/30.png" class="" title="This is 30-th image."></p><p>attribute_length值必须为0x00000000，因为没有任何属性值需要设置。</p><h3 id="7-9-StackMapTable属性"><a href="#7-9-StackMapTable属性" class="headerlink" title="7.9 StackMapTable属性"></a>7.9 StackMapTable属性</h3><p>StackMapTable属性中包含了0至多个<strong>栈映射帧</strong>(Stack Map Frame)。每个栈映射帧都显式或隐式地代表了一个<strong>字节码偏移量</strong>，用于表示<strong>执行到该字节码时局部变量表和操作数栈的验证类型</strong>。类型检查器通过目标方法的局部变量和操作数栈所需要的类型来确定字节码指令是否符合逻辑约束。</p><p>StackMapTable属性结构：<br><img src="/JeckFS/2020/05/28/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA6/31.png" class="" title="This is 31-th image."></p><blockquote><p>说他隐式代表一个字节码偏移量是针对版本号大于等于50.0的class文件，其方法的Code属性中没有附带StackMapTable属性。即StackMapTable的number_of_entries值为0。<br>StackMapTable属性最多只有一个，否则抛出ClassFormatError异常。</p></blockquote><h3 id="7-10-Signature属性"><a href="#7-10-Signature属性" class="headerlink" title="7.10 Signature属性"></a>7.10 Signature属性</h3><p>可出现于类、字段表、方法表结构的属性表中。用于记录泛型签名信息。</p><p>Signature属性结构：<br><img src="/JeckFS/2020/05/28/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA6/32.png" class="" title="This is 32-th image."></p><p><code>signature_index</code>的值是一个对常量池CONSTANT_Utf8_info类型的索引，表示类签名或方法签名或字段类型签名。</p><h3 id="7-11-BootstrapMethods属性"><a href="#7-11-BootstrapMethods属性" class="headerlink" title="7.11 BootstrapMethods属性"></a>7.11 BootstrapMethods属性</h3><p>位于类文件的属性表中。用于保存invokedynamic指令引用的引导方法限定符。主要用于<strong>支持Lambda表达式和接口默认方法</strong>。</p><p>BootstrapMethods属性结构：<br><img src="/JeckFS/2020/05/28/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA6/33.png" class="" title="This is 33-th image."></p><p>bootstrap_method属性结构：<br><img src="/JeckFS/2020/05/28/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA6/34.png" class="" title="This is 34-th image."></p><p><code>bootstrap_methods[]</code>数组的每个成员包含了一个指向常量池CONSTANT_MethodHandle结构的索引值，它代表了一个引导方法。<br>bootstrap_methods[]数组的成员包含以下三项内容：<br>· <code>bootstrap_method_ref</code>：是一个对常量池的有效索引。索引值为CONSTANT_MethodHandle_info结构。<br>· <code>num_bootstrap_arguments</code>：bootstrap_arguments[]数组的成员数量。<br>· <code>bootstrap_arguments[]</code>：其每个成员必须是一个对常量池的有效索引。该索引的结构是CONSTANT_String_info、CONSTANT_Class_info、CONSTANT_Integer_info、CONSTANT_Long_info、CONSTANT_Float_info、CONSTANT_Double_info、CONSTANT_MethodHandle_infoCONSTANT_MethodType_info。</p><h3 id="7-12-MethodParameters属性"><a href="#7-12-MethodParameters属性" class="headerlink" title="7.12 MethodParameters属性"></a>7.12 MethodParameters属性</h3><p>MethodParameters属性是一个用在方法表的变长属性。作用是<strong>记录方法的各个形参名称和信息</strong>。</p><p>MethodParameters属性结构：<br><img src="/JeckFS/2020/05/28/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA6/35.png" class="" title="This is 35-th image."></p><p>parameter属性结构：<br><img src="/JeckFS/2020/05/28/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA6/36.png" class="" title="This is 36-th image."></p><p><code>name_index</code>是一个指向常量池CONSTANT_Utf8_info常量的索引值，代表了<strong>参数的名称</strong>。<br><code>access_flags</code>是参数的状态指示器，它包含以下三种状态的一种或多种。<br>· 0x0010（ACC_FINAL）：表示该参数被final修饰。<br>· 0x1000（ACC_SYNTHETIC）：表示该参数并未出现在源文件中，是编译器自动生成的。<br>· 0x8000（ACC_MANDATED）：表示该参数是在源文件中隐式定义的。Java语言中的典型场景是this关键字。</p><h3 id="7-13-模块化相关属性"><a href="#7-13-模块化相关属性" class="headerlink" title="7.13 模块化相关属性"></a>7.13 模块化相关属性</h3><h4 id="1-Module属性"><a href="#1-Module属性" class="headerlink" title="1.Module属性"></a>1.Module属性</h4><p>Module属性结构：<br><img src="/JeckFS/2020/05/28/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA6/37.png" class="" title="This is 37-th image."></p><p><code>module_name_index</code>是一个指向常量池CONSTANT_Utf8_info常量的索引值，代表了该模块的名称。<br><code>module_flags</code>是模块的状态指示器。它可包含以下三种状态的一种或多种：<br>·0x0020（ACC_OPEN）：表示该模块是开放的。<br>·0x1000（ACC_SYNTHETIC）：表示该模块并未出现在源文件中，是编译器自动生成的。<br>·0x8000（ACC_MANDATED）：表示该模块是在源文件中隐式定义的。<br><code>module_version_index</code>是一个指向常量池CONSTANT_Utf8_info常量的索引值，代表了该模块的版本号。<br><code>requires, exports, opens, uses, provides</code>的结构基本相似，以exports为例：<br>exports的属性结构：<br><img src="/JeckFS/2020/05/28/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA6/38.png" class="" title="This is 38-th image."></p><p>exports属性的每一元素都代表一个被模块所导出的包。<br><code>exports_index</code>是一个指向常量池CONSTANT_Package_info常量的索引值，代表了被该模块导出的包。<br><code>exports_flags</code>是该导出包的状态指示器，它可以包含以下两种状态中的一种或多种：<br>·0x1000（ACC_SYNTHETIC）：表示该导出包并未出现在源文件中，是编译器自动生成的。<br>·0x8000（ACC_MANDATED）：表示该导出包是在源文件中隐式定义的。<br><code>exports_to_count</code>是该导出包的限定计数器，如果这个计数器为零，这说明该导出包是无限定的（Unqualified），即完全开放的，任何其他模块都可以访问该包中所有内容。如果该计数器不为零，则后面的<code>exports_to_index</code>是以计数器值为长度的数组，每个数组元素都是一个指向常量池中CONSTANT_Module_info常量的索引值，代表着只有在这个数组范围内的模块才被允许访问该导出包的内容。</p><h4 id="2-ModulePackages属性"><a href="#2-ModulePackages属性" class="headerlink" title="2.ModulePackages属性"></a>2.ModulePackages属性</h4><p>用于描述该模块中所有的包，不论是不是被export或者open的。</p><p>ModulePackages属性结构：<br><img src="/JeckFS/2020/05/28/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA6/39.png" class="" title="This is 39-th image."></p><p><code>package_count</code>是package_index数组的计数器.<br><code>package_index</code>中每个元素都是指向常量池CONSTANT_Package_info常量的索引值，代表了当前模块中的一个包。</p><h4 id="3-ModuleMainClass属性"><a href="#3-ModuleMainClass属性" class="headerlink" title="3.ModuleMainClass属性"></a>3.ModuleMainClass属性</h4><p>用于确定该模块的主类（Main Class）。<br>ModuleMainClass属性结构：<br><img src="/JeckFS/2020/05/28/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA6/40.png" class="" title="This is 40-th image."><br><code>main_class_index</code>是一个指向常量池CONSTANT_Class_info常量的索引值，代表了该模块的主类。</p><h3 id="7-14-运行时注解相关属性"><a href="#7-14-运行时注解相关属性" class="headerlink" title="7.14 运行时注解相关属性"></a>7.14 运行时注解相关属性</h3><p>RuntimeVisibleAnnotations、<br>RuntimeInvisibleAnnotations、<br>RuntimeVisibleParameterAnnotations、<br>RuntimeInvisibleParameterAnnotations、<br>RuntimeVisibleTypeAnnotations、<br>RuntimeInvisibleTypeAnnotations</p><p>这6个属性不论结构还是功能都比较雷同。以RuntimeVisibleAnnotations为例。<br>RuntimeVisibleAnnotations属性结构：<br><img src="/JeckFS/2020/05/28/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA6/41.png" class="" title="This is 41-th image."></p><p><code>num_annotations</code>是annotations数组的计数器。<br><code>annotations</code>中每个元素都代表了一个<strong>运行时可见</strong>的注解，注解在Class文件中以annotation结构来存储。<br>annotation属性结构：<br><img src="/JeckFS/2020/05/28/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA6/42.png" class="" title="This is 42-th image."></p><p><code>type_index</code>是一个指向常量池CONSTANT_Utf8_info常量的索引值，该常量应以字段描述符的形式表示一个注解。<br><code>num_element_value_pairs</code>是element_value_pairs数组的计数器。<br><code>element_value_pairs</code>中每个元素都是一个键值对，代表该注解的参数和值。</p><h1 id="二、字节码指令"><a href="#二、字节码指令" class="headerlink" title="二、字节码指令"></a>二、字节码指令</h1><p>Java虚拟机机的指令由<strong>一个字节长度</strong>的、代表着某种特定操作含义的<strong>数字</strong>（称为操作码，Opcode）以及跟随其后的零至多个代表此操作所需的<strong>参数</strong>（称为操作数，Operand，存放于操作数栈中）构成。</p><p>字节码指令集架构的优缺点：<br>· 操作码长度为一个字节，限制了操作码的指总数述不能超过256条。<br>· Class文件格式放弃了编译后代码的<strong>操作数长度对齐</strong>，这意味着虚拟机在处理那些超过一个字节的数据时，需要在运行时重建出具体数据的结构，进而导致性能下降。</p><blockquote><p>譬如要将一个16位长度的无符号整数使用两个无符号字节存储起来（假设将它们命名为byte1和byte2），那它们的值应该是这样的：<code>(byte1 &lt;&lt; 8) | byte2</code>。<br>· 放弃了操作数长度对齐，可以省略大量的填充和间隔符号；<br>· 用一个字节代表操作码，数据量小，传输效率也高，在网络、智能家电有优势。</p></blockquote><p>不考虑异常处理时，解释器的执行模型：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">  自动计算PC寄存器的值加<span class="number">1</span>;</span><br><span class="line">  根据PC寄存器指示的位置，从字节码流中取出操作码;</span><br><span class="line">  <span class="keyword">if</span> (字节码存在操作数) 从字节码流中取出操作数;</span><br><span class="line">  执行操作码所定义的操作;</span><br><span class="line">&#125; <span class="keyword">while</span> (字节码流长度 &gt; <span class="number">0</span>);</span><br></pre></td></tr></table></figure></p><h2 id="1-字节码指令与数据类型的关联"><a href="#1-字节码指令与数据类型的关联" class="headerlink" title="1.字节码指令与数据类型的关联"></a>1.字节码指令与数据类型的关联</h2><p>i代表对int类型的数据操作，l代表long，s代表short，b代表byte，c代表char，f代表float，d代表double，a代表reference。</p><p>Java虚拟机指令集锁支持的数据类型：<br><img src="/JeckFS/2020/05/28/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA6/43.png" class="" title="This is 43-th image."><br><img src="/JeckFS/2020/05/28/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA6/44.png" class="" title="This is 44-th image."></p><p>byte、char、short、boolean类型相关的指令都转化为用int的指令来实现。</p><h3 id="1-1-加载和存储指令"><a href="#1-1-加载和存储指令" class="headerlink" title="1.1 加载和存储指令"></a>1.1 加载和存储指令</h3><p>用于将数据在<strong>栈帧中的局部变量表</strong>和<strong>操作数栈</strong>之间来回传输。</p><p>·将一个局部变量加载到操作栈：<code>iload、iload_&lt;n&gt;、lload、lload_&lt;n&gt;、fload、fload_&lt;n&gt;、dload、dload_&lt;n&gt;、aload、aload_&lt;n&gt;</code><br>·将一个数值从操作数栈存储到局部变量表：<code>istore、istore_&lt;n&gt;、lstore、lstore_&lt;n&gt;、fstore、fstore_&lt;n&gt;、dstore、dstore_&lt;n&gt;、astore、astore_&lt;n&gt;</code><br>·将一个常量加载到操作数栈：<code>bipush、sipush、ldc、ldc_w、ldc2_w、aconst_null、iconst_m1、iconst_&lt;i&gt;、lconst_&lt;l&gt;、fconst_&lt;f&gt;、dconst_&lt;d&gt;</code><br>·扩充局部变量表的访问索引的指令：wide</p><p><code>&lt;&gt;</code>表示一组指令。</p><h3 id="1-2-运算指令"><a href="#1-2-运算指令" class="headerlink" title="1.2 运算指令"></a>1.2 运算指令</h3><p>用于对两个操作数栈上的值进行某种特定运算，并把结果重新存入到操作栈顶。</p><p>·加法指令：<code>iadd、ladd、fadd、dadd</code><br>·减法指令：<code>isub、lsub、fsub、dsub</code><br>·乘法指令：<code>imul、lmul、fmul、dmul</code><br>·除法指令：<code>idiv、ldiv、fdiv、ddiv</code><br>·求余指令：<code>irem、lrem、frem、drem</code><br>·取反指令：<code>ineg、lneg、fneg、dneg</code><br>·位移指令：<code>ishl、ishr、iushr、lshl、lshr、lushr</code><br>·按位或指令：<code>ior、lor</code><br>·按位与指令：<code>iand、land</code><br>·按位异或指令：<code>ixor、lxor</code><br>·局部变量自增指令：<code>iinc</code><br>·比较指令：<code>dcmpg、dcmpl、fcmpg、fcmpl、lcmp</code></p><h3 id="1-3-类型转换指令"><a href="#1-3-类型转换指令" class="headerlink" title="1.3 类型转换指令"></a>1.3 类型转换指令</h3><p><strong>宽化类型转换：</strong>(直接支持)<br>·int类型到long、float或者double类型<br>·long类型到float、double类型<br>·float类型到double类型</p><p><strong>窄化类型转换：</strong><br>i2b、i2c、i2s、l2i、f2i、f2l、d2i、d2l、d2f<br>会出现精度丢失、符号变化等情况。</p><p><strong>对象创建与访问指令：</strong><br>·创建类实例的指令：new<br>·创建数组的指令：newarray、anewarray、multianewarray<br>·访问类字段（static字段，或者称为类变量）和实例字段（非static字段，或者称为实例变量）的指令：getfield、putfield、getstatic、putstatic<br>·把一个数组元素加载到操作数栈的指令：baload、caload、saload、iaload、laload、faload、daload、aaload<br>·将一个操作数栈的值储存到数组元素中的指令：bastore、castore、sastore、iastore、fastore、dastore、aastore<br>·取数组长度的指令：arraylength<br>·检查类实例类型的指令：instanceof、checkcast</p><p><strong>操作数栈管理指令：</strong><br>·将操作数栈的栈顶一个或两个元素出栈：pop、pop2<br>·复制栈顶一个或两个数值并将复制值或双份的复制值重新压入栈顶：dup、dup2、dup_x1、dup2_x1、dup_x2、dup2_x2<br>·将栈最顶端的两个数值互换：swap</p><p><strong>控制转移指令：</strong><br>控制指令就是在有条件或无条件地修改PC寄存器的值。</p><p>·条件分支：ifeq、iflt、ifle、ifne、ifgt、ifge、ifnull、ifnonnull、if_icmpeq、if_icmpne、if_icmplt、if_icmpgt、if_icmple、if_icmpge、if_acmpeq和if_acmpne<br>·复合条件分支：tableswitch、lookupswitch<br>·无条件分支：goto、goto_w、jsr、jsr_w、ret</p><p><strong>方法调用和返回指令：</strong><br>·invokevirtual指令：用于调用对象的实例方法，根据对象的实际类型进行分派（虚方法分派）。<br>·invokeinterface指令：用于调用接口方法，它会在运行时搜索一个实现了这个接口方法的对象，找出适合的方法进行调用。<br>·invokespecial指令：用于调用一些需要特殊处理的实例方法，包括<strong>实例初始化方法、私有方法和父类方法</strong>。<br>·invokestatic指令：用于调用<strong>类静态方法</strong>（static方法）。<br>·invokedynamic指令：用于在运行时动态解析出调用点限定符所引用的方法。并执行该方法。</p><p>前面四条调用指令的分派逻辑都固化在Java虚拟机内部，用户无法改变，而invokedynamic指令的分派逻辑是由<strong>用户所设定的引导方法</strong>决定的。</p><p><strong>异常处理指令：</strong><br>athrow指令：抛出异常。<br>运行时某些指令检测到异常会自动抛出。如idiv、ldiv遇到除0，自动抛出ArithmeticException异常。</p><p><strong>同步指令：</strong><br>使用管程(Monitor)实现支持<strong>方法级的同步</strong>和<strong>方法内部一段指令序列的同步</strong>。<br>方法级的同步是隐式的，无须通过字节码指令来控制。虚拟机可以从方法常量池中的方法表结构中的<strong>ACC_SYNCHRONIZED</strong>访问标志得知一个方法是否被声明为同步方法。当方法调用时，调用指令将会检查方法的<strong>ACC_SYNCHRONIZED</strong>访问标志是否被设置，如果设置了，执行线程就要求先成功<strong>持有管程</strong>，然后才能执行方法，最后当方法完成（无论是正常完成还是非正常完成）时<strong>释放管程</strong>。在方法执行期间，执行线程持有了管程，其他任何线程都无法再获取到同一个管程(管程单一的访问权)。如果一个同步方法执行期间抛出了异常，并且在方法内部无法处理此异常，那这个同步方法所持有的管程将在异常抛到同步方法边界之外时自动释放。</p><p>同步一段指令集序列通常是由Java语言中的synchronized语句块来表示的，Java虚拟机的指令集中有<strong>monitorenter</strong>和<strong>monitorexit</strong>两条指令来支持synchronized关键字的语义。对于monitorenter与monitorexit指令，编译器会自动生成可捕捉所有异常的处理程序。</p>]]></content>
      
      
      <categories>
          
          <category> 深入理解Java虚拟机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深入理解Java虚拟机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>本地idea安装jclasslib插件</title>
      <link href="/JeckFS/2020/05/28/%E6%9C%AC%E5%9C%B0idea%E5%AE%89%E8%A3%85jclasslib%E6%8F%92%E4%BB%B6/"/>
      <url>/JeckFS/2020/05/28/%E6%9C%AC%E5%9C%B0idea%E5%AE%89%E8%A3%85jclasslib%E6%8F%92%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="1-下载插件压缩包"><a href="#1-下载插件压缩包" class="headerlink" title="1. 下载插件压缩包"></a>1. 下载插件压缩包</h1><p>点击<a href="https://plugins.jetbrains.com/">下载地址</a>，搜索jclasslib并下载与Intellij Idea对应版本的压缩包。</p><img src="/JeckFS/2020/05/28/%E6%9C%AC%E5%9C%B0idea%E5%AE%89%E8%A3%85jclasslib%E6%8F%92%E4%BB%B6/1.png" class="" title="This is 1-th image."><img src="/JeckFS/2020/05/28/%E6%9C%AC%E5%9C%B0idea%E5%AE%89%E8%A3%85jclasslib%E6%8F%92%E4%BB%B6/2.png" class="" title="This is 2-th image."><p>点击右上角的<code>Get</code>。<br><img src="/JeckFS/2020/05/28/%E6%9C%AC%E5%9C%B0idea%E5%AE%89%E8%A3%85jclasslib%E6%8F%92%E4%BB%B6/3.png" class="" title="This is 3-th image."></p><h1 id="2-本地安装"><a href="#2-本地安装" class="headerlink" title="2. 本地安装"></a>2. 本地安装</h1><p>settings —&gt; Plugins —&gt; Install Plugin from Disk<br><img src="/JeckFS/2020/05/28/%E6%9C%AC%E5%9C%B0idea%E5%AE%89%E8%A3%85jclasslib%E6%8F%92%E4%BB%B6/4.png" class="" title="This is 4-th image."></p><p>从磁盘中找到插件的压缩包。并点击OK按钮。<br><img src="/JeckFS/2020/05/28/%E6%9C%AC%E5%9C%B0idea%E5%AE%89%E8%A3%85jclasslib%E6%8F%92%E4%BB%B6/5.png" class="" title="This is 5-th image."><br>点击OK按钮，然后根据提示重启Idea。<br><img src="/JeckFS/2020/05/28/%E6%9C%AC%E5%9C%B0idea%E5%AE%89%E8%A3%85jclasslib%E6%8F%92%E4%BB%B6/6.png" class="" title="This is 6-th image."><br><img src="/JeckFS/2020/05/28/%E6%9C%AC%E5%9C%B0idea%E5%AE%89%E8%A3%85jclasslib%E6%8F%92%E4%BB%B6/7.png" class="" title="This is 7-th image."><br>插件jclasslib安装成功。<br><img src="/JeckFS/2020/05/28/%E6%9C%AC%E5%9C%B0idea%E5%AE%89%E8%A3%85jclasslib%E6%8F%92%E4%BB%B6/8.png" class="" title="This is 8-th image."></p><h1 id="3-jclasslib的使用"><a href="#3-jclasslib的使用" class="headerlink" title="3. jclasslib的使用"></a>3. jclasslib的使用</h1><p>编译Java源文件：Build —&gt; Build Project。<br>查看字节码：View —&gt; Show Bytecode with jclasslib<br><img src="/JeckFS/2020/05/28/%E6%9C%AC%E5%9C%B0idea%E5%AE%89%E8%A3%85jclasslib%E6%8F%92%E4%BB%B6/9.png" class="" title="This is 9-th image."></p>]]></content>
      
      
      <categories>
          
          <category> Intellij Idea </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Intellij Idea </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解Java虚拟机11</title>
      <link href="/JeckFS/2020/05/26/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA11/"/>
      <url>/JeckFS/2020/05/26/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA11/</url>
      
        <content type="html"><![CDATA[<blockquote class="pullquote mindmap mindmap-md"><ul><li>[第11章]]<ul><li>即时编译器<ul><li>1.解释器与编译器的关系<ul><li>程序启动时间</li><li>执行效率</li><li>解释器与编译器的平衡</li><li>激进优化，逆优化</li></ul></li><li>2.即时编译器的种类</li><li>3.编译器的模式<ul><li>混合模式</li><li>解释模式</li><li>编译模式</li></ul></li><li>4.分层编译<ul><li>性能监控从不开启到全面开启的过程</li></ul></li><li>5.编译对象及触发条件<ul><li>5.1 热点代码</li><li>5.2 热点代码的评估方式<ul><li>基于采样的热点探测</li><li>基于计数器的热点探测<ul><li>方法调用计数器：异步编译请求</li><li>回边计数器：栈上替换</li></ul></li></ul></li><li>5.3 热点代码的评估过程</li><li>概念<ul><li>栈上替换</li><li>热度衰减</li><li>半衰周期</li></ul></li></ul></li><li>6.编译过程<ul><li>客户端编译过程<ul><li>字节码-&gt;HIR-&gt;LIR-&gt;本地代码</li></ul></li><li>服务端编译过程<ul><li>-XX: +PrintCompilation</li><li>-XX: +PrintInlinine</li><li>-XX: +PrintAssembly</li><li>-XX: PrintOptoAssembly</li><li>-XX: +PrintLIR</li><li>-XX: +PrintCFGToFile</li><li>-XX: +PrintIdealGraphFile</li><li>理想图</li><li>基本块</li></ul></li><li>相关参数</li></ul></li></ul></li><li>提前编译器<ul><li>提前编译的两种方式<ul><li>动态提前编译（即时编译缓存）</li><li>静态翻译</li></ul></li><li>提前编译与即时编译的比较<ul><li>过程间分析</li><li>性能分析制导优化</li><li>基金预测性优化</li><li>链接时优化</li></ul></li><li>Jaotc提前编译器<ul><li>生成静态链接库<ul><li>-XX:AOTLibrary</li></ul></li><li>使用提前编译的静态链接库<ul><li>-J-XX:+UseCompressedOops</li><li>-J-XX:+UseG1GC</li><li>-J-Xms4g</li><li>—compile-for-tiered</li><li>—info</li><li>—compile-commands</li></ul></li><li>虚拟机对于支持静态链接库的局限性</li><li>与静态链接库相关的两个命令：ldd, nm</li></ul></li></ul></li><li>即时编译的重要优化技术<ul><li>方法内联<ul><li>作用</li><li>什么是虚方法</li><li>虚方法有哪些</li><li>虚方法如何内联</li><li>非虚方法如何内联</li><li>一些概念<ul><li>类型继承关系分析</li><li>守护内联</li><li>激进预测性优化</li><li>内联缓存<ul><li>单态内联缓存</li><li>超多台内联缓存</li></ul></li></ul></li></ul></li><li>逃逸分析<ul><li>两种逃逸分析</li><li>栈上分配</li><li>标量替换</li><li>同步消除</li><li>-XX：+DoEscapeAnalysis</li><li>-XX：+PrintEscapeAnalysis</li><li>-XX：+EliminateAllocations</li><li>+XX：+EliminateLocks</li><li>-XX：+PrintEliminateAllocations</li></ul></li><li>公共子表达式消除</li><li>数组边界检查消除</li></ul></li></ul></li></ul></blockquote><h1 id="一、即时编译器"><a href="#一、即时编译器" class="headerlink" title="一、即时编译器"></a>一、即时编译器</h1><h2 id="1-1-解释器与编译器的关系"><a href="#1-1-解释器与编译器的关系" class="headerlink" title="1.1 解释器与编译器的关系"></a>1.1 解释器与编译器的关系</h2><ol><li>解释器的执行方式是边解释边执行，在启动后就可以直接执行。能缩短程序执行的启动时间；<br>经过编译器直接将.class文件编译成本地文件，因为涉及到编译时的优化问题，所以比较耗时，但是它的执行效率是最高的。</li><li>为了平衡程序的启动时间与执行的效率，解释器与编译器是交替运行的。在前期解释器先负责执行，对于热点代码，交给编译器编译，因为它的执行次数很高，老是解释执行会影响执行效率，对这样的代码来说花费一定的时间编译执行代价是较低的；同样的，编译器在编译时可能采取激进优化的方式。所谓<strong>激进优化</strong>就是编译器以大概率选择一些认为编译后是正确的代码，然后编译，当出现比如动态加载某些类后类的继承关系出现变化，或者出现罕见陷阱的情况，虚拟机会采取<strong>逆优化</strong>的方式由编译执行转为解释执行。</li></ol><img src="/JeckFS/2020/05/26/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA11/1.png" class="" title="This is 1-th image."><h2 id="1-2-编译器的种类"><a href="#1-2-编译器的种类" class="headerlink" title="1.2 编译器的种类"></a>1.2 编译器的种类</h2><ol><li><p>客户端编译器(C1编译器)</p></li><li><p>服务端编译器(C2编译器)</p></li></ol><h2 id="1-3-编译器的模式"><a href="#1-3-编译器的模式" class="headerlink" title="1.3 编译器的模式"></a>1.3 编译器的模式</h2><p>-client指定虚拟机运行在客户端模式<br>-server指定虚拟机运行在服务端模式</p><p>无论解释器还是编译期，客户端模式和服务端模式搭配使用，就是<strong>混合模式</strong>。</p><p><strong>解释模式</strong>：强制虚拟机只解释执行。使用-Xint参数来指定</p><p><strong>编译模式</strong>：优先采用编译方式执行程序，对于编译无法进行的情况解释器介入执行过程。 -Xcomp参数来指定。</p><h2 id="1-4-分层编译"><a href="#1-4-分层编译" class="headerlink" title="1.4 分层编译"></a>1.4 分层编译</h2><ul><li>第0层：纯解释执行。不开启性能监控</li><li>第1层：客户端编译器执行，不开启性能监控</li><li>第2层：客户端编译器执行，开启方法调用次数及回边次数的性能监控。</li><li>第3层：客户端编译器执行，开启全部的性能监控。包括方法调用次数、回边次数、收集和分支跳转、虚方法调用版本等统计信息。</li><li>第4层：服务端编译器执行，开启全部性能监控，耗时更长，会根据性能监控信息进行不可靠的激进优化。</li></ul><p><strong>层次的交互关系：</strong></p><img src="/JeckFS/2020/05/26/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA11/2.png" class="" title="This is 2-th image."><h2 id="1-5-编译对象及触发条件"><a href="#1-5-编译对象及触发条件" class="headerlink" title="1.5 编译对象及触发条件"></a>1.5 编译对象及触发条件</h2><p>1.1 2中说了对于热点代码需要编译执行。那到底什么是热点代码？热点代码的评估标准是什么？热点代码的评估方式是什么？弄清了这三个问题就明白了编译对象及触发条件。</p><p><strong>1.5.1 什么是热点代码？</strong><br>热点代码是：</p><ul><li>会多次被执行的方法</li><li>会多次被执行的循环体</li></ul><p><strong>1.5.2 热点代码的评估方式</strong></p><ol><li>基于采样的热点探测。<br>虚拟机经常<strong>周期性</strong>检测<strong>每个线程</strong>的栈上是哪个方法在执行。这样当某个方法被探测到的次数较多时，就认为它是热点代码。<br>缺点是：对于某些特殊情况，如线程阻塞时这种探测方式就是不准的。<br>优点是：将栈展开，可以知道方法的调用关系。</li><li>基于计数器的热点探测。<br>分两种，一种是使用<strong>方法调用计数器</strong>，探测“热点方法”。另一种是使用<strong>回边计数器</strong>，探测“热点循环体”。<br>当方法调用次数与回边次数之和超过一定阈值就<strong>触发</strong>即使编译。<br>所谓<strong>回边</strong>就是：在循环边界往回跳转。<br>缺点是：不能获取方法的调用关系。<br>优点是：统计结果准确。</li></ol><p><strong>1.5.3. 热点代码的评估过程</strong><br>   方法调用计数器触发即时编译：<br>   <img src="/JeckFS/2020/05/26/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA11/3.png" class="" title="This is 3-th image."><br>   默认情况下，方法调用计数器在发送即时编译请求后，不会等待而是继续解释执行，<strong>不会同步等待</strong>。</p><p>   回边计数器触发即时编译：<br>   <img src="/JeckFS/2020/05/26/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA11/4.png" class="" title="This is 4-th image."></p><p><strong>1.5.4. 一些概念：</strong><br>   对于“热点方法”，“热点循环体”他们编译的对象都是方法，不同点在于执行入口(从方法第几条字节码指令开始执行)不同，编译时会传入<strong>执行入口点字节码序号(Byte Code Index, BCI)</strong>。</p><p>   <strong>栈上替换</strong>：热点代码编译后的本地文件会<strong>在方法执行过程中</strong>，直接替换掉在栈上运行的方法，所以叫栈上替换。</p><p>   <strong>热度衰减</strong>：在方法调用计数器统计过程中，默认设置下，一段时间内(半衰周期)方法被调用的次数不足以触发即使编译的情况下，会将该方法的调用计数器减少一半。这个过程被称为方法调用计数器热度的衰减。<br>   -XX: -UseCounterDecay：关闭热度衰减。关闭后方法计数器统计方法调用的绝对次数。只要系统运行时间够长，程序中绝大部分方法都会编译成本地代码。这点有点儿和二级缓存类似。细品，你仔细品。另外，由于方法调用计数器存在热度衰减问题，所以该计数器统计的次数在不关闭热度衰减的情况下，统计的是相对频率。<br>   -XX: CounterHalfLifeTime：指定半衰周期，单位：秒。</p><h2 id="1-6-编译过程"><a href="#1-6-编译过程" class="headerlink" title="1.6 编译过程"></a>1.6 编译过程</h2><p>无论方法调用产生的标准编译请求，还是栈上替换编译请求。当虚拟机在未完成编译前，仍然解释执行，此时编译动作由后台编译线程进行。当使用-XX: -BackgroundCompilation禁止后台编译时，且触发编译条件时，执行线程提交编译请求后会一直等待，直到能够执行编译后的本地代码。</p><h3 id="1-6-1-客户端编译器的编译过程"><a href="#1-6-1-客户端编译器的编译过程" class="headerlink" title="1.6.1 客户端编译器的编译过程"></a>1.6.1 客户端编译器的编译过程</h3><img src="/JeckFS/2020/05/26/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA11/5.png" class="" title="This is 5-th image."><p>HIR: High-Level Intermediate Representation, 与目标机器指令集无关的中间表示。<br>SSA: Static Single Assignment，静态单分配。HIR使用SSA的形式代表代码值。编译随后的优化。<br>LIR: Low-Level Intermediate Representation，与目标机器指令集相关的中间表示。</p><h3 id="1-6-2-服务端编译器的编译过程"><a href="#1-6-2-服务端编译器的编译过程" class="headerlink" title="1.6.2 服务端编译器的编译过程"></a>1.6.2 服务端编译器的编译过程</h3><p>服务端编译器速度缓慢，但远远超过传统的静态优化编译器；相对于客户端编译器，其代码质量大大提高，可大幅缩减本地代码的执行时间。</p><p>测试代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">NUM</span> <span class="operator">=</span> <span class="number">15000</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">doubleValue</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">   <span class="comment">// 这个空循环用于后面演示JIT代码优化过程</span></span><br><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>; j&lt;<span class="number">100000</span>; j++);</span><br><span class="line">   <span class="keyword">return</span> i * <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">long</span> <span class="title function_">calcSum</span><span class="params">()</span> &#123;</span><br><span class="line">   <span class="type">long</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">   <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">      sum += doubleValue(i);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">   <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; NUM; i++) &#123;</span><br><span class="line">      calcSum();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>从外部观察服务端即时编译的过程需要设置一些参数：</p><ul><li>-XX: +PrintCompilation<br>打印编译成本地代码的方法名称。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">VM option &#x27;+PrintCompilation&#x27;</span><br><span class="line">310 1 java.lang.String::charAt (33 bytes)</span><br><span class="line">329 2 org.fenixsoft.jit.Test::calcSum (26 bytes)</span><br><span class="line">329 3 org.fenixsoft.jit.Test::doubleValue (4 bytes)</span><br><span class="line">332 1% org.fenixsoft.jit.Test::main @ 5 (20 bytes)</span><br></pre></td></tr></table></figure><code>%表示是由回边计数器触发的栈上替换编译。栈上替换替换的仍是整个方法，因为此时方法正在栈上运行，所以叫栈上替换。</code></li><li>-XX: +PrintInlinine<br>打印方法内联信息。<img src="/JeckFS/2020/05/26/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA11/6.png" class="" title="This is 6-th image."><blockquote><p>方法内联：doubleValue()被内联编译到calcSum()中，calcSum()内联编译到main()中。当执行main()时，不会调用calcSum()与doubleValue(),这样就没有方法分派的开销.</p></blockquote></li><li>-XX: +PrintAssembly<br>打印被编译方法的汇编代码。此操作需要用到反汇编适配器。<blockquote><p>部署反汇编适配器：<br>1.下载64位 hsdis-amd64适配器(不同架构选用不同适配器)<br>2.将适配器放在与jvm.dll, libjvm.so相同路径下(JAVA_HOME/lib/amd64/server)。<br>使用该参数的前提是：HotSpot虚拟机必须是FastDebug或ShowDebug优化级别的。若是Product版虚拟机，需加入-XX: +UnlockDiagnosticVMOptions打开虚拟机诊断模式。</p></blockquote></li><li>-XX: PrintOptoAssembly<br>无hsdis插件时，用于输出比较接近最终结果的中间代码表示。用于服务端模式的虚拟机。</li><li>-XX: +PrintLIR<br>无hsdis插件时，用于输出比较接近最终结果的中间代码表示。用于客户端模式的虚拟机。</li><li>-XX: +PrintCFGToFile<br>将客户端编译器编译过程的各个阶段输出到文件中。譬如字节码、HIR生成、LIR生成、寄存器分配过程、本地代码生成等数据。<br>分析工具：Java Hotspot Client Compiler Visualizer</li><li>-XX: +PrintIdealGraphFile<br>将服务端编译器编译过程的各个阶段输出到文件中。<br>分析工具：Ideal Graph Visualizer</li></ul><p><strong>服务端编译过程分析：</strong><br>在FastDebug或SlowDebug优化级别的虚拟机中加入<code>-XX：PrintIdealGraphLevel=2-XX：PrintIdeal-GraphFile=ideal.xml</code>，产生ideal.xml文件，该文件包含了服务端编译器编译代码的全过程信息。使用Ideal Graph Visualizer对此文件进行分析。</p><img src="/JeckFS/2020/05/26/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA11/7.png" class="" title="This is 7-th image."><p>doubleValue()中空循环的优化掉的过程，以及各个优化的过程。</p><p>After Parsing阶段是服务端刚完成解析，尚未做任何优化时的理想图表示。其中有一些<strong>基本块</strong>基本块是程序按照<strong>控制流</strong>分割出的最小代码块，它有唯一的入口和唯一的出口，当块中的第一条指令被执行，那么块内所有的指令都会按照顺序全部执行一次。<br><img src="/JeckFS/2020/05/26/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA11/8.png" class="" title="This is 8-th image."></p><h1 id="二、提前编译器"><a href="#二、提前编译器" class="headerlink" title="二、提前编译器"></a>二、提前编译器</h1><h2 id="1-提前编译的两种方式"><a href="#1-提前编译的两种方式" class="headerlink" title="1.提前编译的两种方式"></a>1.提前编译的两种方式</h2><ul><li>动态提前编译(或叫即时编译缓存)。<blockquote><p>方法是把原本即时编译器在运行时要做的编译工作提前做好并保存下来，下次用到可以直接加载进来。<br>本质是给即时编译做缓存加速，去改善Java程序的启动时间，但达到最高性能需要一定时间的预热。<br>产品：Jaotc</p></blockquote></li><li>静态翻译<blockquote><p>类似于传统C、C++编译器，在程序运行之前把程序代码编译成机器代码。</p></blockquote></li></ul><h2 id="2-提前编译与即时编译的比较"><a href="#2-提前编译与即时编译的比较" class="headerlink" title="2.提前编译与即时编译的比较"></a>2.提前编译与即时编译的比较</h2><div class="table-container"><table><thead><tr><th style="text-align:center">编译方式</th><th style="text-align:center">占用程序运行时间和运算资源</th><th style="text-align:center"><span>与目标机器、HotSpot虚&lt;/br&gt;拟机运行时参数有关</span></th><th style="text-align:center"><span>性能分析制导优化、&lt;/br&gt;激进预测性优化、&lt;/br&gt;链接时优化</span></th><th style="text-align:center"><span>平台中立性、&lt;/br&gt;字节膨胀、&lt;/br&gt;动态扩展</span></th></tr></thead><tbody><tr><td style="text-align:center">即时编译</td><td style="text-align:center">是</td><td style="text-align:center">否</td><td style="text-align:center">是</td><td style="text-align:center">是</td></tr><tr><td style="text-align:center">提前编译</td><td style="text-align:center">否，支持“过程间分析”</td><td style="text-align:center">是，如采用不同的垃圾收集器、生成内存屏障代码等</td><td style="text-align:center">否</td><td style="text-align:center">否</td></tr></tbody></table></div><p><strong>过程间分析(全程序分析)</strong>：<br>能够获取某个程序点上某个变量的值是否一定为变量、某段代码块是否永远不可能被使用、在某个点调用的某个虚方法是否只能有单一版本等一些譬如对流敏感、对路径敏感、对上下文敏感、对字段敏感等信息。</p><p>这种优化措施很慢但是能获得更好的运行时性能。</p><p>目前的虚拟机做不到真正的全程序分析，常用方式：</p><ul><li>借助大规模方法内联，以过程内分析来模拟过程检分析的部分效果。</li><li>借助可假设的激进优化</li></ul><p><strong>性能分析制导优化</strong>：<br>即时编译时利用收集的性能监控信息(静态分析无法获得)分析出明显的偏好性，对执行频繁的热代码集中优化和分配更好的资源给它(分支预测、寄存器、缓存等)。</p><blockquote><p>可能用到的性能监控信息：某个程序点抽象类通常是什么实际类型、条件判断通常会走哪条分支、方法调用通常会选择哪个版本、循环通常会进行多少次等。</p></blockquote><p><strong>激进预测性优化</strong>：<br>利用性能监控信息，对一些正确的可能性很大的但无法保证绝对正确的代码进行优化，出错了就逆优化。提前编译属于静态的，不可能逆优化，所以它也不能激进优化。如果逆优化的概率足够低，这种优化就越有效。<br>比如虚拟机会通过类继承关系分析等一系列激进的猜测去做虚拟化，保证绝大部分的虚方法都能顺利内联。</p><p><strong>链接时优化</strong>：<br>由于即时编译是将class文件在运行期被加载进虚拟机内存中，然后在即时编译器里产生优化后的代码。所以它可以自然打破主程序与动态链接库在编译时完全独立，两者各自编译、优化自己的代码的问题。对于那些跨链接库边界的调用提前编译是无法优化的。</p><h2 id="3-实战：Jaotc提前编译器"><a href="#3-实战：Jaotc提前编译器" class="headerlink" title="3.实战：Jaotc提前编译器"></a>3.实战：Jaotc提前编译器</h2><p>作用是：减少程序的启动时间，以及到达全速性能的预热时间。<br>限制：针对特定物理机器、使用必需目标虚拟机的运行参数。当前只能比较顺利编译java.base模块。</p><ol><li><p>生成静态链接库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 以简单的HelloWorld为例</span><br><span class="line">$ javac HelloWorld.java</span><br><span class="line">$ java HelloWorld</span><br><span class="line">Hello World!</span><br><span class="line">$ jaotc --output libHelloWorld.so HelloWorld.class</span><br></pre></td></tr></table></figure><blockquote><p>查询静态库属性</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ldd检查是否是静态链接库</span></span><br><span class="line">$ ldd libHelloWorld.so</span><br><span class="line">statically linked</span><br><span class="line"></span><br><span class="line"><span class="comment"># nm检查库中是否包含HelloWorld的构造函数与main()的入口信息</span></span><br><span class="line">$ nm libHelloWorld.so</span><br><span class="line">……</span><br><span class="line">0000000000002a20 t HelloWorld.()V</span><br><span class="line">0000000000002b20 t HelloWorld.main([Ljava/lang/String;)V</span><br></pre></td></tr></table></figure></blockquote></li><li>使用静态链接库运行<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">java -XX:AOTLibrary=./libHelloWorld.so HelloWorld</span><br><span class="line">Hello World!</span><br></pre></td></tr></table></figure></li></ol><p>将java.base包编译成类似静态链接库。</p><ol><li>排除不支持提前编译的方法。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">// java.base-list.txt文件</span><br><span class="line"></span><br><span class="line"># jaotc: java.lang.StackOverflowError</span><br><span class="line">exclude sun.util.resources.LocaleNames.getContents()[[Ljava/lang/Object;</span><br><span class="line">exclude sun.util.resources.TimeZoneNames.getContents()[[Ljava/lang/Object;</span><br><span class="line">exclude sun.util.resources.cldr.LocaleNames.getContents()[[Ljava/lang/Object;</span><br><span class="line">exclude sun.util.resources..*.LocaleNames_.*.getContents\(\)\[\[Ljava/lang/Object;</span><br><span class="line">exclude sun.util.resources..*.LocaleNames_.*_.*.getContents\(\)\[\[Ljava/lang/Object;</span><br><span class="line">exclude sun.util.resources..*.TimeZoneNames_.*.getContents\(\)\[\[Ljava/lang/Object;</span><br><span class="line">exclude sun.util.resources..*.TimeZoneNames_.*_.*.getContents\(\)\[\[Ljava/lang/Object;</span><br><span class="line"># java.lang.Error: Trampoline must not be defined by the bootstrap classloader</span><br><span class="line">exclude sun.reflect.misc.Trampoline.&lt;clinit&gt;()V</span><br><span class="line">exclude sun.reflect.misc.Trampoline.invoke(Ljava/lang/reflect/Method;Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;</span><br><span class="line"># JVM asserts</span><br><span class="line">exclude com.sun.crypto.provider.AESWrapCipher.engineUnwrap([BLjava/lang/String;I)Ljava/security/Key;</span><br><span class="line">exclude sun.security.ssl.*</span><br><span class="line">exclude sun.net.RegisteredDomain.&lt;clinit&gt;()V</span><br><span class="line"># Huge methods</span><br><span class="line">exclude jdk.internal.module.SystemModules.descriptors()[Ljava/lang/module/ModuleDescriptor;</span><br></pre></td></tr></table></figure></li><li>编译<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">jaotc -J-XX:+UseCompressedOops -J-XX:+UseG1GC -J-Xmx4g</span><br><span class="line">--compile-for-tiered --info --compile-commands java.base-list.txt</span><br><span class="line">--output libjava.base-coop.so --module java.base</span><br></pre></td></tr></table></figure><blockquote><p>不同参数的虚拟机需要不同的运行参数的静态链接库。需要时根据虚拟机参数现编译。<br>Jaotc仅支持G1和Parallel(PS+PS Old)两种垃圾收集器。</p></blockquote></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// 运行于i7-8750H、32GB内存笔记本</span><br><span class="line"></span><br><span class="line">$ jaotc -J-XX:+UseCompressedOops -J-XX:+UseG1GC -J-Xmx4g --compile-for-tiered --info --compile-commands java.base-list.txt --output libjava.base-coop.so --module java.base</span><br><span class="line">Compiling libjava.base-coop.so...</span><br><span class="line">6177 classes found (335 ms)</span><br><span class="line">55845 methods total, 49575 methods to compile (1037 ms)</span><br><span class="line">Compiling with 4 threads</span><br><span class="line">……</span><br><span class="line">49575 methods compiled, 0 methods failed (138821 ms)</span><br><span class="line">Parsing compiled code (906 ms)</span><br><span class="line">Processing metadata (10867 ms)</span><br><span class="line">Preparing stubs binary (0 ms)</span><br><span class="line">Preparing compiled binary (103 ms)</span><br><span class="line">Creating binary: libjava.base-coop.o (2719 ms)</span><br><span class="line">Creating shared library: libjava.base-coop.so (5812 ms)</span><br><span class="line">Total time: 163609 ms</span><br></pre></td></tr></table></figure><p>运行：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">java -XX:AOTLibrary=java_base/libjava.base-coop.so,./libHelloWorld.so HelloWorld</span><br><span class="line">Hello World!</span><br></pre></td></tr></table></figure></p><p>使用<code>-XX: +PrintAOT</code>确认哪些方法使用了提前编译的版本。<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">// 不适用java.base静态链接库</span><br><span class="line">$ java -XX:+PrintAOT -XX:AOTLibrary=./libHelloWorld.so HelloWorld</span><br><span class="line">11 1 loaded ./libHelloWorld.so aot library</span><br><span class="line">105 1 aot[ 1] HelloWorld.()V</span><br><span class="line">105 2 aot[ 1] HelloWorld.main([Ljava/lang/String;)V</span><br><span class="line">Hello World!</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 使用java.base静态链接库</span><br><span class="line">java -XX:AOTLibrary=java_base/libjava.base-coop.so,./libHelloWorld.so HelloWorld</span><br><span class="line">Hello World!</span><br><span class="line">13 1 loaded java_base/libjava.base-coop.so aot library</span><br><span class="line">13 2 loaded ./libHelloWorld.so aot library</span><br><span class="line">[Found [Z in java_base/libjava.base-coop.so]</span><br><span class="line">…… // 省略其他输出</span><br><span class="line">[Found [J in java_base/libjava.base-coop.so]</span><br><span class="line">31 1 aot[ 1] java.lang.Object.()V</span><br><span class="line">31 2 aot[ 1] java.lang.Object.finalize()V</span><br><span class="line">…… // 省略其他输出</span><br></pre></td></tr></table></figure></p><h1 id="三、即时编译器优化技术"><a href="#三、即时编译器优化技术" class="headerlink" title="三、即时编译器优化技术"></a>三、即时编译器优化技术</h1><p>即时编译器的代码优化都是基于代码的中间表示或者机器码，而不是源码。</p><h2 id="1-示例"><a href="#1-示例" class="headerlink" title="1.示例"></a>1.示例</h2><ol><li>优化前的代码<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">B</span> &#123;</span><br><span class="line">   <span class="type">int</span> value;</span><br><span class="line">   <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> value;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">foo</span><span class="params">()</span> &#123;</span><br><span class="line">   y = b.get();</span><br><span class="line">   <span class="comment">// ...do stuff...</span></span><br><span class="line">   z = b.get();</span><br><span class="line">   sum = y + z;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>方法内联后的代码<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">foo</span><span class="params">()</span> &#123;</span><br><span class="line">   y = b.value;</span><br><span class="line">   <span class="comment">// ...do stuff...</span></span><br><span class="line">   z = b.value;</span><br><span class="line">   sum = y + z;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>冗余存储消除的代码<br>假设do stuff不会改变b.value的值。可将z=b.value;替换为z=y;<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">foo</span><span class="params">()</span> &#123;</span><br><span class="line">   y = b.value;</span><br><span class="line">   <span class="comment">// ...do stuff...</span></span><br><span class="line">   z = y;</span><br><span class="line">   sum = y + z;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>复写传播后的代码<br>因为z=y; 所以变量z可用y来替换。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">foo</span><span class="params">()</span> &#123;</span><br><span class="line">   y = b.value;</span><br><span class="line">   <span class="comment">// ...do stuff...</span></span><br><span class="line">   y = y;</span><br><span class="line">   sum = y + y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>无用代码消除后的代码<br>无用代码是可能永远不会被执行的代码，也可能是完全没有意义的代码。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">foo</span><span class="params">()</span> &#123;</span><br><span class="line">   y = b.value;</span><br><span class="line">   <span class="comment">// ...do stuff...</span></span><br><span class="line">   sum = y + y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="2-重要的优化技术"><a href="#2-重要的优化技术" class="headerlink" title="2. 重要的优化技术"></a>2. 重要的优化技术</h2><h3 id="2-1-方法内联"><a href="#2-1-方法内联" class="headerlink" title="2.1 方法内联"></a>2.1 方法内联</h3><p>将目标方法原封不动的复制到发起调用的方法中，避免发生真实的方法调用。<br>可消除方法调用的成本(如查找方法版本、建立栈帧等)；为后续优化手段做铺垫。方法内联膨胀后便于在更大范围内进行后续的优化。</p><p><strong>什么是虚方法？</strong><br>Java使用虚方法实现多态，即子类中被override修饰的重写方法。这些方法都可能存在多于一个版本的方法接收者。</p><p>可直接进行内联的方法(非虚方法)：<br>○ invokespecial指令调用的私有方法、实例构造器、父类方法；<br>○ invokestatic指令调用的静态方法；<br>○ final修饰的方法；</p><p>由于其存在多个版本，所以只能在运行时确定是哪个版本的方法。为了解决虚方法内联问题，Java虚拟机引入了<strong>类型继承关系分析(Class Hierarchy Analysis, CHA)</strong>的技术，用于确定目前已加载的类中，某个接口是否有多于一种的实现、某个类是否存在子类、某个子类是否覆盖了父类的某个虚方法等信息。<br>对于虚方法：</p><ul><li>向CHA查询该方法，若只有一个版本，则进行<strong>守护内联</strong>，若加载到新的类型从而改变了CHA的结论，则进行<strong>激进预测性优化</strong>；</li><li><p>向CHA查询该方法，若有多个版本，则使用<strong>内联缓存</strong>缩减方法调用的开销。</p><ul><li><p>单态内联缓存：<br>建立在目标方法正常入口之前的缓存。在方法调用之前，内联缓存状态为空，当第一次调用发生后，缓存记录下方法接收者的版本信息，并且每次进行方法调用时都比较接收者的版本。如果以后进来的每次调用的方法接收者版本都是一样的，那么这时它就是一种单态内联缓存。相比于废墟方法调用，仅多了一次类型判断的开销。</p></li><li><p>超多态内联缓存<br>但如果真的出现方法接收者不一致的情况，就说明程序用到了虚方法的多态特性，这时候会退化成超多态内联缓存，其开销相当于真正查找虚方法表来进行方法分派。</p></li></ul></li></ul><h3 id="2-2-逃逸分析"><a href="#2-2-逃逸分析" class="headerlink" title="2.2 逃逸分析"></a>2.2 逃逸分析</h3><p>并不直接优化代码，而是为其他优化措施提供依据的分析技术。</p><ul><li>方法逃逸<br>对象可能被外部方法引用，但不会被其他线程引用。</li><li>线程逃逸<br>对象被其他线程引用。</li></ul><p>若对象不会逃逸到方法外或者线程外，可采用的优化技术有：</p><ul><li>栈上分配。<br>在Java堆上分配的对象是各线程可见和共享的，这部分对象的销毁是需要垃圾收集器处理的。若对象作用域仅限于<strong>本线程内</strong>，则可以在栈上为该对象分配内存，随栈帧的出栈而销毁。这部分对象会随着方法的结束而自动销毁，减少垃圾收集子系统的压力。</li><li>标量替换。<br>将Java对象的成员变量拆分为原始类型来访问的过程，成为标量替换。对于<strong>作用域仅限于本方法内的对象</strong>，可以不创建该对象，直接在栈上分配和读写拆分后的原始类型变量。它是栈上分配的一种特例。</li><li>同步消除。<br>对于不会逃逸到线程之外的对象，它的线程同步的措施可以消除掉。</li></ul><p>用到的参数：<br><code>-XX：+DoEscapeAnalysis</code>：手动开启逃逸分析。<br><code>-XX：+PrintEscapeAnalysis</code>：查看逃逸分析结果。<br><code>-XX：+EliminateAllocations</code>：开启标量替换。<br><code>+XX：+EliminateLocks</code>：开启同步消除。<br><code>-XX：+PrintEliminateAllocations</code>：查看标量替换情况。</p><p>逃逸分析需要进行复杂的<strong>数据流敏感的过程间分析</strong>，才能确定执行时对此对象的影响。由于逃逸分析的复杂度较高，可能开启后并不能导致性能提升。</p><p>示例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 完全未优化的代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">   <span class="type">int</span> <span class="variable">xx</span> <span class="operator">=</span> x + <span class="number">2</span>;</span><br><span class="line">   <span class="type">Point</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Point</span>(xx, <span class="number">42</span>);</span><br><span class="line">   <span class="keyword">return</span> p.getX();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 步骤1：构造函数内联后的样子</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">   <span class="type">int</span> <span class="variable">xx</span> <span class="operator">=</span> x + <span class="number">2</span>;</span><br><span class="line">   <span class="type">Point</span> <span class="variable">p</span> <span class="operator">=</span> point_memory_alloc(); <span class="comment">// 在堆中分配P对象的示意方法</span></span><br><span class="line">   p.x = xx; <span class="comment">// Point构造函数被内联后的样子</span></span><br><span class="line">   p.y = <span class="number">42</span></span><br><span class="line">   <span class="keyword">return</span> p.x; <span class="comment">// Point::getX()被内联后的样子</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 步骤2：Point对象不会逃逸到方法外，进行标量替换后的样子</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">   <span class="type">int</span> <span class="variable">xx</span> <span class="operator">=</span> x + <span class="number">2</span>;</span><br><span class="line">   <span class="type">int</span> <span class="variable">px</span> <span class="operator">=</span> xx;</span><br><span class="line">   <span class="type">int</span> <span class="variable">py</span> <span class="operator">=</span> <span class="number">42</span></span><br><span class="line">   <span class="keyword">return</span> px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 步骤3：经过数据流分析，消除Point对象。做无效代码消除后的样子</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">   <span class="keyword">return</span> x + <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="2-3-公共子表达式消除"><a href="#2-3-公共子表达式消除" class="headerlink" title="2.3 公共子表达式消除"></a>2.3 公共子表达式消除</h3><p>相同的表达式出现在了不同的地方，其计算结果可以在后面用到时直接给出，而不必重复计算。<br>根据表达式的分布范围，可分为<strong>局部公共子表达式消除</strong>、<strong>全局公共子表达式消除</strong>。</p><p>示例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 待优化代码</span></span><br><span class="line"><span class="type">int</span> <span class="variable">d</span> <span class="operator">=</span> (c * b) * <span class="number">12</span> + a + (a + b * c);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 未作任何优化的字节码</span></span><br><span class="line">iload_2 <span class="comment">// b</span></span><br><span class="line">imul <span class="comment">// 计算b*c</span></span><br><span class="line">bipush <span class="number">12</span> <span class="comment">// 推入12</span></span><br><span class="line">imul <span class="comment">// 计算(c * b) * 12</span></span><br><span class="line">iload_1 <span class="comment">// a</span></span><br><span class="line">iadd <span class="comment">// 计算(c * b) * 12 + a</span></span><br><span class="line">iload_1 <span class="comment">// a</span></span><br><span class="line">iload_2 <span class="comment">// b</span></span><br><span class="line">iload_3 <span class="comment">// c</span></span><br><span class="line">imul <span class="comment">// 计算b * c</span></span><br><span class="line">iadd <span class="comment">// 计算a + b * c</span></span><br><span class="line">iadd <span class="comment">// 计算(c * b) * 12 + a + a + b * c</span></span><br><span class="line">istore </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 即时编译时的优化</span></span><br><span class="line"><span class="type">int</span> <span class="variable">d</span> <span class="operator">=</span> E * <span class="number">12</span> + a + (a + E);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 代数化简优化（并不属于公共子表达式消除优化范围内）</span></span><br><span class="line"><span class="type">int</span> <span class="variable">d</span> <span class="operator">=</span> E * <span class="number">13</span> + a + a;</span><br></pre></td></tr></table></figure></p><h3 id="2-4-数组边界检查消除"><a href="#2-4-数组边界检查消除" class="headerlink" title="2.4 数组边界检查消除"></a>2.4 数组边界检查消除</h3><p>每次数组读写都会隐含一次范围条件判定操作，降低了性能。在<strong>经过数据流分析</strong>后，若循环变量的取值范围永远在[0，foo.length)之间，那么该数组的上下界检查就会被消除掉。</p>]]></content>
      
      
      <categories>
          
          <category> 深入理解Java虚拟机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深入理解Java虚拟机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解Java虚拟机10</title>
      <link href="/JeckFS/2020/05/24/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA10/"/>
      <url>/JeckFS/2020/05/24/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA10/</url>
      
        <content type="html"><![CDATA[<h1 id="前端编译与优化"><a href="#前端编译与优化" class="headerlink" title="前端编译与优化"></a>前端编译与优化</h1><blockquote class="pullquote mindmap mindmap-md"><ul><li>[前端编译与优化]<ul><li>三种不同的编译器<ul><li>前端编译器</li><li>即时编译器</li><li>提前编译器</li></ul></li><li>Javac编译器<ul><li>编译过程<ul><li>标记的概念</li><li>抽象语法树的概念及作用</li><li>符号表是啥</li><li>轮次(Round)的概念</li><li>final语义检查</li></ul></li><li>Java语法糖<ul><li>实现泛型的两种方法及优缺点</li><li>Signature属性对于反射的作用</li><li>自动装箱,拆箱,遍历循环与变长参数</li><li>自动装箱的陷阱</li><li>条件编译</li></ul></li><li>注解处理器实战<ul><li>自定义插入式注解处理器的步骤<ul><li>抽象类javax.annotation.processing.AbstractProcessor</li><li>process()的参数及返回值的意义</li><li>语法树节点的种类</li><li>AbstractProcessor的实例变量processingEnv的作用</li><li>@SupportedAnnotationTypes和@SupportedSourceVersion</li></ul></li><li>javac的 -processor参数、-XprintRounds参数、-XprintProcessorInfo参数</li></ul></li></ul></li></ul></li></ul></blockquote><ul><li>[前端编译与优化]<ul><li>概述<ul><li>前端编译器<ul><li>将＊.java文件转变成＊.class文件</li><li>如：Javac，Eclipse JDT中的增量式编译器(ECJ)</li><li>支撑着程序员的编码效率</li></ul></li><li>即时编译器(JIT编译器)<ul><li>在运行期把字节码转变成本地机器码</li><li>如：HotSpot中的C1，C2编译器，以及Graal编译器</li><li>决定了程序的执行效率。</li></ul></li><li>静态的提前编译器(AOT编译器)<ul><li>直接把程序编译成与目标机器指令集相关的二进制代码</li><li>如：jdk的Jaotc</li></ul></li></ul></li><li>Javac编译器(用Java实现)<ul><li>编译过程<ul><li>1.准备过程：初始化插入式注解处理器</li><li>2.解析与填充符号表过程<ul><li>2.1.词法分析：将源代码的字符流转化为标记集合的过程。<ul><li>标记是编译时的最小元素。</li><li>int a=b+2;中的标记有：int,a,=,b,+,2.</li></ul></li><li>2.2.语法分析：根据标记序列构造抽象语法树(AST)<ul><li>抽象语法树的每个节点代表程序代码中的一个语法结构。如包，类型，修饰符，运算符，接口，返回值，代码注释等。</li><li>抽象语法树都是基于抽象语法树的，而不是源码字符流。</li></ul></li><li>2.3.填充符号表。产生符号地址和符号信息。<ul><li>符号表是一组符号地址和符号信息构成的数据结构。类似哈希表中的键值对的存储形式。</li></ul></li></ul></li><li>3.插入式注解处理器的注解处理过程。见实战。<ul><li>整体认识<ul><li>在设计上原本是与普通Java代码一样，在程序运行期间发挥作用的。</li><li>使用“插入式注解处理器”的标准API，提前至编译期对代码中的特定注解进行处理。</li><li>该API允许在处理注解期间读取，修改，添加抽象语法树中的任意元素。若AST发生修改，则返回到解析及填充符号表的过程重新处理。这一循环过程称为一个“轮次(Round)”。</li></ul></li><li>应用：Lombok，通过注解生成getter/setter方法，产生equals()与hashCode()方法等。</li></ul></li><li>4.语义分析与字节码生成过程<ul><li>语义分析<ul><li>标注检查。<ul><li>用途：变量使用前是否被声明、变量与赋值之间的数据类型是否匹配等。</li><li>优化技术：常量折叠。</li></ul></li><li>数据流及控制流分析。对程序动态运行过程进行检查。<ul><li>用途：程序局部变量在使用前是否赋值、方法的每条路径是否都有返回值、是否所有的受查异常都被正确处理等问题。</li><li>应用：final语义校验。</li></ul></li></ul></li><li>字节码生产过程<ul><li>解语法糖。将简化代码编写的语法糖转化为原有的形式。<ul><li>对编译结果和功能无影响。可以减少代码量。Java虚拟机不支持语法糖，语法糖在编译阶段被还原回原始的基础语法结构。</li><li>应用：<ul><li>泛型</li><li>变长参数</li><li>自动装箱拆箱</li></ul></li></ul></li><li>字节码生成<ul><li>将语法树、符号表等前面步骤生成的信息转化为字节码指令存储到磁盘。另外将实例构造器<code>&lt;init&gt;()</code>方法与类构造器<code>&lt;clinit&gt;()</code>添加到语法树中。</li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul><img src="/JeckFS/2020/05/24/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA10/1.png" class="" title="This is 1-th image."><img src="/JeckFS/2020/05/24/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA10/2.png" class="" title="This is 2-th image."><img src="/JeckFS/2020/05/24/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA10/3.png" class="" title="This is 3-th image."><p>常量折叠：<br><code>int a = 1 + 2;</code><br><img src="/JeckFS/2020/05/24/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA10/4.png" class="" title="This is 4-th image."></p><p>final语义校验：<br>编译后的字节码是一模一样的。final变量的不变性仅由javac编译器在编译期间保证。<br><img src="/JeckFS/2020/05/24/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA10/5.png" class="" title="This is 5-th image."></p><p><code>&lt;init&gt;()</code>与<code>&lt;clinit&gt;()</code>的作用：<br>static{}块、变量初始化（实例变量和类变量）、调用父类的实例构造器等操作收敛到<code>&lt;init&gt;()</code>与<code>&lt;clinit&gt;()</code>中执行。</p><h1 id="Java语法糖"><a href="#Java语法糖" class="headerlink" title="Java语法糖"></a>Java语法糖</h1><h2 id="1-泛型"><a href="#1-泛型" class="headerlink" title="1.泛型"></a>1.泛型</h2><h3 id="1-1-实现泛型的方法"><a href="#1-1-实现泛型的方法" class="headerlink" title="1.1 实现泛型的方法"></a>1.1 实现泛型的方法</h3><ol><li><p>类型擦除式泛型<br>只存在于源码中，在编译后的字节码中，全部泛型都被替换成原来的<strong>裸类型</strong>。并在相应地方插入了<strong>强制类型转换代码</strong>。</p><p><code>ArrayList&lt;int&gt;</code>与<code>ArrayList&lt;String&gt;</code>是同一个类型.</p><p>缺点:<br>a) 无法使用泛型创建对象和数组. 即运行期无法获取泛型类型信息.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TypeErasureGenerics</span>&lt;E&gt; &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doSomething</span><span class="params">(Object item)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (item <span class="keyword">instanceof</span> E) &#123;   <span class="comment">// 不合法，无法对泛型进行实例判断</span></span><br><span class="line">      ...</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">E</span> <span class="variable">newItem</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">E</span>();       <span class="comment">// 不合法，无法使用泛型创建对象</span></span><br><span class="line">    E[] itemArray = <span class="keyword">new</span> <span class="title class_">E</span>[<span class="number">10</span>]; <span class="comment">// 不合法，无法使用泛型创建数组</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>b) 不支持原生类型. 在实现泛型过程中需不断地拆箱装箱, 耗费性能.<br>因为Java在类型擦除后所有的类型都转化为Object, 而原生类型如int, double等不能与Object类型转换, 所以int要转化为Integer, double要转化为Double. 在存取数据时原生数据需要不断的自动装箱和拆箱. 可参考类型擦除.</p><p>c) 泛型参数的重载缺陷<br>虽然重载要求方法的特征签名(不包括返回值)不同, 但是在参数是泛型时有些特殊, 返回值的不同可以标识不同的函数.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 由于类型擦除后,方法的返回值以及特征签名都相同,所以编译不通过</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GenericTypes</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">(List&lt;String&gt; list)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;invoke method(List&lt;String&gt; list)&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">(List&lt;Integer&gt; list)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;invoke method(List&lt;Integer&gt; list)&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 虽然方法特征签名不同,但返回值不同,虚拟机允许在class文件中并存.可以通过编译.</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GenericTypes</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">method</span><span class="params">(List&lt;String&gt; list)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;invoke method(List&lt;String&gt; list)&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">method</span><span class="params">(List&lt;Integer&gt; list)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;invoke method(List&lt;Integer&gt; list)&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    method(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;());</span><br><span class="line">    method(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>49.0</code>以上版本的class文件的虚拟机可以识别Signature参数. 为解决获取泛型类中的参数化类型,引入了Signature, LocalVariableTypeTable属性.<br>Signature属性可以存储一个方法在字节码层面的特征签名, 其<strong>保存了参数化类型的信息</strong>,所以可以在运行时获取泛型的参数化类型. 这在虚拟机解析,反射等情况下要用到.<br>从Signature属性的出现我们还可以得出结论，擦除法所谓的擦除，仅仅是对方法的Code属性中的字节码进行擦除，实际上元数据中还是保留了泛型信息，这也是我们在编码时能通过反射手段取得参数化类型的根本依据。<br>[ps: 一个Java程序中的信息分为代码（Code，方法体里面的Java代码）和元数据（Metadata，包括类、字段、方法定义及其他信息）两部分。]</p><p>优点:<br>a) 不需改动字节码和Java虚拟机, 可保证老版本中没有使用泛型的代码仍可运行在后续支持泛型的代码中. 即向前兼容.</p><p>1.1 类型擦除<br>为了保证类型转换的安全, 所有的泛型类型都是裸类型的子类. 保证裸类型赋值是安全的.<br>如:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;Integer&gt; ilist = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;();</span><br><span class="line">ArrayList&lt;String&gt; slist = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line">ArrayList list; <span class="comment">// 裸类型</span></span><br><span class="line">list = ilist;   <span class="comment">// 裸类型赋值</span></span><br><span class="line">list = slist;   <span class="comment">// 裸类型赋值</span></span><br></pre></td></tr></table></figure><p>实现的方式是: 在编译时直接把<code>ArrayList&lt;Integer&gt; ArrayList&lt;String&gt;</code>还原回ArrayList, 只有在元素访问,修改时自动插入一些强制类型转换和检查命令.如:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 擦除前</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">  Map&lt;String, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, String&gt;();</span><br><span class="line">  map.put(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;你好&quot;</span>);</span><br><span class="line">  map.put(<span class="string">&quot;how are you?&quot;</span>, <span class="string">&quot;吃了没？&quot;</span>);</span><br><span class="line">  System.out.println(map.get(<span class="string">&quot;hello&quot;</span>));</span><br><span class="line">  System.out.println(map.get(<span class="string">&quot;how are you?&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//擦除后</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">  <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">  map.put(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;你好&quot;</span>);</span><br><span class="line">  map.put(<span class="string">&quot;how are you?&quot;</span>, <span class="string">&quot;吃了没？&quot;</span>);</span><br><span class="line">  System.out.println((String) map.get(<span class="string">&quot;hello&quot;</span>));</span><br><span class="line">  System.out.println((String) map.get(<span class="string">&quot;how are you?&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>具现化式泛型<br>在源码中,编译后的中间语言表示上, 运行期的CLR中都是切实存在的.<code>List&lt;int&gt;</code>与<code>List&lt;string&gt;</code>是不同的类型,它们由系统在运行期生成.</li></ol><h2 id="2-自动装箱-拆箱-遍历循环与变长参数"><a href="#2-自动装箱-拆箱-遍历循环与变长参数" class="headerlink" title="2.自动装箱,拆箱,遍历循环与变长参数"></a>2.自动装箱,拆箱,遍历循环与变长参数</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 源码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">  List&lt;Integer&gt; list = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line">  <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i : list) &#123;</span><br><span class="line">    sum += i;</span><br><span class="line">  &#125;</span><br><span class="line">  System.out.println(sum);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 编译后</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">  <span class="type">List</span> <span class="variable">list</span> <span class="operator">=</span> Arrays.asList( <span class="keyword">new</span> <span class="title class_">Integer</span>[] &#123;</span><br><span class="line">    Integer.valueOf(<span class="number">1</span>),</span><br><span class="line">    Integer.valueOf(<span class="number">2</span>),</span><br><span class="line">    Integer.valueOf(<span class="number">3</span>),</span><br><span class="line">    Integer.valueOf(<span class="number">4</span>) &#125;);</span><br><span class="line">  <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">Iterator</span> <span class="variable">localIterator</span> <span class="operator">=</span> list.iterator(); localIterator.hasNext(); ) &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> ((Integer)localIterator.next()).intValue();</span><br><span class="line">    sum += i;</span><br><span class="line">  &#125;</span><br><span class="line">  System.out.println(sum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自动装箱,拆箱  —-&gt;  Integer.valueOf(), Integer.intValue()<br>遍历循环      —-&gt;  迭代器实现  (被遍历的类需要实现Iterable接口)<br>变长参数      —-&gt;  变为数组类型参数</p><p>自动装箱的陷阱:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">  <span class="type">Integer</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">  <span class="type">Integer</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">  <span class="type">Integer</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">  <span class="type">Integer</span> <span class="variable">d</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">  <span class="type">Integer</span> <span class="variable">e</span> <span class="operator">=</span> <span class="number">321</span>;</span><br><span class="line">  <span class="type">Integer</span> <span class="variable">f</span> <span class="operator">=</span> <span class="number">321</span>;</span><br><span class="line">  <span class="type">Long</span> <span class="variable">g</span> <span class="operator">=</span> <span class="number">3L</span>;</span><br><span class="line">  System.out.println(c == d); <span class="comment">// T</span></span><br><span class="line">  System.out.println(e == f); <span class="comment">// F</span></span><br><span class="line">  System.out.println(c == (a + b)); <span class="comment">// T</span></span><br><span class="line">  System.out.println(c.equals(a + b)); <span class="comment">// T</span></span><br><span class="line">  System.out.println(g == (a + b)); <span class="comment">// T</span></span><br><span class="line">  System.out.println(g.equals(a + b)); <span class="comment">// F</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li>包装类的“==”运算在不遇到算术运算的情况下不会自动拆箱</li><li>包装类的equals()方法不处理数据转型的关系</li></ul><h2 id="3-条件编译"><a href="#3-条件编译" class="headerlink" title="3.条件编译"></a>3.条件编译</h2><p>使用条件为常量的if语句。条件编译仅针对某个语句块(Block).<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 编译前</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;block 1&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;block 2&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 编译后</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">  System.out.println(<span class="string">&quot;block 1&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 其他条件语句不可以完成条件编译</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">  <span class="comment">// 编译器将会提示“Unreachable code”</span></span><br><span class="line">  <span class="keyword">while</span> (<span class="literal">false</span>) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="4-其他给予语法糖实现的语法"><a href="#4-其他给予语法糖实现的语法" class="headerlink" title="4.其他给予语法糖实现的语法"></a>4.其他给予语法糖实现的语法</h2><p>内部类、枚举类、断言语句、数值字面量、对枚举和字符串的switch支持、try语句中定义和关闭资源（这3个从JDK 7开始支持）、Lambda表达式（从JDK 8开始支持，Lambda不能算是单纯的语法糖，但在前端编译器中做了大量的转换工作），等等<br>可以通过跟踪Javac源码、反编译Class文件等方式了解它们的本质实现。</p><p><a href="https://blog.csdn.net/peng425/article/details/102814754">https://blog.csdn.net/peng425/article/details/102814754</a></p><h1 id="实战：插入式注解处理器"><a href="#实战：插入式注解处理器" class="headerlink" title="实战：插入式注解处理器"></a>实战：插入式注解处理器</h1><h2 id="1-目标"><a href="#1-目标" class="headerlink" title="1.目标"></a>1.目标</h2><p>实现检查Java程序是否符合命名规范.</p><ul><li>类（或接口）：符合驼式命名法，首字母大写。</li><li>方法：符合驼式命名法，首字母小写。</li><li>字段：<ul><li>类或实例变量。符合驼式命名法，首字母小写。</li><li>常量。要求全部由大写字母或下划线构成，并且第一个字符不能是下划线。</li></ul></li></ul><h2 id="2-代码实现"><a href="#2-代码实现" class="headerlink" title="2.代码实现"></a>2.代码实现</h2><p>通过<strong>注解处理器API</strong>实现一个编译器插件. </p><ol><li>继承抽象类javax.annotation.processing.AbstractProcessor</li><li><p>实现process()方法. 该方法是Javac编译器在执行注解处理器代码时要调用的过程.<br>方法参数:<br>annotations: 中获取到此注解处理器所要处理的注解集合<br>roundEnv: 访问到当前这个轮次（Round）中的抽象语法树节点，每个语法树节点在这里都表示为一个Element。</p><p>Java代码中可能出现的全部元素:<br>包（PACKAGE）、<br>枚举（ENUM）、<br>类（CLASS）、<br>注解（ANNOTATION_TYPE）、<br>接口（INTERFACE）、<br>枚举值（ENUM_CONSTANT）、<br>字段（FIELD）、<br>参数（PARAMETER）、<br>本地变量（LOCAL_VARIABLE）、<br>异常（EXCEPTION_PARAMETER）、<br>方法（METHOD）、<br>构造函数（CONSTRUCTOR）、<br>静态语句块（STATIC_INIT，即static{}块）、<br>实例语句块（INSTANCE_INIT，即{}块）、<br>参数化类型（TYPE_PARAMETER，泛型尖括号内的类型）、<br>资源变量（RESOURCE_VARIABLE，try-resource中定义的变量）、<br>模块（MODULE）和未定义的其他语法树节点（OTHER）.</p></li><li><p>AbstractProcessor中的一个protected变量: processingEnv<br>它在注解处理器初始化的时候（<strong>init()</strong>方法执行的时候）创建，继承了AbstractProcessor的注解处理器代码可以直接访问它。它代表了注解处理器框架提供的一个<strong>上下文环境</strong>，要<strong>创建新的代码、向编译器输出信息、获取其他工具类</strong>等都需要用到这个实例变量。</p></li><li><p>添加注解@SupportedAnnotationTypes和@SupportedSourceVersion<br>前者代表了这个注解处理器对<strong>哪些注解</strong>感兴趣，可以使用星号“<em>”作为通配符代表对所有的注解都感兴趣，后者指出这个注解处理器可以处理<em>*哪些版本</em></em>的Java代码。</p></li><li><p>注解处理器在运行时是单例的. 若不需要改变或添加抽象语法树中的内容,process()返回false.</p></li></ol><p>注解处理器NameCheckProcessor<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 可以用&quot;*&quot;表示支持所有Annotations</span></span><br><span class="line"><span class="meta">@SupportedAnnotationTypes(&quot;*&quot;)</span></span><br><span class="line"><span class="comment">// 只支持JDK 6的Java代码</span></span><br><span class="line"><span class="meta">@SupportedSourceVersion(SourceVersion.RELEASE_6)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NameCheckProcessor</span> <span class="keyword">extends</span> <span class="title class_">AbstractProcessor</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> NameChecker nameChecker;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化名称检查插件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(ProcessingEnvironment processingEnv)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.init(processingEnv);</span><br><span class="line">        nameChecker = <span class="keyword">new</span> <span class="title class_">NameChecker</span>(processingEnv);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对输入的语法树的各个节点进行名称检查</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">process</span><span class="params">(Set&lt;? extends TypeElement&gt; annotations, RoundEnvironment roundEnv)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!roundEnv.processingOver()) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Element element : roundEnv.getRootElements())</span><br><span class="line">                nameChecker.checkNames(element);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>命名检查器NameChecker<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 程序名称规范的编译器插件：&lt;br&gt;</span></span><br><span class="line"><span class="comment"> * 如果程序命名不合规范，将会输出一个编译器的WARNING信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NameChecker</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Messager messager;</span><br><span class="line">    <span class="type">NameCheckScanner</span> <span class="variable">nameCheckScanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NameCheckScanner</span>();</span><br><span class="line">    NameChecker(ProcessingEnvironment processsingEnv) &#123;</span><br><span class="line">        <span class="built_in">this</span>.messager = processsingEnv.getMessager();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对Java程序命名进行检查，根据《Java语言规范》第三版第6.8节的要求，Java程序命名应当符合下列格式：</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;ul&gt;</span></span><br><span class="line"><span class="comment">     * &lt;li&gt;类或接口：符合驼式命名法，首字母大写。</span></span><br><span class="line"><span class="comment">     * &lt;li&gt;方法：符合驼式命名法，首字母小写。</span></span><br><span class="line"><span class="comment">     * &lt;li&gt;字段：</span></span><br><span class="line"><span class="comment">     * &lt;ul&gt;</span></span><br><span class="line"><span class="comment">     * &lt;li&gt;类、实例变量: 符合驼式命名法，首字母小写。</span></span><br><span class="line"><span class="comment">     * &lt;li&gt;常量: 要求全部大写。</span></span><br><span class="line"><span class="comment">     * &lt;/ul&gt;</span></span><br><span class="line"><span class="comment">     * &lt;/ul&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">checkNames</span><span class="params">(Element element)</span> &#123;</span><br><span class="line">        nameCheckScanner.scan(element);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 名称检查器实现类，继承了JDK 6中新提供的ElementScanner6&lt;br&gt;</span></span><br><span class="line"><span class="comment">     * 将会以Visitor模式访问抽象语法树中的元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">NameCheckScanner</span> <span class="keyword">extends</span> <span class="title class_">ElementScanner6</span>&lt;Void, Void&gt; &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 此方法用于检查Java类</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Void <span class="title function_">visitType</span><span class="params">(TypeElement e, Void p)</span> &#123;</span><br><span class="line">            scan(e.getTypeParameters(), p);</span><br><span class="line">            checkCamelCase(e, <span class="literal">true</span>);</span><br><span class="line">            <span class="built_in">super</span>.visitType(e, p);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 检查方法命名是否合法</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Void <span class="title function_">visitExecutable</span><span class="params">(ExecutableElement e, Void p)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (e.getKind() == METHOD) &#123;</span><br><span class="line">                <span class="type">Name</span> <span class="variable">name</span> <span class="operator">=</span> e.getSimpleName();</span><br><span class="line">                <span class="keyword">if</span> (name.contentEquals(e.getEnclosingElement().getSimpleName()))</span><br><span class="line">                    messager.printMessage(WARNING, <span class="string">&quot;一个普通方法 “&quot;</span> + name + <span class="string">&quot;”不应当与类名重复，避免与构造函数产生混淆&quot;</span>, e);</span><br><span class="line">                checkCamelCase(e, <span class="literal">false</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">super</span>.visitExecutable(e, p);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 检查变量命名是否合法</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Void <span class="title function_">visitVariable</span><span class="params">(VariableElement e, Void p)</span> &#123;</span><br><span class="line"><span class="comment">// 如果这个Variable是枚举或常量，则按大写命名检查，否则按照驼式命名法规则检查</span></span><br><span class="line">            <span class="keyword">if</span> (e.getKind() == ENUM_CONSTANT || e.getConstantValue() != <span class="literal">null</span> || heuristicallyConstant(e))</span><br><span class="line">                checkAllCaps(e);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                checkCamelCase(e, <span class="literal">false</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 判断一个变量是否是常量</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">heuristicallyConstant</span><span class="params">(VariableElement e)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (e.getEnclosingElement().getKind() == INTERFACE)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (e.getKind() == FIELD &amp;&amp; e.getModifiers().containsAll(EnumSet.of(PUBLIC, STATIC, FINAL)))</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 检查传入的Element是否符合驼式命名法，如果不符合，则输出警告信息</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">checkCamelCase</span><span class="params">(Element e, <span class="type">boolean</span> initialCaps)</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> e.getSimpleName().toString();</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">previousUpper</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">conventional</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">firstCodePoint</span> <span class="operator">=</span> name.codePointAt(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span> (Character.isUpperCase(firstCodePoint)) &#123;</span><br><span class="line">                previousUpper = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">if</span> (!initialCaps) &#123;</span><br><span class="line">                    messager.printMessage(WARNING, <span class="string">&quot;名称“&quot;</span> + name + <span class="string">&quot;”应当以小写字母开头&quot;</span>, e);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Character.isLowerCase(firstCodePoint)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (initialCaps) &#123;</span><br><span class="line">                    messager.printMessage(WARNING, <span class="string">&quot;名称“&quot;</span> + name + <span class="string">&quot;”应当以大写字母开头&quot;</span>, e);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span></span><br><span class="line">                conventional = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (conventional) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">cp</span> <span class="operator">=</span> firstCodePoint;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> Character.charCount(cp); i &lt; name.length(); i += Character.charCount(cp)) &#123;</span><br><span class="line">                    cp = name.codePointAt(i);</span><br><span class="line">                    <span class="keyword">if</span> (Character.isUpperCase(cp)) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (previousUpper) &#123;</span><br><span class="line">                            conventional = <span class="literal">false</span>;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        previousUpper = <span class="literal">true</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span></span><br><span class="line">                        previousUpper = <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!conventional)</span><br><span class="line">                messager.printMessage(WARNING, <span class="string">&quot;名称“&quot;</span> + name + <span class="string">&quot;”应当符合驼式命名法（Camel Case Names）&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 大写命名检查，要求第一个字母必须是大写的英文字母，其余部分可以是下划线或大写字母</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">checkAllCaps</span><span class="params">(Element e)</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> e.getSimpleName().toString();</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">conventional</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">firstCodePoint</span> <span class="operator">=</span> name.codePointAt(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span> (!Character.isUpperCase(firstCodePoint))</span><br><span class="line">                conventional = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">boolean</span> <span class="variable">previousUnderscore</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">                <span class="type">int</span> <span class="variable">cp</span> <span class="operator">=</span> firstCodePoint;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> Character.charCount(cp); i &lt; name.length(); i += Character.charCount(cp)) &#123;</span><br><span class="line">                    cp = name.codePointAt(i);</span><br><span class="line">                    <span class="keyword">if</span> (cp == (<span class="type">int</span>) <span class="string">&#x27;_&#x27;</span>) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (previousUnderscore) &#123;</span><br><span class="line">                            conventional = <span class="literal">false</span>;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        previousUnderscore = <span class="literal">true</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        previousUnderscore = <span class="literal">false</span>;</span><br><span class="line">                        <span class="keyword">if</span> (!Character.isUpperCase(cp) &amp;&amp; !Character.isDigit(cp)) &#123;</span><br><span class="line">                            conventional = <span class="literal">false</span>;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!conventional)</span><br><span class="line">                messager.printMessage(WARNING, <span class="string">&quot;常量“&quot;</span> + name + <span class="string">&quot;”应当全部以大写字母或下划线命名，并且以字母开头&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>包含了多处不规范命名的代码样例<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BADLY_NAMED_CODE</span> &#123;</span><br><span class="line">    <span class="keyword">enum</span> <span class="title class_">colors</span> &#123;</span><br><span class="line">        red, blue, green;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">_FORTY_TWO</span> <span class="operator">=</span> <span class="number">42</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">NOT_A_CONSTANT</span> <span class="operator">=</span> _FORTY_TWO;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">BADLY_NAMED_CODE</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">NOTcamelCASEmethodNAME</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ol><li>运行与测试<br>通过Javac命令的“-processor”参数来执行编译时需要附带的注解处理器，如果有多个注解处理器的话，用逗号分隔。还可以使用-XprintRounds和-XprintProcessorInfo参数来查看注解处理器运作的详细信息.</li></ol><img src="/JeckFS/2020/05/24/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA10/6.png" class="" title="This is 6-th image.">]]></content>
      
      
      <categories>
          
          <category> 深入理解Java虚拟机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深入理解Java虚拟机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode494.目标和</title>
      <link href="/JeckFS/2020/05/23/leetcode494-%E7%9B%AE%E6%A0%87%E5%92%8C/"/>
      <url>/JeckFS/2020/05/23/leetcode494-%E7%9B%AE%E6%A0%87%E5%92%8C/</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><img src="/JeckFS/2020/05/23/leetcode494-%E7%9B%AE%E6%A0%87%E5%92%8C/1.png" class="" title="This is 1-th image."><img src="/JeckFS/2020/05/23/leetcode494-%E7%9B%AE%E6%A0%87%E5%92%8C/2.png" class="" title="This is 2-th image."><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>状态定义:<br><code>d[i][s]表示前i个元素组合成和为s的方法数.</code><br>状态转移方程为:<br><code>d[i][s] = d[i-1][s - nums[i-1] + d[i-1][s + nums[i-1]</code></p><p>本题的一个难点在于前i个元素和可以为负. 将负的状态转化为正的问题就解决了. 那么状态转移方程需要稍微变一下, 使得s不能为负.</p><p>想一下, nums数组最大可以获得和为多少的数字? 答案肯定是所有元素之和. 同理, 可以获得的和最小为负的所有元素之和. 那么状态转移返程中的s需要在最大值和最小值之间取值. 我们可以将使 s 变为 s+sum, 其中sum是所有元素之和.</p><p>那么状态转移方程就变为了:<br><code>d[i][sum + s] = d[i - 1][sum + s - nums[i-1] + d[i - 1][sum + s + nums[i-1]</code></p><p>base case:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">d[<span class="number">1</span>][sum + nums[<span class="number">0</span>]] = <span class="number">1</span>;</span><br><span class="line">d[<span class="number">1</span>][sum - nums[<span class="number">0</span>]] += <span class="number">1</span>;</span><br></pre></td></tr></table></figure><br>为什么不可以写成下面的呢?<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">d[<span class="number">1</span>][sum + nums[<span class="number">0</span>]] = d[<span class="number">1</span>][sum - nums[<span class="number">0</span>]] = <span class="number">1</span></span><br></pre></td></tr></table></figure><br>原因在于nums[0]可能为0. 0的前面可正可负, 是两种不同的组合.</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="comment">// 16ms 59.25%(中文) 17ms 63.63%(英文)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findTargetSumWays</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> S)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> e : nums) &#123;</span><br><span class="line">            sum += Math.abs(e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (S &gt; sum) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span>[][] d = <span class="keyword">new</span> <span class="title class_">int</span>[nums.length + <span class="number">1</span>][<span class="number">2</span>*sum+<span class="number">1</span>];</span><br><span class="line">        d[<span class="number">1</span>][sum + nums[<span class="number">0</span>]] = <span class="number">1</span>; <span class="comment">// 0的特殊情况</span></span><br><span class="line">        d[<span class="number">1</span>][sum - nums[<span class="number">0</span>]]  += <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt; nums.length + <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">s</span> <span class="operator">=</span> -sum; s &lt;= sum; s++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (sum + s - nums[i-<span class="number">1</span>] &gt;= <span class="number">0</span>)</span><br><span class="line">                    d[i][sum + s] += d[i - <span class="number">1</span>][sum + s - nums[i - <span class="number">1</span>]];</span><br><span class="line">                <span class="keyword">if</span> (sum + s + nums[i-<span class="number">1</span>] &lt;= <span class="number">2</span>*sum)</span><br><span class="line">                    d[i][sum + s] += d[i - <span class="number">1</span>][sum + s + nums[i - <span class="number">1</span>]];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> d[nums.length][sum+S];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 动态规划 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode44.通配符匹配</title>
      <link href="/JeckFS/2020/05/22/leetcode44-%E9%80%9A%E9%85%8D%E7%AC%A6%E5%8C%B9%E9%85%8D/"/>
      <url>/JeckFS/2020/05/22/leetcode44-%E9%80%9A%E9%85%8D%E7%AC%A6%E5%8C%B9%E9%85%8D/</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><img src="/JeckFS/2020/05/22/leetcode44-%E9%80%9A%E9%85%8D%E7%AC%A6%E5%8C%B9%E9%85%8D/1.png" class="" title="This is 1-th image."><img src="/JeckFS/2020/05/22/leetcode44-%E9%80%9A%E9%85%8D%E7%AC%A6%E5%8C%B9%E9%85%8D/2.png" class="" title="This is 2-th image."><img src="/JeckFS/2020/05/22/leetcode44-%E9%80%9A%E9%85%8D%E7%AC%A6%E5%8C%B9%E9%85%8D/3.png" class="" title="This is 3-th image."><img src="/JeckFS/2020/05/22/leetcode44-%E9%80%9A%E9%85%8D%E7%AC%A6%E5%8C%B9%E9%85%8D/4.png" class="" title="This is 4-th image."><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>状态定义:<br>$d[i][j]$表示串$s$的前$i$个字符组成的串与串$p$的前$j$个字符组成的字符串是否匹配.<br><code>d[i][j] = true</code>表示匹配<br><code>d[i][j] = false</code>表示不匹配</p><p>状态转移方程:<br><code>d[i][j] = (d[i-1][j-1] || d[i-1][j] || d[i][j-1]) &amp;&amp; p[j-1] == &#39;*&#39; || d[i-1][j-1] &amp;&amp; (s[i-1] == p[j-1] || p[j-1] == &#39;?&#39;);</code></p><p>怎么来的呢? (如何确定串s的前i个字符与串p的前j个字符是否是匹配的呢? )我们只需要思考什么时候串s的前i个字符与串p的前j个字符匹配即可.<br>分四种情况:<br><strong>情况1: 字符串$p$新添的字符是’*‘.</strong>, 即<code>p[j-1]==&#39;*&#39;</code><br>前提: ‘*‘的含义是匹配0个或多个.</p><ol><li>串s的前i-1个字符与串p的前j-1个字符是匹配的, 此时串p又添加一个’*‘, 串s添加一个字母, 那么d[i][j]一定是true的. 因为’*‘此时表示匹配0个字符的含义.<br>例如:<br>abcd  添加一个字母d<br>abc<em>  添加一个’\</em>‘<br>即<code>d[i][j] = d[i-1][j-1] || p[j-1] == &#39;*&#39;</code></li><li>串s的前i-1个字符与串p的前j个字符是匹配的, 此时串s添加一个字母, 因为<code>p[j-1]=&#39;*&#39;</code>, 所以<code>d[i][j] = true;</code>, 此时’*‘表示匹配多个.<br>例如:<br>ba  添加一个字母a<br>b<em><br>即`d[i][j] = d[i-1][j] || p[j-1] == ‘</em>‘`</li><li>串s的前i个字符与串p的前j-1个字符是匹配的, 此时串p添加一个’*‘, 那么<code>d[i][j]=true</code>, 此时’*‘表示匹配0个.<br>例如:<br>a<br>a<em>  添加一个’\</em>‘<br>即<code>d[i][j] = d[i][j-1] || p[j-1] == &#39;*&#39;</code><br><strong>情况2: 字符串$p$新添的字符是’?’.</strong><br>前提: ‘?’匹配一个字符</li></ol><p>串s的前i-1个字符与串p的前j-1个字符是匹配的, 此时串s添加一个字母, 串p添加一个’?’, 那么<code>d[i][j]=true</code>.<br>例如:<br>abcd  添加一个字母d<br>abc?  添加一个’?’<br><strong>情况3: 字符串$p$新添的字符是字母.</strong><br>这种情况只有两边添加的字符是相等的时, 才会匹配.<br>例如:<br>abcd  添加一个字母d<br>abcd  添加一个字母d<br><strong>情况4: 串s与串p是空串.</strong><br>默认认为它是匹配的. 即<code>d[0][0] = true;</code></p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="comment">// 21ms 66.94%(中文) 25ms 53.99%(英文)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isMatch</span><span class="params">(String S, String P)</span> &#123;</span><br><span class="line">        <span class="type">char</span>[] s = S.toCharArray();</span><br><span class="line">        <span class="type">char</span>[] p = P.toCharArray();</span><br><span class="line">        <span class="type">boolean</span>[][] d = <span class="keyword">new</span> <span class="title class_">boolean</span>[s.length+<span class="number">1</span>][p.length+<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        d[<span class="number">0</span>][<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= p.length; j++) &#123;</span><br><span class="line">            d[<span class="number">0</span>][j] = p[j-<span class="number">1</span>] == <span class="string">&#x27;*&#x27;</span> &amp;&amp; d[<span class="number">0</span>][j-<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= p.length; j++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= s.length; i++) &#123;</span><br><span class="line">                d[i][j] = (d[i-<span class="number">1</span>][j-<span class="number">1</span>] || d[i-<span class="number">1</span>][j] || d[i][j-<span class="number">1</span>]) &amp;&amp; p[j-<span class="number">1</span>] == <span class="string">&#x27;*&#x27;</span> || d[i-<span class="number">1</span>][j-<span class="number">1</span>] &amp;&amp; (s[i-<span class="number">1</span>] == p[j-<span class="number">1</span>] || p[j-<span class="number">1</span>] == <span class="string">&#x27;?&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> d[s.length][p.length];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 动态规划 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode518.零钱兑换II</title>
      <link href="/JeckFS/2020/05/21/leetcode518-%E9%9B%B6%E9%92%B1%E5%85%91%E6%8D%A2II/"/>
      <url>/JeckFS/2020/05/21/leetcode518-%E9%9B%B6%E9%92%B1%E5%85%91%E6%8D%A2II/</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><img src="/JeckFS/2020/05/21/leetcode518-%E9%9B%B6%E9%92%B1%E5%85%91%E6%8D%A2II/1.png" class="" title="This is 1-th image."><img src="/JeckFS/2020/05/21/leetcode518-%E9%9B%B6%E9%92%B1%E5%85%91%E6%8D%A2II/2.png" class="" title="This is 2-th image."><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>这是一种<strong>完全背包</strong>的题目.</p><p>状态定义：<br>$d[i][j]$表示前$i$个硬币, 凑成金额为$j$的硬币组合数.</p><p>状态转移方程:</p><script type="math/tex; mode=display">d[i][j] = \sum_{k = 0} d[i-1][j-k*coins[i-1]]</script><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="comment">// 41ms 7.39%(中文) 50ms 7.50%(英文)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">change</span><span class="params">(<span class="type">int</span> amount, <span class="type">int</span>[] coins)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (coins.length == <span class="number">0</span>) <span class="type">return</span> <span class="variable">amount</span> <span class="operator">=</span>= <span class="number">0</span> ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span>[][] d = <span class="keyword">new</span> <span class="title class_">int</span>[coins.length + <span class="number">1</span>][amount+<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt;= amount; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (j % coins[<span class="number">0</span>] == <span class="number">0</span>)</span><br><span class="line">                d[<span class="number">1</span>][j] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt;= coins.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt;= amount; j++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; j - k * coins[i-<span class="number">1</span>] &gt;= <span class="number">0</span>; k++) &#123;</span><br><span class="line">                    d[i][j] += d[i - <span class="number">1</span>][j - k * coins[i - <span class="number">1</span>]];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> d[coins.length][amount];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h1><p>将第$i$种硬币可以选无限个, 转化成选$coins[i] \times 2^k$个, 如果满足$coins[i] \times 2^k \le amount$.<br>即假设第$i$个硬币为5, 此时$amount=20$, 则该种硬币可以转化为5, 10, 20这四种硬币.<br>分别对应第$i$种硬币选1次, 选2次, 选4次. 那么选择3次的情况一定可以有前面这三种选择组合而成. 比如第$i$种硬币选择3次相当于选择硬币5与硬币10. 引用背包九讲一句话, “这是二进制思想, 不管最优策略选择几件第i种硬币, 其件数写成二进制后, 总可以表示成若干个$2^k$种硬币的和. 这样就把第i种物品拆成$O(log[V/coins[i]])$种硬币.”. 这样就将完全背包转化成普通的01背包问题.</p><p>状态转移方程为:</p><script type="math/tex; mode=display">d[i][j] = d[i - 1][j] + d[i - 1][j - cs[i - 1]], \\其中cs数组是硬币种类扩张后组成的数组.</script><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="comment">// 17ms 10.01%(中文) 28ms 8.93%(英文)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">change</span><span class="params">(<span class="type">int</span> amount, <span class="type">int</span>[] coins)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (coins.length == <span class="number">0</span>) <span class="type">return</span> <span class="variable">amount</span> <span class="operator">=</span>= <span class="number">0</span> ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (amount == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        List&lt;Integer&gt; t = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> e : coins) &#123;</span><br><span class="line">            t.add(e);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; e * (<span class="number">1</span> &lt;&lt; i) &lt;= amount; i++) &#123;</span><br><span class="line">                t.add(e * (<span class="number">1</span> &lt;&lt; i));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Integer[] cs = <span class="keyword">new</span> <span class="title class_">Integer</span>[t.size()];</span><br><span class="line">        <span class="type">int</span>[][] d = <span class="keyword">new</span> <span class="title class_">int</span>[cs.length + <span class="number">1</span>][amount+<span class="number">1</span>];</span><br><span class="line">        t.toArray(cs);</span><br><span class="line">        d[<span class="number">1</span>][cs[<span class="number">0</span>]] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt;= cs.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt;= amount; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (j - cs[i-<span class="number">1</span>] &gt; <span class="number">0</span>)</span><br><span class="line">                    d[i][j] = d[i - <span class="number">1</span>][j] + d[i - <span class="number">1</span>][j - cs[i - <span class="number">1</span>]];</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (j - cs[i-<span class="number">1</span>] == <span class="number">0</span>)</span><br><span class="line">                    d[i][j] = d[i-<span class="number">1</span>][j] + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    d[i][j] = d[i - <span class="number">1</span>][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> d[cs.length][amount];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用背包九讲中完全背包的思路优化后：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    d[i][j]表示前i个硬币面额凑成j元的组合数。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    d[i][j] = d[i-1][j] + d[i][j-coins[i]]</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    amount = 5, coins = [1,2,5]</span></span><br><span class="line"><span class="comment">    d[3][5] = d[2][5] + d[3][0] = 3 + 1 = 4</span></span><br><span class="line"><span class="comment">    d[2][5] = d[1][5] + d[2][3] = 1 + 2 = 3</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    d[1][5] = d[0][5] + d[1][4] = 1</span></span><br><span class="line"><span class="comment">    d[1][4] = d[0][4] + d[1][3] = 1</span></span><br><span class="line"><span class="comment">    d[1][3] = d[0][3] + d[1][2] = 1</span></span><br><span class="line"><span class="comment">    d[1][2] = d[0][2] + d[1][1] = 1</span></span><br><span class="line"><span class="comment">    d[1][1] = d[0][1] + d[1][0] = 1</span></span><br><span class="line"><span class="comment">    d[1][0] = 1</span></span><br><span class="line"><span class="comment">    d[0][1] = d[0][2] = d[0][3] = d[0][4] = d[0][5] = 0</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    d[2][3] = d[1][3] + d[2][1] = 2</span></span><br><span class="line"><span class="comment">    d[2][1] = d[1][1] + d[2][1-2] = 1</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    d[1][0] = d[2][0] = d[3][0] = 1</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">// 2ms 100%(中文)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">change</span><span class="params">(<span class="type">int</span> amount, <span class="type">int</span>[] coins)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] d = <span class="keyword">new</span> <span class="title class_">int</span>[amount + <span class="number">1</span>];</span><br><span class="line">        d[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; coins.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> coins[i]; j &lt;= amount; j++) &#123;</span><br><span class="line">                d[j] += d[j - coins[i]];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> d[amount];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 动态规划 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hdu-Bone-Collector</title>
      <link href="/JeckFS/2020/05/21/hdu-Bone-Collector/"/>
      <url>/JeckFS/2020/05/21/hdu-Bone-Collector/</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><img src="/JeckFS/2020/05/21/hdu-Bone-Collector/1.png" class="" title="This is 1-th image."><img src="/JeckFS/2020/05/21/hdu-Bone-Collector/2.png" class="" title="This is 2-th image."><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>背包问题，每种骨头价值为$value[i]$，体积为$volume[i]$a。有容量为V的背包，问该背包能够装下最大价值的骨头。</p><p>状态定义：<br>$d[i][j]$表示当背包容量为$j$时，从前$i$个骨头中挑选后能够得到的最大价值。<br>状态转移方程：</p><script type="math/tex; mode=display">d[i][j] = \max {d[i-1][j],d[i-1][j-volume[i-1]]+value[i-1]}</script><p>同样的代码用java不能通过，用C就能通过，WTF。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> T, N, V;</span><br><span class="line"><span class="type">int</span> value[<span class="number">1005</span>], volume[<span class="number">1005</span>];</span><br><span class="line"><span class="type">int</span> d[<span class="number">1005</span>][<span class="number">1005</span>];</span><br><span class="line"><span class="type">int</span> <span class="title function_">max</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a &gt; b ? a : b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">maxValue</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt;= V; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (j - volume[i - <span class="number">1</span>] &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                d[i][j] = max(d[i - <span class="number">1</span>][j], d[i - <span class="number">1</span>][j - volume[i - <span class="number">1</span>]] + value[i - <span class="number">1</span>]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                d[i][j] = d[i<span class="number">-1</span>][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> d[N][V];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="built_in">memset</span>(d, <span class="number">0</span>, <span class="keyword">sizeof</span>(d));</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;N, &amp;V);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;value[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; N; ++j) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;volume[j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, maxValue());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 动态规划 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode377.组合总和IV</title>
      <link href="/JeckFS/2020/05/20/leetcode377-%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8CIV/"/>
      <url>/JeckFS/2020/05/20/leetcode377-%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8CIV/</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><img src="/JeckFS/2020/05/20/leetcode377-%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8CIV/1.png" class="" title="This is 1-th image."><img src="/JeckFS/2020/05/20/leetcode377-%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8CIV/2.png" class="" title="This is 2-th image."><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>状态定义：<br><code>d[i][j]表示前i个元素组成和为j的个数</code><br>状态转移方程为：<br><code>d[i][j] = sum &#123;d[i-1][j - k * nums[i]]&#125;</code></p><p>这种方式是错误的，因为这种方式会认为仅仅顺序不同的序列是相同序列，与题意不符。其原因就是第一维限定了这种性质。所以应去掉第一维。</p><p>正确的状态定义为：<br><code>d[i]表示和为i的组合数</code><br>状态转移方程为：<br><code>d[i] = sum &#123;d[i - nums[j]]&#125;，其中j是nums数组的下标。</code><br>思考一下这种为什么会将顺序相同的序列考虑在内？</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="comment">// 2ms 58.36%(中文) 3ms 17.64%(英文)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">combinationSum4</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] d = <span class="keyword">new</span> <span class="title class_">int</span>[target + <span class="number">1</span>];</span><br><span class="line">        d[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= target; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; nums.length &amp;&amp; i - nums[j] &gt;= <span class="number">0</span>; j++) &#123;</span><br><span class="line">                d[i] += d[i - nums[j]];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> d[target];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>递归代码，但是超时。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="type">int</span>[][] d;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">helper</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> cur, <span class="type">int</span> redundant)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (redundant &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (redundant == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (d[cur][redundant] != <span class="number">0</span>) <span class="keyword">return</span> d[cur][redundant];</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            res += helper(nums, i, redundant - nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        d[cur][redundant] = res;<span class="number">377</span></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 超时</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">combinationSum4</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        d = <span class="keyword">new</span> <span class="title class_">int</span>[nums.length][target + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">return</span> helper(nums, <span class="number">0</span>, target);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 动态规划 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode718.最长重复子数组</title>
      <link href="/JeckFS/2020/05/19/leetcode718-%E6%9C%80%E9%95%BF%E9%87%8D%E5%A4%8D%E5%AD%90%E6%95%B0%E7%BB%84/"/>
      <url>/JeckFS/2020/05/19/leetcode718-%E6%9C%80%E9%95%BF%E9%87%8D%E5%A4%8D%E5%AD%90%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><img src="/JeckFS/2020/05/19/leetcode718-%E6%9C%80%E9%95%BF%E9%87%8D%E5%A4%8D%E5%AD%90%E6%95%B0%E7%BB%84/1.png" class="" title="This is 1-th image."><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>状态定义：<br><code>d[i][j]表示数组A中以元素A[i]结尾的子数组与数组B中以元素B[j]结尾的子数组可以构成的公共的长度最长的数组长度。</code></p><p>状态转移方程：<br><code>d[i][j] = d[i-1][j-1] + 1, A[i]=B[j]</code><br><code>d[i][j] = 0, A[i] != B[j]</code></p><p>使用res记录d[i][j]中最大的值。</p><p>【注意】题目中说的子数组是连续的子数组。</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="comment">// 73ms 27.76%(中文) 117ms 17.17%(英文)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findLength</span><span class="params">(<span class="type">int</span>[] A, <span class="type">int</span>[] B)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[][] d = <span class="keyword">new</span> <span class="title class_">int</span>[A.length+<span class="number">1</span>][B.length+<span class="number">1</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= A.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= B.length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (A[i-<span class="number">1</span>] == B[j-<span class="number">1</span>]) d[i][j] = d[i-<span class="number">1</span>][j-<span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> d[i][j] = <span class="number">0</span>;</span><br><span class="line">                res = Math.max(d[i][j], res);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 动态规划 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode322.零钱兑换</title>
      <link href="/JeckFS/2020/05/19/leetcode322-%E9%9B%B6%E9%92%B1%E5%85%91%E6%8D%A2/"/>
      <url>/JeckFS/2020/05/19/leetcode322-%E9%9B%B6%E9%92%B1%E5%85%91%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><img src="/JeckFS/2020/05/19/leetcode322-%E9%9B%B6%E9%92%B1%E5%85%91%E6%8D%A2/1.png" class="" title="This is 1-th image."><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>定义状态：<br>d[i]表示凑成金额 i 需要的最少硬币数。</p><p>状态转移方程为：<br><code>d[i] = min &#123;d[i - j * coins[k]] + j&#125;，其中j = 1,2,3...，k表示第k种硬币。</code><br>我们分析一下，什么会导致d[i]的变化呢。选择不同种类的硬币以及选择该种硬币的数量会影响d[i]。一句话就搞定了肯定是要枚举每一种硬币和其对应的数量，换句话说这是我们的决策或者说是选择，不同的选择导致不同的结果，我们要遍历一下每一种结果，取其中的最小值。请看代码，及其简单，唯一的缺点就是时间复杂度高了些。</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="comment">// 513ms 5%(中文) 571ms 5.01%(英文)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">coinChange</span><span class="params">(<span class="type">int</span>[] coins, <span class="type">int</span> amount)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] d = <span class="keyword">new</span> <span class="title class_">int</span>[amount + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= amount; i++) &#123;</span><br><span class="line">            d[i] = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt; coins.length; k++) &#123; <span class="comment">// k代表硬币种类</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; i - j * coins[k] &gt;= <span class="number">0</span>; j++) &#123;</span><br><span class="line">                    d[i] = Math.min(d[i], d[i - j * coins[k]] + j);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> d[amount] == <span class="number">1</span> &lt;&lt; <span class="number">30</span> ? -<span class="number">1</span> : d[amount];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第三维其实是没用的。interesting<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="comment">// 17ms 52.70%(中文) 26ms 28.32%(英文)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">coinChange</span><span class="params">(<span class="type">int</span>[] coins, <span class="type">int</span> amount)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] d = <span class="keyword">new</span> <span class="title class_">int</span>[amount + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= amount; i++) &#123;</span><br><span class="line">            d[i] = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt; coins.length; k++) &#123; <span class="comment">// k代表硬币种类</span></span><br><span class="line">                <span class="keyword">if</span> (i-coins[k] &gt;= <span class="number">0</span>)</span><br><span class="line">                    d[i] = Math.min(d[i], d[i - coins[k]] + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> d[amount] == <span class="number">1</span> &lt;&lt; <span class="number">30</span> ? -<span class="number">1</span> : d[amount];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>使用背包九讲的方法解决该完全背包问题：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    d[i][j]表示前i种面额兑换j元需要的最少硬币个数。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    d[i][j] = min&#123;d[i-1][j], d[i][j-coins[i]] + 1&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    验算：</span></span><br><span class="line"><span class="comment">    d[3][11] = min&#123;d[2][11], d[3][6] + 1&#125;</span></span><br><span class="line"><span class="comment">    d[2][11] = min&#123;d[1][11], d[2][9] + 1&#125;</span></span><br><span class="line"><span class="comment">    d[1][11] = min&#123;d[0][11], d[1][10] + 1&#125; = 11</span></span><br><span class="line"><span class="comment">    d[0][11] = Inf</span></span><br><span class="line"><span class="comment">    d[1][10] = min&#123;d[0][10], d[1][9] + 1&#125; = 10</span></span><br><span class="line"><span class="comment">    d[0][10] = Inf</span></span><br><span class="line"><span class="comment">    d[1][9] = min&#123;d[0][9], d[1][8] + 1&#125; = 9</span></span><br><span class="line"><span class="comment">    d[0][9] = Inf</span></span><br><span class="line"><span class="comment">    d[1][8] = min&#123;d[0][8], d[1][7] + 1&#125; = 8</span></span><br><span class="line"><span class="comment">    d[0][8] = Inf</span></span><br><span class="line"><span class="comment">    d[1][7] = min&#123;d[0][7], d[1][6] + 1&#125; = 7</span></span><br><span class="line"><span class="comment">    d[0][7] = Inf</span></span><br><span class="line"><span class="comment">    d[1][6] = min&#123;d[0][6], d[1][5] + 1&#125; = 6</span></span><br><span class="line"><span class="comment">    d[0][6] = Inf</span></span><br><span class="line"><span class="comment">    d[1][5] = min&#123;d[0][5], d[1][4] + 1&#125; = 5</span></span><br><span class="line"><span class="comment">    d[0][5] = Inf</span></span><br><span class="line"><span class="comment">    d[1][4] = min&#123;d[0][4], d[1][3] + 1&#125; = 4</span></span><br><span class="line"><span class="comment">    d[0][4] = Inf</span></span><br><span class="line"><span class="comment">    d[1][3] = min&#123;d[0][3], d[1][2] + 1&#125; = 3</span></span><br><span class="line"><span class="comment">    d[0][3] = Inf</span></span><br><span class="line"><span class="comment">    d[1][2] = min&#123;d[0][1], d[1][1] + 1&#125; = 2</span></span><br><span class="line"><span class="comment">    d[0][1] = Inf</span></span><br><span class="line"><span class="comment">    d[1][1] = 1</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    d[2][9] = min&#123;d[1][9], d[2][7] + 1&#125; = 5</span></span><br><span class="line"><span class="comment">    d[2][7] = min&#123;d[1][7], d[2][5] + 1&#125; = 4</span></span><br><span class="line"><span class="comment">    d[2][5] = min&#123;d[1][5], d[2][3] + 1&#125; = 3</span></span><br><span class="line"><span class="comment">    d[2][3] = min&#123;d[1][3], d[2][1] + 1&#125; = 2</span></span><br><span class="line"><span class="comment">    d[2][1] = min&#123;d[1][1], d[2][-1] + 1&#125; = 1</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    d[2][11] = min&#123;d[1][11], d[2][9]&#125; = min&#123;11, 5&#125; = 5</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    d[3][6] = min&#123;d[2][6], d[3][1] + 1&#125; = 2</span></span><br><span class="line"><span class="comment">    d[2][6] = min&#123;d[1][6], d[2][4] + 1&#125; = 3</span></span><br><span class="line"><span class="comment">    d[2][4] = min&#123;d[1][4], d[2][2] + 1&#125; = 2</span></span><br><span class="line"><span class="comment">    d[2][2] = min&#123;d[1][2], d[2][0] + 1&#125; = 1</span></span><br><span class="line"><span class="comment">    d[2][0] = min&#123;d[1][0], d[2][-2] + 1&#125; = 0</span></span><br><span class="line"><span class="comment">    d[1][0] = 0</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    d[3][1] = min&#123;d[2][1], d[3][-4] + 1&#125; = 1</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    经过验算发现没有出现问题。然后将二维dp数组优化为一维数组即可。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">// 12ms 99.30%(中文)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">coinChange</span><span class="params">(<span class="type">int</span>[] coins, <span class="type">int</span> amount)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] d = <span class="keyword">new</span> <span class="title class_">int</span>[amount + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        d[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= amount; i++) &#123;</span><br><span class="line">            d[i] = <span class="number">1083741824</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= coins.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> coins[i-<span class="number">1</span>]; j &lt;= amount; j++) &#123;</span><br><span class="line">                d[j] = Math.min(d[j], d[j - coins[i - <span class="number">1</span>]] + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> d[amount] == <span class="number">1083741824</span> ? -<span class="number">1</span> : d[amount];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 动态规划 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解计算机系统1</title>
      <link href="/JeckFS/2020/05/19/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F1/"/>
      <url>/JeckFS/2020/05/19/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F1/</url>
      
        <content type="html"><![CDATA[<h1 id="C语言的编译过程"><a href="#C语言的编译过程" class="headerlink" title="C语言的编译过程"></a>C语言的编译过程</h1><img src="/JeckFS/2020/05/19/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F1/1.png" class="" title="This is 1-th image."><p>hello.c是文本文件，实际存储的是每个字符代表的ASCII值。或者说它就是输入的源码文件。</p><ol><li>预处理阶段：根据字符#开头的命令，修改原始的C程序。如将#include的头文件的内容插入到程序文本中。得到扩展名为 .i 的文件。</li><li>编译阶段：将.i文件编译为汇编语言程序。</li></ol><p>计算机系统<br>1 20<br>2 75<br>3 118<br>4 89<br>5 55<br>6 61<br>7 36<br>8 56<br>9 59<br>10 20<br>11 38<br>12 46<br>总673页</p><p>JVM<br>2 69-103   34<br>3 103-193  90<br>4 193-253  60<br>5 253-293  40<br>6 293-357  64<br>7 357-398  41<br>8 398-453  55<br>共384，需16天</p><p>480-594 = 114 5天  22.8页/天</p><p>Java并发编程的艺术<br>2  20-41   21<br>3  41-166  125<br>4  166-211 45<br>5  211-273 62<br>6  273-321 48<br>7  321-332 11<br>8  332-349 17<br>9  349-365 16<br>10 365-403 38<br>共 383页  </p><p>每天55页。</p>]]></content>
      
      
      <categories>
          
          <category> 深入理解计算机系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深入理解计算机系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode474.一和零</title>
      <link href="/JeckFS/2020/05/18/leetcode474-%E4%B8%80%E5%92%8C%E9%9B%B6/"/>
      <url>/JeckFS/2020/05/18/leetcode474-%E4%B8%80%E5%92%8C%E9%9B%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><img src="/JeckFS/2020/05/18/leetcode474-%E4%B8%80%E5%92%8C%E9%9B%B6/1.png" class="" title="This is 1-th image."><img src="/JeckFS/2020/05/18/leetcode474-%E4%B8%80%E5%92%8C%E9%9B%B6/2.png" class="" title="This is 2-th image."><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>状态定义:<br><code>d[i][m][n]</code>表示前i个字符串，使用m个0，n个1，能够拼出的最大数量。</p><p>状态转移方程：<br><code>d[i][m][n] = max &#123;不拼字符串strs[i]，拼字符串strs[i]，只拼字符串strs[i]&#125;</code></p><p>即：<br><code>d[i][m][n] = max &#123;d[j][m][n], d[j][m-m(i)][n-n(i)]+1, self&#125;</code><br><code>其中self = m个0 n个1能够拼出字符串strs[i] ? 1 : 0;</code><br><code>m(i)表示字符串strs[i]中0的个数</code><br><code>n(i)表示字符串strs[i]中1的个数</code></p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p>递推式代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Pair&lt;Integer, Integer&gt; <span class="title function_">get</span><span class="params">(String s)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> <span class="number">0</span>, n = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s.charAt(i) == <span class="string">&#x27;0&#x27;</span>) ++m;</span><br><span class="line">            <span class="keyword">else</span> ++n;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Pair</span>&lt;&gt;(m, n);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 177ms 5.08%(中文)  132ms 21.82%(英文)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findMaxForm</span><span class="params">(String[] strs, <span class="type">int</span> m, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[][][] d = <span class="keyword">new</span> <span class="title class_">int</span>[strs.length][m + <span class="number">1</span>][n + <span class="number">1</span>];</span><br><span class="line">        Pair&lt;Integer, Integer&gt; pair0 = get(strs[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt;= m; j++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt;= n; k++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (j - pair0.getKey() &gt;= <span class="number">0</span> &amp;&amp; k - pair0.getValue() &gt;= <span class="number">0</span>) d[<span class="number">0</span>][j][k] = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> d[<span class="number">0</span>][j][k] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; strs.length; i++) &#123;</span><br><span class="line">            Pair&lt;Integer, Integer&gt; pair = get(strs[i]);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt;= m; j++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt;= n; k++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (j - pair.getKey() &lt; <span class="number">0</span> || k - pair.getValue() &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                        d[i][j][k] = d[i-<span class="number">1</span>][j][k];</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        d[i][j][k] = j &gt;= pair.getKey() &amp;&amp; k &gt;= pair.getValue() ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">                        <span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> Math.max(d[i - <span class="number">1</span>][j][k], d[i - <span class="number">1</span>][j - pair.getKey()][k - pair.getValue()] + <span class="number">1</span>);</span><br><span class="line">                        d[i][j][k] = Math.max(d[i][j][k], t);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> d[strs.length-<span class="number">1</span>][m][n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>递归代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[][][] d;</span><br><span class="line">    <span class="keyword">private</span> Pair&lt;Integer, Integer&gt; <span class="title function_">get</span><span class="params">(String s)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> <span class="number">0</span>, n = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s.charAt(i) == <span class="string">&#x27;0&#x27;</span>) ++m;</span><br><span class="line">            <span class="keyword">else</span> ++n;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Pair</span>&lt;&gt;(m, n);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">helper</span><span class="params">(String[] strs, <span class="type">int</span> i, <span class="type">int</span> m, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (m &lt; <span class="number">0</span> || n &lt; <span class="number">0</span> || i &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (d[i][m][n] != <span class="number">0</span>) <span class="keyword">return</span> d[i][m][n];</span><br><span class="line">        Pair&lt;Integer, Integer&gt; pair = get(strs[i]);</span><br><span class="line">        <span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (m - pair.getKey() &gt;= <span class="number">0</span> &amp;&amp; n - pair.getValue() &gt;= <span class="number">0</span>)</span><br><span class="line">            t = <span class="number">1</span>;</span><br><span class="line">        t = Math.max(t, helper(strs, i - <span class="number">1</span>, m, n));</span><br><span class="line">        <span class="type">int</span> <span class="variable">tt</span> <span class="operator">=</span> helper(strs, i - <span class="number">1</span>, m - pair.getKey(), n - pair.getValue());</span><br><span class="line">        <span class="keyword">if</span> (tt != <span class="number">0</span>) t = Math.max(t, tt+<span class="number">1</span>);</span><br><span class="line">        d[i][m][n] = Math.max(d[i][m][n], t);</span><br><span class="line">        <span class="keyword">return</span> d[i][m][n];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 748ms 5.08%(中文) 546ms 8.03%(英文)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findMaxForm</span><span class="params">(String[] strs, <span class="type">int</span> m, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">        d = <span class="keyword">new</span> <span class="title class_">int</span>[strs.length][m + <span class="number">1</span>][n + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">return</span> helper(strs, strs.length - <span class="number">1</span>, m, n);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 动态规划 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode940.不同的子序列II</title>
      <link href="/JeckFS/2020/05/17/leetcode940-%E4%B8%8D%E5%90%8C%E7%9A%84%E5%AD%90%E5%BA%8F%E5%88%97II/"/>
      <url>/JeckFS/2020/05/17/leetcode940-%E4%B8%8D%E5%90%8C%E7%9A%84%E5%AD%90%E5%BA%8F%E5%88%97II/</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><img src="/JeckFS/2020/05/17/leetcode940-%E4%B8%8D%E5%90%8C%E7%9A%84%E5%AD%90%E5%BA%8F%E5%88%97II/1.png" class="" title="This is 1-th image."><img src="/JeckFS/2020/05/17/leetcode940-%E4%B8%8D%E5%90%8C%E7%9A%84%E5%AD%90%E5%BA%8F%E5%88%97II/2.png" class="" title="This is 2-th image."><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><img src="/JeckFS/2020/05/17/leetcode940-%E4%B8%8D%E5%90%8C%E7%9A%84%E5%AD%90%E5%BA%8F%E5%88%97II/3.png" class="" title="This is 3-th image."><img src="/JeckFS/2020/05/17/leetcode940-%E4%B8%8D%E5%90%8C%E7%9A%84%E5%AD%90%E5%BA%8F%E5%88%97II/4.png" class="" title="This is 4-th image."><p>找规律即可。</p><p>从上图可以总结出：每当i移动到下一个位置时，其子序列个数=当前位置子序列个数*2+1(考虑到当前字母也会作为一个子序列存在，故加上1)-增加i+1位置的字母后重复的子序列。</p><p>状态定义：<br><code>d[i]为子串[0..i]的不同非空子序列的个数。</code></p><p>状态转移方程：<br><code>d[i] = 2d[i-1] + 1 - incr[T[i]]</code><br><code>incr[i] = d[i-1] - 1</code><br>其中T[i]表示字母s[i]上一次出现的位置。incr[i]表示i位置相对于i-1位置的重复子串个数。</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p>时间复杂度为O(n)<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="comment">// 5ms 59.57%(中文) 7ms 41.89%(英文)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">distinctSubseqII</span><span class="params">(String S)</span> &#123;</span><br><span class="line">        <span class="type">char</span>[] s = S.toCharArray();</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> S.length() + <span class="number">1</span>;</span><br><span class="line">        <span class="type">long</span>[] incr = <span class="keyword">new</span> <span class="title class_">long</span>[len];</span><br><span class="line">        <span class="type">long</span>[] d = <span class="keyword">new</span> <span class="title class_">long</span>[len];</span><br><span class="line">        <span class="type">int</span>[] T = <span class="keyword">new</span> <span class="title class_">int</span>[len]; <span class="comment">// T[i]表示S[i]上一次出现的位置</span></span><br><span class="line">        d[<span class="number">1</span>] = incr[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span>[] alpha = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">27</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length; i++) &#123;</span><br><span class="line">            T[i+<span class="number">1</span>] = alpha[s[i]-<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">            alpha[s[i]-<span class="string">&#x27;a&#x27;</span>] = i+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt; len; i++) &#123;</span><br><span class="line">            d[i] = (<span class="number">2</span> * d[i - <span class="number">1</span>] + <span class="number">1</span> - incr[T[i]]) % <span class="number">1000000007</span>;</span><br><span class="line">            incr[i] = d[i-<span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (d[i] &lt; incr[i]) d[i] += <span class="number">1000000007</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (<span class="type">int</span>)(d[s.length] % <span class="number">1000000007</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>由于个数可能非常大，需要取余，那么出现的一个问题是：<code>d[i]&lt;incr[i]</code>，这时只需要d[i]+=10^9+7即可。这也是收获的一个重要的知识点。</p>]]></content>
      
      
      <categories>
          
          <category> 动态规划 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode1277.统计全为1的正方形子矩阵</title>
      <link href="/JeckFS/2020/05/15/leetcode1277-%E7%BB%9F%E8%AE%A1%E5%85%A8%E4%B8%BA1%E7%9A%84%E6%AD%A3%E6%96%B9%E5%BD%A2%E5%AD%90%E7%9F%A9%E9%98%B5/"/>
      <url>/JeckFS/2020/05/15/leetcode1277-%E7%BB%9F%E8%AE%A1%E5%85%A8%E4%B8%BA1%E7%9A%84%E6%AD%A3%E6%96%B9%E5%BD%A2%E5%AD%90%E7%9F%A9%E9%98%B5/</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><img src="/JeckFS/2020/05/15/leetcode1277-%E7%BB%9F%E8%AE%A1%E5%85%A8%E4%B8%BA1%E7%9A%84%E6%AD%A3%E6%96%B9%E5%BD%A2%E5%AD%90%E7%9F%A9%E9%98%B5/22.png" class="" title="This is 22-th image."><img src="/JeckFS/2020/05/15/leetcode1277-%E7%BB%9F%E8%AE%A1%E5%85%A8%E4%B8%BA1%E7%9A%84%E6%AD%A3%E6%96%B9%E5%BD%A2%E5%AD%90%E7%9F%A9%E9%98%B5/23.png" class="" title="This is 23-th image."><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p>时间复杂度为O(n^3)。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="comment">// 105ms 11.83%(中文) 96ms 9.47%(英文)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">countSquares</span><span class="params">(<span class="type">int</span>[][] matrix)</span> &#123;</span><br><span class="line">        <span class="comment">// n[i][j][0]表示元素m[i][j](包括元素m[i][j])向上1的最长长度</span></span><br><span class="line">        <span class="comment">// n[i][j][1]表示元素m[i][j](包括元素m[i][j])向左1的最长长度</span></span><br><span class="line">        <span class="type">int</span>[][][] n = <span class="keyword">new</span> <span class="title class_">int</span>[matrix.length][matrix[<span class="number">0</span>].length][<span class="number">2</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">v1</span> <span class="operator">=</span> matrix.length, v2 = matrix[<span class="number">0</span>].length, v3 = Math.min(matrix.length, matrix[<span class="number">0</span>].length) + <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// d[i][j][k]表示以元素matrix[i][j]为右下角的,且边长为k的正方形个数</span></span><br><span class="line">        <span class="type">int</span>[][][] d = <span class="keyword">new</span> <span class="title class_">int</span>[v1][v2][v3];</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; matrix.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (matrix[i][<span class="number">0</span>] == <span class="number">1</span>) &#123;</span><br><span class="line">                n[i][<span class="number">0</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">                d[i][<span class="number">0</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt; matrix[i].length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (matrix[i][j] == <span class="number">1</span>) &#123;</span><br><span class="line">                    n[i][j][<span class="number">1</span>] = n[i][j - <span class="number">1</span>][<span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">                    d[i][j][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; matrix[<span class="number">0</span>].length; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (matrix[<span class="number">0</span>][j] == <span class="number">1</span>) &#123;</span><br><span class="line">                n[<span class="number">0</span>][j][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">                d[<span class="number">0</span>][j][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; matrix.length; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (matrix[i][j] == <span class="number">1</span>) &#123;</span><br><span class="line">                    n[i][j][<span class="number">0</span>] = n[i-<span class="number">1</span>][j][<span class="number">0</span>] + <span class="number">1</span>;</span><br><span class="line">                    d[i][j][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; matrix.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt; matrix[<span class="number">0</span>].length; j++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">2</span>; d[i - <span class="number">1</span>][j - <span class="number">1</span>][k - <span class="number">1</span>] != <span class="number">0</span> &amp;&amp; k &lt;= n[i][j][<span class="number">0</span>] &amp;&amp; k &lt;= n[i][j][<span class="number">1</span>]; k++) &#123;</span><br><span class="line">                    d[i][j][k] = d[i-<span class="number">1</span>][j-<span class="number">1</span>][k-<span class="number">1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; matrix.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; matrix[<span class="number">0</span>].length; j++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">1</span>; k &lt; v3 &amp;&amp; d[i][j][k] != <span class="number">0</span>; k++) &#123;</span><br><span class="line">                    res += d[i][j][k];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>时间复杂度为O(mn)的的解法参见<a href="https://leetcode-cn.com/problems/count-square-submatrices-with-all-ones/solution/tong-ji-quan-wei-1-de-zheng-fang-xing-zi-ju-zhen-2/">题解</a></p>]]></content>
      
      
      <categories>
          
          <category> 动态规划 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode面试题14-I.剪绳子</title>
      <link href="/JeckFS/2020/05/11/leetcode%E9%9D%A2%E8%AF%95%E9%A2%9814-I-%E5%89%AA%E7%BB%B3%E5%AD%90/"/>
      <url>/JeckFS/2020/05/11/leetcode%E9%9D%A2%E8%AF%95%E9%A2%9814-I-%E5%89%AA%E7%BB%B3%E5%AD%90/</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><img src="/JeckFS/2020/05/11/leetcode%E9%9D%A2%E8%AF%95%E9%A2%9814-I-%E5%89%AA%E7%BB%B3%E5%AD%90/1.png" class="" title="This is 1-th image."><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>状态定义：<br><code>d[i]表示前i米截成m段的最大乘积，其中m &gt; 1</code>。</p><p>状态转移方程：<br><code>d[i] = max &#123;d[j] * (i - j), j * (i - j)&#125;, 其中1 &lt; j &lt; i</code><br>即<code>d[i] = max &#123;前j米截成m段 * 最后一段的长度i-j, 前j米不截断的长度 * 最后一段的长度&#125;</code></p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p>这种代码是错误的，不知道为什么又通不过了<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="comment">// 1ms 44.76% (中文)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">cuttingRope</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] d = <span class="keyword">new</span> <span class="title class_">int</span>[n+<span class="number">1</span>];</span><br><span class="line">        d[<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">3</span>; i &lt; n + <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">2</span>; j &lt; i; j++) &#123;</span><br><span class="line">                d[i] = j * (i - j);</span><br><span class="line">                d[i] = Math.max(d[i], d[j] * (i - j));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> d[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>改成下面的就可以通过：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">cuttingRope</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] d = <span class="keyword">new</span> <span class="title class_">int</span>[n+<span class="number">1</span>];</span><br><span class="line">        d[<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">3</span>; i &lt; n + <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">2</span>; j &lt; i; j++) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">item</span> <span class="operator">=</span> Math.max(d[j] * (i - j), j * (i - j));</span><br><span class="line">                d[i] = Math.max(d[i], item);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> d[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间复杂度为O(n^2)。</p>]]></content>
      
      
      <categories>
          
          <category> 动态规划 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode1278.分割回文串III</title>
      <link href="/JeckFS/2020/05/09/leetcode1278-%E5%88%86%E5%89%B2%E5%9B%9E%E6%96%87%E4%B8%B2III/"/>
      <url>/JeckFS/2020/05/09/leetcode1278-%E5%88%86%E5%89%B2%E5%9B%9E%E6%96%87%E4%B8%B2III/</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><img src="/JeckFS/2020/05/09/leetcode1278-%E5%88%86%E5%89%B2%E5%9B%9E%E6%96%87%E4%B8%B2III/1.png" class="" title="This is 1-th image."><img src="/JeckFS/2020/05/09/leetcode1278-%E5%88%86%E5%89%B2%E5%9B%9E%E6%96%87%E4%B8%B2III/2.png" class="" title="This is 2-th image."><img src="/JeckFS/2020/05/09/leetcode1278-%E5%88%86%E5%89%B2%E5%9B%9E%E6%96%87%E4%B8%B2III/3.png" class="" title="This is 3-th image."><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>状态定义：<br><code>d[i][j]</code>表示前i个字符组成的子串被分割成j个回文串，所需要修改的最少次数。</p><p>一些特例：<br>当前i个字符组成的子串被分割成i个回文串(即将该子串划分成单个字符，每个字符都是一个回文串)。即<code>d[i][i]=0</code></p><p>状态转移方程为：<br>当<code>j == 1</code>时，<code>d[i][j] = n[0][i-1]</code><br>当<code>j != 1</code>时，<code>d[i][j] = min &#123;d[k][j-1] + n[k][i-1]&#125; 其中0 &lt; k &lt; i</code><br>其中<code>n[i][j]</code>表示将子串[i..j)变为回文串需要的最少修改次数。</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="comment">// 8ms 51.72%(中文) 4ms 89.35%(英文)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">palindromePartition</span><span class="params">(String S, <span class="type">int</span> K)</span> &#123;</span><br><span class="line">        <span class="type">char</span>[] s = S.toCharArray();</span><br><span class="line">        <span class="type">boolean</span>[][] isPalindrome = <span class="keyword">new</span> <span class="title class_">boolean</span>[s.length][s.length];</span><br><span class="line">        <span class="type">int</span>[][] d = <span class="keyword">new</span> <span class="title class_">int</span>[s.length+<span class="number">1</span>][K+<span class="number">1</span>];</span><br><span class="line">        <span class="type">int</span>[][] n = <span class="keyword">new</span> <span class="title class_">int</span>[s.length][s.length]; <span class="comment">// n[i][j]表示将子串[i..j)变为回文串需要的最少修改次数</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置isPalindrome</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length; i++) &#123;</span><br><span class="line">            isPalindrome[i][i] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (i+<span class="number">1</span> &lt; s.length &amp;&amp; s[i] == s[i+<span class="number">1</span>]) isPalindrome[i][i+<span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; s.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; i-j &gt;= <span class="number">0</span> &amp;&amp; i+j &lt; s.length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (s[i-j] == s[i+j] &amp;&amp; isPalindrome[i-j+<span class="number">1</span>][i+j-<span class="number">1</span>]) isPalindrome[i-j][i+j] = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; i-j &gt;= <span class="number">0</span> &amp;&amp; i+j+<span class="number">1</span> &lt; s.length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (s[i-j] == s[i+j+<span class="number">1</span>] &amp;&amp; isPalindrome[i-j+<span class="number">1</span>][i+j]) isPalindrome[i-j][i+j+<span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 求数组n</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; s.length; j++) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">cnt</span> <span class="operator">=</span> <span class="number">0</span>,t = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">while</span> (i + cnt &gt;= <span class="number">0</span> &amp;&amp; j - cnt &lt; s.length &amp;&amp; i + cnt &lt;= j - cnt &amp;&amp; !isPalindrome[i + cnt][j - cnt]) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (s[i+cnt] != s[j-cnt])</span><br><span class="line">                        t++;</span><br><span class="line">                    cnt++;</span><br><span class="line">                &#125;</span><br><span class="line">                n[i][j] = t;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= s.length; i++) &#123; <span class="comment">// 前i个字符串被分割成j个字符串</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= K &amp;&amp; j &lt;= i; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i == j) d[i][j] = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (j == <span class="number">1</span>)&#123;</span><br><span class="line">                    d[i][j] = n[<span class="number">0</span>][i-<span class="number">1</span>];</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    d[i][j] = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">1</span>; k &lt; i; k++) &#123; <span class="comment">// 中间字符</span></span><br><span class="line">                        <span class="keyword">if</span> (j-<span class="number">1</span> &lt;= k)</span><br><span class="line">                            d[i][j] = Math.min(d[i][j], d[k][j-<span class="number">1</span>] + n[k][i-<span class="number">1</span>]);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> d[s.length][K];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 动态规划 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode1024.视频拼接</title>
      <link href="/JeckFS/2020/05/08/leetcode1024-%E8%A7%86%E9%A2%91%E6%8B%BC%E6%8E%A5/"/>
      <url>/JeckFS/2020/05/08/leetcode1024-%E8%A7%86%E9%A2%91%E6%8B%BC%E6%8E%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><img src="/JeckFS/2020/05/08/leetcode1024-%E8%A7%86%E9%A2%91%E6%8B%BC%E6%8E%A5/1.png" class="" title="This is 1-th image."><img src="/JeckFS/2020/05/08/leetcode1024-%E8%A7%86%E9%A2%91%E6%8B%BC%E6%8E%A5/2.png" class="" title="This is 2-th image."><img src="/JeckFS/2020/05/08/leetcode1024-%E8%A7%86%E9%A2%91%E6%8B%BC%E6%8E%A5/3.png" class="" title="This is 3-th image."><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>首先将clips排序，clips[i][0]大的在前；clips[i][0]相同的，clips[i][1]小的在前。</p><p>状态定义：<br>d[i]表示前i个片段区间，拼接成[0,d[i][1]]需要的最少的片段个数。</p><p>状态转移方程为：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> j片段完全包含i片段</span><br><span class="line">    d[i] = d[j] </span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> j片段和i片段的结束时间不相同 &amp;&amp; i片段的开始时间比j片段的结束时间要早</span><br><span class="line">    d[i] = min &#123;d[j] + <span class="number">1</span>&#125; </span><br><span class="line">其中j是排序后i片段之前的片段。</span><br></pre></td></tr></table></figure></p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p>时间复杂度为O(n^2)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 3ms 16.47%(中文) 2ms 17.56%(英文)</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">videoStitching</span><span class="params">(<span class="type">int</span>[][] clips, <span class="type">int</span> T)</span> &#123;</span><br><span class="line">    Comparator&lt;<span class="type">int</span>[]&gt; c = <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;<span class="type">int</span>[]&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(<span class="type">int</span>[] t1, <span class="type">int</span>[] t2)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (t1[<span class="number">0</span>] - t2[<span class="number">0</span>] &lt; <span class="number">0</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (t1[<span class="number">0</span>] - t2[<span class="number">0</span>] &gt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (t1[<span class="number">1</span>] - t2[<span class="number">1</span>] &lt; <span class="number">0</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (t1[<span class="number">1</span>] - t2[<span class="number">1</span>] &gt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    Arrays.sort(clips, c);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span>[] d = <span class="keyword">new</span> <span class="title class_">int</span>[clips.length];</span><br><span class="line">    <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (; k &lt; clips.length &amp;&amp; clips[k][<span class="number">0</span>] == <span class="number">0</span>; k++) &#123;</span><br><span class="line">        d[k] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> k; i &lt; clips.length; i++) &#123;</span><br><span class="line">        d[i] = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i-<span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (clips[i][<span class="number">0</span>] &gt;= clips[j][<span class="number">0</span>] &amp;&amp; clips[i][<span class="number">1</span>] &lt;= clips[j][<span class="number">1</span>]) d[i] = d[j];</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (clips[i][<span class="number">0</span>] &lt;= clips[j][<span class="number">1</span>] &amp;&amp; clips[i][<span class="number">1</span>] != clips[j][<span class="number">1</span>]) <span class="comment">//clips[j][0] &lt;= clips[i][0] &amp;&amp;</span></span><br><span class="line">                d[i] = Math.min(d[i], d[j] + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> clips.length-<span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">if</span> (clips[i][<span class="number">1</span>] &gt;= T)</span><br><span class="line">            res = Math.min(res, d[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res &gt; <span class="number">100000</span> ? -<span class="number">1</span> : res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 动态规划 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode416.分割等和子集</title>
      <link href="/JeckFS/2020/05/08/leetcode416-%E5%88%86%E5%89%B2%E7%AD%89%E5%92%8C%E5%AD%90%E9%9B%86/"/>
      <url>/JeckFS/2020/05/08/leetcode416-%E5%88%86%E5%89%B2%E7%AD%89%E5%92%8C%E5%AD%90%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><img src="/JeckFS/2020/05/08/leetcode416-%E5%88%86%E5%89%B2%E7%AD%89%E5%92%8C%E5%AD%90%E9%9B%86/1.png" class="" title="This is 1-th image."><img src="/JeckFS/2020/05/08/leetcode416-%E5%88%86%E5%89%B2%E7%AD%89%E5%92%8C%E5%AD%90%E9%9B%86/2.png" class="" title="This is 2-th image."><img src="/JeckFS/2020/05/08/leetcode416-%E5%88%86%E5%89%B2%E7%AD%89%E5%92%8C%E5%AD%90%E9%9B%86/3.png" class="" title="This is 3-th image."><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>典型的背包问题。问题等价于数组nums中是否可以挑选出和为sum/2的序列，每个元素只能选择一次。其中sum为nums数组所有元素之和。<br>显然当sum是奇数时不可能选出这么个序列，因为nums数组只包含正整数。</p><p>定义状态：<br><code>d[i][v]</code>表示前i个元素中是否能够选出和为v的元素序列。<code>d[i][v]=1</code>表示可以选出；<code>d[i][v]=0</code>表示不可以选出.</p><p>状态转移方程为：<br><code>d[i][v] = d[i-1][v]==1 || d[i-1][v-nums[i]]==1</code></p><p>对于<code>d[i][v]</code>，即nums[0..i]是否能够出现和为v的序列，可以从两个方面得到。一是前i-1个元素已经出现了和为v的序列，这时<code>d[i][v]=d[i-1][v]</code>即可，这种情况可以理解为和为v的序列中不包含nums[i]。二是和为v的序列中包含nums[i]，这时<code>d[i-1][v-nums[i]==1</code>一定为真。或者说前i-1个序列中可以出现和为v-nums[i]的序列，加上第i个元素正好可以构成和为v的序列。</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 21ms 58.75%(中文) 14ms 69.78%(英文)</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">canPartition</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        sum += nums[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (sum % <span class="number">2</span> == <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">target</span> <span class="operator">=</span> sum / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span>[][] d = <span class="keyword">new</span> <span class="title class_">int</span>[nums.length][sum+<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        d[i][nums[i]] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">v</span> <span class="operator">=</span> <span class="number">0</span>; v &lt;= target; v++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i - <span class="number">1</span> &gt;= <span class="number">0</span> &amp;&amp; v - nums[i] &gt;= <span class="number">0</span> &amp;&amp; (d[i - <span class="number">1</span>][v] == <span class="number">1</span> || d[i - <span class="number">1</span>][v - nums[i]] == <span class="number">1</span>)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (v == target) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                d[i][v] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> d[nums.length - <span class="number">1</span>][target] == <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h1><p>本题可以借助01背包的思想来分析。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 24ms, 81.64%(中文)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    f[i][v]表示前i个元素能否选出和为v的序列.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    f[i][v] = f[i-1][v] or f[i-1][v-Vi]</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    f[1][0] = true;</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    参考背包九讲，将二维转化为一维。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">canPartition</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">V</span> <span class="operator">=</span> Arrays.stream(nums).sum();</span><br><span class="line">        <span class="keyword">if</span> (V % <span class="number">2</span> == <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        V /= <span class="number">2</span>;</span><br><span class="line">        <span class="type">boolean</span>[] f = <span class="keyword">new</span> <span class="title class_">boolean</span>[V + <span class="number">1</span>];</span><br><span class="line">        f[<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">v</span> <span class="operator">=</span> V; v &gt;= nums[i]; v--) &#123;</span><br><span class="line">                f[v] = f[v] || f[v - nums[i]];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> f[V];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 动态规划 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode523.连续的子数组和</title>
      <link href="/JeckFS/2020/05/01/leetcode523-%E8%BF%9E%E7%BB%AD%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84%E5%92%8C/"/>
      <url>/JeckFS/2020/05/01/leetcode523-%E8%BF%9E%E7%BB%AD%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84%E5%92%8C/</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><img src="/JeckFS/2020/05/01/leetcode523-%E8%BF%9E%E7%BB%AD%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84%E5%92%8C/1.png" class="" title="This is 1-th image."><h1 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h1><p>使用set保存第i个元素与前i-1个元素可能的连续数组和，因为能不能被k整除只需要关心元素和对k的余数，所以set保存的是取余后的值。</p><img src="/JeckFS/2020/05/01/leetcode523-%E8%BF%9E%E7%BB%AD%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84%E5%92%8C/2.png" class="" title="This is 2-th image."><p>所以算法时间复杂度应为O(n^2)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="comment">// 355ms 5.36%(中文) 261ms 5.06%(英文)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">checkSubarraySum</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums.length &lt; <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (k == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length-<span class="number">1</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[i] == <span class="number">0</span> &amp;&amp; nums[i] == nums[i+<span class="number">1</span>]) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Set&lt;Integer&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        set.add(nums[<span class="number">0</span>] % k);</span><br><span class="line">        ArrayList&lt;Integer&gt; add = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Integer e : set) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">newE</span> <span class="operator">=</span> (e + nums[i]) % k;</span><br><span class="line">                <span class="keyword">if</span> (newE == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                add.add(newE);</span><br><span class="line">            &#125;</span><br><span class="line">            set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;(add);</span><br><span class="line">            add = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            set.add(nums[i] % k);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 动态规划 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode面试题08.13.堆箱子</title>
      <link href="/JeckFS/2020/05/01/leetcode%E9%9D%A2%E8%AF%95%E9%A2%9808-13-%E5%A0%86%E7%AE%B1%E5%AD%90/"/>
      <url>/JeckFS/2020/05/01/leetcode%E9%9D%A2%E8%AF%95%E9%A2%9808-13-%E5%A0%86%E7%AE%B1%E5%AD%90/</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><img src="/JeckFS/2020/05/01/leetcode%E9%9D%A2%E8%AF%95%E9%A2%9808-13-%E5%A0%86%E7%AE%B1%E5%AD%90/1.png" class="" title="This is 1-th image."><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p><code>d[i]记录box子数组[0..i]中以第i个箱子作为最高层时的最高高度。</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="comment">// 33ms 67.53%(中文)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">pileBox</span><span class="params">(<span class="type">int</span>[][] box)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (box.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        Comparator&lt;<span class="type">int</span>[]&gt; c = <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;<span class="type">int</span>[]&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(<span class="type">int</span>[] t1, <span class="type">int</span>[] t2)</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (t1[<span class="number">0</span>] &gt; t2[<span class="number">0</span>]) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> (t1[<span class="number">0</span>] &lt; t2[<span class="number">0</span>]) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> (t1[<span class="number">1</span>] &gt; t2[<span class="number">1</span>]) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> (t1[<span class="number">1</span>] &lt; t2[<span class="number">1</span>]) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">return</span> Integer.compare(t1[<span class="number">2</span>], t2[<span class="number">2</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        Arrays.sort(box, c);</span><br><span class="line">        <span class="type">int</span>[] d = <span class="keyword">new</span> <span class="title class_">int</span>[box.length]; </span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> box[<span class="number">0</span>][<span class="number">2</span>];</span><br><span class="line">        d[<span class="number">0</span>] = box[<span class="number">0</span>][<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; box.length; i++) &#123;</span><br><span class="line">            d[i] = box[i][<span class="number">2</span>];</span><br><span class="line">            res = Math.max(res, d[i]);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i-<span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">                <span class="keyword">if</span> (box[i][<span class="number">0</span>] &gt; box[j][<span class="number">0</span>] &amp;&amp; box[i][<span class="number">1</span>] &gt; box[j][<span class="number">1</span>] &amp;&amp; box[i][<span class="number">2</span>] &gt; box[j][<span class="number">2</span>]) &#123;</span><br><span class="line">                    d[i] = Math.max(d[i], d[j] + box[i][<span class="number">2</span>]);</span><br><span class="line">                    res = Math.max(d[i], res);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 动态规划 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode1027.最长等差数列</title>
      <link href="/JeckFS/2020/04/30/leetcode1027-%E6%9C%80%E9%95%BF%E7%AD%89%E5%B7%AE%E6%95%B0%E5%88%97/"/>
      <url>/JeckFS/2020/04/30/leetcode1027-%E6%9C%80%E9%95%BF%E7%AD%89%E5%B7%AE%E6%95%B0%E5%88%97/</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><img src="/JeckFS/2020/04/30/leetcode1027-%E6%9C%80%E9%95%BF%E7%AD%89%E5%B7%AE%E6%95%B0%E5%88%97/1.png" class="" title="This is 1-th image."><img src="/JeckFS/2020/04/30/leetcode1027-%E6%9C%80%E9%95%BF%E7%AD%89%E5%B7%AE%E6%95%B0%E5%88%97/2.png" class="" title="This is 2-th image."><img src="/JeckFS/2020/04/30/leetcode1027-%E6%9C%80%E9%95%BF%E7%AD%89%E5%B7%AE%E6%95%B0%E5%88%97/3.png" class="" title="This is 3-th image."><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p><code>d[i][cha]</code>表示到子数组<code>[0..i]</code>差值为cha的子序列的最长长度。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="comment">// 130ms 65.49%(中文)  80ms 92.65%(英文)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">longestArithSeqLength</span><span class="params">(<span class="type">int</span>[] A)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[][] d = <span class="keyword">new</span> <span class="title class_">int</span>[A.length][<span class="number">20001</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">putInPlace</span> <span class="operator">=</span> <span class="number">10000</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; A.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">cha</span> <span class="operator">=</span> A[i] - A[j] &lt; <span class="number">0</span> ? A[j]-A[i] + putInPlace : A[i] - A[j];</span><br><span class="line">                d[i][cha] = d[j][cha] + <span class="number">1</span>;</span><br><span class="line">                res = Math.max(res, d[i][cha]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 动态规划 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode354.俄罗斯套娃信封问题</title>
      <link href="/JeckFS/2020/04/27/leetcode354-%E4%BF%84%E7%BD%97%E6%96%AF%E5%A5%97%E5%A8%83%E4%BF%A1%E5%B0%81%E9%97%AE%E9%A2%98/"/>
      <url>/JeckFS/2020/04/27/leetcode354-%E4%BF%84%E7%BD%97%E6%96%AF%E5%A5%97%E5%A8%83%E4%BF%A1%E5%B0%81%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><img src="/JeckFS/2020/04/27/leetcode354-%E4%BF%84%E7%BD%97%E6%96%AF%E5%A5%97%E5%A8%83%E4%BF%A1%E5%B0%81%E9%97%AE%E9%A2%98/1.png" class="" title="This is 1-th image."><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p>关键是将envelope排序，w从小到大，h也从小到大。时间复杂度为O(n)。可以降到O(nlogn)，参见<a href="https://leetcode-cn.com/problems/russian-doll-envelopes/solution/zui-chang-di-zeng-zi-xu-lie-kuo-zhan-dao-er-wei-er/">连接</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">isASC</span><span class="params">(<span class="type">int</span>[] a, <span class="type">int</span>[] b)</span> &#123;<span class="comment">//判断是否是升序</span></span><br><span class="line">        <span class="keyword">return</span> a[<span class="number">0</span>] &lt; b[<span class="number">0</span>] &amp;&amp; a[<span class="number">1</span>] &lt; b[<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxEnvelopes</span><span class="params">(<span class="type">int</span>[][] envelopes)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (envelopes.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        Comparator&lt;<span class="type">int</span>[]&gt; c = <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;<span class="type">int</span>[]&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(<span class="type">int</span>[] ints, <span class="type">int</span>[] t1)</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (ints[<span class="number">0</span>] - t1[<span class="number">0</span>] &gt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> (ints[<span class="number">0</span>] - t1[<span class="number">0</span>] &lt; <span class="number">0</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">return</span> Integer.compare(ints[<span class="number">1</span>] - t1[<span class="number">1</span>], <span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        Arrays.sort(envelopes, c);</span><br><span class="line">        <span class="type">int</span>[] d = <span class="keyword">new</span> <span class="title class_">int</span>[envelopes.length];</span><br><span class="line">        d[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; envelopes.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (isASC(envelopes[j], envelopes[i])) &#123;</span><br><span class="line">                    d[i] = Math.max(d[i],d[j] + <span class="number">1</span>);</span><br><span class="line">                    res = Math.max(res, d[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 动态规划 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode338.比特位计数</title>
      <link href="/JeckFS/2020/04/27/leetcode338-%E6%AF%94%E7%89%B9%E4%BD%8D%E8%AE%A1%E6%95%B0/"/>
      <url>/JeckFS/2020/04/27/leetcode338-%E6%AF%94%E7%89%B9%E4%BD%8D%E8%AE%A1%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><img src="/JeckFS/2020/04/27/leetcode338-%E6%AF%94%E7%89%B9%E4%BD%8D%E8%AE%A1%E6%95%B0/1.png" class="" title="This is 1-th image."><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p>flag记录数字i的最高位的位置。时间复杂度和空间复杂度为O(n)。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="comment">// 2ms 81.89%(中文) 2ms 34.42%(英文)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] countBits(<span class="type">int</span> num) &#123;</span><br><span class="line">        <span class="type">int</span>[] d = <span class="keyword">new</span> <span class="title class_">int</span>[num+<span class="number">1</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="number">1</span>; <span class="comment">// 标记最高位的位置</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= num; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((i &amp; flag) == <span class="number">0</span>) &#123;</span><br><span class="line">                flag = flag &lt;&lt; <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            d[i] = d[i ^ flag] + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> d;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这题不光改变最高位可以，改变任意一个为1的比特，都可以。<br>下面使用的是从右到左第一个为1的位。比较漂亮的是它<code>使用x &amp;= x - 1将最后一个比特1设置为0</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="type">int</span>[] countBits(<span class="type">int</span> num) &#123;</span><br><span class="line">      <span class="type">int</span>[] ans = <span class="keyword">new</span> <span class="title class_">int</span>[num + <span class="number">1</span>];</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= num; ++i)</span><br><span class="line">        ans[i] = ans[i &amp; (i - <span class="number">1</span>)] + <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">return</span> ans;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 动态规划 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java并发4</title>
      <link href="/JeckFS/2020/04/22/java%E5%B9%B6%E5%8F%914/"/>
      <url>/JeckFS/2020/04/22/java%E5%B9%B6%E5%8F%914/</url>
      
        <content type="html"><![CDATA[<h1 id="1-线程简介"><a href="#1-线程简介" class="headerlink" title="1.线程简介"></a>1.线程简介</h1><blockquote><p>每个线程拥有自己的计数器，堆栈和局部变量等属性，并且能够访问共享的内存比那辆。</p></blockquote><p>线程的优先级：<br>CPU以时间片的分配方式按照优先级的高低分配不同比重的时间片给各个进程。时间片越多执行的时间就越长。<br>对于<strong>频繁阻塞(休眠或者I/O操作)</strong>的线程需要设置较高优先级；<br>对于<strong>偏重计算(需要较多CPU时间或者偏计算)</strong>的线程，则设置较低的优先级，<strong>确保处理器不会被独占</strong>。</p><p>线程的状态：</p><img src="/JeckFS/2020/04/22/java%E5%B9%B6%E5%8F%914/1.png" class="" title="This is 1-th image."><p>Daemon线程：</p><blockquote><p>当一个虚拟机中不存在非Daemon线程的时候，Java虚拟机将会退出。<br>Daemon属性需要在启动线程之前设置，不能在启动线程之后设置。<br>Java虚拟机退出时Daemon线程中的finally块并不一定会执行。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Daemon</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">DaemonRunner</span>(), <span class="string">&quot;DaemonRunner&quot;</span>);</span><br><span class="line">        thread.setDaemon(<span class="literal">true</span>);</span><br><span class="line">        thread.start();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">DaemonRunner</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                SleepUtils.second(<span class="number">10</span>);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;DaemonThread finally run.&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SleepUtils</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">second</span><span class="params">(<span class="type">long</span> seconds)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(seconds);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：无任何输出，即finally块并没有执行。所以<strong>不能在Daemon线程中的finally快中执行关闭或清理资源的逻辑。</strong></p><h1 id="2-构造线程"><a href="#2-构造线程" class="headerlink" title="2.构造线程"></a>2.构造线程</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Thread.java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(ThreadGroup g, Runnable target, String name, <span class="type">long</span> stackSize,  AccessControlContext acc)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (name == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>(<span class="string">&quot;name cannot be null&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 当前线程就是该线程的父线程</span></span><br><span class="line">    <span class="type">Thread</span> <span class="variable">parent</span> <span class="operator">=</span> currentThread();</span><br><span class="line">    <span class="built_in">this</span>.group = g;</span><br><span class="line">    <span class="comment">// 将daemon、priority属性设置为父线程的对应属性</span></span><br><span class="line">    <span class="built_in">this</span>.daemon = parent.isDaemon();</span><br><span class="line">    <span class="built_in">this</span>.priority = parent.getPriority();</span><br><span class="line">    <span class="built_in">this</span>.name = name.toCharArray();</span><br><span class="line">    <span class="built_in">this</span>.target = target;</span><br><span class="line">    setPriority(priority);</span><br><span class="line">    <span class="comment">// 将父线程的InheritableThreadLocal复制过来</span></span><br><span class="line">    <span class="keyword">if</span> (parent.inheritableThreadLocals != <span class="literal">null</span>)</span><br><span class="line">        <span class="built_in">this</span>.inheritableThreadLocals = ThreadLocal.createInheritedMap(parent.</span><br><span class="line">                inheritableThreadLocals);</span><br><span class="line">    <span class="comment">// 分配一个线程ID</span></span><br><span class="line">    tid = nextThreadID();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-线程中断"><a href="#3-线程中断" class="headerlink" title="3. 线程中断"></a>3. 线程中断</h1><p>中断方法：其他线程调用被中断线程的interrupt()方法。</p><p>被中断线程可通过<code>isInterrupted()</code>来判断是否被中断。也可以调用静态方法<code>Thread.interrupted()</code>复位当前线程的中断标识。</p><p>对于终止的线程，调用<code>isInterrupted()</code>会返回false。</p><p>从Java API可以看出，许多声明InterruptedException的方法(例如Thread.sleep())在抛出InterruptedException前，Java虚拟机会清除中断标识位，此时调用isInterrupted()将返回false。</p><p>SleepThread不停地睡眠，BusyThread一直运行。对二者进行中断，观察他们的中断标识位。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Interrupted</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// sleepThread不停的尝试睡眠</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">sleepThread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">SleepRunner</span>(), <span class="string">&quot;SleepThread&quot;</span>);</span><br><span class="line">        sleepThread.setDaemon(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">// busyThread不停的运行</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">busyThread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">BusyRunner</span>(), <span class="string">&quot;BusyThread&quot;</span>);</span><br><span class="line">        busyThread.setDaemon(<span class="literal">true</span>);</span><br><span class="line">        sleepThread.start();</span><br><span class="line">        busyThread.start();</span><br><span class="line">        <span class="comment">// 休眠5秒，让sleepThread和busyThread充分运行</span></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">5</span>);</span><br><span class="line">        sleepThread.interrupt();</span><br><span class="line">        busyThread.interrupt();</span><br><span class="line">        System.out.println(<span class="string">&quot;SleepThread interrupted is &quot;</span> + sleepThread.isInterrupted());</span><br><span class="line">        System.out.println(<span class="string">&quot;BusyThread interrupted is &quot;</span> + busyThread.isInterrupted());</span><br><span class="line">        <span class="comment">// 防止sleepThread和busyThread立刻退出</span></span><br><span class="line">        SleepUtils.second(<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">SleepRunner</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                SleepUtils.second(<span class="number">10</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">BusyRunner</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 运行结果</span></span><br><span class="line">SleepThread interrupted is <span class="literal">false</span></span><br><span class="line">BusyThread interrupted is <span class="literal">true</span></span><br></pre></td></tr></table></figure><br>可看出SleepThread中断标识位被清除，BusyThread没被清除。</p><h1 id="4-过时的suspend-resume-stop"><a href="#4-过时的suspend-resume-stop" class="headerlink" title="4. 过时的suspend(),resume(),stop()"></a>4. 过时的suspend(),resume(),stop()</h1><p>suspend()：调用后，线程是占有这资源进入睡眠状态，容易引发死锁问题。<br>stop()：在终结线程时没有给予线程完成资源释放的机会。</p><p>其替代机制是：等待/通知机制。</p><h1 id="5-安全终止线程"><a href="#5-安全终止线程" class="headerlink" title="5. 安全终止线程"></a>5. 安全终止线程</h1><ol><li>使用Thread.interrupt()</li><li>使用boolean变量</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Shutdown</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Runner</span> <span class="variable">one</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Runner</span>();</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">countThread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(one, <span class="string">&quot;CountThread&quot;</span>);</span><br><span class="line">        countThread.start();</span><br><span class="line">        <span class="comment">// 睡眠1秒，main线程对CountThread进行中断，使CountThread能够感知中断而结束</span></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        countThread.interrupt();</span><br><span class="line">        <span class="type">Runner</span> <span class="variable">two</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Runner</span>();</span><br><span class="line">        countThread = <span class="keyword">new</span> <span class="title class_">Thread</span>(two, <span class="string">&quot;CountThread&quot;</span>);</span><br><span class="line">        countThread.start();</span><br><span class="line">        <span class="comment">// 睡眠1秒，main线程对Runner two进行取消，使CountThread能够感知on为false而结束</span></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        two.cancel();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Runner</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">long</span> i;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="type">boolean</span> <span class="variable">on</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (on &amp;&amp; !Thread.currentThread().isInterrupted())&#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;Count i = &quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cancel</span><span class="params">()</span> &#123;</span><br><span class="line">            on = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="6-线程间的通信"><a href="#6-线程间的通信" class="headerlink" title="6. 线程间的通信"></a>6. 线程间的通信</h1>]]></content>
      
      
      <categories>
          
          <category> java并发编程的艺术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java并发编程的艺术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java并发3</title>
      <link href="/JeckFS/2020/04/22/java%E5%B9%B6%E5%8F%913/"/>
      <url>/JeckFS/2020/04/22/java%E5%B9%B6%E5%8F%913/</url>
      
        <content type="html"><![CDATA[<p>Java内存模型是如何完成线程之间的通信与同步的？</p><p>实例对象、静态域、数组元素存储于堆内存中，由于堆内存是共享的，所以这些变量在多线程情况下需要进行同步访问。</p><img src="/JeckFS/2020/04/22/java%E5%B9%B6%E5%8F%913/1.png" class="" title="This is 1th image."><blockquote><p>java内存模型：</p><ol><li>作用：Java内存模型决定了一个线程对共享变量的写入何时对另一个线程可见。</li><li>线程在逻辑上拥有一个直接读写的本地内存(存储共享变量的副本)，在某个时间再将共享变量从本地内存刷新到主内存中。本地内存是线程私有的，而主内存是线程可见的。</li><li>volatile的内存语义，锁的内存语义，final域的内存语义实现了<strong>一个线程对共享变量的写入何时对另一个线程可见</strong>。</li><li>为了提高并发的效率，允许<strong>指令重排序</strong>。</li><li>重排序的规则</li></ol><p>重排序的规则主要从三个方面来看：</p><ol><li>数据依赖性</li><li>happens-bofore规则</li><li>as-if-serial</li><li>final域的内存语义</li></ol><p>双重检查锁定与延迟初始化是其中一些规则的应用。</p></blockquote><h1 id="1-重排序"><a href="#1-重排序" class="headerlink" title="1. 重排序"></a>1. 重排序</h1><p>重排序种类：</p><ul><li>编译器重排序：用于单线程程序中。</li><li>处理器重排序(包括指令级重排序，内存系统重排序)：通过插入内存屏障方式实现。<ul><li>指令级并行的重排序：将多条指令重叠执行。如果不存在数据依赖性，处理器可以改变语句对应及其指令的执行顺序。</li><li>内存系统的重排序：由于处理器使用缓存和读/写缓冲区，这使得加载和存储操作看上去可能是乱序执行。</li></ul></li></ul><p>由此可见处理器重排序是并不只针对单线程，也针对多线程环境。<a href="https://blog.csdn.net/houzhe_adore/article/details/72354139">参考</a></p><img src="/JeckFS/2020/04/22/java%E5%B9%B6%E5%8F%913/2.png" class="" title="This is 2 image."><p>处理器的写缓冲区导致的对内存的读-写顺序与实际发生的读-写顺序不一致的情况：</p><img src="/JeckFS/2020/04/22/java%E5%B9%B6%E5%8F%913/3.png" class="" title="This is 3th image."><img src="/JeckFS/2020/04/22/java%E5%B9%B6%E5%8F%913/4.png" class="" title="This is 4th image."><p>4种重排序规则：</p><img src="/JeckFS/2020/04/22/java%E5%B9%B6%E5%8F%913/5.png" class="" title="This is 5th image."><h2 id="1-2-数据依赖性"><a href="#1-2-数据依赖性" class="headerlink" title="1.2 数据依赖性"></a>1.2 数据依赖性</h2><p>具有数据依赖性的指令不能重排序。且这里的数据依赖性仅针对<strong>单个处理器和单个线程</strong>中执行的指令。</p><p>具有数据依赖性的指令禁止重排序：如下</p><img src="/JeckFS/2020/04/22/java%E5%B9%B6%E5%8F%913/8.png" class="" title="This is 8th image."><h2 id="1-3-as-if-serial语义"><a href="#1-3-as-if-serial语义" class="headerlink" title="1.3 as-if-serial语义"></a>1.3 as-if-serial语义</h2><p>编译器和处理器为了提高并行度，进行的重排序，但是它不会改变单线程环境中的执行结果。比如as-if-serial语义不会对具有数据依赖性的操作做重排序。</p><p>如</p><img src="/JeckFS/2020/04/22/java%E5%B9%B6%E5%8F%913/9.png" class="" title="This is 9-th image."><p>A与B可以重排序，但他俩不能和C重排序。给人的感觉是单线程中的语句是顺序执行的，实则是一种幻象。真正的执行过程中，不仅单线程中的程序会重排序，多个线程之间的指令也会重排序。</p><h2 id="1-4-happens-before规则"><a href="#1-4-happens-before规则" class="headerlink" title="1.4 happens-before规则"></a>1.4 happens-before规则</h2><p>happens-before规则（其实是重排序的规则）：<br>含义：A happens-before B：A先于B发生。<strong>happens-before规则就是屏蔽了编译器重排序和处理器重排序对多线程程序的影响，使得程序员只需要掌握这些happens-bofore规则，而不需要掌握底层的重排序规则，就能顺利编写并发程序。JMM可以通过happens-bofore关系向程序员提供跨线程的内存可见性保证。</strong>如果A线程的写操作a与B线程的读操作b之间存在happens-before关系，尽管a操作和b操作在不同的线程中执行，但JMM向程序员保证a操作将对b操作可见。</p><p>存在happens-bofore关系的两个操作并不意味着执行时会按照happens-before关系指定的顺序执行。原因是，当这两个操作重排序后，与按happens-before关系来执行的结果一致，这种重排序就是允许的，换言之就是happens-before规则失效了，但对于程序员老说它并没有失效。因为，对与程序员来说，结果并没有因为重排序而发生变化。</p><img src="/JeckFS/2020/04/22/java%E5%B9%B6%E5%8F%913/10.png" class="" title="This is 10-th image."><p>从这点来说，本质上他与as-if-serial是一样的。只不过：</p><ul><li>as-if-serial语义保证单线程内程序的执行结果不被改变，happens-before关系保证正确同步的多线程程序的执行结果不被改变。</li><li>as-if-serial语义给编写单线程程序的程序员创造了一个幻境：单线程程序是按程序的顺序来执行的。happens-before关系给编写正确同步的多线程程序的程序员创造了一个幻境：正确同步的多线程程序是按happens-before指定的顺序来执行的。</li><li>as-if-serial语义和happens-before这么做的目的，都是为了在不改变程序执行结果的前提下，尽可能地提高程序执行的并行度。</li></ul><p>具体happens-bofore规则：</p><ul><li>程序顺序规则：在不影响最终结果的前提下，B可以先于A执行。<br>如</li></ul><img src="/JeckFS/2020/04/22/java%E5%B9%B6%E5%8F%913/6.png" class="" title="This is 6th image."><ul><li>监视器锁规则：对一个<strong>锁</strong>的解锁，happens-before于随后对这个锁的加锁。即锁不能加两次。</li><li>volatile变量规则：对一个volatile域的写，happens-before于任意后续对这个volatile域的读。换言之，程序中对volatile域写的指令与其后面对这个volatile域读的操作是不能重排序的。</li><li>传递性：如果A happens-before B，且B happens-before C，那么A happens-before C。</li><li>start()规则：如果线程A执行操作ThreadB.start()（启动线程B），那么A线程的ThreadB.start()操作happens-before于线程B中的任意操作。</li><li>join()规则：如果线程A执行操作ThreadB.join()并成功返回，那么线程B中的任意操作happens-before于线程A从ThreadB.join()操作成功返回。<br>程序中断规则：对线程interrupted()方法的调用先行于被中断线程的代码检测到中断时间的发生。</li><li>对象finalize规则：一个对象的初始化完成（构造函数执行结束）先行于发生它的finalize()方法的开始。</li></ul><img src="/JeckFS/2020/04/22/java%E5%B9%B6%E5%8F%913/7.png" class="" title="This is 7th image."><p>一个happens-before规则对应于一个或多个编译器和处理器重排序。对于程序员来说，它起到了屏蔽底层重排序规则的作用，程序员就可不学习重排规则了。</p><p><a href="https://juejin.im/post/5ae6d309518825673123fd0e">参考文章</a></p><h2 id="1-5-一种猜测执行的方法"><a href="#1-5-一种猜测执行的方法" class="headerlink" title="1.5 一种猜测执行的方法"></a>1.5 一种猜测执行的方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ReorderExample</span> &#123;</span><br><span class="line">  <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">  <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">writer</span><span class="params">()</span> &#123;</span><br><span class="line">    a = <span class="number">1</span>; <span class="comment">// 1</span></span><br><span class="line">    flag = <span class="literal">true</span>; <span class="comment">// 2</span></span><br><span class="line">  &#125;</span><br><span class="line">  Public <span class="keyword">void</span> <span class="title function_">reader</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (f?lag) &#123; <span class="comment">// 3</span></span><br><span class="line">      <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> a * a; <span class="comment">// 4</span></span><br><span class="line">      ……</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先线程A执行write()，随后B线程接着执行reader()。当B执行到4的时候，并不一定会看到A写入的a。原因是：<br>3,4可能以<strong>猜测执行</strong>的方式运行：执行线程B的处理器提前读取并计算<code>a*a</code>，然后把结果临时保存在一个名为<strong>重排序缓冲</strong>(Reorder Buffer,ROB)的硬件缓存中，当操作3的条件判断为真时，再把计算结果写入变量i中。</p><img src="/JeckFS/2020/04/22/java%E5%B9%B6%E5%8F%913/11.png" class="" title="This is 11-th image."><p>当然1,2也可以重排序：</p><img src="/JeckFS/2020/04/22/java%E5%B9%B6%E5%8F%913/12.png" class="" title="This is 12-th image."><h1 id="2-数据竞争"><a href="#2-数据竞争" class="headerlink" title="2. 数据竞争"></a>2. 数据竞争</h1><p>一个线程中写一个变量；<br>另一个线程读同一个变量；<br>且写和读没有通过同步来排序。(排序可使用Synchronized，volatile，final)</p><p>具有数据竞争的代码旺旺会产生错误的结果。</p><h1 id="3-volatile特性"><a href="#3-volatile特性" class="headerlink" title="3. volatile特性"></a>3. volatile特性</h1><ul><li>对一个volatile变量的读，总能读到对该变量的最后一次写入</li><li>对任意单个volatile变量的读/写具有原子性，但volatile++不具有原子性。</li><li>可用于线程之间的通信。</li></ul><img src="/JeckFS/2020/04/22/java%E5%B9%B6%E5%8F%913/14.png" class="" title="This is 14-th image."><p>从上表可看出：<br>a. volatile的读操作与其后面任何类型变量的读写操作都不能重排序<br>b. valatile的写操作与其前面任何类型变量的读写操作都不能重排序<br>c. 先对volatile变量写，然后对volatile变量读，这两个操作不能重排序。</p><p>下面程序的执行顺序只能是1-2-3-4。原因见volatile重排序规则表<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">VolatileExample</span> &#123;</span><br><span class="line">  <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">volatile</span> <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">writer</span><span class="params">()</span> &#123; <span class="comment">// 线程A执行writer()</span></span><br><span class="line">    a = <span class="number">1</span>; <span class="comment">// 1</span></span><br><span class="line">    flag = <span class="literal">true</span>; <span class="comment">// 2</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reader</span><span class="params">()</span> &#123; <span class="comment">// 线程B执行reader()</span></span><br><span class="line">    <span class="keyword">if</span> (flag) &#123; <span class="comment">// 3</span></span><br><span class="line">      <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> a; <span class="comment">// 4</span></span><br><span class="line">      ……</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>对volatile读写内存语义的总结：</p><ul><li>线程A写一个volatile变量，实质上是线程A向接下来将要读这个volatile变量的某个线程发出了（其对共享变量所做修改的）消息。</li><li>线程B读一个volatile变量，实质上是线程B接收了之前某个线程发出的（在写这个volatile变量之前对共享变量所做修改的）消息。</li><li>线程A写一个volatile变量，随后线程B读这个volatile变量，这个过程实质上是线程A通过主内存向线程B发送消息。</li></ul><h1 id="4-锁的内存语义"><a href="#4-锁的内存语义" class="headerlink" title="4. 锁的内存语义"></a>4. 锁的内存语义</h1><ul><li>当线程释放锁时，JMM将该线程本地内存中的共享变量刷新到主内存中。</li><li>当线程获取锁时，JMM将该线程的本地内存置为无效。</li></ul><p>锁释放和锁获取的内存语义：</p><ul><li>线程A释放一个锁，实质上是线程A向接下来将要获取<strong>这个锁</strong>的某个线程发出了（线程A对共享变量所做修改的）消息。</li><li>线程B获取一个锁，实质上是线程B接收了之前某个线程发出的（在释放<strong>这个锁</strong>之前对共享变量所做修改的）消息。</li><li>线程A释放锁，随后线程B获取<strong>这个锁</strong>，这个过程实质上是线程A通过主内存向线程B发送消息。</li></ul><p><strong>禁止CAS操作与CAS前面和后面的任意内存操作重排序。</strong></p><p>公平重入锁的实现(volatile语义的应用)：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取锁</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">tryAcquire</span><span class="params">(<span class="type">int</span> acquires)</span> &#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="type">Thread</span> <span class="variable">current</span> <span class="operator">=</span> Thread.currentThread();</span><br><span class="line">  <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> getState(); <span class="comment">// 获取锁的开始，首先读volatile变量state</span></span><br><span class="line">  <span class="keyword">if</span> (c == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (isFirst(current) &amp;&amp;</span><br><span class="line">      compareAndSetState(<span class="number">0</span>, acquires)) &#123;</span><br><span class="line">      setExclusiveOwnerThread(current);</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (current == getExclusiveOwnerThread()) &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">nextc</span> <span class="operator">=</span> c + acquires;</span><br><span class="line">    <span class="keyword">if</span> (nextc &lt; <span class="number">0</span>)</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;Maximum lock count exceeded&quot;</span>);</span><br><span class="line">    setState(nextc);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 释放锁</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">tryRelease</span><span class="params">(<span class="type">int</span> releases)</span> &#123;</span><br><span class="line">  <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> getState() - releases;</span><br><span class="line">  <span class="keyword">if</span> (Thread.currentThread() != getExclusiveOwnerThread())</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalMonitorStateException</span>();</span><br><span class="line">  <span class="type">boolean</span> <span class="variable">free</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">if</span> (c == <span class="number">0</span>) &#123;</span><br><span class="line">    free = <span class="literal">true</span>;</span><br><span class="line">    setExclusiveOwnerThread(<span class="literal">null</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  setState(c); <span class="comment">// 释放锁的最后，写volatile变量state</span></span><br><span class="line">  <span class="keyword">return</span> free;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>获取锁时，首先读volatile变量，将对写入该volatile变量的线程的共享变量变为可见。释放锁时，最后写volatile变量，让获取锁的线程可以读到本线程对共享变量的更改。</p><h1 id="5-concurrent包的实现"><a href="#5-concurrent包的实现" class="headerlink" title="5. concurrent包的实现"></a>5. concurrent包的实现</h1><p>Java线程之间的通信有以下四种方式：</p><ol><li>A线程写volatile变量，随后B线程读这个volatile变量。</li><li>A线程写volatile变量，随后B线程用CAS更新这个volatile变量。</li><li>A线程用CAS更新一个volatile变量，随后B线程用CAS更新这个volatile变量。</li><li>A线程用CAS更新一个volatile变量，随后B线程读这个volatile变量。</li></ol><p>concurrent包源代码实现的通用模式：</p><ol><li>声明共享变量为volatile。</li><li>使用CAS的原子条件更新来实现线程之间的同步。同时，配合以volatile的读/写和CAS所具有的volatile读和写的内存语义来实现线程之间的通信。</li></ol><img src="/JeckFS/2020/04/22/java%E5%B9%B6%E5%8F%913/15.png" class="" title="This is 15-th image."><h1 id="6-final域的内存语义"><a href="#6-final域的内存语义" class="headerlink" title="6.final域的内存语义"></a>6.final域的内存语义</h1><p>示例：</p><img src="/JeckFS/2020/04/22/java%E5%B9%B6%E5%8F%913/16.png" class="" title="This is 16-th image."><ol><li>写final域的重排序规则</li></ol><ul><li>JMM禁止把final域的写，重排序到构造函数之外。</li><li>编译器会在final域的写之后，构造函数return之前，插入一个StoreStore屏障。这个屏障禁止处理器把final域的写重排序到构造函数之外。</li><li>当final域是引用类型的时候，写final域、写final域对象的成员域这两个操作与随后将该对象复制给引用变量obj是不能重排序的。</li></ul><img src="/JeckFS/2020/04/22/java%E5%B9%B6%E5%8F%913/20.png" class="" title="This is 20-th image."><img src="/JeckFS/2020/04/22/java%E5%B9%B6%E5%8F%913/19.png" class="" title="This is 19-th image."><p>这样保证任何线程在使用包含final域的对象时，该final域被正确初始化。而普通的域变量则可能会重排序到构造函数之外。</p><img src="/JeckFS/2020/04/22/java%E5%B9%B6%E5%8F%913/17.png" class="" title="This is 17-th image."><ol><li>读final域的重排序规则</li></ol><ul><li>初次读对象的引用 与 随后读该对象的final域不能重排序。</li><li>编译器会在读final域操作的前面插入一个LoadLoad屏障。</li></ul><img src="/JeckFS/2020/04/22/java%E5%B9%B6%E5%8F%913/18.png" class="" title="This is 18-th image."><p><code>从此例说明：内存屏障只对它前一个指令有效，再之前的不会被限制重排序。</code></p><h1 id="7-双重检查锁定与延迟初始化"><a href="#7-双重检查锁定与延迟初始化" class="headerlink" title="7. 双重检查锁定与延迟初始化"></a>7. 双重检查锁定与延迟初始化</h1><p>双重检查锁定是延迟初始化的一种技术。<br>延迟初始化是为了推迟一些高开销的对象初始化操作，并且只有在使用这些对象的时候才进行初始化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 错误的延迟初始化</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UnsafeLazyInitialization</span> &#123;</span><br><span class="line">      <span class="keyword">private</span> <span class="keyword">static</span> Instance instance;</span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">static</span> Instance <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (instance == <span class="literal">null</span>)          <span class="comment">// 1：A线程执行</span></span><br><span class="line">              instance = <span class="keyword">new</span> <span class="title class_">Instance</span>(); <span class="comment">// 2：B线程执行</span></span><br><span class="line">          <span class="keyword">return</span> instance;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>修改过后：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 正确的延迟初始化</span></span><br><span class="line"><span class="comment">// 使用Synchronized修饰getInstance()。缺点是开销较大</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SafeLazyInitialization</span> &#123;</span><br><span class="line">      <span class="keyword">private</span> <span class="keyword">static</span> Instance instance;</span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> Instance <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (instance == <span class="literal">null</span>)</span><br><span class="line">              instance = <span class="keyword">new</span> <span class="title class_">Instance</span>();</span><br><span class="line">          <span class="keyword">return</span> instance;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><br>更进一步：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 双重检查锁定，这是错误的代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DoubleCheckedLocking</span> &#123;                       <span class="comment">// 1</span></span><br><span class="line">      <span class="keyword">private</span> <span class="keyword">static</span> Instance instance;                   <span class="comment">// 2</span></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">static</span> Instance <span class="title function_">getInstance</span><span class="params">()</span> &#123;              <span class="comment">// 3</span></span><br><span class="line">          <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;                         <span class="comment">// 4:第一次检查</span></span><br><span class="line">              <span class="keyword">synchronized</span> (DoubleCheckedLocking.class) &#123; <span class="comment">// 5:加锁</span></span><br><span class="line">                  <span class="keyword">if</span> (instance == <span class="literal">null</span>)                   <span class="comment">// 6:第二次检查</span></span><br><span class="line">                      instance = <span class="keyword">new</span> <span class="title class_">Instance</span>();          <span class="comment">// 7:问题的根源出在这里</span></span><br><span class="line">              &#125;                                           <span class="comment">// 8</span></span><br><span class="line">          &#125;                                               <span class="comment">// 9</span></span><br><span class="line">          <span class="keyword">return</span> instance;                                <span class="comment">// 10</span></span><br><span class="line">      &#125;                                                   <span class="comment">// 11</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>错误的原因：<br>当线程执行到第4行时，代码读取到instance不为null时，instance引用的对象有可能还没有完成初始化。原因是：<code>instance=new Singleton();</code>可以分解为3行<strong>伪代码</strong>：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">memory = allcate();   <span class="comment">// 1.分配对象的内存空间</span></span><br><span class="line">ctorInstance(memory); <span class="comment">// 2.初始化对象</span></span><br><span class="line">instance = memory;    <span class="comment">// 3.设置instance指向刚分配的内存地址</span></span><br></pre></td></tr></table></figure><br>第2行与第3行可能发生重排序：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">memory = allocate(); <span class="comment">// 1：分配对象的内存空间</span></span><br><span class="line">instance = memory; <span class="comment">// 3：设置instance指向刚分配的内存地址</span></span><br><span class="line"><span class="comment">// 注意，此时对象还没有被初始化！</span></span><br><span class="line">ctorInstance(memory); <span class="comment">// 2：初始化对象</span></span><br></pre></td></tr></table></figure><br>重排序的理由是：这三行代码在单线程程序下，重排后结果不会发生变化。<br>当某个线程A完成instance指向分配的内存地址时，另一个线程B检查到instance!=null，即对象已经新建好，然而还有没完成该对象的初始化，线程B就拿着对象去做别的事情了，这是错误的。</p><p>解决办法：</p><ol><li>不允许伪代码的第2行与第3行重排序(volatile解决方案，原理参见volatile禁排规则表)</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SafeDoubleCheckedLocking</span> &#123;</span><br><span class="line">      <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Instance instance; <span class="comment">// 使用volatile修饰即可</span></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">static</span> Instance <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">              <span class="keyword">synchronized</span> (SafeDoubleCheckedLocking.class) &#123;</span><br><span class="line">                  <span class="keyword">if</span> (instance == <span class="literal">null</span>)</span><br><span class="line">                      instance = <span class="keyword">new</span> <span class="title class_">Instance</span>(); <span class="comment">// instance为volatile，现在没问题了</span></span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">return</span> instance;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ol><li>允许第2行与第3行重排序，但不允许其他线程看到这个重排序(基于类初始化的解决方案)</li></ol><p>JVM在类的初始化阶段(即在Class被加载后，且被线程使用之前)，会执行类的初始化。在执行类的初始化期间，JVM会去获取一个锁。这个锁可以同步多个线程对一个类的初始化。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InstanceFactory</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">InstanceHolder</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">Instance</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Instance</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Instance <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> InstanceHolder.instance ; <span class="comment">// 这里将导致InstanceHolder类被初始化</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><img src="/JeckFS/2020/04/22/java%E5%B9%B6%E5%8F%913/21.png" class="" title="This is 21-th image."></p><p>一个类或接口类型T被立即初始化的情况：</p><ol><li>T是一个类，而且一个T类型的实例被创建。</li><li>T是一个类，且T中声明的一个静态方法被调用。</li><li>T中声明的一个静态字段被赋值。</li><li>T中声明的一个静态字段被使用，而且这个字段不是一个常量字段。</li><li>T是一个顶级类（Top Level Class，见Java语言规范的§7.6），而且一个断言语句嵌套在T内部被执行。</li></ol><p>当调用getInstance()时，根据情况2，初始化InstanceFactory类；<br>当在getInstance()中调用InstanceHolder.instance时，根据情况4会初始化InstanceHolder类。</p><p>JVM在类初始化期间会获取初始化锁，并且每个线程至少获取一次锁来确保这个类已经被初始化过了。多个线程排队获取初始化锁，只有第一个获得锁的线程会初始化类，其他线程用第一个线程初始化好的类。</p>]]></content>
      
      
      <categories>
          
          <category> java并发编程的艺术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java并发编程的艺术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>552.学生出勤记录II</title>
      <link href="/JeckFS/2020/04/21/552-%E5%AD%A6%E7%94%9F%E5%87%BA%E5%8B%A4%E8%AE%B0%E5%BD%95II/"/>
      <url>/JeckFS/2020/04/21/552-%E5%AD%A6%E7%94%9F%E5%87%BA%E5%8B%A4%E8%AE%B0%E5%BD%95II/</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><img src="/JeckFS/2020/04/21/552-%E5%AD%A6%E7%94%9F%E5%87%BA%E5%8B%A4%E8%AE%B0%E5%BD%95II/552-1.png" class="" title="This is an image."><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>首先搞清楚题目中所说的“超过两个连续的L”是什么意思。他是说像这样的序列：LLLAPPPL，PPPALLLLP。而LLPLLPLLPLL是可被奖励的出勤序列。</p><p>因为n值最大为十万，所以算法的时间复杂度只能是O(n)才可通过，否则超时。</p><p>这道题不是求最大最小值，也不是计数问题，但仍可以使用动态规划。</p><p><strong>首先定义状态：</strong><br>直觉中，如果有了状态的话，那么d(状态a)=可被奖励的次数。因为结果就是求的可被奖励的次数嘛。<br>所以，就接着想到什么可影响到可被奖励的次数呢？显然，有题意知：出勤序列中少于等于一个A，且没有出现连续三个或三个以上的L。既然如此，那状态中一定有一个维度记录出勤序列中A出现的次数，以及连续出现的L的个数。有了这些还不够，试想想用动态规划，这题只能走地推式的方法，因为n是十万级别的递归会栈溢出。也就是说我们知道了n=i的结果，那该如何导出n=i+1的结果呢？分析至此，状态也就定义出来了：<br>d[len][i][j]：表示出勤序列的长度为len，且出现了i次A，且从当前位置(即len位置)连续出现了j次L。<br>如LLPPLLA可表示为d[7][1][2]，<code>len是从后往前数的</code>。<br>LPPPLLP可表示为d[7][0][1]。<br>PAP可表示为d[3][1][0]。</p><p>那base case该如何定义呢？<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">d[<span class="number">1</span>][<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>  序列：P</span><br><span class="line">d[<span class="number">1</span>][<span class="number">0</span>][<span class="number">1</span>] = <span class="number">1</span>  序列：L</span><br><span class="line">d[<span class="number">1</span>][<span class="number">0</span>][<span class="number">2</span>] = <span class="number">0</span>  序列：LL，当前只出勤了一次，却出现两次迟到的记录。与状态的含义矛盾。故将其定义为<span class="number">0</span>。不合法</span><br><span class="line">d[<span class="number">1</span>][<span class="number">1</span>][<span class="number">0</span>] = <span class="number">1</span>  序列：A</span><br><span class="line">d[<span class="number">1</span>][<span class="number">1</span>][<span class="number">1</span>] = <span class="number">0</span>  序列：LA  不合法</span><br><span class="line">d[<span class="number">1</span>][<span class="number">1</span>][<span class="number">2</span>] = <span class="number">0</span>  序列：LLA 不合法</span><br></pre></td></tr></table></figure></p><p>考虑一些特殊情况：当j&gt;3时，d[len][i][j] = 0; 当i&gt;1时，d[len][i][j] = 0; 这在遍历状态时，直接约定了其有用状态的可选空间。</p><p>当<code>j = 0</code>时，我们考虑如何递推求得d[len][i][0]。<br>根据状态的含义，d[len][i][0]限定了len位置只能是P或者A。考虑len位置是P，那么A肯定出现在P的后面。</p><img src="/JeckFS/2020/04/21/552-%E5%AD%A6%E7%94%9F%E5%87%BA%E5%8B%A4%E8%AE%B0%E5%BD%95II/552-2.png" class="" title="This is an image."><p>当<code>j = 1</code>时，由状态的含义知len位置上是L，那么len-1位置上只能是A或者P，而不能是L，因为如果是L的话，j就要等于2了，这与假设不服。<br>故d[len]i][1]=d[len-1][i][0];</p><p>当<code>j = 2</code>时，由状态的含义只len位置与len-1位置是L，假设<code>len &gt; 2</code>，len-3位置可以是A或者P，但不能是L。因此d[len][i][2]=d[len-2]][i][0]; 当<code>len==2 &amp;&amp; i+2&lt;=len</code>时，d[len][i][2] = 1;</p><p>因此最麻烦的状态转移方程就搞定了：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">d[len][i][<span class="number">0</span>] = d[len-<span class="number">1</span>][i][<span class="number">0</span>] + d[len-<span class="number">1</span>][i][<span class="number">1</span>] + d[len-<span class="number">1</span>][i][<span class="number">2</span>]</span><br><span class="line">             + d[len-<span class="number">1</span>][i-<span class="number">1</span>][<span class="number">0</span>] + d[len-<span class="number">1</span>][i-<span class="number">1</span>][<span class="number">1</span>] + d[len-<span class="number">1</span>][i-<span class="number">1</span>][<span class="number">2</span>];</span><br><span class="line">d[len][i][<span class="number">1</span>] = d[len-<span class="number">1</span>][i][<span class="number">0</span>];</span><br><span class="line">d[len][i][<span class="number">2</span>] = d[len-<span class="number">2</span>][i][<span class="number">0</span>]  <span class="keyword">if</span> len &gt; <span class="number">2</span></span><br><span class="line">            or <span class="number">1</span>               <span class="type">if</span> <span class="variable">len</span> <span class="operator">=</span>= <span class="number">2</span> &amp;&amp; i+<span class="number">2</span>&lt;=len</span><br></pre></td></tr></table></figure></p><p>补一张手稿：</p><img src="/JeckFS/2020/04/21/552-%E5%AD%A6%E7%94%9F%E5%87%BA%E5%8B%A4%E8%AE%B0%E5%BD%95II/552-3.jpg" class="" title="This is an image."><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="comment">// 384ms 10.40%(中文)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">checkRecord</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">long</span>[][][] d = <span class="keyword">new</span> <span class="title class_">long</span>[n + <span class="number">1</span>][<span class="number">2</span>][<span class="number">3</span>];</span><br><span class="line">        <span class="comment">// base case:</span></span><br><span class="line">        d[<span class="number">1</span>][<span class="number">0</span>][<span class="number">0</span>] = d[<span class="number">1</span>][<span class="number">0</span>][<span class="number">1</span>] = d[<span class="number">1</span>][<span class="number">1</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">2</span>; len &lt;= n; len++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">                d[len][i][<span class="number">0</span>] = (d[len - <span class="number">1</span>][i][<span class="number">0</span>] + d[len - <span class="number">1</span>][i][<span class="number">1</span>] + d[len - <span class="number">1</span>][i][<span class="number">2</span>]);</span><br><span class="line">                <span class="keyword">if</span> (i - <span class="number">1</span> &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    d[len][i][<span class="number">0</span>] += d[len - <span class="number">1</span>][i - <span class="number">1</span>][<span class="number">0</span>] + d[len - <span class="number">1</span>][i - <span class="number">1</span>][<span class="number">1</span>] + d[len - <span class="number">1</span>][i - <span class="number">1</span>][<span class="number">2</span>];</span><br><span class="line">                &#125;</span><br><span class="line">                d[len][i][<span class="number">0</span>] %= (<span class="number">1000000000</span> + <span class="number">7</span>);</span><br><span class="line"></span><br><span class="line">                d[len][i][<span class="number">1</span>] = d[len - <span class="number">1</span>][i][<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (len == <span class="number">2</span> &amp;&amp; i + <span class="number">2</span> &lt;= len)</span><br><span class="line">                    d[len][i][<span class="number">2</span>] = d[len - <span class="number">2</span>][i][<span class="number">0</span>] + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    d[len][i][<span class="number">2</span>] = d[len - <span class="number">2</span>][i][<span class="number">0</span>];</span><br><span class="line">                d[len][i][<span class="number">2</span>] %= (<span class="number">1000000000</span> + <span class="number">7</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">3</span>; j++) &#123;</span><br><span class="line">                res += d[n][i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">int</span>) (res % (<span class="number">1000000000</span> + <span class="number">7</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 动态规划 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>牛客-商品交易</title>
      <link href="/JeckFS/2020/04/19/%E7%89%9B%E5%AE%A2-%E5%95%86%E5%93%81%E4%BA%A4%E6%98%93/"/>
      <url>/JeckFS/2020/04/19/%E7%89%9B%E5%AE%A2-%E5%95%86%E5%93%81%E4%BA%A4%E6%98%93/</url>
      
        <content type="html"><![CDATA[<p>链接：<a href="https://www.nowcoder.com/questionTerminal/ce9d7cdac6e34e42919e787a8baf8a2b">https://www.nowcoder.com/questionTerminal/ce9d7cdac6e34e42919e787a8baf8a2b</a><br>来源：牛客网</p><p>珐达采下个月要去鸥洲各国考察一趟，采购流通神秘石并从中搞点油水。</p><p>珐达采会按顺序依次经过序号分别为1, 2, 3, …, n的鸥洲国家，在第i个国家神秘石的流通价格为Ai鸥。因为行程紧张，在每个国家的停留时间有限，所以他只能花费Ai鸥买入一块神秘石，或者卖出一块手中的神秘石获得Ai鸥，或者什么都不做，而且因为神秘石的保存需要极其先进的高级材料容器，其材料稀有且制作困难，珐达采只有一份容器，故无论何时珐达采手里 最多只能拥有一块神秘石。</p><p>珐达采想知道最终能从中获利最大多少鸥。因为交易需要手续费，所以珐达采还想知道在获利最大收益的同时，最少需要交易多少次。因为珐达采是大财阀，所以你可以认为他一开始金钱无限。</p><p>输入描述:<br>第一行一个数n。（1≤n≤100000）</p><p>第二行n个数，第i个数表示Ai。（1≤Ai≤1e9）</p><p>输出描述:<br>共一行，两个数，分别代表最大收益和对应的最少交易次数。<br>示例1<br>输入<br>5<br>9 7 10 1 5<br>输出<br>7 4</p><p>状态:<br>dp[i]：表示前i个国家买卖后的最大交易<br>times[i]：表示天i个国家的交易次数<br><code>dp[i]=max &#123;dp[j] + a[i] - a[j]&#125; 其中0&lt;=j&lt;i</code><br>此种方法只能通过20%的用例。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span>[] a, times;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> n;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">helper</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">long</span>[] dp = <span class="keyword">new</span> <span class="title class_">long</span>[n+<span class="number">1</span>]; <span class="comment">// dp[i]表示前i个国家交易后的最大收益</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">            <span class="type">long</span> <span class="variable">t</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="type">int</span> time=-<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (a[j] &lt; a[i]) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (t &lt; dp[j] + a[i] - a[j]) &#123;</span><br><span class="line">                        t = dp[j] + a[i] - a[j];</span><br><span class="line">                        time = j;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            dp[i+<span class="number">1</span>] = dp[i] = Math.max(dp[i], t);</span><br><span class="line">            <span class="keyword">if</span> (time == -<span class="number">1</span>) &#123;</span><br><span class="line">                times[i + <span class="number">1</span>] = times[i];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                times[i+<span class="number">1</span>] = times[i] = Math.max(times[i], times[time] + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(dp[n]+<span class="string">&quot; &quot;</span>+times[n-<span class="number">1</span>]*<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">solve</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> n;</span><br><span class="line">        <span class="type">long</span>[] a, times;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        n = sc.nextInt();</span><br><span class="line">        a = <span class="keyword">new</span> <span class="title class_">long</span>[n]; <span class="comment">// 价格</span></span><br><span class="line">        times = <span class="keyword">new</span> <span class="title class_">long</span>[n+<span class="number">1</span>]; <span class="comment">// 交易次数</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            a[i] = sc.nextInt();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.a = a;</span><br><span class="line">        <span class="built_in">this</span>.times = times;</span><br><span class="line">        <span class="built_in">this</span>.n = n;</span><br><span class="line">        helper();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Main</span>().solve();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上述代码的时间复杂度为 $O(n^2)$ ，所以超时。如何将时间复杂度降低到 $O(n)$ ，是解决问题的关键。这里有一条降低的技巧：<strong>凡是求收益，或者价值这样的量，都允许其值为正或为负。且其选择只有两种，要么买入，要么卖出。买入则相当于支出，即收益-支出；卖出则相当于收入，即收益+收入。</strong></p><p><a href="https://www.nowcoder.com/questionTerminal/ce9d7cdac6e34e42919e787a8baf8a2b">参考题解中『Zany.』的解答方法</a></p><p>对于本题状态定义为：<br>dp[i][j]表示在状态(i,j)下的最大收益，其中状态(i,j)表示到达第i个国家且是否持有神石。j的取值为0(0表示当前没有神石，可以买入，当然也可以不买即保持当前状态)，或1(1表示当前持有神石，可以卖出，当然也可以不卖即保持当前状态，以后卖个高价)。<br>则状态转移方程为：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">dp[i][<span class="number">0</span>] = max(上一个国家没买入现在仍旧不买，上一个国家已经买入在当前国家卖出)</span><br><span class="line">dp[i][<span class="number">0</span>] = max(dp[i-<span class="number">1</span>][<span class="number">0</span>], dp[i-<span class="number">1</span>][<span class="number">1</span>]+a[i]])</span><br><span class="line"></span><br><span class="line">dp[i][<span class="number">0</span>] = max(上一个国家持有神石在当前国家仍旧不卖，上一个国家没有持有神石在当前国家买入)</span><br><span class="line">dp[i][<span class="number">1</span>] = max(dp[i-<span class="number">1</span>][<span class="number">1</span>], dp[i-<span class="number">1</span>][<span class="number">0</span>]-a[i])</span><br><span class="line"></span><br><span class="line">[注意]：因为dp[i][j]表示的是收益，所以买入要减去购入价格；卖出要加上卖出价格。</span><br></pre></td></tr></table></figure><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">State</span> &#123;</span><br><span class="line">        <span class="type">long</span> money;</span><br><span class="line">        <span class="type">int</span> deal;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">State</span><span class="params">(<span class="type">long</span> money, <span class="type">int</span> deal)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.money = money;</span><br><span class="line">            <span class="built_in">this</span>.deal = deal;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">State</span><span class="params">(State h)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.money = h.money;</span><br><span class="line">            <span class="built_in">this</span>.deal = h.deal;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="keyword">while</span> (sc.hasNextInt()) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">            <span class="type">int</span>[] a = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">                a[i] = sc.nextInt();</span><br><span class="line">            &#125;</span><br><span class="line">            State[][] dp = <span class="keyword">new</span> <span class="title class_">State</span>[n][<span class="number">2</span>];</span><br><span class="line">            dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="keyword">new</span> <span class="title class_">State</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">            dp[<span class="number">0</span>][<span class="number">1</span>] = <span class="keyword">new</span> <span class="title class_">State</span>(-a[<span class="number">0</span>], <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">                <span class="type">State</span> <span class="variable">sell</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">State</span>(dp[i - <span class="number">1</span>][<span class="number">1</span>]);</span><br><span class="line">                sell.money += a[i];</span><br><span class="line">                sell.deal += <span class="number">1</span>;</span><br><span class="line">                dp[i][<span class="number">0</span>] = max(sell, dp[i - <span class="number">1</span>][<span class="number">0</span>]);</span><br><span class="line"> </span><br><span class="line">                <span class="type">State</span> <span class="variable">buy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">State</span>(dp[i - <span class="number">1</span>][<span class="number">0</span>]);</span><br><span class="line">                buy.money -= a[i];</span><br><span class="line">                buy.deal += <span class="number">1</span>;</span><br><span class="line">                dp[i][<span class="number">1</span>] = max(dp[i - <span class="number">1</span>][<span class="number">1</span>], buy);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(dp[n - <span class="number">1</span>][<span class="number">0</span>].money + <span class="string">&quot; &quot;</span> + dp[n - <span class="number">1</span>][<span class="number">0</span>].deal);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> State <span class="title function_">max</span><span class="params">(State h1, State h2)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (h1.money != h2.money) &#123;</span><br><span class="line">            <span class="keyword">return</span> h1.money &gt; h2.money ? h1 : h2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> h1.deal &lt;= h2.deal ? h1 : h2;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 动态规划 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 牛客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>状态压缩问题</title>
      <link href="/JeckFS/2020/04/16/%E6%9C%80%E4%BC%98%E9%85%8D%E5%AF%B9%E9%97%AE%E9%A2%98/"/>
      <url>/JeckFS/2020/04/16/%E6%9C%80%E4%BC%98%E9%85%8D%E5%AF%B9%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="1-最优配对问题"><a href="#1-最优配对问题" class="headerlink" title="1.最优配对问题"></a>1.最优配对问题</h1><p>空间里有n个点 $P<em>0,P_1,\cdots, P</em>{n-1}$，把它们配成n/2（n对偶数），使得每个点恰好在一个点对中。所有点对中两点的距离之和应尽量小。 $n\leq20,|x_i,y_i,z_i|\leq 10000$。</p><h2 id="1-1-分析"><a href="#1-1-分析" class="headerlink" title="1.1 分析"></a>1.1 分析</h2><ol><li>设d(i)表示把前i个点两两配对的最小距离和。</li><li>考虑第i个点—假设它和j配对( $j&lt;i$ )，“把前i-1个点中除了j之外的其他点两两配对”，它显然无法用任何一个d值来刻画。</li><li>增加维度，更细致地描述状态。“除了某些元素外”，把它作为状态的一部分</li><li>d(i,S)表示把前i个点中，位于集合S中的元素两两配对的最小距离和，则状态转移方程为： d(i,S)=min{|PiPj| +d(i-1,S-{i}-{j}) | j 属于 S}} }</li><li>$n&lt;20$ 所以可以使用子集的二进制表示</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> S = <span class="number">0</span>; S &lt; (<span class="number">1</span>&lt;&lt;n); S++)&#123;</span><br><span class="line">        d[i][S] = INF;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; i; j++) <span class="keyword">if</span> (S &amp; (<span class="number">1</span>&lt;&lt;j))</span><br><span class="line">            d[i][S] = <span class="built_in">min</span>(d[i][S], <span class="built_in">dist</span>(i,j)+d[i<span class="number">-1</span>][S^(<span class="number">1</span>&lt;&lt;i)^(<span class="number">1</span>&lt;&lt;j)]);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="1-2-简化"><a href="#1-2-简化" class="headerlink" title="1.2 简化"></a>1.2 简化</h1><ul><li>阶段i不用保存，它已经隐含在S中了—S中最大的元素就是i。用d(S)表示“把S中的元素两两配对的最小距离和”。</li></ul><ul><li><p>d(S)=min{|Pi*Pj|+d(S-{i}-{j})| j in S, i=max{S}}</p></li><li><p>如果使用二进制表示子集并进行动态规划，集合中的元素就隐含了阶段信息。例如，可以把集合中的最大元素想象成“阶段”。</p></li></ul><h1 id="2-货郎担问题"><a href="#2-货郎担问题" class="headerlink" title="2.货郎担问题"></a>2.货郎担问题</h1><p>有n个城市，两两之间均有道路直接相连。给出每两个城市i和j之间的道路长度 $L_{i,j}$ ，求一条经过每个城市一次且仅一次，最后回到起点的路线，使得经过的道路总长度最短。 $N\leq 15$ ，城市编号为 $0\sim n-1$</p>]]></content>
      
      
      <categories>
          
          <category> 动态规划 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode300.最长上升子序列</title>
      <link href="/JeckFS/2020/04/11/leetcode300-%E6%9C%80%E9%95%BF%E4%B8%8A%E5%8D%87%E5%AD%90%E5%BA%8F%E5%88%97/"/>
      <url>/JeckFS/2020/04/11/leetcode300-%E6%9C%80%E9%95%BF%E4%B8%8A%E5%8D%87%E5%AD%90%E5%BA%8F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><img src="/JeckFS/2020/04/11/leetcode300-%E6%9C%80%E9%95%BF%E4%B8%8A%E5%8D%87%E5%AD%90%E5%BA%8F%E5%88%97/300-1.png" class="" title="This is an image."><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="comment">// 30ms 5.22%(中文) 13ms 27.30%</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">lengthOfLIS</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[nums.length];</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            dp[i] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[j] &lt; nums[i]) &#123;</span><br><span class="line">                    dp[i] = Math.max(dp[i], dp[j] + <span class="number">1</span>);</span><br><span class="line">                    res = Math.max(res, dp[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 动态规划 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode279.完全平方数</title>
      <link href="/JeckFS/2020/04/11/leetcode279-%E5%AE%8C%E5%85%A8%E5%B9%B3%E6%96%B9%E6%95%B0/"/>
      <url>/JeckFS/2020/04/11/leetcode279-%E5%AE%8C%E5%85%A8%E5%B9%B3%E6%96%B9%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><img src="/JeckFS/2020/04/11/leetcode279-%E5%AE%8C%E5%85%A8%E5%B9%B3%E6%96%B9%E6%95%B0/279-1.png" class="" title="This is an image."><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="comment">// 43ms 51.19%(中文) 33ms 57.60%(英文)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">numSquares</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (n &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[n+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt;= n; j++) &#123;</span><br><span class="line">            dp[j] = Integer.MAX_VALUE;</span><br><span class="line">        &#125;</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        dp[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">2</span>; j &lt;= n; j++) &#123; <span class="comment">// 计算数j的最小完全平方数个数</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">1</span>; j - k*k &gt;= <span class="number">0</span> &amp;&amp; k*k &lt;= n; k++) &#123;</span><br><span class="line">                dp[j] = Math.min(dp[j], dp[j - k*k]+<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 动态规划 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java并发2</title>
      <link href="/JeckFS/2020/04/09/java%E5%B9%B6%E5%8F%912/"/>
      <url>/JeckFS/2020/04/09/java%E5%B9%B6%E5%8F%912/</url>
      
        <content type="html"><![CDATA[<blockquote class="pullquote mindmap mindmap-md"><ul><li>Java实现院子操作的方式<ul><li>volatile<ul><li>共享变量的修改会，导致其他线程缓存的共享变量失效。</li></ul></li><li>synchronized<ul><li>Java对象头(锁的存储结构)<ul><li>Mark Word：存储对象信息(hashCode，分代年龄，GC标记)或锁信息(锁的类型，不同锁有不同存储结构)等<ul><li>是实现不同粒度锁的关键数据结构</li></ul></li><li>Class metadata address：存储到对象类型数据的指针</li><li>Array length</li></ul></li><li>锁的对比<ul><li>偏向锁：执行速率非常快，但竞争锁的消耗大，适用于单一线程访问</li><li>轻量级锁：不阻塞，响应及执行速度快，但自旋消耗CPU。</li><li>重量级锁：不自旋，但会阻塞且响应慢，适用于吞吐量大的情景</li></ul></li><li>锁的关键点<ul><li>偏向锁<ul><li>锁状态的判定，mark word是否存储当前线程ID</li><li>偏向锁加锁和撤销的流程</li><li>可配置为关闭状态</li></ul></li></ul></li></ul></li><li>java代码实现</li></ul></li></ul></blockquote><p><strong>对偏向锁的理解：</strong><br>当一个线程<code>a</code>在执行到同步代码块时，恰好这时候没有其他线程执行，也没有其他线程竞争，这时候该线程就以偏向锁的方式运行(线程ID指向该线程)。当出现其他线程使用CAS竞争时，线程<code>a</code>会在达到全局安全点时被挂起，偏向锁升级为轻量级锁，然后其他线程再从安全点开始继续执行同步代码。</p><p><strong>为什么偏向锁比轻量级锁性能高？</strong><br>因为轻量级锁的获取及释放依赖多次CAS原子指令，而偏向锁只需要在置换ThreadID的时候依赖一次CAS原子指令（由于一旦出现多线程竞争的情况就必须撤销偏向锁，所以偏向锁的撤销操作的性能损耗必须小于节省下来的CAS原子指令的性能消耗）。轻量级锁(自旋)是为了在线程交替执行同步块时提高性能，而偏向锁则是在只有一个线程执行同步块时进一步提高性能。</p><p><a href="https://www.cnblogs.com/paddix/p/5405678.html">参考文献</a></p><p><strong>CAS操作</strong><br>值发生改变说明有其他线程更改，则CAS失败；若值未发生改变，说明没有其他线程更改，则CAS成功。但会出现<strong>ABA</strong>的问题。就是当其他线程已经将A改为B然后又改为A，当前线程在检查值检查值相同就认为没有其他线程修改过，但事实已经被修改。<code>AtomicStampedReference</code>类通过版本号(类似时间戳)的方式解决了ABA问题。<br><a href="https://juejin.im/entry/5a7288645188255a8817fe26">ABA问题</a></p>]]></content>
      
      
      <categories>
          
          <category> java并发编程的艺术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java并发编程的艺术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell脚本应用</title>
      <link href="/JeckFS/2020/04/09/shell%E8%84%9A%E6%9C%AC%E5%BA%94%E7%94%A8/"/>
      <url>/JeckFS/2020/04/09/shell%E8%84%9A%E6%9C%AC%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>简介：将clone的github项目上传至gitee博客上。</p><ul><li>将url路径解码</li><li>递归遍历所有文件，将md文件和对应的图片拷贝至gitee项目下</li></ul><p>运行：bash ccpp.sh /home/yfs/test/dir/fucking-algorithm<br>在运行本程序时应先运行：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/yfs/test/dir/fucking-algorithm</span><br><span class="line"><span class="comment"># 拉取github项目，保证url路径是已经编码的</span></span><br><span class="line">git fetch --all &amp;&amp; git reset --hard origin/master &amp;&amp; git pull</span><br><span class="line"><span class="comment"># 删除gitee项目中所有的fucking-开头的文件和文件夹</span></span><br><span class="line"><span class="built_in">rm</span> -r fucking-* &amp;&amp; <span class="built_in">rm</span> fucking-*</span><br></pre></td></tr></table></figure></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">travel</span></span>()&#123;</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> $(<span class="built_in">ls</span> <span class="variable">$1</span>)</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">test</span> -d <span class="variable">$1</span>/<span class="variable">$item</span> ; <span class="keyword">then</span></span><br><span class="line">            travel <span class="variable">$1</span>/<span class="variable">$item</span></span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">test</span> <span class="string">&quot;md&quot;</span> == <span class="string">&quot;<span class="variable">$&#123;item##*.&#125;</span>&quot;</span>; <span class="keyword">then</span></span><br><span class="line">            <span class="built_in">echo</span> filename=<span class="variable">$1</span>/<span class="variable">$item</span></span><br><span class="line">            <span class="comment"># 将文件中的url编码的图片路径转化为可读的路径</span></span><br><span class="line">            <span class="keyword">for</span> waitForDecode <span class="keyword">in</span> $(<span class="built_in">cat</span> <span class="variable">$1</span>/<span class="variable">$item</span> | grep -o <span class="string">&#x27;\(\%\w\+\)\+&#x27;</span> | <span class="built_in">sort</span> | <span class="built_in">uniq</span>)</span><br><span class="line">            <span class="keyword">do</span></span><br><span class="line">                <span class="built_in">echo</span> <span class="variable">$waitForDecode</span></span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">test</span> <span class="string">&quot;<span class="variable">$waitForDecode</span>&quot;</span>; <span class="keyword">then</span></span><br><span class="line">                    <span class="comment"># urldecoded: url编码解码后的结果</span></span><br><span class="line">                    urldecoded=$(<span class="built_in">printf</span> $(<span class="built_in">echo</span> <span class="variable">$waitForDecode</span> | sed <span class="string">&#x27;s/\\/\\\\/g;s/\(%\)\([0-9a-fA-F][0-9a-fA-F]\)/\\x\2/g&#x27;</span>)<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">                    <span class="comment"># 替换文件中的内容</span></span><br><span class="line">                    sed -i <span class="string">&quot;s/\(\%\w\+\)\+/<span class="variable">$urldecoded</span>/g&quot;</span> <span class="variable">$1</span>/<span class="variable">$item</span></span><br><span class="line">                <span class="keyword">fi</span></span><br><span class="line">            <span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 在hexo目录下建立文件并将图片挪动到指定位置</span></span><br><span class="line">            hexo new fucking-<span class="variable">$&#123;item%%.*&#125;</span></span><br><span class="line">            <span class="comment"># 更新tags和categories标签</span></span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;hexo生成文件：fucking-<span class="variable">$&#123;item&#125;</span>&quot;</span></span><br><span class="line">            sed -i <span class="string">&#x27;s/tags:/tags: 转载博客\ncategories: 转载博客/&#x27;</span> /home/yfs/gitee/source/_posts/fucking-<span class="variable">$&#123;item&#125;</span></span><br><span class="line">            <span class="comment"># 追加文件</span></span><br><span class="line">            <span class="built_in">cat</span> <span class="variable">$1</span>/<span class="variable">$item</span> &gt;&gt; /home/yfs/gitee/source/_posts/fucking-<span class="variable">$&#123;item&#125;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 拷贝文件需要的图片</span></span><br><span class="line">            <span class="keyword">for</span> picture <span class="keyword">in</span> $(<span class="built_in">cat</span> <span class="variable">$1</span>/<span class="variable">$item</span> | grep <span class="string">&#x27;^\!\[&#x27;</span> | grep -o <span class="string">&#x27;pictures/.*)&#x27;</span> | sed -n <span class="string">&#x27;s/\(.*\))/\1/p&#x27;</span>)</span><br><span class="line">            <span class="keyword">do</span> </span><br><span class="line">                <span class="built_in">echo</span> 拷贝的源文件：/home/yfs/test/dir/fucking-algorithm/<span class="variable">$picture</span></span><br><span class="line">                <span class="built_in">echo</span> 拷贝的目的文件：/home/yfs/gitee/source/_posts/fucking-<span class="variable">$&#123;item%%.*&#125;</span></span><br><span class="line">                <span class="built_in">cp</span> /home/yfs/test/dir/fucking-algorithm/<span class="variable">$picture</span> /home/yfs/gitee/source/_posts/fucking-<span class="variable">$&#123;item%%.*&#125;</span></span><br><span class="line">                </span><br><span class="line">                <span class="built_in">echo</span> <span class="string">&quot;需要修改的文件：fucking-<span class="variable">$&#123;item&#125;</span>&quot;</span></span><br><span class="line">                <span class="comment"># 显示图片</span></span><br><span class="line">                imageName=$(<span class="built_in">echo</span> <span class="variable">$&#123;picture##*/&#125;</span> | <span class="built_in">tr</span> -d <span class="string">&#x27;[=)=]&#x27;</span>)</span><br><span class="line">                <span class="built_in">echo</span> imageName=<span class="variable">$imageName</span></span><br><span class="line">                <span class="comment"># subsContent：要被替换的内容</span></span><br><span class="line">                subsContent=$(<span class="built_in">cat</span> /home/yfs/gitee/source/_posts/fucking-<span class="variable">$&#123;item&#125;</span> | grep <span class="variable">$imageName</span>)</span><br><span class="line">                <span class="comment"># subsedContent</span></span><br><span class="line">                subsedContent=<span class="string">&quot;&#123;\% asset_img <span class="variable">$imageName</span> This is an image. \%&#125;&quot;</span></span><br><span class="line">                <span class="comment"># sed -i &quot;s/$subsContent/$subsedContent/&quot; /home/yfs/gitee/source/_posts/fucking-$&#123;item&#125;</span></span><br><span class="line">                sed -i -e <span class="string">&quot;/<span class="variable">$imageName</span>/c <span class="variable">$subsedContent</span>&quot;</span> /home/yfs/gitee/source/_posts/fucking-<span class="variable">$&#123;item&#125;</span></span><br><span class="line">                <span class="built_in">echo</span> <span class="string">&quot;subsConcontent=<span class="variable">$subsContent</span>&quot;</span></span><br><span class="line">                <span class="built_in">echo</span> <span class="string">&quot;subsedContent=<span class="variable">$subsedContent</span>&quot;</span></span><br><span class="line">            <span class="keyword">done</span></span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /home/yfs/gitee</span><br><span class="line">travel <span class="variable">$1</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux操作字符串</title>
      <link href="/JeckFS/2020/04/09/linux%E6%93%8D%E4%BD%9C%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
      <url>/JeckFS/2020/04/09/linux%E6%93%8D%E4%BD%9C%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[<h1 id="【补充】容易忽视的小问题"><a href="#【补充】容易忽视的小问题" class="headerlink" title="【补充】容易忽视的小问题"></a>【补充】容易忽视的小问题</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">截取字符串</span></span><br><span class="line">t=&quot;123456789&quot;</span><br><span class="line">echo %&#123;t:3:4&#125;       # 4567</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用 <span class="variable">$&#123;#&#125;</span> <span class="variable">$&#123;%&#125;</span> 截取字符串后缀与前缀</span></span><br><span class="line">t=&quot;User:123:321:/home/dir&quot;</span><br><span class="line">echo $&#123;t#*:*:*:&#125;    # /home/dir</span><br><span class="line">echo $&#123;t%:*:*:*&#125;    # User</span><br><span class="line">echo $&#123;t%%:*&#125;       # User</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">IFS 修改默认分隔符([注意]制表符需要加 $ 符号，如$<span class="string">&#x27;\n&#x27;</span>, $<span class="string">&#x27;\t&#x27;</span>)</span></span><br><span class="line">IFS=:</span><br><span class="line">str=&quot;abc:123:mn:456&quot;</span><br><span class="line">for item in $&#123;str&#125; ; do</span><br><span class="line">  echo $item</span><br><span class="line">done</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">输出</span></span><br><span class="line">abc</span><br><span class="line">123</span><br><span class="line">mn</span><br><span class="line">456</span><br><span class="line"></span><br><span class="line">IFS=$&#x27;\n&#x27;</span><br><span class="line">for file in $( ls -alh ) ; do</span><br><span class="line">  echo file=$&#123;file&#125;</span><br><span class="line">done</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">输出</span></span><br><span class="line">file=total 8</span><br><span class="line">file=drwxr-xr-x   6 yaofushang  staff   192B Jan 25 21:26 .</span><br><span class="line">file=drwxr-x---+ 43 yaofushang  staff   1.3K Jan 25 21:26 ..</span><br><span class="line">file=drwx------   8 yaofushang  staff   256B Jan 10 19:51 .gradle</span><br><span class="line">file=-rw-r--r--   1 yaofushang  staff     0B Jan 25 21:02 1.txt</span><br><span class="line">file=-rw-r--r--   1 yaofushang  staff     0B Jan 25 21:02 2.txt</span><br><span class="line">file=-rw-r--r--   1 yaofushang  staff    78B Jan 25 21:25 test.sh</span><br><span class="line"></span><br><span class="line">IFS=$&#x27;\n&#x27;</span><br><span class="line">str=&quot;abc\n123\nyyy&quot;</span><br><span class="line">for file in $( echo -e $str ) ; do</span><br><span class="line">  echo file=$&#123;file&#125;</span><br><span class="line">done</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">输出</span></span><br><span class="line">file=abc</span><br><span class="line">file=123</span><br><span class="line">file=yyy</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="variable">$&#123;t:-5&#125;</span> 与 <span class="variable">$&#123;t: -5&#125;</span> 的区别</span></span><br><span class="line">t=&quot;123456789&quot;</span><br><span class="line">echo $&#123;t:-5&#125;        # 123456789 ,若 t 没有赋值，则值赋为 5 </span><br><span class="line">echo $&#123;t: -5&#125;       # 56789 输出最后 5 个字符</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">变量内容替换</span></span><br><span class="line">t=&quot;123456789&quot;</span><br><span class="line">echo $&#123;t//345/***&#125;  # 12***6789</span><br><span class="line">t=&quot;123:abc:456&quot;</span><br><span class="line">echo $&#123;t//[0-9]/**&#125; # ******:abc:******</span><br><span class="line">t=&quot; 1    2    3  &quot;</span><br><span class="line">echo $&#123;t// /&#125;       # 123</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">输出升序序列</span></span><br><span class="line">echo &#123;1..10&#125;        # 输出 1 2 3 ... 10</span><br><span class="line">echo &#123;1..10..3&#125;     # 输出 0 3 6 9 (能被3整除的)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">检查字符串是否以abc开头</span></span><br><span class="line">t=&quot;abc12333&quot;</span><br><span class="line">[[ $t == abc* ]] &amp;&amp; echo &quot;变量t以abc开头&quot;</span><br></pre></td></tr></table></figure><h2 id="shell-中的特殊字符"><a href="#shell-中的特殊字符" class="headerlink" title="shell 中的特殊字符"></a>shell 中的特殊字符</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">&#x27;:&#x27;</span> 空命令，相当于执行NOP,总是返回成功，与bash的内建命令<span class="literal">true</span>相同，:是一个bash的内建命令，退出码(<span class="built_in">exit</span> status)是<span class="literal">true</span>（0）</span></span><br><span class="line">:</span><br><span class="line">echo $?     # 0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">每隔1秒输出一个字符串OK</span></span><br><span class="line">while : ; do echo &quot;OK&quot;; sleep 1; done</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">&#x27;:&#x27;</span> 充当 <span class="keyword">if</span>/then 的占位符</span></span><br><span class="line">if condition</span><br><span class="line">then : 什么都不做，引出分支</span><br><span class="line">else </span><br><span class="line">tack-some-action</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">‘:’在元命令中提供一个占位符</span></span><br><span class="line">: $&#123;username=`whoami`&#125;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="variable">$&#123;username=`whoami`&#125;</span> 如果没有开头的 <span class="string">&quot;:&quot;</span>的话，将会给出一个错误，除非<span class="string">&quot;username&quot;</span>是一个命令或者内建命令</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建空文件</span></span><br><span class="line">: &gt; test.txt # 文件test.txt如果存在现在就被清空了，如果不存在就会被创建</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这个命令与<span class="built_in">cat</span> /dev/null &gt; test.txt效果是一样的，但是实现过程不一样，应为后者需要创建一个进程来实现文件的创建或者清空，但是前者是bash的内建命令。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">以上操作的文件只使用于正规的文件，而不适用于管道，符号连接，和某些特殊文件。</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">&#x27;?&#x27;</span> 操作符</span></span><br><span class="line">测试操作符。在一个特定的表达式中，?用来测试一个条件的结果</span><br><span class="line">在一个双括号结构中，?就是C语言的三元操作符。</span><br><span class="line">在参数替换表达式中，?用来测试一个变量是否被set了</span><br><span class="line">通配符，?在通配中，用来做匹配的单个字符的&quot;通配符&quot;，在正则表达式中也是用来表示一个字符</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">&#x27;()&#x27;</span> 命令组，在括号中的命令列表，将会作为一个子shell来运行。在括号中的变量，由于是在子shell中，所以对于脚本上下的部分是不可用的</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">&#123;xxx,yyy,zzz,...&#125; 大括号扩展</span></span><br><span class="line">cat &#123;file1,file2,file3&#125; &gt; combined_file</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">把file1, file2, file3连接在一起, 并且重定向到combined_file中.</span></span><br><span class="line">cp file22.&#123;txt,backup&#125;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">拷贝<span class="string">&quot;file22.txt&quot;</span>到<span class="string">&quot;file22.backup&quot;</span>中</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">注意:在大括号中, 不允许有空白, 除非这个空白被引用或转义</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">[] 条件测试，条件测试表达式放在[]中，该命令是shell内建命令的一部分</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">[[]] 条件测试，</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">(()) 整数扩展</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">cd</span> - 返回上个目录，可以在两个目录间来回切换</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="字符串引用"><a href="#字符串引用" class="headerlink" title="字符串引用"></a>字符串引用</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash">arr[i]    <span class="comment"># 引用字符串arr的第i个字符</span></span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">&#123;<span class="comment">#arr&#125;    # 获取字符串arr的长度</span></span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">&#123;arr: -1&#125; <span class="comment"># 获取字符串arr的倒数第一个字符.(冒号与-1之间的空格不要丢掉，并且arr与冒号之间无其他字符)</span></span></span><br></pre></td></tr></table></figure><blockquote><p>单引号内全部都是字符串，双引号内可以引用变量。</p></blockquote><p><a href="https://www.cnblogs.com/chengmo/archive/2010/10/02/1841355.html">对字符串变量进行操作</a></p><h1 id="变量内容的删除"><a href="#变量内容的删除" class="headerlink" title="变量内容的删除"></a>变量内容的删除</h1><p><code>#</code>：从最前面往后删除（删除内容一定是内容的前缀） <code>%</code>：从最后面往前删除(删除内容的后缀一定是内容的后缀)  <code>%</code>，<code>%%</code>与<code>#</code>，<code>##</code>类似<br><code>#</code> :符合取代文字的『最短的』那一个;<br><code>##</code>:符合取代文字的『最长的』那一个</p><p>用法：<br><code>$&#123;variable#delete_part&#125;</code>：variable是变量，从头部删除delete_part部分<br>【注意<code>*</code>号可以代表0到无穷多个任意字符】<br><code>$&#123;variable%delete_part&#125;</code>：从尾部删除delete_part部分<br><img src="/JeckFS/2020/04/09/linux%E6%93%8D%E4%BD%9C%E5%AD%97%E7%AC%A6%E4%B8%B2/string-1.png" class="" title="This is an Image."></p><h1 id="变量内容的取代"><a href="#变量内容的取代" class="headerlink" title="变量内容的取代"></a>变量内容的取代</h1><p><code>$&#123;variable/old/new&#125;</code>：将变量variable中的从左至右第一个old子串替换为new子串<br><code>$&#123;variable//old/new&#125;</code>：将变量variable中的<strong>所有</strong>old子串替换为new子串<br><img src="/JeckFS/2020/04/09/linux%E6%93%8D%E4%BD%9C%E5%AD%97%E7%AC%A6%E4%B8%B2/string-2.png" class="" title="This is an Image."></p><h1 id="变量的测试与内容替换"><a href="#变量的测试与内容替换" class="headerlink" title="变量的测试与内容替换"></a>变量的测试与内容替换</h1><div class="table-container"><table><thead><tr><th style="text-align:center">符号</th><th style="text-align:left">含义</th></tr></thead><tbody><tr><td style="text-align:center">:</td><td style="text-align:left">主要用在旧变量为空字符串的时候，新变量或旧变量直接使用expr的值</td></tr><tr><td style="text-align:center">-</td><td style="text-align:left">用于在旧变量没有定义的情况下，新变量使用expr值</td></tr><tr><td style="text-align:center">+</td><td style="text-align:left">将空字符串视为旧变量未定义</td></tr><tr><td style="text-align:center">?</td><td style="text-align:left">输出至stderr</td></tr><tr><td style="text-align:center">=</td><td style="text-align:left">为旧变量赋值为expr</td></tr><tr><td style="text-align:center">备注</td><td style="text-align:left">当旧变量有值时，新变量将使用旧变量的值</td></tr></tbody></table></div><img src="/JeckFS/2020/04/09/linux%E6%93%8D%E4%BD%9C%E5%AD%97%E7%AC%A6%E4%B8%B2/string-3.png" class="" title="This is an Image."><h1 id="管线命令"><a href="#管线命令" class="headerlink" title="管线命令"></a>管线命令</h1><ol><li>管线作用<br>将前一个命令传来的standard output信息作为输入传递给下一个命令（这个指令必须要能够接受 standard input 的数据，称为管线命令）进行进一步处理。</li><li>管线命令使用standard error信息<br>对于standard error信息可以重导向到standard output即可。</li><li>撷取命令: <strong>cut, grep</strong><br>就是将一段数据经过分析后,取出我们所想要的。或者是经由分析关键词,取得我们所想要的那一行!  撷取讯息通常是针对『一行一行』来分析的。<br><strong>cut：主要用于在同一行里面的数据进行分解（以行为单位切分）</strong>。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cut</span> -d <span class="string">&#x27;分隔字符&#x27;</span> -f fields  <span class="comment">## 用于将原字符串以分隔字符切分，取出第几段；-d指明分隔字符，-f指定取出第几段(序号从1开始，可以取出多段，中间用逗号分隔)。</span></span><br><span class="line"><span class="built_in">cut</span> -c 字符区间  <span class="comment">## 以字符 (characters) 的单位取出固定字符区间; 适用于格式固定的内容。</span></span><br><span class="line"><span class="built_in">cut</span> -c 3-取出从第三个字符开始到最后一个字符的字符串</span><br></pre></td></tr></table></figure><img src="/JeckFS/2020/04/09/linux%E6%93%8D%E4%BD%9C%E5%AD%97%E7%AC%A6%E4%B8%B2/string-4.png" class="" title="This is an Image.">cut的缺点：处理多空格数据吃力。可用awk命令代替。</li></ol><p><strong>grep：以行为单位，取出该行中所需要的信息。</strong><br><code>grep [-acinv] [--color=auto] &#39;搜寻字符串&#39; filename</code><br>选项与参数:<br><code>-a</code> :将 binary 文件以 text 文件的方式搜寻数据<br><code>-c</code> :计算找到 ‘搜寻字符串’ 的次数<br><code>-i</code> :忽略大小写的不同,所以大小写视为相同<br><code>-n</code> :顺便输出行号<br><code>-v</code> :反向选择,亦即显示出没有 ‘搜寻字符串’ 内容的那一行!<br><code>--color=auto</code> :可以将找到的关键词部分加上颜色的显示喔!</p><ol><li>排序命令：<strong>sort，wc，uniq</strong><br>sort：<br><code>sort [-fbMnrtuk] [file or stdin]</code><br>选项与参数:<br><code>-f</code> :忽略大小写的差异,例如 A 与 a 视为编码相同;<br><code>-b</code> :忽略最前面的空格符部分;<br><code>-M</code> :以月份的名字来排序,例如 JAN, DEC 等等的排序方法;<br><code>-n</code> :使用『纯数字』进行排序(默认是以文字型态来排序的);<br><code>-r</code> :反向排序;<br><code>-u</code> :就是 uniq ,相同的数据中,仅出现一行代表;<br><code>-t</code> :分隔符,预设是用 [tab] 键来分隔;<br><code>-k</code> :以那个区间 (field) 来进行排序的意思<img src="/JeckFS/2020/04/09/linux%E6%93%8D%E4%BD%9C%E5%AD%97%E7%AC%A6%E4%B8%B2/string-5.png" class="" title="This is an Image."></li></ol><p><strong>uniq</strong>：将重复的行仅列出一个（在与sort结合时，不管他按哪一段排序，uniq始终时按整行是否相同来排序的）<br><code>-i</code> :忽略大小写字符的不同;<br><code>-c</code> :进行计数<br><strong>wc</strong>：列出数据中有多少字，多少行，多少字符<br><code>-l</code> :仅列出行;<br><code>-w</code> :仅列出多少字(英文单字);<br><code>-m</code> :多少字符</p><h1 id="字符转换命令"><a href="#字符转换命令" class="headerlink" title="字符转换命令"></a>字符转换命令</h1><h2 id="1-tr：删除数据中的字符串。可接正则表达式"><a href="#1-tr：删除数据中的字符串。可接正则表达式" class="headerlink" title="1. tr：删除数据中的字符串。可接正则表达式"></a>1. tr：删除数据中的字符串。可接正则表达式</h2><p><code>tr [-ds] SET1 ...</code><br>选项与参数:<br><code>-d</code> :删除讯息当中的 SET1 这个字符;<br><code>-s</code> :删除连续出现的SET1字符，只保留一个<br><img src="/JeckFS/2020/04/09/linux%E6%93%8D%E4%BD%9C%E5%AD%97%E7%AC%A6%E4%B8%B2/string-6.png" class="" title="This is an Image."><br>SET可以是：<br><img src="/JeckFS/2020/04/09/linux%E6%93%8D%E4%BD%9C%E5%AD%97%E7%AC%A6%E4%B8%B2/string-7.png" class="" title="This is an Image."><br><img src="/JeckFS/2020/04/09/linux%E6%93%8D%E4%BD%9C%E5%AD%97%E7%AC%A6%E4%B8%B2/string-8.png" class="" title="This is an Image."></p><h2 id="2-Col-将tab键转化为对等的空格键"><a href="#2-Col-将tab键转化为对等的空格键" class="headerlink" title="2. Col:将tab键转化为对等的空格键"></a>2. Col:将tab键转化为对等的空格键</h2><p>选项与参数:<br><code>-x</code>: 将 tab 键转换成对等的空格键</p><h2 id="3-join：两个文件中，有相同数据段的那个一行，才将他们链接在一起。"><a href="#3-join：两个文件中，有相同数据段的那个一行，才将他们链接在一起。" class="headerlink" title="3. join：两个文件中，有相同数据段的那个一行，才将他们链接在一起。"></a>3. join：两个文件中，有相同数据段的那个一行，才将他们链接在一起。</h2><p><code>join [-ti12] file1 file2</code><br>选项与参数:<br><code>-t</code>: join 默认以空格符分隔数据,并且比对『第一个字段』的数据,  如果两个文件相同,则将两笔数据联成一行,且第一个字段放在第一个!<br><code>-i</code> :忽略大小写的差异;<br><code>-1</code> :这个是数字的 1 ,代表『第一个文件要用那个字段来分析』的意思;<br><code>-2</code> :代表『第二个文件要用那个字段来分析』的意思。<br><img src="/JeckFS/2020/04/09/linux%E6%93%8D%E4%BD%9C%E5%AD%97%E7%AC%A6%E4%B8%B2/string-9.png" class="" title="This is an Image."></p><p>在使用 join 之前,你所需要处理的文件应该要事先经过排序 (sort) 处理!  否则有些比对的项目会被略过。<br>数据未排序：</p><ul><li>有些行会被忽略。</li><li>产生数据未排序的错误。<img src="/JeckFS/2020/04/09/linux%E6%93%8D%E4%BD%9C%E5%AD%97%E7%AC%A6%E4%B8%B2/string-10.png" class="" title="This is an Image."></li></ul><p>sort与join的结合使用：<br><img src="/JeckFS/2020/04/09/linux%E6%93%8D%E4%BD%9C%E5%AD%97%E7%AC%A6%E4%B8%B2/string-11.png" class="" title="This is an Image."></p><h2 id="4-paste：直接『将两行贴在一起-且中间以-tab-键隔开』"><a href="#4-paste：直接『将两行贴在一起-且中间以-tab-键隔开』" class="headerlink" title="4. paste：直接『将两行贴在一起,且中间以 [tab] 键隔开』"></a>4. paste：直接『将两行贴在一起,且中间以 [tab] 键隔开』</h2><p><code>paste [-d] file1 file2</code><br>选项与参数:<br><code>-d</code> :后面可以接分隔字符。预设是以 [tab] 来分隔的!<br><code>-</code> :如果 file 部分写成 - ,表示来自 standard input 的资料的意思。<br><img src="/JeckFS/2020/04/09/linux%E6%93%8D%E4%BD%9C%E5%AD%97%E7%AC%A6%E4%B8%B2/string-12.png" class="" title="This is an Image."></p><h2 id="5-expand：将tab转化为空格"><a href="#5-expand：将tab转化为空格" class="headerlink" title="5. expand：将tab转化为空格"></a>5. expand：将tab转化为空格</h2><p><code>expand [-t] file</code><br>选项与参数:<br><code>-t</code> :  后面可以接数字，表示将tab转化为多少个空格。一般来说,一个 tab 按键可以用 8 个空格键取代。</p><h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><ol><li>注意事项<br> a) 以行为单位处理字符串<br> b) 使用正则，需要使用支持正则的工具程序，如vi，sed，awk，grep等</li><li>基础正则表示法：<br> a) 不同语系会有不同的正则结果<br> b) 特殊正则符号<br><code>[:alnum:]</code> 代表英文大小写字符及数字,亦即 0-9, A-Z, a-z<br><code>[:alpha:]</code> 代表任何英文大小写字符,亦即 A-Z, a-z<br><code>[:blank:]</code> 代表空格键与 [Tab] 按键两者<br><code>[:cntrl:]</code> 代表键盘上面的控制按键,亦即包括 CR, LF, Tab, Del.. 等等<br><code>[:digit:]</code> 代表数字而已,亦即 0-9<br><code>[:graph:]</code> 除了空格符 (空格键与 [Tab] 按键) 外的其他所有按键<br><code>[:lower:]</code> 代表小写字符,亦即 a-z<br><code>[:print:]</code> 代表任何可以被打印出来的字符<br><code>[:punct:]</code> 代表标点符号 (punctuation symbol),亦即:<code>&quot; &#39; ? ! ; : # $...</code><br><code>[:upper:]</code> 代表大写字符,亦即 A-Z<br><code>[:space:]</code> 任何会产生空白的字符,包括空格键, [Tab], CR 等等<br><code>[:xdigit:]</code> 代表 16 进位的数字类型,因此包括: 0-9, A-F, a-f 的数字与字符<br> c) grep进阶<br><code>grep [-A] [-B] [--color=auto] &#39;搜寻字符串&#39; filename</code><br>选项与参数:<br><code>-A</code> :后面可加数字,为 after 的意思,除了列出该行外,后续的 n 行也列出来;<br><code>-B</code> :后面可加数字,为 befer 的意思,除了列出该行外,前面的 n 行也列出来;<br><code>--color=auto</code> 可将正确的那个撷取数据列出颜色<img src="/JeckFS/2020/04/09/linux%E6%93%8D%E4%BD%9C%E5%AD%97%E7%AC%A6%E4%B8%B2/string-13.png" class="" title="This is an Image."></li></ol><p><code>^$</code>表示空行：<br><img src="/JeckFS/2020/04/09/linux%E6%93%8D%E4%BD%9C%E5%AD%97%E7%AC%A6%E4%B8%B2/string-14.png" class="" title="This is an Image."><br><strong>使用{}时要转义</strong><br><img src="/JeckFS/2020/04/09/linux%E6%93%8D%E4%BD%9C%E5%AD%97%E7%AC%A6%E4%B8%B2/string-15.png" class="" title="This is an Image."></p><h1 id="延伸正则表示法：egrep"><a href="#延伸正则表示法：egrep" class="headerlink" title="延伸正则表示法：egrep"></a>延伸正则表示法：egrep</h1><div class="table-container"><table><thead><tr><th style="text-align:center">符号</th><th style="text-align:left">含义</th></tr></thead><tbody><tr><td style="text-align:center">+</td><td style="text-align:left">重复『一个或一个以上』的前一个 RE 字符</td></tr><tr><td style="text-align:center">?</td><td style="text-align:left">『零个或一个』的前一个 RE 字符</td></tr><tr><td style="text-align:center">\</td><td style="text-align:left"></td><td>用或( or )的方式找出数个字符串</td></tr><tr><td style="text-align:center">()</td><td style="text-align:left">找出『群组』字符串</td></tr><tr><td style="text-align:center">()+</td><td style="text-align:left">多个重复群组的判别</td></tr></tbody></table></div><p>【注意】()的使用需要加入转义字符如<code>\(\)</code></p><h1 id="条件判断式"><a href="#条件判断式" class="headerlink" title="条件判断式"></a>条件判断式</h1><h2 id="1-test"><a href="#1-test" class="headerlink" title="1. test"></a>1. test</h2><img src="/JeckFS/2020/04/09/linux%E6%93%8D%E4%BD%9C%E5%AD%97%E7%AC%A6%E4%B8%B2/string-16.png" class="" title="This is an Image."><img src="/JeckFS/2020/04/09/linux%E6%93%8D%E4%BD%9C%E5%AD%97%E7%AC%A6%E4%B8%B2/string-17.png" class="" title="This is an Image."><img src="/JeckFS/2020/04/09/linux%E6%93%8D%E4%BD%9C%E5%AD%97%E7%AC%A6%E4%B8%B2/string-18.png" class="" title="This is an Image."><img src="/JeckFS/2020/04/09/linux%E6%93%8D%E4%BD%9C%E5%AD%97%E7%AC%A6%E4%B8%B2/string-19.png" class="" title="This is an Image."><img src="/JeckFS/2020/04/09/linux%E6%93%8D%E4%BD%9C%E5%AD%97%E7%AC%A6%E4%B8%B2/string-20.png" class="" title="This is an Image."><h2 id="2-利用判断符号"><a href="#2-利用判断符号" class="headerlink" title="2. 利用判断符号[]"></a>2. 利用判断符号[]</h2><ul><li>注意空格： <img src="/JeckFS/2020/04/09/linux%E6%93%8D%E4%BD%9C%E5%AD%97%E7%AC%A6%E4%B8%B2/string-21.png" class="" title="This is an Image."></li></ul><ul><li>在中括号 [] 内的每个组件都需要有空格键来分隔;<pre><code>  在中括号内的变量,最好都以双引号括号起来;  在中括号内的常量,最好都以单或双引号括号起来。</code></pre></li><li>[]内不能用||，&amp;&amp;，只能用-o，-a来代替</li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux常用命令</title>
      <link href="/JeckFS/2020/04/09/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/JeckFS/2020/04/09/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="【补充】"><a href="#【补充】" class="headerlink" title="【补充】"></a>【补充】</h1><p>date 命令<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">格式化输出日期</span></span><br><span class="line">echo &quot;$(date &#x27;+%Y-%m-%d %H:%M:%S.%s&#x27;)&quot;</span><br></pre></td></tr></table></figure></p><h1 id="1-交互命令"><a href="#1-交互命令" class="headerlink" title="1. 交互命令"></a>1. 交互命令</h1><h2 id="read"><a href="#read" class="headerlink" title="read"></a>read</h2><p><code>read</code>：读入来自键盘输入的变量。<br><code>-p</code> :后面可以接提示字符! 比如输入提示。<br><code>-t</code> :后面可以接等待的『秒数!』这个比较有趣~不会一直等待使用者啦!<br><img src="/JeckFS/2020/04/09/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/linux-1.png" class="" title="This is an image."><br>从文件中读取：<br><img src="/JeckFS/2020/04/09/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/linux-2.png" class="" title="This is an image."></p><h2 id="echo"><a href="#echo" class="headerlink" title="echo"></a>echo</h2><h1 id="2-shell语法"><a href="#2-shell语法" class="headerlink" title="2. shell语法"></a>2. shell语法</h1><h2 id="2-1-declare"><a href="#2-1-declare" class="headerlink" title="2.1 declare"></a>2.1 declare</h2><p>declare: 声明(某种类型的)变量。若后无参数，则将所有变量都输出，类似set<br><code>-a</code> :将后面名为 variable 的变量定义成为数组 (array) 类型<br><code>-i</code> :将后面名为 variable 的变量定义成为整数数字 (integer) 类型<br><code>-x</code> :用法与 export 一样,就是将后面的 variable 变成环境变量;<br><code>-r</code> :将变量设定成为 readonly 类型,该变量不可被更改内容,也不能 unset<br><code>declare +[ixr] variable</code>: 取消variable的类型<br><code>declare -i sum=100+200</code> 将sum声明为整形并赋值为300</p><h2 id="2-2-数组的使用"><a href="#2-2-数组的使用" class="headerlink" title="2.2 数组的使用"></a>2.2 数组的使用</h2><img src="/JeckFS/2020/04/09/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/linux-3.png" class="" title="This is an image."><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">逐个元素赋值</span></span><br><span class="line">a[1]=1</span><br><span class="line">a[2]=2</span><br><span class="line">a[3]=3</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在一起赋值，注意元素之间以空格作为分割</span></span><br><span class="line">a=(1 2 3)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取数组的元素</span></span><br><span class="line">echo $&#123;a[*]&#125;</span><br><span class="line">echo $&#123;a[@]&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取数组的长度</span></span><br><span class="line">echo $&#123;#a[*]&#125;</span><br><span class="line">echo $&#123;#a[@]&#125;</span><br></pre></td></tr></table></figure><h2 id="2-3-变量内容的更改"><a href="#2-3-变量内容的更改" class="headerlink" title="2.3 变量内容的更改"></a>2.3 变量内容的更改</h2><p><a href="">见字符串修改章节</a><br>key word: 变量内容的删除</p><h2 id="2-4-命令别名设定"><a href="#2-4-命令别名设定" class="headerlink" title="2.4 命令别名设定"></a>2.4 命令别名设定</h2><h2 id="alias，-unalias"><a href="#alias，-unalias" class="headerlink" title="alias， unalias"></a>alias， unalias</h2><img src="/JeckFS/2020/04/09/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/linux-4.png" class="" title="This is an image."><h2 id="2-5-执行连续命令：-‘-’"><a href="#2-5-执行连续命令：-‘-’" class="headerlink" title="2.5 执行连续命令： ‘;’"></a>2.5 执行连续命令： ‘;’</h2><p>前后指令相互独立。</p><h2 id="2-6-前后指令不独立"><a href="#2-6-前后指令不独立" class="headerlink" title="2.6 前后指令不独立"></a>2.6 前后指令不独立</h2><img src="/JeckFS/2020/04/09/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/linux-5.png" class="" title="This is an image."><p>若t.sh中使用exit 0，那么<code>bash t.sh &amp;&amp; echo hello</code>会输出hello，否则不会。<br>Linux中的指令都是由左至右执行，当出现||与&amp;&amp;综合使用的时候，仍然遵循这条规则。<br>① || ② &amp;&amp; ③<br>若① <code>$?=0</code>，则不执行②，①||②返回<code>$?=0</code>，出现<code>$?=0</code> &amp;&amp; ③，故会执行③。<br>先执行①，然后执行① || ②(假设结果为t)，然后执行t &amp;&amp; ③<br>有短路现象<br><img src="/JeckFS/2020/04/09/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/linux-6.png" class="" title="This is an image."><br>【<code>$?</code>表示上一个指令的返回值，0表示没有错误，非0表示有错误】</p><h2 id="2-7-参数带环：-xargs"><a href="#2-7-参数带环：-xargs" class="headerlink" title="2.7 参数带环： xargs"></a>2.7 参数带环： xargs</h2><p>xargs 可以读入 stdin 的数据,并且以空格符或断行字符作为分辨,将 stdin 的资料分隔成为 arguments 。<br><code>xargs [-0epn] command</code><br>选项与参数:<br><code>-0</code> : 如果输入的 stdin 含有特殊字符,例如 `, \, 空格键等等字符时,这个 -0 参数可以将他还原成一般字符。这个参数可以用于特殊状态喔!<br><code>-e</code>: 这个是 EOF (end of file) 的意思。后面可以接一个字符串,当 xargs 分析到这个字符串时,<br>就会停止继续工作!<br><code>-p</code> :在执行每个指令的 argument 时,都会询问使用者的意思;<br><code>-n</code> :后面接次数,每次 command 指令执行时,要使用几个参数的意思。<br>当 xargs 后面没有接任何的指令时,默认是以 echo 来进行输出喔!<br><img src="/JeckFS/2020/04/09/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/linux-9.png" class="" title="This is an image."></p><h2 id="2-8-数值计算"><a href="#2-8-数值计算" class="headerlink" title="2.8 数值计算"></a>2.8 数值计算</h2><ul><li>使用$((计算式))进行数值运算。注意是(())</li><li>仅支持整数间的数值运算</li><li>运算符：+，-，*，/，%</li><li>shell中的小数运算：利用bc指令<img src="/JeckFS/2020/04/09/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/linux-10.png" class="" title="This is an image."></li></ul><p>第8行的解释：<br>    4*a(1) 是 bc 主动提供的一个计算 pi 的函数,至于 scale 就是要 bc 计算几个小数点下位数的意思。当 scale 的数值越大, 代表 pi 要被计算的越精确。<br><img src="/JeckFS/2020/04/09/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/linux-11.png" class="" title="This is an image."></p><h2 id="2-9-流程控制"><a href="#2-9-流程控制" class="headerlink" title="2.9 流程控制"></a>2.9 流程控制</h2><p><strong>当判断条件是命令时不能加[]</strong></p><ol><li>if…then：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [ 条件判断式 ]；<span class="keyword">then</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>条件判断式可使用&amp;&amp;，||，也可使用-o，-a</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [ 条件判断式 ]；<span class="keyword">then</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [ 条件判断式 ]；<span class="keyword">then</span></span><br><span class="line"><span class="keyword">elif</span> [ 条件判断式 ]；<span class="keyword">then</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><ol><li>case…esac<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> $变量名称 <span class="keyword">in</span></span><br><span class="line"><span class="string">&quot;第一个变量内容&quot;</span>)</span><br><span class="line">程序段</span><br><span class="line">;;</span><br><span class="line"><span class="string">&quot;第二个变量内容&quot;</span>)</span><br><span class="line">程序段</span><br><span class="line">;;</span><br><span class="line">*)</span><br><span class="line">不包含第一个变量内容与第二个变量内容的其他程序执行段</span><br><span class="line">;;</span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure></li><li>function</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">fname</span></span>() &#123;</span><br><span class="line">程序段</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>函数的定义要在调用的前面定义</li><li>函数参数的引用：$1, $2…（括号内无参数，直接在函数体内用$1引用第一个参数）</li><li>函数的调用：函数名 参数1，参数2，，…</li></ul><ol><li>循环语句</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> [ condition ]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">程序段落</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">until [ condition ]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">程序段落</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line">当 condition 条件成立时,就终止循环, 否则就持续进行循环的程序段。</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> var <span class="keyword">in</span> con1 con2 con3 ...</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">程序段</span><br><span class="line">使用<span class="variable">$var</span>引用元素</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line">$(<span class="built_in">seq</span> n1 n2)：产生从n1到n2（包括n1,n2）序列</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (( i=1; i&lt;=<span class="variable">$&#123;nu&#125;</span>; i=i+1 ))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">程序段</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h2 id="2-10-脚本获取命令行参数"><a href="#2-10-脚本获取命令行参数" class="headerlink" title="2.10 脚本获取命令行参数"></a>2.10 脚本获取命令行参数</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash">0  : 程序的名字</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash"><span class="comment">#  : 变量的个数</span></span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">@  : 所有的变量，即 <span class="variable">$1</span> ... $最后一个参数</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">?  : 前一个命令或者是函数的返回状态码，0代表执行成功，非0即失败</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">*  : 以”参数1参数2....“的形式将所有函数通过一个字符串返回</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">_  : 保存之前执行的命令的最后的一个参数</span></span><br><span class="line">shift n : 将命令右移 n 个参数</span><br><span class="line"></span><br><span class="line">function func()&#123;</span><br><span class="line">while [ $# != 0] ; do</span><br><span class="line">  echo &quot;第一个参数是：$1，一共有$#个参数&quot;</span><br><span class="line">  shift 1</span><br><span class="line">done</span><br><span class="line">&#125;</span><br><span class="line">func 1 2 3 4 5 6</span><br></pre></td></tr></table></figure><h1 id="3-数据流重定向命令"><a href="#3-数据流重定向命令" class="headerlink" title="3. 数据流重定向命令"></a>3. 数据流重定向命令</h1><ol><li>标准输入 (stdin) :代码为 0 ,使用 &lt; 或 &lt;&lt; ;</li><li>标准输出 (stdout):代码为 1 ,使用 &gt; 或 &gt;&gt; ;</li><li>标准错误输出(stderr):代码为 2 ,使用 2&gt; 或 2&gt;&gt; ;<br>1&gt; :以覆盖的方法将『正确的数据』输出到指定的文件或装置上;<br>1&gt;&gt;:以累加的方法将『正确的数据』输出到指定的文件或装置上;<br>2&gt; :以覆盖的方法将『错误的数据』输出到指定的文件或装置上;<br>2&gt;&gt;:以累加的方法将『错误的数据』输出到指定的文件或装置上;<br>若输出的内容有正确的数据也有错误的数据可以使用两个输出方式，将正确的输入到一个文件中，错误的输出到另一个文件中。<br><code>cat /etc/crontab /etc/tee &gt; right 2&gt; wrong</code><br>/dev/null垃圾桶黑洞装置：吃掉任何导向这个装置的信息，可以用来过滤信息<br><code>cat /etc/crontab /etc/te 2&gt; /dev/null</code><br>将不同数据流输出到同一文件：<br> <code>cat /etc/crontab /etc/tt 2&gt; wrong &gt;&amp;2</code><br><code>cat /etc/crontab /etc/tt &gt; right 2&gt;&amp;1</code><br>2&gt;&amp;1：将2&gt;转化为1输出<br>1&gt;&amp;2：将1转化为2输出<br>重定向输入stdin : &lt;, &lt;&lt;<br> <code>cat &gt; newfile &lt; test</code>（将test内容作为输入，输入到文件newfile中）<br><code>cat &gt; catfile &lt;&lt; &quot;eof&quot;</code> （通过键盘输入内容到文件catfile中，若遇到eof则停止键盘输入）<br>&lt;&lt;控制输入的字符</li></ol><h2 id="tee-双向重导向"><a href="#tee-双向重导向" class="headerlink" title="tee 双向重导向"></a>tee 双向重导向</h2><p>将数据流输送到屏幕一份，输出到文件一份<br><img src="/JeckFS/2020/04/09/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/linux-7.png" class="" title="This is an image."><br><code>tee [-a] file</code><br>选项与参数:<br><code>-a</code> :以累加 (append) 的方式,将数据加入 file 当中! 默认会覆盖原文件</p><h1 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h1><h2 id="1-history"><a href="#1-history" class="headerlink" title="1. history"></a>1. history</h2><p>显示输入的历史命令。</p><h2 id="2-分区命令-split：将文件分割为小文件。"><a href="#2-分区命令-split：将文件分割为小文件。" class="headerlink" title="2. 分区命令: split：将文件分割为小文件。"></a>2. 分区命令: split：将文件分割为小文件。</h2><p><code>split [-bl] file PREFIX</code><br>选项与参数:<br><code>-b</code> :后面可接欲分区成的文件大小,可加单位,例如 b, k, m 等;<br><code>-l</code> :以行数来进行分区。<br><code>PREFIX</code> :代表前导符的意思,可作为分区文件的前导文字。</p><img src="/JeckFS/2020/04/09/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/linux-8.png" class="" title="This is an image."><h2 id="3-shift造成的参数变量号码偏移"><a href="#3-shift造成的参数变量号码偏移" class="headerlink" title="3. shift造成的参数变量号码偏移"></a>3. shift造成的参数变量号码偏移</h2><p>shift 后面可以接数字,代表拿掉最前面的几个参数的意思。<br>shift本身就是一个语句。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>awk</title>
      <link href="/JeckFS/2020/04/09/awk/"/>
      <url>/JeckFS/2020/04/09/awk/</url>
      
        <content type="html"><![CDATA[<h1 id="【补充】："><a href="#【补充】：" class="headerlink" title="【补充】："></a>【补充】：</h1><p>向 awk 脚本中传递外部 shell 变量：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a=&quot;variable a&quot;</span><br><span class="line">b=&quot;variable b&quot;</span><br><span class="line">awk -v var1=$a -v var2=$b &#x27;&#123;if(var1==&quot;variable a&quot; &amp;&amp; var2==&quot;variable b&quot;) print &quot;OK&quot;&#125;&#x27;</span><br></pre></td></tr></table></figure><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p><code>Awk &#39;条件类型1&#123;动作1&#125; 条件类型2&#123;动作2&#125; ...&#39; filename</code></p><img src="/JeckFS/2020/04/09/awk/awk-1.png" class="" title="This is an image."><p>利用-F指定分隔符:<br><img src="/JeckFS/2020/04/09/awk/awk-2.png" class="" title="This is an image."><br><img src="/JeckFS/2020/04/09/awk/awk-3.png" class="" title="This is an image."></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//中是模式</span><br><span class="line">输出包含orange的行：</span><br><span class="line">awk ‘/orange/’ cat.txt</span><br></pre></td></tr></table></figure><img src="/JeckFS/2020/04/09/awk/awk-4.png" class="" title="This is an image."><p>输出第一列中包含app的行的第一列：!表示模式取反:<br><img src="/JeckFS/2020/04/09/awk/awk-5.png" class="" title="This is an image."><br>关于BEGIN与END关键字：<br><img src="/JeckFS/2020/04/09/awk/awk-6.png" class="" title="This is an image."></p><p>cal.awk文件：<br><img src="/JeckFS/2020/04/09/awk/awk-7.png" class="" title="This is an image."></p><p>执行结果：<br><img src="/JeckFS/2020/04/09/awk/awk-8.png" class="" title="This is an image."></p><p>输出长度大于20的行：<br><img src="/JeckFS/2020/04/09/awk/awk-9.png" class="" title="This is an image."></p><p><a href="https://www.runoob.com/w3cnote/awk-work-principle.html">awk工作原理</a><br><a href="https://www.runoob.com/w3cnote/awk-arrays.html">awk数组1</a><br><a href="https://blog.csdn.net/weixin_44056331/article/details/101048284">awk数组2</a><br><a href="https://www.runoob.com/w3cnote/awk-if-loop.html">awl条件语句与循环</a>：最后一个例子的返回状态为10.<br><img src="/JeckFS/2020/04/09/awk/awk-10.png" class="" title="This is an image."><br><a href="https://www.runoob.com/w3cnote/awk-user-defined-functions.html">awk用户自定义函数</a><br><a href="https://www.runoob.com/w3cnote/awk-built-in-functions.html">awk内置函数</a><br><a href="https://www.runoob.com/w3cnote/8-awesome-awk-built-in-variables.html">8个有力的awk内建变量</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sed</title>
      <link href="/JeckFS/2020/04/09/sed/"/>
      <url>/JeckFS/2020/04/09/sed/</url>
      
        <content type="html"><![CDATA[<h1 id="0-补充"><a href="#0-补充" class="headerlink" title="0. 补充"></a>0. 补充</h1><p><strong>常用正则</strong><a href="https://www.cnblogs.com/liaojie970/p/6782707.html">参考来源</a></p><div class="table-container"><table><thead><tr><th>元字符</th><th>功能</th><th>示例</th></tr></thead><tbody><tr><td><code>^</code></td><td>行首定位符</td><td><code>/^my/</code>匹配所有以 my 开头的行</td></tr><tr><td><code>$</code></td><td>行尾定位符</td><td><code>/my$/</code>匹配所有以my结尾的行</td></tr><tr><td><code>.</code></td><td>匹配除换行符以外的单个字符</td><td><code>/m..y/</code>  匹配包含字母m，后跟两个任意字符，再跟字母y的行</td></tr><tr><td><code>*</code></td><td>匹配零个或多个前导字符</td><td><code>/my*/</code>  匹配包含字母m,后跟零个或多个y字母的行</td></tr><tr><td><code>[]</code></td><td>匹配不在指定字符组内的任一字符</td><td><code>/[Mm]y/</code>  匹配包含My或my的行</td></tr><tr><td><code>[^]</code></td><td>匹配不在指定字符组内的任一字符</td><td><code>/[^Mm]y/</code>  匹配包含y，但y之前的那个字符不是M或m的行</td></tr><tr><td><code>..</code></td><td>保存已匹配的字符</td><td><code>1,20s/youself/\1r/</code>  标记元字符之间的模式，并将其保存为标签1，之后可以使用\1来引用它。最多可以定义9个标签，从左边开始编号，最左边的是第一个。此例中，对第1到第20行进行处理，you被保存为标签1，如果发现youself，则替换为your。</td></tr><tr><td><code>&amp;</code></td><td>保存查找串以便在替换串中引用</td><td><code>s/my/**&amp;**/</code>  符号&amp;代表查找串。my将被替换为<code>**my**</code></td></tr><tr><td><code>\&lt;</code></td><td>词首定位符</td><td><code>/\&lt;my/</code>  匹配包含以my开头的单词的行</td></tr><tr><td><code>\&gt;</code></td><td>词尾定位符</td><td><code>/my\&gt;/</code>  匹配包含以my结尾的单词的行</td></tr><tr><td><code>x\&#123;m\&#125;</code></td><td>连续m个x</td><td><code>/9\&#123;5\&#125;/</code> 匹配包含连续5个9的行</td></tr><tr><td><code>x\&#123;m,\&#125;</code></td><td>至少m个x</td><td><code>/9\&#123;5,\&#125;/</code>  匹配包含至少连续5个9的行</td></tr><tr><td><code>x\&#123;m,n\&#125;</code></td><td>至少m个，但不超过n个x</td><td><code>/9\&#123;5,7\&#125;/</code>  匹配包含连续5到7个9的行</td></tr></tbody></table></div><p><strong>字符匹配</strong><a href="https://qianngchn.github.io/wiki/4.html">参考来源</a></p><div class="table-container"><table><thead><tr><th>元字符</th><th>Description</th></tr></thead><tbody><tr><td><code>\w</code></td><td>匹配字母或数字或下划线</td></tr><tr><td><code>\W</code></td><td>与<code>\w</code>相反，匹配除了字母、数字、下划线之外的字符</td></tr><tr><td><code>\s</code></td><td>任意的空白符(包括空格制表符换页符)</td></tr><tr><td><code>\b</code></td><td>匹配一个单词的边界符：字符的左边是一个单词字符，并且右边是一个非单词字符，反之亦然。</td></tr><tr><td><code>\B</code></td><td>匹配除单词边界符外所有字符：字符的左边和右边同时是单词字符或非单词字符。</td></tr><tr><td><code>\n</code></td><td>匹配一个换行字符。</td></tr><tr><td><code>\r</code></td><td>匹配一个回车字符。</td></tr><tr><td><code>\t</code></td><td>匹配一个水平Tab字符。</td></tr><tr><td><code>\v</code></td><td>匹配一个垂直Tab字符。</td></tr><tr><td><code>\cX</code></td><td>匹配Control+X，X是任意字符。</td></tr><tr><td><code>\dXXX</code></td><td>匹配一个ASCII码是十进制XXX的字符。</td></tr><tr><td><code>\oXXX</code></td><td>匹配一个ASCII码是八进制XXX的字符。</td></tr><tr><td><code>\xXX</code></td><td>匹配一个ASCII码是十六进制XX的字符。</td></tr></tbody></table></div><p><strong>需要转义的特殊字符：</strong></p><div class="table-container"><table><thead><tr><th>基本正则表达式</th><th>扩展正则表达式</th></tr></thead><tbody><tr><td><code>\?</code></td><td><code>?</code></td></tr><tr><td><code>\+</code></td><td><code>+</code></td></tr><tr><td><code>\&#123;  \&#125;</code></td><td><code>&#123;  &#125;</code></td></tr><tr><td><code>\(  \)</code></td><td><code>(  )</code></td></tr><tr><td>\ &#124;</td><td>&#124;</td></tr></tbody></table></div><p><strong>使用 sed 的参数 -r 可以直接使用 <code>扩展正则表达式</code></strong></p><p><strong>零碎补充</strong></p><ul><li>替换匹配行的指定后面三行的数字替换为20214。<strong>通过<code>n;</code>对多行后的行进行替换</strong>。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将liveliness监听的端口更改为 20214</span></span><br><span class="line">sed -i <span class="string">&#x27;/live/&#123;n;n;n;s/[[:digit:]]\&#123;1,\&#125;/20214/&#125;&#x27;</span> jup-app.yaml</span><br></pre></td></tr></table></figure></li></ul><h1 id="1-鸟哥私房菜"><a href="#1-鸟哥私房菜" class="headerlink" title="1. 鸟哥私房菜"></a>1. 鸟哥私房菜</h1><h2 id="1-1-sed常用功能"><a href="#1-1-sed常用功能" class="headerlink" title="1.1 sed常用功能"></a>1.1 sed常用功能</h2><ul><li>对standard input进行增删改，取代；</li><li>显示处理过后的行；</li><li>以行为单位的部分数据的搜寻与取代（可以使用正则）；</li><li>修改文件内容；</li><li>可以只显示想看到的数据；</li><li>sed ‘s/要被取代的字符串/新的字符串/g’</li><li>修改文件内容：sed -i ‘s/要被取代的字符串/新的字符串/g’ filename</li></ul><p><code>sed [-nefr] [动作]</code><br>选项与参数:<br><code>-n</code>: 使用安静(silent)模式。在一般 sed 的用法中,所有来自 STDIN 的数据一般都会被列出到屏幕上。但如果加上 -n 参数后,则只有经过 sed 特殊处理的那一行(或者动作)才会被列出来。<br><code>-e</code>: 直接在指令列模式上进行 sed 的动作编辑;<br><code>-f</code> :直接将 sed 的动作写在一个文件内, -f filename 则可以执行 filename 内的 sed 动作;<br><code>-r</code> :sed 的动作支持的是延伸型正规表示法的语法。(预设是基础正规表示法语法)<br><code>-i</code> :直接修改读取的文件内容,而不是由屏幕输出。<br>动作说明:<br><code>[n1[,n2]]function</code><br><code>n1, n2</code> :不见得会存在,一般代表『选择进行动作的行数』,举例来说,如果我的动作是需要在 10 到 20 行之间进行的,则『 10,20[动作行为] 』<br>function 有底下这些咚咚:<br><code>a</code> :新增, a 的后面可以接字符串,而这些字符串会在新的一行出现(目前的下一行)~<br><code>c</code> :取代, c 的后面可以接字符串,这些字符串可以取代 n1,n2 之间的行!<br><code>d</code> :删除,因为是删除啊,所以 d 后面通常不接任何咚咚;<br><code>i</code> :插入, i 的后面可以接字符串,而这些字符串会在新的一行出现(目前的上一行);<br><code>p</code> :打印,亦即将某个选择的数据印出。通常 p 会与参数 sed -n 一起运作~<br><code>s</code> :取代,可以直接进行取代的工作哩!通常这个 s 的动作可以搭配正规表示法!<br>例如 1,20s/old/new/g 就是啦!</p><img src="/JeckFS/2020/04/09/sed/sed-1.png" class="" title="This is an image."><img src="/JeckFS/2020/04/09/sed/sed-2.png" class="" title="This is an image."><img src="/JeckFS/2020/04/09/sed/sed-3.png" class="" title="This is an image."><p><a href="https://man.linuxde.net/sed">参考教程</a></p><h1 id="2-sed-pdf教程"><a href="#2-sed-pdf教程" class="headerlink" title="2. sed pdf教程"></a>2. sed pdf教程</h1><p><strong>命令格式：</strong><br><code>sed options… [script] [inputfile]</code><br><strong>script格式：</strong><br>    <code>[addr]X[options]</code><br><code>addr</code>: line address.描述行的地址，即对什么样的行操作指令X<br><code>X</code>: command<br><code>options</code>: X的参数<br>如:<br>    sed ‘30,50d’ input.txt # 将input.txt文件的30-50行删除<br>    sed ‘/^foo/d;s/hello/world’ input.txt # 将input.txt文件中以foo开头的行删除，并且将hello替换为world。</p><h2 id="2-1-How-sed-works"><a href="#2-1-How-sed-works" class="headerlink" title="2.1 How sed works"></a>2.1 How sed works</h2><p>sed命令会维持两个缓冲区：pattern space，hold space。sed只会对pattern space做处理，hold space负责缓存处理之前的内容(h,H,x,g,G会move data between both space)。<br>首先，sed读取输入流的一行内容到pattern space。如果addr匹配则执行command。当script执行完毕，pattern space中的内容输出到output steam(不管这一行匹没匹配上都会输出pattern space中的内容，如例1，例2)。<br><strong>【addr与command的说明】</strong><br>    命令格式：<br>    <code>sed options… [script] [inputfile]</code><br>    script格式：<br>        <code>[addr]X[options]</code><br>    <code>addr</code>: line address.描述行的地址，即对什么样的行操作指令X<br>    <code>X</code>: command<br>    <code>options</code>: X的参数</p><h2 id="2-2-The-s-Command"><a href="#2-2-The-s-Command" class="headerlink" title="2.2 The s Command"></a>2.2 The s Command</h2><p>语法：‘s/regexp/replacement/flags’</p><ol><li>sed中的正则表达式<br> sed中的正则表达式匹配方式是这样的：如果这一行中出现了正则表达式的内容，这一行才算匹配成功。<br> 当(){}+*表示特殊字符时需要转义，如果是匹配的字符串中的(){}则不需要转义。注意[]表示特殊含义时不需要转义。<br> 各种特殊字符的使用</li></ol><blockquote><p>一个特例<code>.*(.*)</code></p></blockquote><ol><li>\n的含义<br> \n（n是1-9的任意一个数字）：标识匹配到的第n个模式。何为模式？就是括号中匹配到的内容。<br>如：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> hello | sed ‘s/\([a-z]*\).*/\1/ </span><br><span class="line">结果为：hello，\1表示的就是hello。</span><br><span class="line"><span class="built_in">echo</span> hello123|sed <span class="string">&#x27;s/\([a-z]*\)\([0-9]\&#123;3\&#125;\)/\2\1/&#x27;</span></span><br><span class="line">结果为：123hello，\1匹配到的是hello，\2匹配到的是123</span><br></pre></td></tr></table></figure></li></ol><p>一些有意思的例子：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> absdfa12312asdfa | sed <span class="string">&#x27;s/[a-z]*\([0-9]*\)[a-z]*/\1/&#x27;</span> </span><br><span class="line">12312</span><br></pre></td></tr></table></figure><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> absdfa12312asdfa123asf | sed <span class="string">&#x27;s/[a-z]*\([0-9]*\)[a-z]*/\1/&#x27;</span> </span><br><span class="line">12312123asf</span><br></pre></td></tr></table></figure><br>要想用某一部分替代整行，正则表达式需要严格匹配整行的每一部分。</p><img src="/JeckFS/2020/04/09/sed/sed-4.png" class="" title="This is an image."><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> absdfa12312asdfa123asf | sed <span class="string">&#x27;s/[[:digit:]]\+/M\Uaa\Ezz/&#x27;</span> </span><br><span class="line">absdfaMAAzzasdfa123asf</span><br></pre></td></tr></table></figure><p><strong>常用的flags：</strong><br><strong>g</strong>：全局替换<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> a-b-|sed <span class="string">&#x27;s/[[:alpha:]]/A/&#x27;</span>       </span><br><span class="line">A-b-</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> a-b-|sed <span class="string">&#x27;s/[[:alpha:]]/A/g&#x27;</span> </span><br><span class="line">A-A-</span><br></pre></td></tr></table></figure><br><strong>number:</strong></p><ol><li>替换第number个位置<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> a-b-|sed <span class="string">&#x27;s/[[:alpha:]]/A/2&#x27;</span> </span><br><span class="line">a-A-</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> a-b-|sed <span class="string">&#x27;s/[[:alpha:]]/A/1&#x27;</span> </span><br><span class="line">A-b-</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> a-b-|sed <span class="string">&#x27;s/[[:alpha:]]/A/3&#x27;</span> </span><br><span class="line">a-b-</span><br></pre></td></tr></table></figure></li><li>配合g使用，表示从第number个匹配处开始往后替换全部。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> a-b--c--d-|sed <span class="string">&#x27;s/[[:alpha:]]/A/2g&#x27;</span> </span><br><span class="line">a-A--A--A-</span><br></pre></td></tr></table></figure><strong>P:</strong></li><li>p单用时的作用：打印pattern space中的内容，常与-n连用。注意ep与pe的结果不同。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> -e <span class="string">&quot;abc\n123\ndef&quot;</span> | sed <span class="string">&#x27;1p&#x27;</span> </span><br><span class="line">abc <span class="comment"># script(‘1p’)的处理结果</span></span><br><span class="line">abc <span class="comment"># script执行完毕后输出的pattern space中的内容</span></span><br><span class="line">123 <span class="comment"># script执行完毕后输出的pattern space中的内容</span></span><br><span class="line">def <span class="comment"># script执行完毕后输出的pattern space中的内容</span></span><br></pre></td></tr></table></figure></li><li>使用-n可以压制pattern space中内容的输出：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> -e <span class="string">&quot;abc\n123\ndef&quot;</span> | sed -n <span class="string">&#x27;1p&#x27;</span> </span><br><span class="line">输出：abc</span><br></pre></td></tr></table></figure><ol><li>使用-n后，在整个脚本执行完了后不会输出：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> -e <span class="string">&quot;abcde\n1234\nxyz&quot;</span> | sed -n <span class="string">&#x27;p;/[0-9]\+/p&#x27;</span> </span><br><span class="line">abcde <span class="comment"># p</span></span><br><span class="line">1234  <span class="comment"># p</span></span><br><span class="line">1234  <span class="comment"># [0-9]\+</span></span><br><span class="line">xyz   <span class="comment"># p</span></span><br><span class="line">$ <span class="built_in">echo</span> -e <span class="string">&quot;abcde\n1234\nxyz&quot;</span> | sed <span class="string">&#x27;p;/[0-9]\+/p&#x27;</span> </span><br><span class="line">abcde <span class="comment"># 执行p时的输出</span></span><br><span class="line">abcde <span class="comment"># 整个script执行完了后的输出</span></span><br><span class="line">1234  <span class="comment"># 执行p的输出</span></span><br><span class="line">1234  <span class="comment"># 执行[0-9]\+的输出</span></span><br><span class="line">1234  <span class="comment"># 整个script执行完了后的输出</span></span><br><span class="line">xyz   <span class="comment"># 执行p时的输出</span></span><br><span class="line">xyz   <span class="comment"># 整个script执行完了后的输出</span></span><br><span class="line">与s结合：当发生替换时，打印pattern space中的内容(打印发生替换的行)。</span><br><span class="line">$ <span class="built_in">echo</span> -e <span class="string">&quot;abcde\n1234\nxyz&quot;</span> | sed -n <span class="string">&#x27;s/[0-9]\+/SSSS/p&#x27;</span> </span><br><span class="line">SSSS</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">echo</span> -e <span class="string">&quot;abcde\n1234\nxyz&quot;</span> | sed -n <span class="string">&#x27;s/[0-9]\+/SSSS/&#x27;</span></span><br><span class="line"><span class="comment"># 无输出</span></span><br><span class="line"></span><br><span class="line">$ <span class="built_in">echo</span> -e <span class="string">&quot;abcde\nabc123abc\nxyz&quot;</span> | sed -n <span class="string">&#x27;s/[0-9]\+/SSSS/p&#x27;</span>   </span><br><span class="line">输出：abcSSSSabc</span><br></pre></td></tr></table></figure><p><strong>w filename:</strong></p><ol><li>将替换后的结果写入到filename文件中。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> -e <span class="string">&quot;abcde\nabc123abc\n123&quot;</span> | sed -n <span class="string">&#x27;s/[0-9]\+/SSSS/w /dev/stderr&#x27;</span>   </span><br><span class="line">abcSSSSabc </span><br><span class="line">SSSS </span><br><span class="line">$ <span class="built_in">echo</span> -e <span class="string">&quot;abcde\nabc123abc\n123&quot;</span> | sed -n <span class="string">&#x27;s/[0-9]\+/SSSS/w /dev/stdout&#x27;</span> </span><br><span class="line">abcSSSSabc </span><br><span class="line">SSSS</span><br><span class="line">$ <span class="built_in">echo</span> -e <span class="string">&quot;abcde\nabc123abc\n123&quot;</span> | sed -n <span class="string">&#x27;s/[0-9]\+/SSSS/w /dev/null&#x27;</span></span><br><span class="line"><span class="comment"># 无输出</span></span><br></pre></td></tr></table></figure><p><strong>I/i:</strong></p><ol><li>匹配时不区分大小写<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> -e <span class="string">&quot;abcde\nabc123abc\n123\nABC&quot;</span> | sed -n <span class="string">&#x27;s/[a-z]\+/SSSS/gpi&#x27;</span> </span><br><span class="line">SSSS </span><br><span class="line">SSSS123SSSS </span><br><span class="line">SSSS</span><br></pre></td></tr></table></figure></li></ol><h2 id="2-3-Often-Used-Commands"><a href="#2-3-Often-Used-Commands" class="headerlink" title="2.3 Often-Used Commands"></a>2.3 Often-Used Commands</h2><ol><li><code>q [exit-code]</code>: 退出执行，可指定exit-code<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">seq</span> 10 | sed 3q6 </span><br><span class="line">1 </span><br><span class="line">2 </span><br><span class="line">3 </span><br><span class="line">$ <span class="built_in">echo</span> $?          </span><br><span class="line">6</span><br></pre></td></tr></table></figure></li><li><p><code>d</code>: 删除pattern space，并开始下一个循环。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[yfs@yfs-manjaro sed]$ <span class="built_in">seq</span> 4 | sed <span class="string">&#x27;2d&#x27;</span> </span><br><span class="line">1 </span><br><span class="line">3 </span><br><span class="line">4 </span><br><span class="line">[yfs@yfs-manjaro sed]$ <span class="built_in">seq</span> 4 | sed <span class="string">&#x27;2,3d&#x27;</span> </span><br><span class="line">1 </span><br><span class="line">4</span><br></pre></td></tr></table></figure></li><li><p><code>p</code>: 见上。</p></li><li><p><code>n</code>: replace the pattern space with the next line of input.常用于跳过某行。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 每三行替换一个</span></span><br><span class="line">[yfs@yfs-manjaro sed]$ <span class="built_in">seq</span> 6 | sed <span class="string">&#x27;n;n;s/./x/&#x27;</span> </span><br><span class="line">1 </span><br><span class="line">2 </span><br><span class="line">x </span><br><span class="line">4 </span><br><span class="line">5 </span><br><span class="line">x</span><br><span class="line"></span><br><span class="line">使用扩展的address语法：first~step，first是起始行，step是间隔</span><br><span class="line">[yfs@yfs-manjaro sed]$ <span class="built_in">seq</span> 6 | sed <span class="string">&#x27;0~3s/./x/&#x27;</span> </span><br><span class="line">1 </span><br><span class="line">2 </span><br><span class="line">x </span><br><span class="line">4 </span><br><span class="line">5 </span><br><span class="line">x</span><br><span class="line">[yfs@yfs-manjaro sed]$ <span class="built_in">seq</span> 9 | sed <span class="string">&#x27;3~4s/./x/&#x27;</span> </span><br><span class="line">1 </span><br><span class="line">2 </span><br><span class="line">x </span><br><span class="line">4 </span><br><span class="line">5 </span><br><span class="line">6 </span><br><span class="line">x </span><br><span class="line">8 </span><br><span class="line">9</span><br></pre></td></tr></table></figure></li><li><p><code>&#123;commands&#125;</code>: 对于某行或指定范围内的行，应用多条命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[yfs@yfs-manjaro sed]$ <span class="built_in">seq</span> 3 | sed -n <span class="string">&#x27;2&#123;s/2/X/;p&#125;&#x27;</span> </span><br><span class="line">X</span><br></pre></td></tr></table></figure></li></ol><h2 id="2-4-Less-Frequently-Used-Commands"><a href="#2-4-Less-Frequently-Used-Commands" class="headerlink" title="2.4 Less Frequently-Used Commands"></a>2.4 Less Frequently-Used Commands</h2><ol><li><code>y/source-chars/dest-chars/</code>: Transliterate any characters in the pattern space which match any of the source-chars with the corresponding character in dest-chars.<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[yfs@yfs-manjaro sed]$ <span class="built_in">echo</span> <span class="string">&quot;abcdefg&quot;</span> | sed <span class="string">&#x27;y/acg/135/&#x27;</span>    </span><br><span class="line">1b3def5 </span><br><span class="line">[yfs@yfs-manjaro sed]$ <span class="built_in">echo</span> <span class="string">&quot;abcdefg&quot;</span> | sed <span class="string">&#x27;y/acg/1356/&#x27;</span> </span><br><span class="line">sed：-e 表达式 <span class="comment">#1，字符 11：“y”命令的字符串长度不同</span></span><br></pre></td></tr></table></figure></li><li><code>a text</code>: Appending text after a line.</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">[yfs@yfs-manjaro sed]$ <span class="built_in">seq</span> 3 | sed <span class="string">&#x27;2ahello&#x27;</span> </span><br><span class="line">1 </span><br><span class="line">2 </span><br><span class="line">hello </span><br><span class="line">3</span><br><span class="line">[yfs@yfs-manjaro sed]$ <span class="built_in">seq</span> 3 | sed <span class="string">&#x27;2a\ </span></span><br><span class="line"><span class="string">&gt; hello\ </span></span><br><span class="line"><span class="string">&gt; world </span></span><br><span class="line"><span class="string">&gt; 3s/./X/&#x27;</span> </span><br><span class="line">1 </span><br><span class="line">2 </span><br><span class="line">hello </span><br><span class="line">world </span><br><span class="line">X</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用-e可以拼接：</span></span><br><span class="line">[yfs@yfs-manjaro sed]$ <span class="built_in">seq</span> 3 | sed -e <span class="string">&#x27;2a\&#x27;</span> -e hello </span><br><span class="line">1 </span><br><span class="line">2 </span><br><span class="line">hello </span><br><span class="line">3 </span><br><span class="line">[yfs@yfs-manjaro sed]$ var=helloworld </span><br><span class="line">[yfs@yfs-manjaro sed]$ <span class="built_in">seq</span> 3 | sed -e <span class="string">&#x27;2a\&#x27;</span> -e <span class="variable">$var</span> </span><br><span class="line">1 </span><br><span class="line">2 </span><br><span class="line">helloworld </span><br><span class="line">3</span><br></pre></td></tr></table></figure><ol><li><code>i text</code>: insert text before a line.<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[yfs@yfs-manjaro sed]$ <span class="built_in">seq</span> 3 | sed <span class="string">&#x27;2ihello&#x27;</span> </span><br><span class="line">1 </span><br><span class="line">hello </span><br><span class="line">2 </span><br><span class="line">3</span><br><span class="line"></span><br><span class="line">使用-e分割插入内容</span><br><span class="line">[yfs@yfs-manjaro sed]$ var=hello </span><br><span class="line">[yfs@yfs-manjaro sed]$ <span class="built_in">seq</span> 3 | sed <span class="string">&#x27;2i\&#x27;</span> -e <span class="variable">$var</span> </span><br><span class="line">sed：-e 表达式 <span class="comment">#1，字符 2：命令后含有多余的字符 </span></span><br><span class="line">[yfs@yfs-manjaro sed]$ <span class="built_in">seq</span> 3 | sed -e <span class="string">&#x27;2i\&#x27;</span> -e <span class="variable">$var</span> </span><br><span class="line">1 </span><br><span class="line">hello </span><br><span class="line">2 </span><br><span class="line">3</span><br></pre></td></tr></table></figure></li><li><p><code>c text</code>: Replaces the line(s) with text.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[yfs@yfs-manjaro sed]$ <span class="built_in">seq</span> 10 | sed <span class="string">&#x27;2,9c hello&#x27;</span> </span><br><span class="line">1 </span><br><span class="line">hello </span><br><span class="line">10 </span><br><span class="line">[yfs@yfs-manjaro sed]$ var=hello </span><br><span class="line">[yfs@yfs-manjaro sed]$ <span class="built_in">seq</span> 10 | sed -e <span class="string">&#x27;2,9c\&#x27;</span> -e <span class="variable">$var</span> </span><br><span class="line">1 </span><br><span class="line">hello </span><br><span class="line">10</span><br></pre></td></tr></table></figure></li><li><p><code>l n</code>: Print the pattern space in an unambiguous form: </p></li></ol><ul><li>Non-printable characters(and the \ character) are printed in C-style escaped form; </li><li>Long lines are split, with a trailing \ character to indicate the split; </li><li>The end of each line is marker with a $.<br>  <code>n</code> specifies the desire line-wrap lenth. <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">[yfs@yfs-manjaro sed]$ <span class="built_in">seq</span> 3|sed -n <span class="string">&#x27;l 3&#x27;</span>     </span><br><span class="line">1$ </span><br><span class="line">2$ </span><br><span class="line">3$</span><br><span class="line">[yfs@yfs-manjaro sed]$ <span class="built_in">echo</span> -e <span class="string">&quot;helloworld&quot;</span>|sed -n <span class="string">&#x27;l0&#x27;</span> </span><br><span class="line">helloworld$ </span><br><span class="line">[yfs@yfs-manjaro sed]$ <span class="built_in">echo</span> -e <span class="string">&quot;helloworld&quot;</span>|sed -n <span class="string">&#x27;l&#x27;</span>  </span><br><span class="line">helloworld$ </span><br><span class="line">[yfs@yfs-manjaro sed]$ <span class="built_in">echo</span> -e <span class="string">&quot;helloworld&quot;</span>|sed -n <span class="string">&#x27;l3&#x27;</span> </span><br><span class="line">he\ </span><br><span class="line">ll\ </span><br><span class="line">ow\ </span><br><span class="line">or\ </span><br><span class="line">ld$</span><br><span class="line"></span><br><span class="line">[yfs@yfs-manjaro sed]$ <span class="built_in">echo</span> <span class="string">&quot;abc&quot;</span> | sed -n <span class="string">&#x27;l1&#x27;</span> </span><br><span class="line">\ </span><br><span class="line">a\ </span><br><span class="line">b\ </span><br><span class="line">c$ </span><br><span class="line">[yfs@yfs-manjaro sed]$ <span class="built_in">echo</span> <span class="string">&quot;abc&quot;</span> | sed -n <span class="string">&#x27;l&#x27;</span>  </span><br><span class="line">abc$ </span><br><span class="line">[yfs@yfs-manjaro sed]$ <span class="built_in">echo</span> <span class="string">&quot;abc&quot;</span> | sed -n <span class="string">&#x27;l2&#x27;</span> </span><br><span class="line">a\ </span><br><span class="line">b\ </span><br><span class="line">c$ </span><br><span class="line">[yfs@yfs-manjaro sed]$ <span class="built_in">echo</span> <span class="string">&quot;abc&quot;</span> | sed -n <span class="string">&#x27;l3&#x27;</span> </span><br><span class="line">ab\ </span><br><span class="line">c$ </span><br><span class="line">[yfs@yfs-manjaro sed]$ <span class="built_in">echo</span> <span class="string">&quot;abc&quot;</span> | sed -n <span class="string">&#x27;l4&#x27;</span> </span><br><span class="line">abc$</span><br></pre></td></tr></table></figure></li></ul><ol><li><code>r filename</code>: Queue the contents of filename to be read and inserted into the output stream at the end of the current cycle. If filename cannot be read, it is treated as if it were an empty file, without any error indication.</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[yfs@yfs-manjaro sed]$ <span class="built_in">cat</span> input </span><br><span class="line">this is the first line. </span><br><span class="line">this is the second line. </span><br><span class="line">this is the third line.</span><br><span class="line"></span><br><span class="line">[yfs@yfs-manjaro sed]$ <span class="built_in">seq</span> 4 | sed <span class="string">&#x27;2,3r input&#x27;</span>  </span><br><span class="line">1 </span><br><span class="line">2 </span><br><span class="line">this is the first line. </span><br><span class="line">this is the second line. </span><br><span class="line">this is the third line. </span><br><span class="line">3 </span><br><span class="line">this is the first line. </span><br><span class="line">this is the second line. </span><br><span class="line">this is the third line. </span><br><span class="line">4</span><br><span class="line">[yfs@yfs-manjaro sed]$ <span class="built_in">seq</span> 4 | sed <span class="string">&#x27;$r input&#x27;</span>  </span><br><span class="line">1 </span><br><span class="line">2 </span><br><span class="line">3 </span><br><span class="line">4 </span><br><span class="line">this is the first line. </span><br><span class="line">this is the second line. </span><br><span class="line">this is the third line.</span><br></pre></td></tr></table></figure><ol><li><code>w filename</code>: Write the pattern space to filename.<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[yfs@yfs-manjaro sed]$ <span class="built_in">echo</span> -e <span class="string">&quot;abc123\nabc\n123&quot;</span> | sed <span class="string">&#x27;/[0-9]*/w filename&#x27;</span> </span><br><span class="line">abc123 </span><br><span class="line">abc </span><br><span class="line">123 </span><br><span class="line">[yfs@yfs-manjaro sed]$ <span class="built_in">cat</span> filename  </span><br><span class="line">abc123 </span><br><span class="line">abc </span><br><span class="line">123</span><br><span class="line">[yfs@yfs-manjaro sed]$ <span class="built_in">echo</span> -e <span class="string">&quot;abc123\nabc\n123&quot;</span> | sed -n <span class="string">&#x27;/[0-9]\+/w filename&#x27;</span>   </span><br><span class="line">[yfs@yfs-manjaro sed]$ <span class="built_in">cat</span> filename  </span><br><span class="line">abc123 </span><br><span class="line">123</span><br></pre></td></tr></table></figure></li><li><code>h</code>: Replace the contents of the hold space with the contents of the pattern space.<br>将pattern space中的内容存入hold space中</li><li><code>g</code>: Replace the contents of the pattern space with the contents of the hold space.<br>用hold space中的内容覆盖pattern space中的内容</li><li><code>H</code>: 原文：Append a newline to the contents of the hold space, and then append the contents of the pattern space to that of the hold space.</li><li><code>G</code>: 原文：Append a newline to the contents of the pattern space, and then append thecontents of the hold space to that of the pattern space.</li><li><code>x</code>: 交换hold space与pattern space中的内容。</li></ol><p>【助记】h: set the hold space value; g: set pattern space with value got from hold space<br>【注意】hold space中如果没有通过h或H赋值，那么他一直是空的，换言之hold space如果不是人为更改其内容便不会更改。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将第2行存入hold space，第5-7行用hold space内容替代</span></span><br><span class="line">[yfs@yfs-manjaro sed]$ <span class="built_in">seq</span> 10 | sed <span class="string">&#x27;2h;5,7g&#x27;</span> </span><br><span class="line">1 </span><br><span class="line">2 </span><br><span class="line">3 </span><br><span class="line">4 </span><br><span class="line">2 </span><br><span class="line">2 </span><br><span class="line">2 </span><br><span class="line">8 </span><br><span class="line">9 </span><br><span class="line">10</span><br><span class="line"><span class="comment"># 当执行到第2行时，先追加一个空行，然后在第5-7行将hold space中的内容替换到pattern space中。</span></span><br><span class="line">[yfs@yfs-manjaro sed]$ <span class="built_in">seq</span> 10 | sed <span class="string">&#x27;2H;5,7g&#x27;</span> </span><br><span class="line">1 </span><br><span class="line">2 </span><br><span class="line">3 </span><br><span class="line">4 </span><br><span class="line"></span><br><span class="line">2 </span><br><span class="line"></span><br><span class="line">2 </span><br><span class="line"></span><br><span class="line">2 </span><br><span class="line">8 </span><br><span class="line">9 </span><br><span class="line">10</span><br><span class="line"></span><br><span class="line">[yfs@yfs-manjaro sed]$ <span class="built_in">seq</span> 10| sed <span class="string">&#x27;2h;5H;8g&#x27;</span> </span><br><span class="line">1 </span><br><span class="line">2 <span class="comment"># 第2行：hold space为2</span></span><br><span class="line">3 </span><br><span class="line">4 </span><br><span class="line">5 <span class="comment"># 第5行：在hold space原有内容上追加一个新行5 (目前是2\n5)</span></span><br><span class="line">6 </span><br><span class="line">7 </span><br><span class="line">2 <span class="comment"># 第8行：将hold space中的内容替换到pattern space中</span></span><br><span class="line">5 </span><br><span class="line">9 </span><br><span class="line">10</span><br></pre></td></tr></table></figure><ol><li><code>e shell-code</code>: 可以执行shell语句。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">[yfs@yfs-manjaro sed]$ <span class="built_in">ls</span> </span><br><span class="line">foo<span class="comment">#bar  input  input2  newfile  one  three  two </span></span><br><span class="line">[yfs@yfs-manjaro sed]$ <span class="built_in">echo</span> a | sed <span class="string">&#x27;1e ls&#x27;</span> </span><br><span class="line">foo<span class="comment">#bar </span></span><br><span class="line">input </span><br><span class="line">input2 </span><br><span class="line">newfile </span><br><span class="line">one </span><br><span class="line">three </span><br><span class="line">two </span><br><span class="line">a</span><br><span class="line">[yfs@yfs-manjaro sed]$ <span class="built_in">seq</span> 3 | sed <span class="string">&#x27;1e ls&#x27;</span>       </span><br><span class="line">foo<span class="comment">#bar </span></span><br><span class="line">input </span><br><span class="line">input2 </span><br><span class="line">newfile </span><br><span class="line">one </span><br><span class="line">three </span><br><span class="line">two </span><br><span class="line">1 </span><br><span class="line">2 </span><br><span class="line">3</span><br><span class="line">[yfs@yfs-manjaro sed]$ <span class="built_in">seq</span> 3 | sed <span class="string">&#x27;2e ls&#x27;</span>  </span><br><span class="line">1 </span><br><span class="line">foo<span class="comment">#bar </span></span><br><span class="line">input </span><br><span class="line">input2 </span><br><span class="line">newfile </span><br><span class="line">one </span><br><span class="line">three </span><br><span class="line">two </span><br><span class="line">2 </span><br><span class="line">3</span><br></pre></td></tr></table></figure><h2 id="2-5-Commands-Requiring-a-newline"><a href="#2-5-Commands-Requiring-a-newline" class="headerlink" title="2.5 Commands Requiring a newline"></a>2.5 Commands Requiring a newline</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a,c,i(append/change/insert)</span><br><span class="line"><span class="comment"># (comment)</span></span><br><span class="line">r,R,w,W (reading and writing files)</span><br><span class="line">e (shell-command)</span><br><span class="line">s///w</span><br></pre></td></tr></table></figure><h2 id="2-6-Address的使用"><a href="#2-6-Address的使用" class="headerlink" title="2.6 Address的使用"></a>2.6 Address的使用</h2><ol><li>Selecting lines by numbers<br>address的种类：<br> • number<br> • $: 最后一行<br> • first~step: 从第first开始每隔step选一行</li><li>selecting lines by text matching<br> Regexp address如果让pattern space发生变化，则regexp作用于变化后的pattern space上。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先将第2行修改为X，然后再使用/[0-9]/p进行正则匹配</span></span><br><span class="line">[yfs@yfs-manjaro sed]$ <span class="built_in">seq</span> 3 | sed -n <span class="string">&#x27;s/2/X/; /[0-9]/p&#x27;</span> </span><br><span class="line">1 </span><br><span class="line">3</span><br></pre></td></tr></table></figure><p><code>/regexp/</code>：最常用的方式。如果regexp中匹配‘\‘，则需要转义。<br><code>\%regexp%</code>：%可以是任何一个字符。regexp可以匹配’/’而不需要转义。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[yfs@yfs-manjaro sed]$ sed -n <span class="string">&#x27;\%bash$%p&#x27;</span> /etc/passwd </span><br><span class="line">root:x:0:0::/root:/bin/bash </span><br><span class="line">yfs:x:1000:1001:yfs:/home/yfs:/bin/bash </span><br><span class="line">[yfs@yfs-manjaro sed]$ sed -n <span class="string">&#x27;\0bash$0p&#x27;</span> /etc/passwd   </span><br><span class="line">root:x:0:0::/root:/bin/bash </span><br><span class="line">yfs:x:1000:1001:yfs:/home/yfs:/bin/bash </span><br><span class="line">[yfs@yfs-manjaro sed]$ sed -n <span class="string">&#x27;\abash$ap&#x27;</span> /etc/passwd   </span><br><span class="line">sed：-e 表达式 <span class="comment">#1，字符 9：未终止的“s”命令 </span></span><br><span class="line">[yfs@yfs-manjaro sed]$ sed -n <span class="string">&#x27;\bbash$bp&#x27;</span> /etc/passwd   </span><br><span class="line">sed：-e 表达式 <span class="comment">#1，字符 0：前面没有正则表达式 </span></span><br><span class="line">[yfs@yfs-manjaro sed]$ sed -n <span class="string">&#x27;\&amp;bash$&amp;p&#x27;</span> /etc/passwd   </span><br><span class="line">root:x:0:0::/root:/bin/bash </span><br><span class="line">yfs:x:1000:1001:yfs:/home/yfs:/bin/bash </span><br><span class="line">[yfs@yfs-manjaro sed]$ sed -n <span class="string">&#x27;\^bash$^p&#x27;</span> /etc/passwd   </span><br><span class="line">root:x:0:0::/root:/bin/bash </span><br><span class="line">yfs:x:1000:1001:yfs:/home/yfs:/bin/bash </span><br><span class="line">[yfs@yfs-manjaro sed]$ sed -n <span class="string">&#x27;\-bash$-p&#x27;</span> /etc/passwd   </span><br><span class="line">root:x:0:0::/root:/bin/bash </span><br><span class="line">yfs:x:1000:1001:yfs:/home/yfs:/bin/bash </span><br><span class="line">[yfs@yfs-manjaro sed]$ sed -n <span class="string">&#x27;\Abash$Ap&#x27;</span> /etc/passwd   </span><br><span class="line">root:x:0:0::/root:/bin/bash </span><br><span class="line">yfs:x:1000:1001:yfs:/home/yfs:/bin/bash</span><br></pre></td></tr></table></figure><br><code>/regexp/I</code>或者<code>\%regexp%I</code>：不区分大小写的匹配<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[yfs@yfs-manjaro sed]$ <span class="built_in">cat</span> input </span><br><span class="line">this is the first line. </span><br><span class="line">this is the second line. </span><br><span class="line">this is the third line. </span><br><span class="line">THIS is the fourth line.</span><br><span class="line">[yfs@yfs-manjaro sed]$ <span class="built_in">cat</span> input | sed <span class="string">&#x27;/^this/p&#x27;</span> </span><br><span class="line">this is the first line. </span><br><span class="line">this is the first line. </span><br><span class="line">this is the second line. </span><br><span class="line">this is the second line. </span><br><span class="line">this is the third line. </span><br><span class="line">this is the third line. </span><br><span class="line">THIS is the fourth line. </span><br><span class="line">[yfs@yfs-manjaro sed]$ <span class="built_in">cat</span> input | sed -n <span class="string">&#x27;/^this/p&#x27;</span> </span><br><span class="line">this is the first line. </span><br><span class="line">this is the second line. </span><br><span class="line">this is the third line. </span><br><span class="line">[yfs@yfs-manjaro sed]$ <span class="built_in">cat</span> input | sed -n <span class="string">&#x27;/^this/Ip&#x27;</span> </span><br><span class="line">this is the first line. </span><br><span class="line">this is the second line. </span><br><span class="line">this is the third line. </span><br><span class="line">THIS is the fourth line.</span><br></pre></td></tr></table></figure><br><code>/regexp/M</code>或者<code>\%regexp%M</code>：略</p><ol><li>Range Address</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line">情况1：</span><br><span class="line">[yfs@yfs-manjaro sed]$ <span class="built_in">seq</span> 10 | sed -n <span class="string">&#x27;4,6p&#x27;</span> </span><br><span class="line">4 </span><br><span class="line">5 </span><br><span class="line">6</span><br><span class="line"><span class="comment"># 从first address开始直到满足second address正则表达式的行结束。若second address可以匹配first address的行，则first address对应行不算，从它之后开始匹配，如第2，3个例子。</span></span><br><span class="line">情况2：</span><br><span class="line">[yfs@yfs-manjaro sed]$ <span class="built_in">seq</span> 10 | sed -n <span class="string">&#x27;4,/[0-9]/p&#x27;</span>  </span><br><span class="line">4 </span><br><span class="line">5</span><br><span class="line">[yfs@yfs-manjaro sed]$ <span class="built_in">seq</span> 10 | sed -n <span class="string">&#x27;s/5/X/;5,/[5-9]/p&#x27;</span> </span><br><span class="line">X </span><br><span class="line">6</span><br><span class="line">[yfs@yfs-manjaro sed]$ <span class="built_in">seq</span> 10 | sed -n <span class="string">&#x27;s/6/Y/;5,/[5-9]/p&#x27;</span>    5 </span><br><span class="line">Y </span><br><span class="line">7</span><br><span class="line">[yfs@yfs-manjaro sed]$ <span class="built_in">seq</span> 10 | sed -n <span class="string">&#x27;6,9s/[0-9]/X/;5,/[5-9]/p&#x27;</span> </span><br><span class="line">5 </span><br><span class="line">X </span><br><span class="line">X </span><br><span class="line">X </span><br><span class="line">X </span><br><span class="line">10</span><br><span class="line">情况3：</span><br><span class="line">若second address &lt;= first address, 则只匹配一行。</span><br><span class="line">[yfs@yfs-manjaro sed]$ <span class="built_in">seq</span> 10 | sed -n <span class="string">&#x27;6,9s/[0-9]/X/;5,1p&#x27;</span> </span><br><span class="line">5 </span><br><span class="line"><span class="comment"># 这一列并不是特殊情况，仍然符合这个原则。</span></span><br><span class="line">[yfs@yfs-manjaro sed]$ <span class="built_in">seq</span> 10 | sed -n <span class="string">&#x27;6,9s/[0-9]/X/;5,/[0-4]/p&#x27;</span> </span><br><span class="line">5 </span><br><span class="line">X </span><br><span class="line">X </span><br><span class="line">X </span><br><span class="line">X </span><br><span class="line">10</span><br><span class="line"></span><br><span class="line">情况4：一种特殊情况</span><br><span class="line">[yfs@yfs-manjaro sed]$ <span class="built_in">seq</span> 10 | sed -n <span class="string">&#x27;1,/[0-9]/p&#x27;</span> </span><br><span class="line">1 </span><br><span class="line">2 </span><br><span class="line">[yfs@yfs-manjaro sed]$ <span class="built_in">seq</span> 10 | sed -n <span class="string">&#x27;0,/[0-9]/p&#x27;</span> </span><br><span class="line">1</span><br><span class="line"></span><br><span class="line">情况5：addr1,+N，匹配[addr1, addr1+N]行</span><br><span class="line">[yfs@yfs-manjaro sed]$ <span class="built_in">seq</span> 10 | sed -n <span class="string">&#x27;4,+3p&#x27;</span> </span><br><span class="line">4 </span><br><span class="line">5 </span><br><span class="line">6 </span><br><span class="line">7</span><br><span class="line">[yfs@yfs-manjaro sed]$ <span class="built_in">seq</span> 10 | sed -n <span class="string">&#x27;/[2|7]/,+2p&#x27;</span> </span><br><span class="line">2 </span><br><span class="line">3 </span><br><span class="line">4 </span><br><span class="line">7 </span><br><span class="line">8 </span><br><span class="line">9</span><br><span class="line">[yfs@yfs-manjaro sed]$ <span class="built_in">seq</span> 10 | sed -n <span class="string">&#x27;/[0-9]/,+2p&#x27;</span> </span><br><span class="line">1 </span><br><span class="line">2 </span><br><span class="line">3 </span><br><span class="line">4 </span><br><span class="line">5 </span><br><span class="line">6 </span><br><span class="line">7 </span><br><span class="line">8 </span><br><span class="line">9 </span><br><span class="line">10</span><br><span class="line"></span><br><span class="line">情况6：addr1，~N: 从addr1开始，直到遇到N的倍数停止</span><br><span class="line">[yfs@yfs-manjaro sed]$ <span class="built_in">seq</span> 10 | sed -n <span class="string">&#x27;4,~5p&#x27;</span> </span><br><span class="line">4 </span><br><span class="line">5 </span><br><span class="line">[yfs@yfs-manjaro sed]$ <span class="built_in">seq</span> 10 | sed -n <span class="string">&#x27;4,~2p&#x27;</span> </span><br><span class="line">4 </span><br><span class="line">5 </span><br><span class="line">6</span><br><span class="line">[yfs@yfs-manjaro sed]$ <span class="built_in">seq</span> 10 | sed -n <span class="string">&#x27;/[1|6]/,~2p&#x27;</span>  </span><br><span class="line">1 </span><br><span class="line">2 </span><br><span class="line">6 </span><br><span class="line">7 </span><br><span class="line">8 </span><br><span class="line">10 <span class="comment"># 不知道为什么会输出</span></span><br><span class="line">[yfs@yfs-manjaro sed]$ <span class="built_in">seq</span> 10 | sed -n <span class="string">&#x27;6,~2p&#x27;</span>       </span><br><span class="line">6 </span><br><span class="line">7 </span><br><span class="line">8</span><br></pre></td></tr></table></figure><p><a href="https://www.jianshu.com/p/327335bfe9b4">参考教程</a></p><h1 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h1><p>sed匹配单引号： echo “asdfas’asdf” | sed s#\’#\”#g<br>注意sed 后面的命令不能添加单引号或者双引号<br>sed <u>‘s/‘</u> <u>“‘“</u> <u>/</u> <u>‘“‘</u> <u>‘/g’</u> test<br>解析下：<br>‘s/‘ =&gt; 要进行替换操作，后紧跟匹配字符<br>“‘“ =&gt; 用双引号包裹着单引号<br>/   =&gt;分割符<br>‘“‘  =&gt; 用单引号包裹着双引号<br>‘/g’ =&gt;分隔符，全局替换</p><p>echo asdf | sed ‘s/(.*)/‘“‘\1’”‘/g’ # 在asdf前后加一个单引号</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode174.地下城游戏</title>
      <link href="/JeckFS/2020/04/06/leetcode174-%E5%9C%B0%E4%B8%8B%E5%9F%8E%E6%B8%B8%E6%88%8F/"/>
      <url>/JeckFS/2020/04/06/leetcode174-%E5%9C%B0%E4%B8%8B%E5%9F%8E%E6%B8%B8%E6%88%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><img src="/JeckFS/2020/04/06/leetcode174-%E5%9C%B0%E4%B8%8B%E5%9F%8E%E6%B8%B8%E6%88%8F/174-1.png" class="" title="This is an image."><img src="/JeckFS/2020/04/06/leetcode174-%E5%9C%B0%E4%B8%8B%E5%9F%8E%E6%B8%B8%E6%88%8F/174-2.png" class="" title="This is an image."><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>问题关键在于<code>为了尽快到达公主，骑士决定每次只向右或向下移动一步</code>。 开始没有注意到这句话，导致最后超时。因为如果没有这句话，到达某一点的上一个位置可以从该点上下左右位置，这就不好用动态规划了。下面代码是基于<code>骑士可以向上下左右都移动的代码</code>。</p><p><code>dp[i][j]</code>表示到达(i,j)位置时，骑士需要的最低健康值。这时候采用和走迷宫一样的算法框架。说起来太费劲，甚至说不清，直接上代码更新状态的代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// pathSum记录从(0,0)到(curX,curY)的路径和(路径上dungeon[i][j]的累加值)</span></span><br><span class="line"><span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> Math.max(-pathSum + <span class="number">1</span>, dp[<span class="number">0</span>][<span class="number">0</span>]); </span><br><span class="line"><span class="comment">// 此时max是到达上一个位置时，-pathSum+1的最大值。不然途中的某一点是过不来的，因为小于等于0，骑士就挂掉了。</span></span><br><span class="line">t = Math.max(t, max); </span><br><span class="line">dp[curX][curY] = Math.min(dp[curX][curY], t);</span><br><span class="line">max = Math.max(max, -pathSum+<span class="number">1</span>);</span><br></pre></td></tr></table></figure><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span>[][] visited;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[][] dungeon;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[][] dp; <span class="comment">// dp[i][j]表示从dungeon[0][0]到dungeon[i][j]所用的最小的健康值.</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[] x = &#123;-<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>&#125;; <span class="comment">// 顺序: 上下左右</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[] y = &#123;<span class="number">0</span>, <span class="number">0</span>, -<span class="number">1</span>, <span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">helper</span><span class="params">(<span class="type">int</span> lastX, <span class="type">int</span> lastY, <span class="type">int</span> curX, <span class="type">int</span> curY, <span class="type">int</span> pathSum, <span class="type">int</span> max)</span> &#123;</span><br><span class="line">        pathSum += dungeon[curX][curY];</span><br><span class="line">        <span class="comment">// dp[curX][curY] = min&#123;dp[curX][curY], max&#123;-pathSum+1, dp[0][0]&#125;&#125;</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> Math.max(-pathSum + <span class="number">1</span>, dp[<span class="number">0</span>][<span class="number">0</span>]);</span><br><span class="line">        t = Math.max(t, max);</span><br><span class="line">        dp[curX][curY] = Math.min(dp[curX][curY], t);</span><br><span class="line">        max = Math.max(max, -pathSum+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">nextX</span> <span class="operator">=</span> curX + x[i];</span><br><span class="line">            <span class="type">int</span> <span class="variable">nextY</span> <span class="operator">=</span> curY + y[i];</span><br><span class="line">            <span class="keyword">if</span> (nextX &gt;= <span class="number">0</span> &amp;&amp; nextX &lt; dungeon.length &amp;&amp; nextY &gt;= <span class="number">0</span> &amp;&amp; nextY &lt; dungeon[<span class="number">0</span>].length &amp;&amp; !visited[nextX][nextY]) &#123;</span><br><span class="line">                visited[nextX][nextY] = <span class="literal">true</span>;</span><br><span class="line">                helper(curX, curY, nextX, nextY, pathSum, max);</span><br><span class="line">                visited[nextX][nextY] = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 超时</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">calculateMinimumHP</span><span class="params">(<span class="type">int</span>[][] dungeon)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (dungeon.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        dp = <span class="keyword">new</span> <span class="title class_">int</span>[dungeon.length][dungeon[<span class="number">0</span>].length];</span><br><span class="line">        visited = <span class="keyword">new</span> <span class="title class_">boolean</span>[dungeon.length][dungeon[<span class="number">0</span>].length];</span><br><span class="line">        <span class="built_in">this</span>.dungeon = dungeon;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; dp.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; dp[<span class="number">0</span>].length; j++) &#123;</span><br><span class="line">                dp[i][j] = Integer.MAX_VALUE;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        visited[<span class="number">0</span>][<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (dungeon[<span class="number">0</span>][<span class="number">0</span>] &lt;= <span class="number">0</span>) dp[<span class="number">0</span>][<span class="number">0</span>] = -dungeon[<span class="number">0</span>][<span class="number">0</span>] + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        helper(-<span class="number">1</span>, -<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> dp[dungeon.length - <span class="number">1</span>][dungeon[<span class="number">0</span>].length-<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>如果基于4个方向都可以走的前提下，对于下面这个测试用例结果是不同的。<br><img src="/JeckFS/2020/04/06/leetcode174-%E5%9C%B0%E4%B8%8B%E5%9F%8E%E6%B8%B8%E6%88%8F/174-3.png" class="" title="This is an image."></p><p>如果基于<code>骑士决定每次只向右或向下移动一步。</code>，这题就好做多了。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[][] dungeon;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">minHealthy</span> <span class="operator">=</span> Integer.MAX_VALUE;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> curX: 当前x坐标的位置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> curY: 当前y坐标的位置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> consume: 路径和</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> lastMaxHealth: 过去位置需要的最大健康值,他也是上一个位置的健康值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">helper</span><span class="params">(<span class="type">int</span> curX, <span class="type">int</span> curY, <span class="type">int</span> consume, <span class="type">int</span> lastMaxHealth)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (curX == dungeon.length &amp;&amp; curY == dungeon[<span class="number">0</span>].length-<span class="number">1</span> || curX == dungeon.length-<span class="number">1</span> &amp;&amp; curY == dungeon[<span class="number">0</span>].length)</span><br><span class="line">            minHealthy = Math.min(minHealthy, lastMaxHealth);</span><br><span class="line">        <span class="keyword">if</span> (curX == dungeon.length || curY == dungeon[<span class="number">0</span>].length) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 计算当前位置的剩余健康值, 上一位置的剩余健康值</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">restHealth</span> <span class="operator">=</span> lastMaxHealth + consume;</span><br><span class="line">        <span class="type">int</span> <span class="variable">curHealth</span> <span class="operator">=</span> restHealth + dungeon[curX][curY];</span><br><span class="line">        <span class="keyword">if</span> (curHealth &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            helper(curX + <span class="number">1</span>, curY, consume + dungeon[curX][curY], lastMaxHealth);</span><br><span class="line">            helper(curX, curY + <span class="number">1</span>, consume + dungeon[curX][curY], lastMaxHealth);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            curHealth = lastMaxHealth+(-curHealth+<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (curHealth &gt; minHealthy)</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">            helper(curX + <span class="number">1</span>, curY, consume + dungeon[curX][curY], curHealth);</span><br><span class="line">            helper(curX, curY + <span class="number">1</span>, consume + dungeon[curX][curY], curHealth);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 超时(通过41个测试用例，总测试用例45个)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">calculateMinimumHP</span><span class="params">(<span class="type">int</span>[][] dungeon)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (dungeon.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">this</span>.dungeon = dungeon;</span><br><span class="line">        <span class="type">int</span> <span class="variable">lastMaxHealth</span> <span class="operator">=</span> (dungeon[<span class="number">0</span>][<span class="number">0</span>] &gt; <span class="number">0</span>) ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">        helper(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,lastMaxHealth);</span><br><span class="line">        <span class="keyword">return</span> minHealthy;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 动态规划 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode140.单词拆分II</title>
      <link href="/JeckFS/2020/04/05/leetcode140-%E5%8D%95%E8%AF%8D%E6%8B%86%E5%88%86II/"/>
      <url>/JeckFS/2020/04/05/leetcode140-%E5%8D%95%E8%AF%8D%E6%8B%86%E5%88%86II/</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><img src="/JeckFS/2020/04/05/leetcode140-%E5%8D%95%E8%AF%8D%E6%8B%86%E5%88%86II/140-1.png" class="" title="This is an Image."><img src="/JeckFS/2020/04/05/leetcode140-%E5%8D%95%E8%AF%8D%E6%8B%86%E5%88%86II/140-2.png" class="" title="This is an Image."><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/word-break-ii">https://leetcode-cn.com/problems/word-break-ii</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>见<a href="https://leetcode-cn.com/problems/word-break-ii/solution/dan-ci-chai-fen-ii-by-leetcode/">官方题解</a></p><h1 id="未完成的原因"><a href="#未完成的原因" class="headerlink" title="未完成的原因"></a>未完成的原因</h1><p>没有分析清楚递归过程的子问题是以start来确定的, 即从start位置开始到字符串末的子串s[start..s.length-1]来划分子问题.<br>如下例:<br><img src="/JeckFS/2020/04/05/leetcode140-%E5%8D%95%E8%AF%8D%E6%8B%86%E5%88%86II/140-3.png" class="" title="This is an Image."><br><code>number-字符串s</code>表示子串s[number..s.length-1]所有划分的可能结果. 重叠子问题显而易见.</p>]]></content>
      
      
      <categories>
          
          <category> 动态规划 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>record-gradpro</title>
      <link href="/JeckFS/2020/04/05/record-gradpro/"/>
      <url>/JeckFS/2020/04/05/record-gradpro/</url>
      
        <content type="html"><![CDATA[<p><a href="https://mp.weixin.qq.com/s/haiuSAkDAz9jaO0vIdBqwg">字节跳动笔/面试时间安排</a></p><p>11000个节点  11001个节点 , 47824个边关系<br>添加索引后耗时: 节点440ms, 边603286ms<br>索引:<br><img src="/JeckFS/2020/04/05/record-gradpro/grad-1.png" class="" title="This is an image"></p><p>不添加索引,耗时: 节点250ms, 边587953ms<br>节点减少0.19s, 边减少153.33s(2分钟多)</p><p>整个的时间对比(11000个节点):</p><div class="table-container"><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">插入节点耗时</th><th style="text-align:center">插入边耗时</th><th style="text-align:center">createModel()总耗时</th></tr></thead><tbody><tr><td style="text-align:center">在将CSV数据导入时删除索引</td><td style="text-align:center">0.276s</td><td style="text-align:center">551.548s</td><td style="text-align:center">553.087s</td></tr><tr><td style="text-align:center">在将CSV数据导入时保留索引</td><td style="text-align:center">0.366s</td><td style="text-align:center">562.715s</td><td style="text-align:center">564.569s</td></tr></tbody></table></div><p>整个的时间对比(5000个节点):</p><div class="table-container"><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">插入节点耗时</th><th style="text-align:center">插入边耗时</th><th style="text-align:center">createModel()总耗时</th></tr></thead><tbody><tr><td style="text-align:center">在将CSV数据导入时删除索引</td><td style="text-align:center">0.109s</td><td style="text-align:center">101.188s</td><td style="text-align:center">101.721s</td></tr><tr><td style="text-align:center">在将CSV数据导入时保留索引</td><td style="text-align:center">0.204s</td><td style="text-align:center">101.649s</td><td style="text-align:center">102.822s</td></tr><tr><td style="text-align:center">在将CSV数据导入时保留索引</td><td style="text-align:center">0.129s</td><td style="text-align:center">101.732s</td><td style="text-align:center">102.295s</td></tr></tbody></table></div><h1 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="[遇到的问题]"></a>[遇到的问题]</h1><ul><li>分页查询，不同的参数对应不同的数据。如何使用redis缓存分页查询的数据？全部缓存占用的内存大，缓存一部分容易被攻击。</li></ul>]]></content>
      
      
      <categories>
          
          <category> other </category>
          
      </categories>
      
      
        <tags>
            
            <tag> other </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一章 并发编程遇到的问题</title>
      <link href="/JeckFS/2020/04/05/java%E5%B9%B6%E5%8F%911/"/>
      <url>/JeckFS/2020/04/05/java%E5%B9%B6%E5%8F%911/</url>
      
        <content type="html"><![CDATA[<blockquote class="pullquote mindmap mindmap-md"><ul><li>并发编程遇到的问题<ul><li>问题1: 上下文切换带来的时间开销<ul><li>任务量少时, 开启多线程会增大上下文切换的时间的比重</li><li>工具<ul><li>Lmbench3: 测量上下文切换时长</li><li>vmstat: 测量上下文切换次数</li></ul></li><li>解决方案<ul><li>无锁并发编程</li><li>CAS算法</li><li>最少使用线程, 使用协程</li></ul></li></ul></li><li>问题2: 死锁<ul><li>避免死锁的方法(4种)</li></ul></li><li>问题3: 资源限制<ul><li>带宽</li><li>硬盘读写速度</li><li>CPU处理速度</li><li>带来的问题是: 资源受限, 多线程退化为串行方式</li></ul></li></ul></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> java并发编程的艺术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java并发编程的艺术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode132.分割回文串II</title>
      <link href="/JeckFS/2020/04/04/leetcode132-%E5%88%86%E5%89%B2%E5%9B%9E%E6%96%87%E4%B8%B2II/"/>
      <url>/JeckFS/2020/04/04/leetcode132-%E5%88%86%E5%89%B2%E5%9B%9E%E6%96%87%E4%B8%B2II/</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p><a href="https://leetcode-cn.com/problems/palindrome-partitioning-ii/">题目链接</a><br>给定一个字符串 s，将 s 分割成一些子串，使每个子串都是回文串。</p><p>返回符合要求的最少分割次数。</p><img src="/JeckFS/2020/04/04/leetcode132-%E5%88%86%E5%89%B2%E5%9B%9E%E6%96%87%E4%B8%B2II/132-1.png" class="" title="This is an image."><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><ol><li>使用isPalindrome数组记录所有的回文串.</li><li>minCutCnt[i]表示s[0..i]最小分割次数.</li><li>minCutCnt[i]初始化为: minCutCnt[i] = isPalindrome[0][i] ? 0 : Integer.MAX_VALUE;</li><li>minCutCnt[i] = min{minCutCnt[i], minCutCnt[j-1]+1}, 其中j满足字符串s[j..i]是回文串且<code>j&lt;i</code>.</li></ol><p>整个算法的时间复杂度为O(n^2).</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="comment">// 10ms 84.49%(中文) 8ms 76.70%(英文)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minCut</span><span class="params">(String S)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (S.length() == <span class="number">0</span> || S.length() == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">char</span>[] s = S.toCharArray();</span><br><span class="line">        <span class="comment">// 确定所有的回文串</span></span><br><span class="line">        <span class="type">boolean</span>[][] isPalindrome = <span class="keyword">new</span> <span class="title class_">boolean</span>[s.length][s.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length; i++) &#123;</span><br><span class="line">            <span class="comment">// caabaacaab</span></span><br><span class="line">            isPalindrome[i][i] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; i + j &lt; s.length &amp;&amp; i - j &gt;= <span class="number">0</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (s[i - j] == s[i + j] &amp;&amp; isPalindrome[i - j + <span class="number">1</span>][i + j - <span class="number">1</span>]) &#123;</span><br><span class="line">                    isPalindrome[i - j][i + j] = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// aaaa</span></span><br><span class="line">            <span class="keyword">if</span> (i + <span class="number">1</span> &lt; s.length &amp;&amp; s[i] == s[i + <span class="number">1</span>]) isPalindrome[i][i + <span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; i - j &gt;= <span class="number">0</span> &amp;&amp; i + <span class="number">1</span> + j &lt; s.length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (s[i - j] == s[i + <span class="number">1</span> + j] &amp;&amp; isPalindrome[i - j + <span class="number">1</span>][i + <span class="number">1</span> + j - <span class="number">1</span>]) &#123;</span><br><span class="line">                    isPalindrome[i - j][i + <span class="number">1</span> + j] = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span>[] minCutCnt = <span class="keyword">new</span> <span class="title class_">int</span>[s.length];</span><br><span class="line">        minCutCnt[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; s.length; i++) &#123;</span><br><span class="line">            minCutCnt[i] = isPalindrome[<span class="number">0</span>][i] ? <span class="number">0</span> : Integer.MAX_VALUE;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i; j &gt; <span class="number">0</span>; j--) &#123;</span><br><span class="line">                <span class="keyword">if</span> (isPalindrome[j][i]) &#123;</span><br><span class="line">                    minCutCnt[i] = Math.min(minCutCnt[i], minCutCnt[j-<span class="number">1</span>] + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> minCutCnt[s.length - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 动态规划 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode123.买卖股票的最佳时机III</title>
      <link href="/JeckFS/2020/04/04/leetcode123-%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BAIII/"/>
      <url>/JeckFS/2020/04/04/leetcode123-%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BAIII/</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p><a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-iii/">题目描述</a></p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>购买两次股票且买入的时候必须先卖出, 则可以将大问题分解为两个小问题, 即问题1: 在prices[0..i]买一次股票的最大利润+ 问题2:prices[i..prices.length-1]的最大利润, 它俩之和就是最终的结果. 当<code>i==prices.length</code>时等价于在prices[0..prices.length-1]上购买一次的最大利润. 对于问题1可以完全借鉴leetcode121.买卖股票的最佳时机的解法. 那对于问题2, 也是类似的解法, 问题1的解法是随着i的递增, 来找prices[i]与prices[0..i-1]中的最小值的差的最大值. 而问题2的解法是醉着i的递增, 来找prices[i+1..prices.length-1]的最大值与prices[i]的差的最大值. 那么(问题a)如何在问题1中找到prices[0..i]的最小值, 和(问题b)如何在问题2中找到prices[i+1..prices.length-1]的最大值, 是解决问题的关键.</p><p>问题a比较好解决, 对于问题b, 可以用大顶堆来查找prices[i+1..prices.length-1]的最大值. 当i++的时候, 从大顶堆中移除prices[i]即可. 如果不考虑从大顶堆移除prices[i]的时间复杂度, 那么这个算法的时间复杂度应该是 $O(nlog(n))$ , 如何从大顶堆移除prices[i]的操作是$O(n)$的话, 整个算法的时间复杂度是 $O(n^2)$.</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="comment">// 9ms 27.14%(中文) 13ms 16.37(英文)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxProfit1</span><span class="params">(<span class="type">int</span>[] prices)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (prices.length == <span class="number">0</span> || prices.length == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        PriorityQueue&lt;Integer&gt; pq = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;((integer, t1) -&gt; t1-integer);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; prices.length; i++) &#123;</span><br><span class="line">            pq.add(prices[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">leftProfit</span> <span class="operator">=</span> <span class="number">0</span>, rightProfit;</span><br><span class="line">        <span class="type">int</span> leftMin=prices[<span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; prices.length; i++) &#123;</span><br><span class="line">            <span class="comment">// 计算0..i购买一次的最大利润</span></span><br><span class="line">            leftMin = Math.min(leftMin, prices[i-<span class="number">1</span>]);</span><br><span class="line">            leftProfit = Math.max(leftProfit, prices[i] - leftMin);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 计算i..prices.length购买一次的最大利润</span></span><br><span class="line">            rightProfit = pq.peek() - prices[i];</span><br><span class="line">            <span class="keyword">if</span> (pq.peek() == prices[i]) &#123;</span><br><span class="line">                pq.poll();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                pq.remove(prices[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            res = Math.max(res, leftProfit + rightProfit);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="优秀题解"><a href="#优秀题解" class="headerlink" title="优秀题解"></a>优秀题解</h1><p>作者：marcusxu <a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-iii/solution/tong-su-yi-dong-de-dong-tai-gui-hua-jie-fa-by-marc/">链接</a></p><p>动态规划解法:</p><p>一天结束时，可能有持股、可能未持股、可能卖出过1次、可能卖出过2次、也可能未卖出过</p><p>所以定义状态转移数组dp[天数][当前是否持股][卖出的次数]</p><p>具体一天结束时的6种状态：</p><ol><li>未持股，未卖出过股票：说明从未进行过买卖，利润为0<br>dp[i][0][0]=0</li><li>未持股，卖出过1次股票：可能是今天卖出，也可能是之前卖的（昨天也未持股且卖出过）<br>dp[i][0][1]=max(dp[i-1][1][0]+prices[i],dp[i-1][0][1])</li><li>未持股，卖出过2次股票:可能是今天卖出，也可能是之前卖的（昨天也未持股且卖出过）<br>dp[i][0][2]=max(dp[i-1][1][1]+prices[i],dp[i-1][0][2])</li><li>持股，未卖出过股票：可能是今天买的，也可能是之前买的（昨天也持股）<br>dp[i][1][0]=max(dp[i-1][0][0]-prices[i],dp[i-1][1][0])</li><li>持股，卖出过1次股票：可能是今天买的，也可能是之前买的（昨天也持股）<br>dp[i][1][1]=max(dp[i-1][0][1]-prices[i],dp[i-1][1][1])</li><li>持股，卖出过2次股票：最多交易2次，这种情况不存在<br>dp[i][1][2]=float(‘-inf’)<br>根据这些状态即可轻松写出代码</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">maxProfit</span>(<span class="params">self, prices</span>):</span><br><span class="line">        <span class="keyword">if</span> prices==[]:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        length=<span class="built_in">len</span>(prices)</span><br><span class="line">        <span class="comment">#结束时的最高利润=[天数][是否持有股票][卖出次数]</span></span><br><span class="line">        dp=[ [[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>] ] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,length) ]</span><br><span class="line">        <span class="comment">#第一天休息</span></span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>]=<span class="number">0</span></span><br><span class="line">        <span class="comment">#第一天买入</span></span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">1</span>][<span class="number">0</span>]=-prices[<span class="number">0</span>]</span><br><span class="line">        <span class="comment"># 第一天不可能已经有卖出</span></span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>][<span class="number">1</span>] = <span class="built_in">float</span>(<span class="string">&#x27;-inf&#x27;</span>)</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>][<span class="number">2</span>] = <span class="built_in">float</span>(<span class="string">&#x27;-inf&#x27;</span>)</span><br><span class="line">        <span class="comment">#第一天不可能已经卖出</span></span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">1</span>][<span class="number">1</span>]=<span class="built_in">float</span>(<span class="string">&#x27;-inf&#x27;</span>)</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">1</span>][<span class="number">2</span>]=<span class="built_in">float</span>(<span class="string">&#x27;-inf&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,length):</span><br><span class="line">            <span class="comment">#未持股，未卖出过，说明从未进行过买卖</span></span><br><span class="line">            dp[i][<span class="number">0</span>][<span class="number">0</span>]=<span class="number">0</span></span><br><span class="line">            <span class="comment">#未持股，卖出过1次，可能是今天卖的，可能是之前卖的</span></span><br><span class="line">            dp[i][<span class="number">0</span>][<span class="number">1</span>]=<span class="built_in">max</span>(dp[i-<span class="number">1</span>][<span class="number">1</span>][<span class="number">0</span>]+prices[i],dp[i-<span class="number">1</span>][<span class="number">0</span>][<span class="number">1</span>])</span><br><span class="line">            <span class="comment">#未持股，卖出过2次，可能是今天卖的，可能是之前卖的</span></span><br><span class="line">            dp[i][<span class="number">0</span>][<span class="number">2</span>]=<span class="built_in">max</span>(dp[i-<span class="number">1</span>][<span class="number">1</span>][<span class="number">1</span>]+prices[i],dp[i-<span class="number">1</span>][<span class="number">0</span>][<span class="number">2</span>])</span><br><span class="line">            <span class="comment">#持股，未卖出过，可能是今天买的，可能是之前买的</span></span><br><span class="line">            dp[i][<span class="number">1</span>][<span class="number">0</span>]=<span class="built_in">max</span>(dp[i-<span class="number">1</span>][<span class="number">0</span>][<span class="number">0</span>]-prices[i],dp[i-<span class="number">1</span>][<span class="number">1</span>][<span class="number">0</span>])</span><br><span class="line">            <span class="comment">#持股，卖出过1次，可能是今天买的，可能是之前买的</span></span><br><span class="line">            dp[i][<span class="number">1</span>][<span class="number">1</span>]=<span class="built_in">max</span>(dp[i-<span class="number">1</span>][<span class="number">0</span>][<span class="number">1</span>]-prices[i],dp[i-<span class="number">1</span>][<span class="number">1</span>][<span class="number">1</span>])</span><br><span class="line">            <span class="comment">#持股，卖出过2次，不可能</span></span><br><span class="line">            dp[i][<span class="number">1</span>][<span class="number">2</span>]=<span class="built_in">float</span>(<span class="string">&#x27;-inf&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(dp[length-<span class="number">1</span>][<span class="number">0</span>][<span class="number">1</span>],dp[length-<span class="number">1</span>][<span class="number">0</span>][<span class="number">2</span>],<span class="number">0</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 动态规划 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>testxmind</title>
      <link href="/JeckFS/2020/04/03/testxmind/"/>
      <url>/JeckFS/2020/04/03/testxmind/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">A[Hard edge] --&gt; B[Round edge]</span><br><span class="line">  B --&gt; C&#123;Dicision&#125;</span><br><span class="line">  C --&gt; |One| D[Result one]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">graph TD;</span><br><span class="line">    A--&gt;B;</span><br><span class="line">    A--&gt;C;</span><br><span class="line">    B--&gt;D;</span><br><span class="line">    C--&gt;D;</span><br></pre></td></tr></table></figure><blockquote class="pullquote mindmap mindmap-md"><ul><li><a href="https://hunterx.xyz/hexo-simple-mindmap-plugin-intro.html">Hexo 的思维导图插件</a><ul><li>前言</li><li>使用方法<ul><li>一</li><li>二</li><li>三</li></ul></li><li>太长不看</li><li>参考资料</li></ul></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 测试 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>leetcode121.买卖股票的最佳时机</title>
      <link href="/JeckFS/2020/04/02/leetcode121-%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BA/"/>
      <url>/JeckFS/2020/04/02/leetcode121-%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p><a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock/">题目描述</a></p><h1 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h1><p>遍历一遍数组既可解决问题. 使用res记录prices(0..i)的最大利润. 遍历到i位置时, 要比较下0..i-1中的最小值与prices[i]的差, 若差比res小, 则更新res. 然后更新下0..i的最小值.</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="comment">// 2ms 62.32%(中文) 1ms 99.09%(英文)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxProfit</span><span class="params">(<span class="type">int</span>[] prices)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (prices.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> prices[<span class="number">0</span>];<span class="comment">//记录0..i的最小值</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; prices.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (prices[i] &lt; min) &#123;</span><br><span class="line">                min = prices[i];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                res = Math.max(res, prices[i] - min);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 动态规划 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode115.不同的子序列</title>
      <link href="/JeckFS/2020/04/02/leetcode115-%E4%B8%8D%E5%90%8C%E7%9A%84%E5%AD%90%E5%BA%8F%E5%88%97/"/>
      <url>/JeckFS/2020/04/02/leetcode115-%E4%B8%8D%E5%90%8C%E7%9A%84%E5%AD%90%E5%BA%8F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给定一个字符串 S 和一个字符串 T，计算在 S 的子序列中 T 出现的个数。</p><p>一个字符串的一个子序列是指，通过删除一些（也可以不删除）字符且不干扰剩余字符相对位置所组成的新字符串。（例如，”ACE” 是 “ABCDE” 的一个子序列，而 “AEC” 不是）</p><img src="/JeckFS/2020/04/02/leetcode115-%E4%B8%8D%E5%90%8C%E7%9A%84%E5%AD%90%E5%BA%8F%E5%88%97/115-1.png" class="" title="This is an image."><img src="/JeckFS/2020/04/02/leetcode115-%E4%B8%8D%E5%90%8C%E7%9A%84%E5%AD%90%E5%BA%8F%E5%88%97/115-2.png" class="" title="This is an image."><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/distinct-subsequences">https://leetcode-cn.com/problems/distinct-subsequences</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h1 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h1><p>解法: 动态规划, 时间复杂度$O(n^2)$<br><code>d[i][j]</code>表示<code>S[0..i]</code>中<code>T[0..j]</code>序列的出现次数.</p><ul><li>当<code>S[i]==T[j]</code>时 <code>d[i][j] = d[i-1][j-1] + d[i-1][j]</code></li><li>当<code>S[i]!=T[j]</code>时 <code>d[i][j] = d[i-1][j]</code></li></ul><p>举个例子:<br><br>假设输入用例为:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">状态0:</span><br><span class="line">S: babgba g</span><br><span class="line">T: ba g</span><br><span class="line"></span><br><span class="line">状态1: 统计babgba中ba序列的出现次数.</span><br><span class="line">S: babgba</span><br><span class="line">T: ba</span><br><span class="line"></span><br><span class="line">状态2: 统计babgba中bag序列的出现次数.</span><br><span class="line">S: babgba</span><br><span class="line">T: bag</span><br><span class="line"></span><br><span class="line">状态3: 统计babgb中bag序列的出现次数.</span><br><span class="line">S: babgb</span><br><span class="line">T: bag</span><br></pre></td></tr></table></figure><br>思考这三种状态之间的关系:<br><br>由状态1变为状态0, 只是在S与T后面同时加了一个相同字符g. 序列babgbag中出现bag序列多少次包括两部分: <br><br>第一部分: 末字符g与前面的ba匹配的次数, 即状态1的最终结果.<br>第二部分: 末字符g前面的序列中出现bag的次数, 即状态2的最终结果.<br>所以就有了当<code>S[i]==T[j]</code>时 <code>d[i][j] = d[i-1][j-1] + d[i-1][j]</code>.<br><br></p><p>我们可以继续分析状态2. 由于babgba的末字符a不是bag的末字符, 也就是说末字符a有它没它不影响最终结果. 即它等价于状态3.</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="comment">// 9ms 52.56%(中文) 4ms 97.97%(英文)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">numDistinct</span><span class="params">(String s, String t)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (t.length() == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (s.length() == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">char</span>[] S = s.toCharArray();</span><br><span class="line">        <span class="type">char</span>[] T = t.toCharArray();</span><br><span class="line">        <span class="type">int</span>[][] d = <span class="keyword">new</span> <span class="title class_">int</span>[S.length][T.length];</span><br><span class="line">        <span class="keyword">if</span> (S[<span class="number">0</span>] == T[<span class="number">0</span>]) d[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; S.length; i++) &#123;</span><br><span class="line">            d[i][<span class="number">0</span>] = S[i] == T[<span class="number">0</span>] ? d[i-<span class="number">1</span>][<span class="number">0</span>]+<span class="number">1</span> : d[i-<span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt; T.length; j++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; S.length; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (S[i] == T[j]) &#123;</span><br><span class="line">                    d[i][j] = d[i-<span class="number">1</span>][j-<span class="number">1</span>] + d[i-<span class="number">1</span>][j];</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    d[i][j] = d[i-<span class="number">1</span>][j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> d[S.length-<span class="number">1</span>][T.length-<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 动态规划 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode97.交错字符串</title>
      <link href="/JeckFS/2020/04/02/leetcode97-%E4%BA%A4%E9%94%99%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
      <url>/JeckFS/2020/04/02/leetcode97-%E4%BA%A4%E9%94%99%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给定三个字符串 s1, s2, s3, 验证 s3 是否是由 s1 和 s2 交错组成的。</p><p>示例 1:</p><p>输入: s1 = “aabcc”, s2 = “dbbca”, s3 = “aadbbcbcac”<br>输出: true<br>示例 2:</p><p>输入: s1 = “aabcc”, s2 = “dbbca”, s3 = “aadbbbaccc”<br>输出: false</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/interleaving-string">https://leetcode-cn.com/problems/interleaving-string</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h1 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h1><p>交错字符串换言之就是，s1与s2在s3中的字符顺序还和原来的一样。比如</p><img src="/JeckFS/2020/04/02/leetcode97-%E4%BA%A4%E9%94%99%E5%AD%97%E7%AC%A6%E4%B8%B2/97-1.png" class="" title="This is an example image"><p>这样的话，我们可以将s1，s2从左至右挨个按照s3的顺序取出，若能够排列出一个完整的s3那么s3就是由s1与s2交错产生的。这就是关键思路。取出字母可以分别给s1,s2分配一个游标指针i，j。子串[0..i-1]，[0..j-1]表示已经取出的串str。由于是按照s3的顺序取出的，这时str[0..i-1+j-1]与s3[0..i-1+j-1]是完全相同的。为方便实现，我们给s3也分配一个游标k。<br>对于状态(i，j)我们有三种选择</p><ol><li>当s1[i] == s3[k]，只能选择s1[i]这个字符。让i++，k++。</li><li>当s2[j] == s3[k]，只能选择s2[j]这个字符。让j++，k++。</li><li>当s1[i] == s3[k]且s2[j] == s3[k]，我们既可以选择取出s1[i]，也可以选择取出s2[j]。这两种方式都要试一遍才能找出最终结果。<br>一直递归到i==s1.length, j == s2.length或者说k == s3.length，递归结束，这时已经可以判定s1与s2可以交错产生s3，层层返回即可。<br>对于这种情况，我优先选择使用记忆化搜索，一是方便编程，而是思路清晰，容易阅读。一般情况下，记忆化不必递推慢。如何使用记忆化，首先要明白重叠子结构在哪儿，所谓记忆化就是将这种重叠子结构的结果保存下来，下次如果用到，不必再重复计算，这就是记忆化的由来。关键问题是如何找到重叠子结构，比较有效的方法是，既然已经有上述分析的思路了，那不妨一步步的画一画，将递归树画出来，重叠子结构一眼明了。</li></ol><img src="/JeckFS/2020/04/02/leetcode97-%E4%BA%A4%E9%94%99%E5%AD%97%E7%AC%A6%E4%B8%B2/97-2.png" class="" title="This is an image."><p>上图中红色框框中就是重叠子结构。我们将这些结果保存下来，在下次用到的时候就不用重复计算了。本题一个特殊的地方是，程序实际运行中最右边的分支是不会遍历到的。因为在中间的分支已经可以确定是否是交错产生的了。</p><img src="/JeckFS/2020/04/02/leetcode97-%E4%BA%A4%E9%94%99%E5%AD%97%E7%AC%A6%E4%B8%B2/97-3.png" class="" title="This is an image."><p>在上图中重叠子结构有两个，在计算第二个的时候，就可以重用第一次计算的结果。<br>程序说明：<br>dp[i][j]=true表示s1[0..i-1]与s2[0..j-1]不能交错组成s3[k]，这里k=i-1+j-1。</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span>[][] dp;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">char</span>[] s1,s2,s3;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">helper</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (i == s1.length &amp;&amp; j == s2.length) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (i &gt; s1.length || j &gt; s2.length || dp[i][j]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; s1.length &amp;&amp; s1[i] == s3[k] &amp;&amp; helper(i + <span class="number">1</span>, j, k + <span class="number">1</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (j &lt; s2.length &amp;&amp; s2[j] == s3[k] &amp;&amp; helper(i, j + <span class="number">1</span>, k + <span class="number">1</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        dp[i][j] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// s1[i] != s3[k] &amp;&amp; s2[j] != s3[k]</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 1ms 100%(中文) 0ms 100%(英文)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isInterleave</span><span class="params">(String s1, String s2, String s3)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (s1.length()+s2.length() != s3.length()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        dp = <span class="keyword">new</span> <span class="title class_">boolean</span>[s1.length()+<span class="number">1</span>][s2.length()+<span class="number">1</span>];</span><br><span class="line">        <span class="built_in">this</span>.s1 = s1.toCharArray();</span><br><span class="line">        <span class="built_in">this</span>.s2 = s2.toCharArray();</span><br><span class="line">        <span class="built_in">this</span>.s3 = s3.toCharArray();</span><br><span class="line">        <span class="keyword">return</span> helper(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 动态规划 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SS和SSR的过滤规则</title>
      <link href="/JeckFS/2020/04/01/SS%20%7C%20SSR%E7%9A%84%E8%BF%87%E6%BB%A4%E8%A7%84%E5%88%99/"/>
      <url>/JeckFS/2020/04/01/SS%20%7C%20SSR%E7%9A%84%E8%BF%87%E6%BB%A4%E8%A7%84%E5%88%99/</url>
      
        <content type="html"><![CDATA[<pre><code>这篇文章讲述如何设计和维护自己的Adblock Plus过滤规则。这些过滤规则限制了你可以哪些站点可以访问，哪些有意要屏蔽的。可屏蔽的内容有广告，图片，requests一级scripts。</code></pre><h1 id="Adblock-Plus-filters"><a href="#Adblock-Plus-filters" class="headerlink" title="Adblock Plus filters"></a>Adblock Plus filters</h1><p>过滤名单(浏览器去阻止访问的一系列规则)包括两部分：</p><ul><li>Adblock Plus预装的<ul><li>Acceptable Ads</li><li>EasyList (+ bundled language filter list - depending on your browser’s language setting)</li><li>ABP Anti-circumvention filter list</li></ul></li><li>自定义的</li></ul><h1 id="filters的种类"><a href="#filters的种类" class="headerlink" title="filters的种类"></a>filters的种类</h1><ul><li><p>Blocking filters</p><p>用于拦截并阻塞请求</p></li><li><p>Content filters / element hiding filters</p><p>用于隐藏网页中特殊的元素及snippets。</p></li><li><p>Exception filters</p><p>将某些已定义的过滤规则排除出拦截范围之外。</p></li></ul><h1 id="基础过滤规则"><a href="#基础过滤规则" class="headerlink" title="基础过滤规则"></a>基础过滤规则</h1><p>预热：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># *号部分可是任意内容</span><br><span class="line">http://example.com/ads/banner*.gif</span><br><span class="line">#  所有该路径下的请求都被拦截</span><br><span class="line">http://example.com/ads/ </span><br></pre></td></tr></table></figure><h2 id="1-定义Exception-rules"><a href="#1-定义Exception-rules" class="headerlink" title="1. 定义Exception rules"></a>1. 定义Exception rules</h2><p>​    用@@标识一个Exception rule。如果你所写的过滤规则中包含了你想unblock的内容，就使用Exception rule将它排除出过滤范围之内。Exception rule也可以使用通配符和正则表达式。</p><p>例如：<br>    你不想拦截<code>http://example.com/advice.html</code>，则可以使用<code>@@advice</code>，将路径中含有advice的exclude掉。<br>    若使用<code>^document</code>可以exclude整个页面，如<code>@@||example.com^document</code>以example.com开头的所有请求都不拦截。</p><h2 id="2-匹配地址的开头和结尾’-’"><a href="#2-匹配地址的开头和结尾’-’" class="headerlink" title="2. 匹配地址的开头和结尾’|’"></a>2. 匹配地址的开头和结尾’|’</h2><p>​    地址前开头和结尾默认可以省略 <em> 号。如<code>ad</code>和```   </em>ad*   ```。</p><p>​    ‘|’放在前面匹配开头，放在后面匹配结尾。<br>​    例如：<br>​    <code>swf|</code>可以匹配到<code>http://example.com/annoyingflash.swf</code>，但是不匹配<code>http://example.com/swf/index.html</code>。<br>​    <code>|http://baddomain.example/</code>可以匹配<code>http://baddomain.example/banner.gif</code>，但不匹配<code>http://gooddomain.example/analyze?http://baddomain.example</code>。</p><p>​    ‘||’标记用于匹配域名的开头。<br>​    <code>||example.com/banner.gif</code>可以拦截</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">||example.com/banner.gif 规则</span><br><span class="line"># 可拦截</span><br><span class="line">http://example.com/banner.gif</span><br><span class="line">https://example.com/banner.gif</span><br><span class="line">http://www.example.com/banner.gif</span><br><span class="line"># 不会拦截</span><br><span class="line">http://gooddomain.example/analyze?http://example.com/banner.gif</span><br></pre></td></tr></table></figure><h2 id="3-分割符"><a href="#3-分割符" class="headerlink" title="3. 分割符^"></a>3. 分割符^</h2><p>​    ^可以替代任何一个非字母，非数字，非’_’，非’-‘，非’%’，非’.’的任意一个字符。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># http://example.com^ 规则</span><br><span class="line"># 可以拦截</span><br><span class="line">http://example.com/</span><br><span class="line">http://example.com:8080/</span><br><span class="line"># 不会拦截</span><br><span class="line">http://example.com.ar/</span><br></pre></td></tr></table></figure><p>http<u>://</u>example.com<u>:</u>8080<u>/</u>foo.bar<u>?</u>a<u>=</u>12&amp;b<u>=</u>%D1%82%D0%B5%D1%81%D1%82<br>可以用一下规则来匹配：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">^example.com^</span><br><span class="line">^%D1%82%D0%B5%D1%81%D1%82^</span><br><span class="line">^foo.bar^</span><br></pre></td></tr></table></figure><h2 id="4-注释"><a href="#4-注释" class="headerlink" title="4. 注释!"></a>4. 注释!</h2><h1 id="高级用法"><a href="#高级用法" class="headerlink" title="高级用法"></a>高级用法</h1><h2 id="1-设置过滤参数"><a href="#1-设置过滤参数" class="headerlink" title="1. 设置过滤参数"></a>1. 设置过滤参数</h2><p>​    它决定了过滤的元素类型。</p><p>​    ‘$’开头各个参数以’,’分隔。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># /ads/*是过滤规则，script和match-case是参数</span><br><span class="line">Example: /ads/*$script,match-case</span><br></pre></td></tr></table></figure><h4 id="1-1可选参数："><a href="#1-1可选参数：" class="headerlink" title="1.1可选参数："></a>1.1可选参数：</h4><ul><li><p>script：通过HTML script标签加载的外部scripts。</p></li><li><p>image：regular images，典型的是通过HTML的img标签加载的图像。</p></li><li><p>stylesheet：外部的CSS文件</p></li><li><p>xmlhttprequest：使用XMLHttpRequest对象或fetch() API的生成的请求</p></li><li><p>subdocument：嵌入的页面，如iframe标签</p></li><li><p>ping：由navigator.sendBeacon()生成的请求。</p></li><li><p>websocket：通过WebSocket对象初始化的请求</p></li><li><p>webrtc：</p></li><li><p>document：the page itself, but only for exception rules. 使用此参数可以将整个iframe或website添加到白名单</p></li><li><p>elemhide：for exception rules only. Turn of element hiding rules on the page rather than all filter rules.</p></li><li><p>generichide：for exception only. turns off generic element hiding rules on the page.</p></li><li><p>genericblock：for exception only. turns off generic blocking rules.</p></li><li><p>popup：在新页面打开的网页。只有使用$popup参数被指定时，filters才默认不阻止弹出窗口。</p></li><li><p>font：外部字体文件。</p></li><li><p>media：诸如音乐，视频的regular media files</p></li><li><p>match-case：大小写敏感。</p><p>*/BannerAd.gif$match-case会block <a href="http://example.com/BannerAd.gif但unblock">http://example.com/BannerAd.gif但unblock</a> <a href="http://example.com/bannerad.gif">http://example.com/bannerad.gif</a></p></li><li><p>other：除了上述之外的参数类型。</p></li></ul><h4 id="1-2-参数取反："><a href="#1-2-参数取反：" class="headerlink" title="1.2 参数取反："></a>1.2 参数取反：</h4><p>​    指定过滤规则不应用具体的参数。如~script, ~image, ~stylesheet, ~object, ~xmlhttprequest, ~subdocument, ~ping, ~websocket, ~webrtc, ~document, ~elemhide, ~other.</p><h4 id="1-3-domain-restrictions"><a href="#1-3-domain-restrictions" class="headerlink" title="1.3 domain restrictions"></a>1.3 domain restrictions</h4><p>domain=example.com | example.net. 过滤规则只应用于来自example.com或者example.net。</p><p>domain=~example.com. 过滤规则应用于除了example.com之外的域名。<br>domain=example.com | ~foo.example.com. 过滤规则应用于example.com但foo.example.com除外。</p><h4 id="1-4-Sitekey-restrictions"><a href="#1-4-Sitekey-restrictions" class="headerlink" title="1.4 Sitekey restrictions"></a>1.4 Sitekey restrictions</h4><p>sitekey=abcdsitekeydbca | bcdesitekeyedcb. 过滤规则只应用于能够提供abcdsitekeydbca或bcdesitekeyedcb秘钥的网页。</p><h4 id="1-5-Content-Security-Policies"><a href="#1-5-Content-Security-Policies" class="headerlink" title="1.5 Content Security Policies"></a>1.5 Content Security Policies</h4><p>csp=script-src: ‘none’. 拦截所有的script。</p><h4 id="1-6-Redirecting-requests-to-internal-resources"><a href="#1-6-Redirecting-requests-to-internal-resources" class="headerlink" title="1.6 Redirecting requests to internal resources"></a>1.6 Redirecting requests to internal resources</h4><p>参数：rewrite=<br>    用于重写internal resource或者redirecting requests的URLs，它可以让internal resource或者redirecting requests失效而不报错。<br>    abp-resource指定internal resource.<br>    如$rewrite=abp-resource:blank-js会发送一个empty JavaScript。</p><p>​    可用的internal resources有：</p><ul><li><code>blank-text</code> - empty text</li><li><code>blank-css</code> - empty stylesheet</li><li><code>blank-js</code> - empty JavaScript</li><li><code>blank-html</code> - empty HTML document</li><li><code>blank-mp3</code> - a 0.1s silent MP3 audio file</li><li><code>1x1-transparent-gif</code> - 1x1 pixel transparent GIF image</li><li><code>2x2-transparent-png</code> - 2x2 pixels transparent PNG image</li><li><code>3x2-transparent-png</code> - 3x2 pixels transparent PNG image</li><li><code>32x32-transparent-png</code> - 32x32 pixels transparent PNG image</li></ul><p>【注意】使用<code>rewrite=</code>参数其过滤规则必须是<code>*</code>或者以<code>||</code>作为开头。</p><h2 id="2-使用正则表达式"><a href="#2-使用正则表达式" class="headerlink" title="2. 使用正则表达式"></a>2. 使用正则表达式</h2><p>​    如<code>/banner\d+</code>匹配<code>banner123</code>和<code>banner321</code>但不匹配<code>banners</code>。使用正则表达式会影响性能。</p><h2 id="3-特殊的注释"><a href="#3-特殊的注释" class="headerlink" title="3. 特殊的注释"></a>3. 特殊的注释</h2><p>​    这些注释只会作用于下载的过滤规则列表(filter lists)，而不会影响自定义的规则。他们会为过滤规则列表设置一些参数。</p><ul><li><code>! Homepage: http://example.com/</code> This comment determines which webpage should be linked as filter list homepage.</li><li><code>! Title: FooList</code> 为filter list设置title，一旦设置不可更名。</li><li><code>! Expries: 5days</code> 设置filter list的更新间隔时间。范围为1hour — 14days. 这个时间不是说到了就会立即更新，它受服务器的负载影响。</li><li><code>! Redirect: http://example.com/list.txt</code> filter list已被移动到新的下载地址上。若新下载地址与当前地址相同，则忽略此注释。</li><li><code>! Version: 1234</code> filter list的版本。</li></ul><h1 id="Content-Filters"><a href="#Content-Filters" class="headerlink" title="Content Filters"></a>Content Filters</h1><p>Unfortunately, there are some advertisements that can’t be blocked at download time. This is because they’re embedded as text in the webpage itself. For that case, there are filters that run directly on the content of the page. They are split between two main types: <code>element hiding</code> and <code>snippets</code>.</p><p><code>element hiding filters</code>指定页面中那个元素被隐藏。<br><code>snippet filters</code>以代码片段的形式运行在页面上，阻止复杂的广告内容。</p><h2 id="1-Basic-rules"><a href="#1-Basic-rules" class="headerlink" title="1.Basic rules"></a>1.Basic rules</h2><p>comtent filters的格式：<code>&lt;domains&gt;&lt;separator&gt;&lt;body&gt;</code>。</p><ul><li>domains：一个或多个用都好隔开的域名。</li><li>separator：domains结束和Content filter开始的标志，它决定filter的类型。</li><li>body：filter的主体，它依赖filter的类型。</li></ul><div class="table-container"><table><thead><tr><th>separator</th><th>type</th><th>body Content</th></tr></thead><tbody><tr><td>##</td><td>Element hiding</td><td>CSS selector(domains may be empty)</td></tr><tr><td>#?#</td><td>Element hiding emulation</td><td>Extended CSS selector</td></tr><tr><td>#@#</td><td>Element hiding exception</td><td>Selector</td></tr><tr><td>#$#</td><td>Snippet filter</td><td>Snippet</td></tr></tbody></table></div><h2 id="2-Element-hiding-basic-rules"><a href="#2-Element-hiding-basic-rules" class="headerlink" title="2.Element hiding basic rules"></a>2.Element hiding basic rules</h2><p>​    当把网页的源码下载后，可以选择性地隐藏某一部分，如广告展示的部分。例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;textad&quot;</span>&gt;</span> </span><br><span class="line">    Cheapest tofu, only here and now! </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;sponsorad&quot;</span>&gt;</span> </span><br><span class="line">    Really cheap tofu, click here! </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">textad</span>&gt;</span> Only here you get the best tofu! <span class="tag">&lt;/<span class="name">textad</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​    规则<code>##.textad</code>隐藏class属性为textad的element。<br>​    规则<code>###sponsorad</code>隐藏id为sponsorad的element。<br>​    规则<code>##textad</code>隐藏<textad>标签中的内容。</p><h2 id="3-Limiting-rules-to-certain-domains"><a href="#3-Limiting-rules-to-certain-domains" class="headerlink" title="3.Limiting rules to certain domains"></a>3.Limiting rules to certain domains</h2><p>​    只对某些域名下的网页进行hiding element。例如：<br>​    规则：<code>example.com##.sponsor</code>可以作用在<a href="http://something.example.com/上，但不会作用在http://example.org/上。">http://something.example.com/上，但不会作用在http://example.org/上。</a><br>​    可指定多个域名，之间用逗号分隔，如：<br>​    <code>domain1.example, domain2.example, domain3.example##.sponsor</code><br>​    ‘~’+domain表示不作用于该domain下的element，例如<br>​    <code>~example.com##.sponsor</code>作用与除了exapmle.com之外的所有域名。<code>example.com,~foo.example.com##.sponsor</code>作用于example.com，但其子域foo.example.com除外。</p><p>【注意】这种限制只能写full domain names，不能只写一部分，也不能use domain as a replacement for <code>domain.example, domain.test</code>。</p><h2 id="4-Attribute-selectors"><a href="#4-Attribute-selectors" class="headerlink" title="4.Attribute selectors"></a>4.Attribute selectors</h2><p>​    根据属性值选择要隐藏的属性。例如：<br>​    <code>##table[width=&quot;80%&quot;]</code>会隐藏width属性值为80%的table标签。<br>​    <code>##div[title*=&quot;adv&quot;]</code>会隐藏所有title值里面包含adv的div标签。<br>​    <code>##div[title^=&quot;adv&quot;][title$=&quot;ert&quot;]</code>会隐藏title值以adv开始并且以ert结束的div标签。<br>​    <code>table[width=&quot;80%&quot;][bgcolor=&quot;white&quot;]</code>会隐藏width=80%，bgcolor=white的table标签。</p><h2 id="5-Extended-CSS-selectors"><a href="#5-Extended-CSS-selectors" class="headerlink" title="5.Extended CSS selectors"></a>5.Extended CSS selectors</h2><p>​    使用extended CSS selectors会有性能影响。Extended CSS selector除了CSS中的选择器外，还有Adblock Plus自定义的CSS 选择器：</p><ul><li><p>:-abp-has(selector)</p><p><code>:-abp-has(&gt;div&gt;a.advertiser)</code>：选择孩子标签是div，并且该div含有a标签，并且a标签有一个class属性为advertiser的标签。selector也可以再使用<code>:-abp-has()</code>。selector也可以是CSS selector。</p><p><code>example.com#?#:-abp-has(.sponsored)</code>会隐藏所有的页面，因为页面的<code>&lt;body&gt;</code>中的某个标签含有这个class属性，使用’&gt;’或者’+’可以避免这种情况。</p><p><code>eyeo.com#?#:-abp-has(code)</code>会隐藏<a href="https://help.eyeo.com/en/adblockplus/how-to-write-filters页面中所有的元素。这是因为`">https://help.eyeo.com/en/adblockplus/how-to-write-filters页面中所有的元素。这是因为`</a><body><code>标签中包含</code><code><code>标签，而</code>eyeo.com#?#:-abp-has(&gt; code)<code>只会隐藏</code><code>`的父元素，不加’&gt;’会隐藏整个页面。</p></li><li><p>:-abp-properties(properties)</p><p>根据stylesheet properties选择要隐藏的element。<br><code>:-abp-properties(width: 300px; height: 250px; )</code>会选择stylesheet设置width为300px，height为250px的element。<br><code>:-abp-properties(width: *px; height: 250px; )</code>会选择stylesheet设置height为250px，width以px为单位的任意值的element。<strong>‘*’代表任意值</strong>。<br><code>:-abp-properties(/width: 30[2-8]px; height: 250px; / )</code>会选择width值在302-308px之间，且 height为250px的element。’//‘使用正则表达式。</p><p>【注意】background-color的值使用rgb()获得。<br><code>:-abp-properties(background-color: rgb(61, 156, 79))</code>代替<code>:-abp-properties(background-color: #3D9C4F)</code>。</p><p><code>:-abp-properties(content: &#39;Advertisement&#39;)</code>会选择<code>::before或::after</code>的元素中内容为’Advertisement’的元素。<a href="https://www.runoob.com/cssref/sel-before.html">::before，::after选择器</a></p></li><li><p>:-abp-contains(text)<br>基于文本内容选择element。例如：<br><code>div. sidebar &gt; span :-abp-contents(Advertisement)</code>会选择innerHTML为Advertisement，且class为.sidebar的div标签。它等同于<code>div.sidebar &gt; div :-abp-has(span:-abp-contains(Advertisement))</code>。</p><p>若设置<code>eyeo.com#?#:-abp-contains(filters)</code>，则<a href="https://help.eyeo.com/en/adblockplus/how-to-write-filters页面中不会隐藏任何element。若改为`eyeo.com#?#div:-abp-contains(filters)`，则包含filters字符串的div标签（还是包裹该div的标签我没弄清楚）将被隐藏（原文：`div.outer`">https://help.eyeo.com/en/adblockplus/how-to-write-filters页面中不会隐藏任何element。若改为`eyeo.com#?#div:-abp-contains(filters)`，则包含filters字符串的div标签（还是包裹该div的标签我没弄清楚）将被隐藏（原文：`div.outer`</a> (which contains the middle section of the page) is blocked because somewhere within the <code>&lt;body&gt;</code> is the word “filters”.）。<code>eyeo.com#?#.article-heading:-abp-contains(filters)</code>会选择class属性值为.article-heading的标签。</p></li></ul><h2 id="6-Exception-rules"><a href="#6-Exception-rules" class="headerlink" title="6.Exception rules"></a>6.Exception rules</h2><p>​    作用在example.com上的<code>##.texted</code>可以用<code>example.com#@#.texted</code>取消。<br>​    使用规则<code>##aside.info</code>作用在<a href="https://help.eyeo.com/en/adblockplus/how-to-write-filters上，`eyeo.com#@#aside`不会Exception">https://help.eyeo.com/en/adblockplus/how-to-write-filters上，`eyeo.com#@#aside`不会Exception</a> anything。如果使用<code>##aside</code>规则，<code>eyeo.com#@#aside.info</code>同样不会Exception anything。规律规则必须严格相同，才会有效，如<code>##aside.info</code> canceled with <code>eyeo.com#@#aside.info</code>。</p><h2 id="7-Snippet-filters"><a href="#7-Snippet-filters" class="headerlink" title="7.Snippet filters"></a>7.Snippet filters</h2><p>​    snippet filters允许使用JavaScript代码来编辑。</p><p>​    出于安全性的考虑，snippet filters仅被用在用户自定义的filters list中或者ABP Anti-Circumvention Filter List中。</p><h2 id="8-Generic-Specific-filters"><a href="#8-Generic-Specific-filters" class="headerlink" title="8.Generic / Specific filters"></a>8.Generic / Specific filters</h2><h1 id="Implementing-a-sitekey-on-the-server"><a href="#Implementing-a-sitekey-on-the-server" class="headerlink" title="Implementing a sitekey on the server"></a>Implementing a sitekey on the server</h1><p><a href="https://help.eyeo.com/en/adblockplus/how-to-write-filters">参考文档1</a><br><a href="https://fuyiyi.imdo.co/articles/2018/09/30/1538314978887.html">参考文档2</a><br><a href="https://adblockplus.org/en/filter-cheatsheet">参考文档3</a></p>]]></content>
      
      
      <categories>
          
          <category> others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> others </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
